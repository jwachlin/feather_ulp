
Feather_ULP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004db0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004db0  00004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  00004db8  00020000  2**1
                  CONTENTS, ALLOC, LOAD, CODE
  3 .lpram        00000000  30000000  30000000  00020010  2**0
                  CONTENTS
  4 .bss          000000a4  20000010  00004dc8  00020010  2**2
                  ALLOC
  5 .stack        00002004  200000b4  00004e6c  00020010  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026e90  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d5d  00000000  00000000  00046f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d70  00000000  00000000  00049c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005d8  00000000  00000000  0004b9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0004bfc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006aa8  00000000  00000000  0004c49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c3ff  00000000  00000000  00052f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099023  00000000  00000000  0005f345  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001530  00000000  00000000  000f8368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 20 00 20 6d 2a 00 00 01 2b 00 00 01 2b 00 00     . . m*...+...+..
	...
      2c:	01 2b 00 00 00 00 00 00 00 00 00 00 01 2b 00 00     .+...........+..
      3c:	01 2b 00 00 01 2b 00 00 7d 1b 00 00 01 2b 00 00     .+...+..}....+..
      4c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 01 2b 00 00     .+...+...+...+..
      5c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 01 2b 00 00     .+...+...+...+..
      6c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 01 2b 00 00     .+...+...+...+..
      7c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 01 2b 00 00     .+...+...+...+..
      8c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 e5 02 00 00     .+...+...+......
      9c:	01 2b 00 00 01 2b 00 00 01 2b 00 00 01 2b 00 00     .+...+...+...+..
      ac:	01 2b 00 00 00 00 00 00                             .+......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00004db8 	.word	0x00004db8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00004db8 	.word	0x00004db8
     10c:	00004db8 	.word	0x00004db8
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	8c1b      	ldrh	r3, [r3, #32]
     126:	b29b      	uxth	r3, r3
     128:	2b00      	cmp	r3, #0
     12a:	d001      	beq.n	130 <adc_is_syncing+0x1c>
		return true;
     12c:	2301      	movs	r3, #1
     12e:	e000      	b.n	132 <adc_is_syncing+0x1e>
	}

	return false;
     130:	2300      	movs	r3, #0
}
     132:	0018      	movs	r0, r3
     134:	46bd      	mov	sp, r7
     136:	b004      	add	sp, #16
     138:	bd80      	pop	{r7, pc}
	...

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7e1b      	ldrb	r3, [r3, #24]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	711a      	strb	r2, [r3, #4]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b47      	ldr	r3, [pc, #284]	; (2d8 <_adc_interrupt_handler+0x130>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	799b      	ldrb	r3, [r3, #6]
     1c6:	b2da      	uxtb	r2, r3
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	795b      	ldrb	r3, [r3, #5]
     1ce:	b2db      	uxtb	r3, r3
     1d0:	4013      	ands	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1d6:	68bb      	ldr	r3, [r7, #8]
     1d8:	2201      	movs	r2, #1
     1da:	4013      	ands	r3, r2
     1dc:	d045      	beq.n	26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2201      	movs	r2, #1
     1e4:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1e6:	68fb      	ldr	r3, [r7, #12]
     1e8:	695b      	ldr	r3, [r3, #20]
     1ea:	1c99      	adds	r1, r3, #2
     1ec:	68fa      	ldr	r2, [r7, #12]
     1ee:	6151      	str	r1, [r2, #20]
     1f0:	68fa      	ldr	r2, [r7, #12]
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     1f6:	b292      	uxth	r2, r2
     1f8:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     1fa:	68fb      	ldr	r3, [r7, #12]
     1fc:	8b1b      	ldrh	r3, [r3, #24]
     1fe:	b29b      	uxth	r3, r3
     200:	3b01      	subs	r3, #1
     202:	b29b      	uxth	r3, r3
     204:	68fa      	ldr	r2, [r7, #12]
     206:	1c19      	adds	r1, r3, #0
     208:	8311      	strh	r1, [r2, #24]
     20a:	2b00      	cmp	r3, #0
     20c:	d00f      	beq.n	22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     20e:	68fb      	ldr	r3, [r7, #12]
     210:	7f5b      	ldrb	r3, [r3, #29]
     212:	2b00      	cmp	r3, #0
     214:	d029      	beq.n	26a <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     216:	68fb      	ldr	r3, [r7, #12]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	79db      	ldrb	r3, [r3, #7]
     21c:	b2db      	uxtb	r3, r3
     21e:	b25b      	sxtb	r3, r3
     220:	2b00      	cmp	r3, #0
     222:	db22      	blt.n	26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     224:	68fb      	ldr	r3, [r7, #12]
     226:	0018      	movs	r0, r3
     228:	4b2c      	ldr	r3, [pc, #176]	; (2dc <_adc_interrupt_handler+0x134>)
     22a:	4798      	blx	r3
     22c:	e01d      	b.n	26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     22e:	68fb      	ldr	r3, [r7, #12]
     230:	2101      	movs	r1, #1
     232:	0018      	movs	r0, r3
     234:	4b2a      	ldr	r3, [pc, #168]	; (2e0 <_adc_interrupt_handler+0x138>)
     236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	7f1b      	ldrb	r3, [r3, #28]
     23c:	b2db      	uxtb	r3, r3
     23e:	2b05      	cmp	r3, #5
     240:	d113      	bne.n	26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     242:	68fb      	ldr	r3, [r7, #12]
     244:	2200      	movs	r2, #0
     246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	7edb      	ldrb	r3, [r3, #27]
     24c:	001a      	movs	r2, r3
     24e:	2301      	movs	r3, #1
     250:	4013      	ands	r3, r2
     252:	d00a      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     254:	68fb      	ldr	r3, [r7, #12]
     256:	7e9b      	ldrb	r3, [r3, #26]
     258:	001a      	movs	r2, r3
     25a:	2301      	movs	r3, #1
     25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     25e:	d004      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     260:	68fb      	ldr	r3, [r7, #12]
     262:	689b      	ldr	r3, [r3, #8]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	0010      	movs	r0, r2
     268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	2204      	movs	r2, #4
     26e:	4013      	ands	r3, r2
     270:	d014      	beq.n	29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2204      	movs	r2, #4
     278:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7edb      	ldrb	r3, [r3, #27]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
     284:	d00a      	beq.n	29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     286:	68fb      	ldr	r3, [r7, #12]
     288:	7e9b      	ldrb	r3, [r3, #26]
     28a:	001a      	movs	r2, r3
     28c:	2302      	movs	r3, #2
     28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     290:	d004      	beq.n	29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     292:	68fb      	ldr	r3, [r7, #12]
     294:	68db      	ldr	r3, [r3, #12]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	0010      	movs	r0, r2
     29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	2202      	movs	r2, #2
     2a0:	4013      	ands	r3, r2
     2a2:	d014      	beq.n	2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7edb      	ldrb	r3, [r3, #27]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	d00a      	beq.n	2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	7e9b      	ldrb	r3, [r3, #26]
     2bc:	001a      	movs	r2, r3
     2be:	2304      	movs	r3, #4
     2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2c2:	d004      	beq.n	2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2c4:	68fb      	ldr	r3, [r7, #12]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	0010      	movs	r0, r2
     2cc:	4798      	blx	r3
		}
	}
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b004      	add	sp, #16
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200000ac 	.word	0x200000ac
     2dc:	0000013d 	.word	0x0000013d
     2e0:	00000185 	.word	0x00000185

000002e4 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     2e4:	b580      	push	{r7, lr}
     2e6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2e8:	2000      	movs	r0, #0
     2ea:	4b02      	ldr	r3, [pc, #8]	; (2f4 <ADC_Handler+0x10>)
     2ec:	4798      	blx	r3
}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	46bd      	mov	sp, r7
     2f2:	bd80      	pop	{r7, pc}
     2f4:	000001a9 	.word	0x000001a9

000002f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     300:	687b      	ldr	r3, [r7, #4]
     302:	2200      	movs	r2, #0
     304:	701a      	strb	r2, [r3, #0]
}
     306:	46c0      	nop			; (mov r8, r8)
     308:	46bd      	mov	sp, r7
     30a:	b002      	add	sp, #8
     30c:	bd80      	pop	{r7, pc}
	...

00000310 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     310:	b580      	push	{r7, lr}
     312:	b082      	sub	sp, #8
     314:	af00      	add	r7, sp, #0
     316:	0002      	movs	r2, r0
     318:	6039      	str	r1, [r7, #0]
     31a:	1dfb      	adds	r3, r7, #7
     31c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     31e:	1dfb      	adds	r3, r7, #7
     320:	781b      	ldrb	r3, [r3, #0]
     322:	2b04      	cmp	r3, #4
     324:	d827      	bhi.n	376 <system_apb_clock_set_mask+0x66>
     326:	009a      	lsls	r2, r3, #2
     328:	4b16      	ldr	r3, [pc, #88]	; (384 <system_apb_clock_set_mask+0x74>)
     32a:	18d3      	adds	r3, r2, r3
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     330:	4b15      	ldr	r3, [pc, #84]	; (388 <system_apb_clock_set_mask+0x78>)
     332:	4a15      	ldr	r2, [pc, #84]	; (388 <system_apb_clock_set_mask+0x78>)
     334:	6951      	ldr	r1, [r2, #20]
     336:	683a      	ldr	r2, [r7, #0]
     338:	430a      	orrs	r2, r1
     33a:	615a      	str	r2, [r3, #20]
			break;
     33c:	e01d      	b.n	37a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     33e:	4b12      	ldr	r3, [pc, #72]	; (388 <system_apb_clock_set_mask+0x78>)
     340:	4a11      	ldr	r2, [pc, #68]	; (388 <system_apb_clock_set_mask+0x78>)
     342:	6991      	ldr	r1, [r2, #24]
     344:	683a      	ldr	r2, [r7, #0]
     346:	430a      	orrs	r2, r1
     348:	619a      	str	r2, [r3, #24]
			break;
     34a:	e016      	b.n	37a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     34c:	4b0e      	ldr	r3, [pc, #56]	; (388 <system_apb_clock_set_mask+0x78>)
     34e:	4a0e      	ldr	r2, [pc, #56]	; (388 <system_apb_clock_set_mask+0x78>)
     350:	69d1      	ldr	r1, [r2, #28]
     352:	683a      	ldr	r2, [r7, #0]
     354:	430a      	orrs	r2, r1
     356:	61da      	str	r2, [r3, #28]
			break;
     358:	e00f      	b.n	37a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     35a:	4b0b      	ldr	r3, [pc, #44]	; (388 <system_apb_clock_set_mask+0x78>)
     35c:	4a0a      	ldr	r2, [pc, #40]	; (388 <system_apb_clock_set_mask+0x78>)
     35e:	6a11      	ldr	r1, [r2, #32]
     360:	683a      	ldr	r2, [r7, #0]
     362:	430a      	orrs	r2, r1
     364:	621a      	str	r2, [r3, #32]
			break;
     366:	e008      	b.n	37a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <system_apb_clock_set_mask+0x78>)
     36a:	4a07      	ldr	r2, [pc, #28]	; (388 <system_apb_clock_set_mask+0x78>)
     36c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     36e:	683a      	ldr	r2, [r7, #0]
     370:	430a      	orrs	r2, r1
     372:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     374:	e001      	b.n	37a <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     376:	2317      	movs	r3, #23
     378:	e000      	b.n	37c <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     37a:	2300      	movs	r3, #0
}
     37c:	0018      	movs	r0, r3
     37e:	46bd      	mov	sp, r7
     380:	b002      	add	sp, #8
     382:	bd80      	pop	{r7, pc}
     384:	00004ca8 	.word	0x00004ca8
     388:	40000400 	.word	0x40000400

0000038c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     38c:	b580      	push	{r7, lr}
     38e:	b082      	sub	sp, #8
     390:	af00      	add	r7, sp, #0
     392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     394:	687b      	ldr	r3, [r7, #4]
     396:	2280      	movs	r2, #128	; 0x80
     398:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     39a:	687b      	ldr	r3, [r7, #4]
     39c:	2200      	movs	r2, #0
     39e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2201      	movs	r2, #1
     3a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	2200      	movs	r2, #0
     3aa:	70da      	strb	r2, [r3, #3]
}
     3ac:	46c0      	nop			; (mov r8, r8)
     3ae:	46bd      	mov	sp, r7
     3b0:	b002      	add	sp, #8
     3b2:	bd80      	pop	{r7, pc}

000003b4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     3b8:	4b05      	ldr	r3, [pc, #20]	; (3d0 <system_is_debugger_present+0x1c>)
     3ba:	789b      	ldrb	r3, [r3, #2]
     3bc:	b2db      	uxtb	r3, r3
     3be:	001a      	movs	r2, r3
     3c0:	2302      	movs	r3, #2
     3c2:	4013      	ands	r3, r2
     3c4:	1e5a      	subs	r2, r3, #1
     3c6:	4193      	sbcs	r3, r2
     3c8:	b2db      	uxtb	r3, r3
}
     3ca:	0018      	movs	r0, r3
     3cc:	46bd      	mov	sp, r7
     3ce:	bd80      	pop	{r7, pc}
     3d0:	41002000 	.word	0x41002000

000003d4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b084      	sub	sp, #16
     3d8:	af00      	add	r7, sp, #0
     3da:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3e2:	68fb      	ldr	r3, [r7, #12]
     3e4:	69db      	ldr	r3, [r3, #28]
     3e6:	2207      	movs	r2, #7
     3e8:	4013      	ands	r3, r2
     3ea:	1e5a      	subs	r2, r3, #1
     3ec:	4193      	sbcs	r3, r2
     3ee:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     3f0:	0018      	movs	r0, r3
     3f2:	46bd      	mov	sp, r7
     3f4:	b004      	add	sp, #16
     3f6:	bd80      	pop	{r7, pc}

000003f8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     3f8:	b580      	push	{r7, lr}
     3fa:	b082      	sub	sp, #8
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     400:	46c0      	nop			; (mov r8, r8)
     402:	687b      	ldr	r3, [r7, #4]
     404:	0018      	movs	r0, r3
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <_i2c_master_wait_for_sync+0x20>)
     408:	4798      	blx	r3
     40a:	1e03      	subs	r3, r0, #0
     40c:	d1f9      	bne.n	402 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	46bd      	mov	sp, r7
     412:	b002      	add	sp, #8
     414:	bd80      	pop	{r7, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	000003d5 	.word	0x000003d5

0000041c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     41c:	b5f0      	push	{r4, r5, r6, r7, lr}
     41e:	b097      	sub	sp, #92	; 0x5c
     420:	af00      	add	r7, sp, #0
     422:	6178      	str	r0, [r7, #20]
     424:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     426:	2300      	movs	r3, #0
     428:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     42a:	2300      	movs	r3, #0
     42c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     42e:	2300      	movs	r3, #0
     430:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     432:	233b      	movs	r3, #59	; 0x3b
     434:	2210      	movs	r2, #16
     436:	4694      	mov	ip, r2
     438:	44bc      	add	ip, r7
     43a:	4463      	add	r3, ip
     43c:	2200      	movs	r2, #0
     43e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     440:	697b      	ldr	r3, [r7, #20]
     442:	681b      	ldr	r3, [r3, #0]
     444:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     446:	697b      	ldr	r3, [r7, #20]
     448:	681b      	ldr	r3, [r3, #0]
     44a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     44c:	2323      	movs	r3, #35	; 0x23
     44e:	2210      	movs	r2, #16
     450:	18ba      	adds	r2, r7, r2
     452:	18d4      	adds	r4, r2, r3
     454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     456:	0018      	movs	r0, r3
     458:	4bc0      	ldr	r3, [pc, #768]	; (75c <_i2c_master_set_config+0x340>)
     45a:	4798      	blx	r3
     45c:	0003      	movs	r3, r0
     45e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     460:	230c      	movs	r3, #12
     462:	2210      	movs	r2, #16
     464:	4694      	mov	ip, r2
     466:	44bc      	add	ip, r7
     468:	4463      	add	r3, ip
     46a:	0018      	movs	r0, r3
     46c:	4bbc      	ldr	r3, [pc, #752]	; (760 <_i2c_master_set_config+0x344>)
     46e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     470:	693b      	ldr	r3, [r7, #16]
     472:	69db      	ldr	r3, [r3, #28]
     474:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     476:	693b      	ldr	r3, [r7, #16]
     478:	6a1b      	ldr	r3, [r3, #32]
     47a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     47e:	2b00      	cmp	r3, #0
     480:	d106      	bne.n	490 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     484:	2100      	movs	r1, #0
     486:	0018      	movs	r0, r3
     488:	4bb6      	ldr	r3, [pc, #728]	; (764 <_i2c_master_set_config+0x348>)
     48a:	4798      	blx	r3
     48c:	0003      	movs	r3, r0
     48e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     492:	b2da      	uxtb	r2, r3
     494:	230c      	movs	r3, #12
     496:	2110      	movs	r1, #16
     498:	468c      	mov	ip, r1
     49a:	44bc      	add	ip, r7
     49c:	4463      	add	r3, ip
     49e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     4a0:	230c      	movs	r3, #12
     4a2:	2210      	movs	r2, #16
     4a4:	4694      	mov	ip, r2
     4a6:	44bc      	add	ip, r7
     4a8:	4463      	add	r3, ip
     4aa:	2202      	movs	r2, #2
     4ac:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     4b0:	0c1b      	lsrs	r3, r3, #16
     4b2:	b2db      	uxtb	r3, r3
     4b4:	220c      	movs	r2, #12
     4b6:	2110      	movs	r1, #16
     4b8:	468c      	mov	ip, r1
     4ba:	44bc      	add	ip, r7
     4bc:	4462      	add	r2, ip
     4be:	0011      	movs	r1, r2
     4c0:	0018      	movs	r0, r3
     4c2:	4ba9      	ldr	r3, [pc, #676]	; (768 <_i2c_master_set_config+0x34c>)
     4c4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4c8:	2b00      	cmp	r3, #0
     4ca:	d106      	bne.n	4da <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     4ce:	2101      	movs	r1, #1
     4d0:	0018      	movs	r0, r3
     4d2:	4ba4      	ldr	r3, [pc, #656]	; (764 <_i2c_master_set_config+0x348>)
     4d4:	4798      	blx	r3
     4d6:	0003      	movs	r3, r0
     4d8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4dc:	b2da      	uxtb	r2, r3
     4de:	230c      	movs	r3, #12
     4e0:	2110      	movs	r1, #16
     4e2:	468c      	mov	ip, r1
     4e4:	44bc      	add	ip, r7
     4e6:	4463      	add	r3, ip
     4e8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     4ea:	230c      	movs	r3, #12
     4ec:	2210      	movs	r2, #16
     4ee:	4694      	mov	ip, r2
     4f0:	44bc      	add	ip, r7
     4f2:	4463      	add	r3, ip
     4f4:	2202      	movs	r2, #2
     4f6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     4fa:	0c1b      	lsrs	r3, r3, #16
     4fc:	b2db      	uxtb	r3, r3
     4fe:	220c      	movs	r2, #12
     500:	2110      	movs	r1, #16
     502:	468c      	mov	ip, r1
     504:	44bc      	add	ip, r7
     506:	4462      	add	r2, ip
     508:	0011      	movs	r1, r2
     50a:	0018      	movs	r0, r3
     50c:	4b96      	ldr	r3, [pc, #600]	; (768 <_i2c_master_set_config+0x34c>)
     50e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     510:	693b      	ldr	r3, [r7, #16]
     512:	8a9a      	ldrh	r2, [r3, #20]
     514:	697b      	ldr	r3, [r7, #20]
     516:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     518:	693b      	ldr	r3, [r7, #16]
     51a:	8ada      	ldrh	r2, [r3, #22]
     51c:	697b      	ldr	r3, [r7, #20]
     51e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     520:	693b      	ldr	r3, [r7, #16]
     522:	7e1b      	ldrb	r3, [r3, #24]
     524:	2b00      	cmp	r3, #0
     526:	d103      	bne.n	530 <_i2c_master_set_config+0x114>
     528:	4b90      	ldr	r3, [pc, #576]	; (76c <_i2c_master_set_config+0x350>)
     52a:	4798      	blx	r3
     52c:	1e03      	subs	r3, r0, #0
     52e:	d002      	beq.n	536 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     530:	2380      	movs	r3, #128	; 0x80
     532:	657b      	str	r3, [r7, #84]	; 0x54
     534:	e001      	b.n	53a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     536:	2300      	movs	r3, #0
     538:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     53a:	693b      	ldr	r3, [r7, #16]
     53c:	691b      	ldr	r3, [r3, #16]
     53e:	2b00      	cmp	r3, #0
     540:	d004      	beq.n	54c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     542:	693b      	ldr	r3, [r7, #16]
     544:	691b      	ldr	r3, [r3, #16]
     546:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     548:	4313      	orrs	r3, r2
     54a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     54c:	693b      	ldr	r3, [r7, #16]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     552:	4313      	orrs	r3, r2
     554:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     556:	693b      	ldr	r3, [r7, #16]
     558:	2224      	movs	r2, #36	; 0x24
     55a:	5c9b      	ldrb	r3, [r3, r2]
     55c:	2b00      	cmp	r3, #0
     55e:	d004      	beq.n	56a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     562:	2280      	movs	r2, #128	; 0x80
     564:	05d2      	lsls	r2, r2, #23
     566:	4313      	orrs	r3, r2
     568:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     56a:	693b      	ldr	r3, [r7, #16]
     56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     56e:	2b00      	cmp	r3, #0
     570:	d004      	beq.n	57c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     572:	693b      	ldr	r3, [r7, #16]
     574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     576:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     578:	4313      	orrs	r3, r2
     57a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     57c:	693b      	ldr	r3, [r7, #16]
     57e:	222c      	movs	r2, #44	; 0x2c
     580:	5c9b      	ldrb	r3, [r3, r2]
     582:	2b00      	cmp	r3, #0
     584:	d105      	bne.n	592 <_i2c_master_set_config+0x176>
     586:	693b      	ldr	r3, [r7, #16]
     588:	689a      	ldr	r2, [r3, #8]
     58a:	2380      	movs	r3, #128	; 0x80
     58c:	049b      	lsls	r3, r3, #18
     58e:	429a      	cmp	r2, r3
     590:	d104      	bne.n	59c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     594:	2280      	movs	r2, #128	; 0x80
     596:	0512      	lsls	r2, r2, #20
     598:	4313      	orrs	r3, r2
     59a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     59c:	693b      	ldr	r3, [r7, #16]
     59e:	222d      	movs	r2, #45	; 0x2d
     5a0:	5c9b      	ldrb	r3, [r3, r2]
     5a2:	2b00      	cmp	r3, #0
     5a4:	d004      	beq.n	5b0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5a8:	2280      	movs	r2, #128	; 0x80
     5aa:	0412      	lsls	r2, r2, #16
     5ac:	4313      	orrs	r3, r2
     5ae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     5b0:	693b      	ldr	r3, [r7, #16]
     5b2:	222e      	movs	r2, #46	; 0x2e
     5b4:	5c9b      	ldrb	r3, [r3, r2]
     5b6:	2b00      	cmp	r3, #0
     5b8:	d004      	beq.n	5c4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5bc:	2280      	movs	r2, #128	; 0x80
     5be:	03d2      	lsls	r2, r2, #15
     5c0:	4313      	orrs	r3, r2
     5c2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     5c6:	681a      	ldr	r2, [r3, #0]
     5c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5ca:	431a      	orrs	r2, r3
     5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     5ce:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     5d2:	2280      	movs	r2, #128	; 0x80
     5d4:	0052      	lsls	r2, r2, #1
     5d6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     5d8:	2323      	movs	r3, #35	; 0x23
     5da:	2210      	movs	r2, #16
     5dc:	4694      	mov	ip, r2
     5de:	44bc      	add	ip, r7
     5e0:	4463      	add	r3, ip
     5e2:	781b      	ldrb	r3, [r3, #0]
     5e4:	3312      	adds	r3, #18
     5e6:	b2db      	uxtb	r3, r3
     5e8:	0018      	movs	r0, r3
     5ea:	4b61      	ldr	r3, [pc, #388]	; (770 <_i2c_master_set_config+0x354>)
     5ec:	4798      	blx	r3
     5ee:	0003      	movs	r3, r0
     5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     5f2:	693b      	ldr	r3, [r7, #16]
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	22fa      	movs	r2, #250	; 0xfa
     5f8:	0092      	lsls	r2, r2, #2
     5fa:	4353      	muls	r3, r2
     5fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     5fe:	693b      	ldr	r3, [r7, #16]
     600:	685b      	ldr	r3, [r3, #4]
     602:	22fa      	movs	r2, #250	; 0xfa
     604:	0092      	lsls	r2, r2, #2
     606:	4353      	muls	r3, r2
     608:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
     60a:	693b      	ldr	r3, [r7, #16]
     60c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     60e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
     610:	4b58      	ldr	r3, [pc, #352]	; (774 <_i2c_master_set_config+0x358>)
     612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     614:	4798      	blx	r3
     616:	0005      	movs	r5, r0
     618:	000e      	movs	r6, r1
     61a:	4b56      	ldr	r3, [pc, #344]	; (774 <_i2c_master_set_config+0x358>)
     61c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     61e:	4798      	blx	r3
     620:	60b8      	str	r0, [r7, #8]
     622:	60f9      	str	r1, [r7, #12]
     624:	4b53      	ldr	r3, [pc, #332]	; (774 <_i2c_master_set_config+0x358>)
     626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     628:	4798      	blx	r3
     62a:	4c53      	ldr	r4, [pc, #332]	; (778 <_i2c_master_set_config+0x35c>)
     62c:	4a53      	ldr	r2, [pc, #332]	; (77c <_i2c_master_set_config+0x360>)
     62e:	4b54      	ldr	r3, [pc, #336]	; (780 <_i2c_master_set_config+0x364>)
     630:	47a0      	blx	r4
     632:	0003      	movs	r3, r0
     634:	000c      	movs	r4, r1
     636:	603b      	str	r3, [r7, #0]
     638:	607c      	str	r4, [r7, #4]
     63a:	4b4e      	ldr	r3, [pc, #312]	; (774 <_i2c_master_set_config+0x358>)
     63c:	6a38      	ldr	r0, [r7, #32]
     63e:	4798      	blx	r3
     640:	0002      	movs	r2, r0
     642:	000b      	movs	r3, r1
     644:	4c4c      	ldr	r4, [pc, #304]	; (778 <_i2c_master_set_config+0x35c>)
     646:	6838      	ldr	r0, [r7, #0]
     648:	6879      	ldr	r1, [r7, #4]
     64a:	47a0      	blx	r4
     64c:	0003      	movs	r3, r0
     64e:	000c      	movs	r4, r1
     650:	0018      	movs	r0, r3
     652:	0021      	movs	r1, r4
     654:	4c4b      	ldr	r4, [pc, #300]	; (784 <_i2c_master_set_config+0x368>)
     656:	2200      	movs	r2, #0
     658:	4b4b      	ldr	r3, [pc, #300]	; (788 <_i2c_master_set_config+0x36c>)
     65a:	47a0      	blx	r4
     65c:	0003      	movs	r3, r0
     65e:	000c      	movs	r4, r1
     660:	001a      	movs	r2, r3
     662:	0023      	movs	r3, r4
     664:	4c44      	ldr	r4, [pc, #272]	; (778 <_i2c_master_set_config+0x35c>)
     666:	68b8      	ldr	r0, [r7, #8]
     668:	68f9      	ldr	r1, [r7, #12]
     66a:	47a0      	blx	r4
     66c:	0003      	movs	r3, r0
     66e:	000c      	movs	r4, r1
     670:	001a      	movs	r2, r3
     672:	0023      	movs	r3, r4
     674:	4c45      	ldr	r4, [pc, #276]	; (78c <_i2c_master_set_config+0x370>)
     676:	0028      	movs	r0, r5
     678:	0031      	movs	r1, r6
     67a:	47a0      	blx	r4
     67c:	0003      	movs	r3, r0
     67e:	000c      	movs	r4, r1
     680:	001d      	movs	r5, r3
     682:	0026      	movs	r6, r4
     684:	6abb      	ldr	r3, [r7, #40]	; 0x28
     686:	005a      	lsls	r2, r3, #1
     688:	4b3a      	ldr	r3, [pc, #232]	; (774 <_i2c_master_set_config+0x358>)
     68a:	0010      	movs	r0, r2
     68c:	4798      	blx	r3
     68e:	0002      	movs	r2, r0
     690:	000b      	movs	r3, r1
     692:	4c3c      	ldr	r4, [pc, #240]	; (784 <_i2c_master_set_config+0x368>)
     694:	0028      	movs	r0, r5
     696:	0031      	movs	r1, r6
     698:	47a0      	blx	r4
     69a:	0003      	movs	r3, r0
     69c:	000c      	movs	r4, r1
     69e:	0018      	movs	r0, r3
     6a0:	0021      	movs	r1, r4
     6a2:	4c3a      	ldr	r4, [pc, #232]	; (78c <_i2c_master_set_config+0x370>)
     6a4:	2200      	movs	r2, #0
     6a6:	4b3a      	ldr	r3, [pc, #232]	; (790 <_i2c_master_set_config+0x374>)
     6a8:	47a0      	blx	r4
     6aa:	0003      	movs	r3, r0
     6ac:	000c      	movs	r4, r1
     6ae:	001d      	movs	r5, r3
     6b0:	0026      	movs	r6, r4
     6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     6b4:	005a      	lsls	r2, r3, #1
     6b6:	4b2f      	ldr	r3, [pc, #188]	; (774 <_i2c_master_set_config+0x358>)
     6b8:	0010      	movs	r0, r2
     6ba:	4798      	blx	r3
     6bc:	0002      	movs	r2, r0
     6be:	000b      	movs	r3, r1
     6c0:	4c34      	ldr	r4, [pc, #208]	; (794 <_i2c_master_set_config+0x378>)
     6c2:	0028      	movs	r0, r5
     6c4:	0031      	movs	r1, r6
     6c6:	47a0      	blx	r4
     6c8:	0003      	movs	r3, r0
     6ca:	000c      	movs	r4, r1
     6cc:	0019      	movs	r1, r3
     6ce:	0022      	movs	r2, r4
     6d0:	4b31      	ldr	r3, [pc, #196]	; (798 <_i2c_master_set_config+0x37c>)
     6d2:	0008      	movs	r0, r1
     6d4:	0011      	movs	r1, r2
     6d6:	4798      	blx	r3
     6d8:	0003      	movs	r3, r0
     6da:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     6dc:	693b      	ldr	r3, [r7, #16]
     6de:	689a      	ldr	r2, [r3, #8]
     6e0:	2380      	movs	r3, #128	; 0x80
     6e2:	049b      	lsls	r3, r3, #18
     6e4:	429a      	cmp	r2, r3
     6e6:	d16a      	bne.n	7be <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     6e8:	4b22      	ldr	r3, [pc, #136]	; (774 <_i2c_master_set_config+0x358>)
     6ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     6ec:	4798      	blx	r3
     6ee:	4c25      	ldr	r4, [pc, #148]	; (784 <_i2c_master_set_config+0x368>)
     6f0:	0002      	movs	r2, r0
     6f2:	000b      	movs	r3, r1
     6f4:	47a0      	blx	r4
     6f6:	0003      	movs	r3, r0
     6f8:	000c      	movs	r4, r1
     6fa:	001d      	movs	r5, r3
     6fc:	0026      	movs	r6, r4
     6fe:	4b1d      	ldr	r3, [pc, #116]	; (774 <_i2c_master_set_config+0x358>)
     700:	6a78      	ldr	r0, [r7, #36]	; 0x24
     702:	4798      	blx	r3
     704:	4c1c      	ldr	r4, [pc, #112]	; (778 <_i2c_master_set_config+0x35c>)
     706:	2200      	movs	r2, #0
     708:	4b24      	ldr	r3, [pc, #144]	; (79c <_i2c_master_set_config+0x380>)
     70a:	47a0      	blx	r4
     70c:	0003      	movs	r3, r0
     70e:	000c      	movs	r4, r1
     710:	001a      	movs	r2, r3
     712:	0023      	movs	r3, r4
     714:	4c1f      	ldr	r4, [pc, #124]	; (794 <_i2c_master_set_config+0x378>)
     716:	0028      	movs	r0, r5
     718:	0031      	movs	r1, r6
     71a:	47a0      	blx	r4
     71c:	0003      	movs	r3, r0
     71e:	000c      	movs	r4, r1
     720:	0018      	movs	r0, r3
     722:	0021      	movs	r1, r4
     724:	4c19      	ldr	r4, [pc, #100]	; (78c <_i2c_master_set_config+0x370>)
     726:	2200      	movs	r2, #0
     728:	4b19      	ldr	r3, [pc, #100]	; (790 <_i2c_master_set_config+0x374>)
     72a:	47a0      	blx	r4
     72c:	0003      	movs	r3, r0
     72e:	000c      	movs	r4, r1
     730:	0019      	movs	r1, r3
     732:	0022      	movs	r2, r4
     734:	4b18      	ldr	r3, [pc, #96]	; (798 <_i2c_master_set_config+0x37c>)
     736:	0008      	movs	r0, r1
     738:	0011      	movs	r1, r2
     73a:	4798      	blx	r3
     73c:	0003      	movs	r3, r0
     73e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
     740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     742:	2b00      	cmp	r3, #0
     744:	d02e      	beq.n	7a4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     746:	4b16      	ldr	r3, [pc, #88]	; (7a0 <_i2c_master_set_config+0x384>)
     748:	6a79      	ldr	r1, [r7, #36]	; 0x24
     74a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     74c:	4798      	blx	r3
     74e:	0003      	movs	r3, r0
     750:	1e9a      	subs	r2, r3, #2
     752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     754:	1ad3      	subs	r3, r2, r3
     756:	653b      	str	r3, [r7, #80]	; 0x50
     758:	e031      	b.n	7be <_i2c_master_set_config+0x3a2>
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00001e01 	.word	0x00001e01
     760:	0000038d 	.word	0x0000038d
     764:	00001c45 	.word	0x00001c45
     768:	000029e5 	.word	0x000029e5
     76c:	000003b5 	.word	0x000003b5
     770:	00002821 	.word	0x00002821
     774:	000048ad 	.word	0x000048ad
     778:	00003c95 	.word	0x00003c95
     77c:	e826d695 	.word	0xe826d695
     780:	3e112e0b 	.word	0x3e112e0b
     784:	0000300d 	.word	0x0000300d
     788:	40240000 	.word	0x40240000
     78c:	00004195 	.word	0x00004195
     790:	3ff00000 	.word	0x3ff00000
     794:	0000362d 	.word	0x0000362d
     798:	000047c1 	.word	0x000047c1
     79c:	40080000 	.word	0x40080000
     7a0:	00002c61 	.word	0x00002c61
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7a6:	005a      	lsls	r2, r3, #1
     7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7aa:	18d3      	adds	r3, r2, r3
     7ac:	1e5a      	subs	r2, r3, #1
     7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7b0:	0059      	lsls	r1, r3, #1
     7b2:	4b1d      	ldr	r3, [pc, #116]	; (828 <_i2c_master_set_config+0x40c>)
     7b4:	0010      	movs	r0, r2
     7b6:	4798      	blx	r3
     7b8:	0003      	movs	r3, r0
     7ba:	3b01      	subs	r3, #1
     7bc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7c0:	2bff      	cmp	r3, #255	; 0xff
     7c2:	dc08      	bgt.n	7d6 <_i2c_master_set_config+0x3ba>
     7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7c6:	2b00      	cmp	r3, #0
     7c8:	db05      	blt.n	7d6 <_i2c_master_set_config+0x3ba>
     7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     7cc:	2bff      	cmp	r3, #255	; 0xff
     7ce:	dc02      	bgt.n	7d6 <_i2c_master_set_config+0x3ba>
     7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     7d2:	2b00      	cmp	r3, #0
     7d4:	da06      	bge.n	7e4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d6:	233b      	movs	r3, #59	; 0x3b
     7d8:	2210      	movs	r2, #16
     7da:	4694      	mov	ip, r2
     7dc:	44bc      	add	ip, r7
     7de:	4463      	add	r3, ip
     7e0:	2240      	movs	r2, #64	; 0x40
     7e2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
     7e4:	233b      	movs	r3, #59	; 0x3b
     7e6:	2210      	movs	r2, #16
     7e8:	4694      	mov	ip, r2
     7ea:	44bc      	add	ip, r7
     7ec:	4463      	add	r3, ip
     7ee:	781b      	ldrb	r3, [r3, #0]
     7f0:	2b40      	cmp	r3, #64	; 0x40
     7f2:	d00e      	beq.n	812 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7f6:	22ff      	movs	r2, #255	; 0xff
     7f8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     7fc:	041b      	lsls	r3, r3, #16
     7fe:	0019      	movs	r1, r3
     800:	23ff      	movs	r3, #255	; 0xff
     802:	041b      	lsls	r3, r3, #16
     804:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     806:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     80a:	0612      	lsls	r2, r2, #24
     80c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     810:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
     812:	233b      	movs	r3, #59	; 0x3b
     814:	2210      	movs	r2, #16
     816:	4694      	mov	ip, r2
     818:	44bc      	add	ip, r7
     81a:	4463      	add	r3, ip
     81c:	781b      	ldrb	r3, [r3, #0]
}
     81e:	0018      	movs	r0, r3
     820:	46bd      	mov	sp, r7
     822:	b017      	add	sp, #92	; 0x5c
     824:	bdf0      	pop	{r4, r5, r6, r7, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	00002c61 	.word	0x00002c61

0000082c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     82c:	b580      	push	{r7, lr}
     82e:	b08a      	sub	sp, #40	; 0x28
     830:	af00      	add	r7, sp, #0
     832:	60f8      	str	r0, [r7, #12]
     834:	60b9      	str	r1, [r7, #8]
     836:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     838:	68fb      	ldr	r3, [r7, #12]
     83a:	68ba      	ldr	r2, [r7, #8]
     83c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     83e:	68fb      	ldr	r3, [r7, #12]
     840:	681b      	ldr	r3, [r3, #0]
     842:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     844:	68fb      	ldr	r3, [r7, #12]
     846:	681b      	ldr	r3, [r3, #0]
     848:	0018      	movs	r0, r3
     84a:	4b2f      	ldr	r3, [pc, #188]	; (908 <i2c_master_init+0xdc>)
     84c:	4798      	blx	r3
     84e:	0003      	movs	r3, r0
     850:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     852:	69bb      	ldr	r3, [r7, #24]
     854:	2b05      	cmp	r3, #5
     856:	d104      	bne.n	862 <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     858:	2301      	movs	r3, #1
     85a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     85c:	2318      	movs	r3, #24
     85e:	623b      	str	r3, [r7, #32]
     860:	e004      	b.n	86c <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     862:	69bb      	ldr	r3, [r7, #24]
     864:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     866:	69bb      	ldr	r3, [r7, #24]
     868:	3312      	adds	r3, #18
     86a:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	2b05      	cmp	r3, #5
     870:	d108      	bne.n	884 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     872:	2201      	movs	r2, #1
     874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     876:	409a      	lsls	r2, r3
     878:	0013      	movs	r3, r2
     87a:	0019      	movs	r1, r3
     87c:	2003      	movs	r0, #3
     87e:	4b23      	ldr	r3, [pc, #140]	; (90c <i2c_master_init+0xe0>)
     880:	4798      	blx	r3
     882:	e007      	b.n	894 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     884:	2201      	movs	r2, #1
     886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     888:	409a      	lsls	r2, r3
     88a:	0013      	movs	r3, r2
     88c:	0019      	movs	r1, r3
     88e:	2002      	movs	r0, #2
     890:	4b1e      	ldr	r3, [pc, #120]	; (90c <i2c_master_init+0xe0>)
     892:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     894:	2314      	movs	r3, #20
     896:	18fb      	adds	r3, r7, r3
     898:	0018      	movs	r0, r3
     89a:	4b1d      	ldr	r3, [pc, #116]	; (910 <i2c_master_init+0xe4>)
     89c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	7b1a      	ldrb	r2, [r3, #12]
     8a2:	2314      	movs	r3, #20
     8a4:	18fb      	adds	r3, r7, r3
     8a6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8a8:	6a3b      	ldr	r3, [r7, #32]
     8aa:	b2db      	uxtb	r3, r3
     8ac:	2214      	movs	r2, #20
     8ae:	18ba      	adds	r2, r7, r2
     8b0:	0011      	movs	r1, r2
     8b2:	0018      	movs	r0, r3
     8b4:	4b17      	ldr	r3, [pc, #92]	; (914 <i2c_master_init+0xe8>)
     8b6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8b8:	6a3b      	ldr	r3, [r7, #32]
     8ba:	b2db      	uxtb	r3, r3
     8bc:	0018      	movs	r0, r3
     8be:	4b16      	ldr	r3, [pc, #88]	; (918 <i2c_master_init+0xec>)
     8c0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	7b1b      	ldrb	r3, [r3, #12]
     8c6:	2100      	movs	r1, #0
     8c8:	0018      	movs	r0, r3
     8ca:	4b14      	ldr	r3, [pc, #80]	; (91c <i2c_master_init+0xf0>)
     8cc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     8ce:	69fb      	ldr	r3, [r7, #28]
     8d0:	681b      	ldr	r3, [r3, #0]
     8d2:	2202      	movs	r2, #2
     8d4:	4013      	ands	r3, r2
     8d6:	d001      	beq.n	8dc <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
     8d8:	231c      	movs	r3, #28
     8da:	e010      	b.n	8fe <i2c_master_init+0xd2>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     8dc:	69fb      	ldr	r3, [r7, #28]
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	2201      	movs	r2, #1
     8e2:	4013      	ands	r3, r2
     8e4:	d001      	beq.n	8ea <i2c_master_init+0xbe>
		return STATUS_BUSY;
     8e6:	2305      	movs	r3, #5
     8e8:	e009      	b.n	8fe <i2c_master_init+0xd2>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     8ea:	69fb      	ldr	r3, [r7, #28]
     8ec:	2214      	movs	r2, #20
     8ee:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     8f0:	687a      	ldr	r2, [r7, #4]
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	0011      	movs	r1, r2
     8f6:	0018      	movs	r0, r3
     8f8:	4b09      	ldr	r3, [pc, #36]	; (920 <i2c_master_init+0xf4>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
}
     8fe:	0018      	movs	r0, r3
     900:	46bd      	mov	sp, r7
     902:	b00a      	add	sp, #40	; 0x28
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	00001e01 	.word	0x00001e01
     90c:	00000311 	.word	0x00000311
     910:	000002f9 	.word	0x000002f9
     914:	00002731 	.word	0x00002731
     918:	00002771 	.word	0x00002771
     91c:	00001bb9 	.word	0x00001bb9
     920:	0000041d 	.word	0x0000041d

00000924 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     924:	b580      	push	{r7, lr}
     926:	b084      	sub	sp, #16
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	681b      	ldr	r3, [r3, #0]
     930:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     932:	68fb      	ldr	r3, [r7, #12]
     934:	7e1b      	ldrb	r3, [r3, #24]
     936:	b2db      	uxtb	r3, r3
     938:	001a      	movs	r2, r3
     93a:	2302      	movs	r3, #2
     93c:	4013      	ands	r3, r2
     93e:	d00b      	beq.n	958 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     940:	68fb      	ldr	r3, [r7, #12]
     942:	2202      	movs	r2, #2
     944:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     946:	68fb      	ldr	r3, [r7, #12]
     948:	8b5b      	ldrh	r3, [r3, #26]
     94a:	b29b      	uxth	r3, r3
     94c:	001a      	movs	r2, r3
     94e:	2302      	movs	r3, #2
     950:	4013      	ands	r3, r2
     952:	d011      	beq.n	978 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     954:	2341      	movs	r3, #65	; 0x41
     956:	e010      	b.n	97a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     958:	68fb      	ldr	r3, [r7, #12]
     95a:	8b5b      	ldrh	r3, [r3, #26]
     95c:	b29b      	uxth	r3, r3
     95e:	001a      	movs	r2, r3
     960:	2304      	movs	r3, #4
     962:	4013      	ands	r3, r2
     964:	d008      	beq.n	978 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     966:	68fb      	ldr	r3, [r7, #12]
     968:	685b      	ldr	r3, [r3, #4]
     96a:	22c0      	movs	r2, #192	; 0xc0
     96c:	0292      	lsls	r2, r2, #10
     96e:	431a      	orrs	r2, r3
     970:	68fb      	ldr	r3, [r7, #12]
     972:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     974:	2318      	movs	r3, #24
     976:	e000      	b.n	97a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     978:	2300      	movs	r3, #0
}
     97a:	0018      	movs	r0, r3
     97c:	46bd      	mov	sp, r7
     97e:	b004      	add	sp, #16
     980:	bd80      	pop	{r7, pc}

00000982 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     982:	b580      	push	{r7, lr}
     984:	b084      	sub	sp, #16
     986:	af00      	add	r7, sp, #0
     988:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     990:	230e      	movs	r3, #14
     992:	18fb      	adds	r3, r7, r3
     994:	2200      	movs	r2, #0
     996:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     998:	e00f      	b.n	9ba <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     99a:	230e      	movs	r3, #14
     99c:	18fb      	adds	r3, r7, r3
     99e:	220e      	movs	r2, #14
     9a0:	18ba      	adds	r2, r7, r2
     9a2:	8812      	ldrh	r2, [r2, #0]
     9a4:	3201      	adds	r2, #1
     9a6:	801a      	strh	r2, [r3, #0]
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	891b      	ldrh	r3, [r3, #8]
     9ac:	220e      	movs	r2, #14
     9ae:	18ba      	adds	r2, r7, r2
     9b0:	8812      	ldrh	r2, [r2, #0]
     9b2:	429a      	cmp	r2, r3
     9b4:	d301      	bcc.n	9ba <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     9b6:	2312      	movs	r3, #18
     9b8:	e00e      	b.n	9d8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     9ba:	68bb      	ldr	r3, [r7, #8]
     9bc:	7e1b      	ldrb	r3, [r3, #24]
     9be:	b2db      	uxtb	r3, r3
     9c0:	001a      	movs	r2, r3
     9c2:	2301      	movs	r3, #1
     9c4:	4013      	ands	r3, r2
     9c6:	d106      	bne.n	9d6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     9c8:	68bb      	ldr	r3, [r7, #8]
     9ca:	7e1b      	ldrb	r3, [r3, #24]
     9cc:	b2db      	uxtb	r3, r3
     9ce:	001a      	movs	r2, r3
     9d0:	2302      	movs	r3, #2
     9d2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     9d4:	d0e1      	beq.n	99a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
     9d6:	2300      	movs	r3, #0
}
     9d8:	0018      	movs	r0, r3
     9da:	46bd      	mov	sp, r7
     9dc:	b004      	add	sp, #16
     9de:	bd80      	pop	{r7, pc}

000009e0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     9e0:	b590      	push	{r4, r7, lr}
     9e2:	b085      	sub	sp, #20
     9e4:	af00      	add	r7, sp, #0
     9e6:	6078      	str	r0, [r7, #4]
     9e8:	000a      	movs	r2, r1
     9ea:	1cfb      	adds	r3, r7, #3
     9ec:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	685b      	ldr	r3, [r3, #4]
     9f8:	2280      	movs	r2, #128	; 0x80
     9fa:	02d2      	lsls	r2, r2, #11
     9fc:	431a      	orrs	r2, r3
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     a02:	1cfb      	adds	r3, r7, #3
     a04:	781a      	ldrb	r2, [r3, #0]
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a0a:	230b      	movs	r3, #11
     a0c:	18fc      	adds	r4, r7, r3
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	0018      	movs	r0, r3
     a12:	4b07      	ldr	r3, [pc, #28]	; (a30 <_i2c_master_send_hs_master_code+0x50>)
     a14:	4798      	blx	r3
     a16:	0003      	movs	r3, r0
     a18:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     a1a:	68fb      	ldr	r3, [r7, #12]
     a1c:	2201      	movs	r2, #1
     a1e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     a20:	230b      	movs	r3, #11
     a22:	18fb      	adds	r3, r7, r3
     a24:	781b      	ldrb	r3, [r3, #0]
}
     a26:	0018      	movs	r0, r3
     a28:	46bd      	mov	sp, r7
     a2a:	b005      	add	sp, #20
     a2c:	bd90      	pop	{r4, r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	00000983 	.word	0x00000983

00000a34 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     a34:	b590      	push	{r4, r7, lr}
     a36:	b087      	sub	sp, #28
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     a44:	2314      	movs	r3, #20
     a46:	18fb      	adds	r3, r7, r3
     a48:	683a      	ldr	r2, [r7, #0]
     a4a:	8852      	ldrh	r2, [r2, #2]
     a4c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     a4e:	2312      	movs	r3, #18
     a50:	18fb      	adds	r3, r7, r3
     a52:	2200      	movs	r2, #0
     a54:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	011b      	lsls	r3, r3, #4
     a5c:	0fdb      	lsrs	r3, r3, #31
     a5e:	b2db      	uxtb	r3, r3
     a60:	001a      	movs	r2, r3
     a62:	230b      	movs	r3, #11
     a64:	18fb      	adds	r3, r7, r3
     a66:	1e51      	subs	r1, r2, #1
     a68:	418a      	sbcs	r2, r1
     a6a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     a6c:	683b      	ldr	r3, [r7, #0]
     a6e:	7a5b      	ldrb	r3, [r3, #9]
     a70:	2b00      	cmp	r3, #0
     a72:	d006      	beq.n	a82 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     a74:	683b      	ldr	r3, [r7, #0]
     a76:	7a9a      	ldrb	r2, [r3, #10]
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	0011      	movs	r1, r2
     a7c:	0018      	movs	r0, r3
     a7e:	4b85      	ldr	r3, [pc, #532]	; (c94 <_i2c_master_read_packet+0x260>)
     a80:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	685b      	ldr	r3, [r3, #4]
     a86:	4a84      	ldr	r2, [pc, #528]	; (c98 <_i2c_master_read_packet+0x264>)
     a88:	401a      	ands	r2, r3
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	7a1b      	ldrb	r3, [r3, #8]
     a92:	2b00      	cmp	r3, #0
     a94:	d042      	beq.n	b1c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     a96:	683b      	ldr	r3, [r7, #0]
     a98:	881b      	ldrh	r3, [r3, #0]
     a9a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a9c:	683b      	ldr	r3, [r7, #0]
     a9e:	7a5b      	ldrb	r3, [r3, #9]
     aa0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     aa2:	4313      	orrs	r3, r2
     aa4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     aa6:	2380      	movs	r3, #128	; 0x80
     aa8:	021b      	lsls	r3, r3, #8
     aaa:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     aac:	68fb      	ldr	r3, [r7, #12]
     aae:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     ab0:	2317      	movs	r3, #23
     ab2:	18fc      	adds	r4, r7, r3
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	0018      	movs	r0, r3
     ab8:	4b78      	ldr	r3, [pc, #480]	; (c9c <_i2c_master_read_packet+0x268>)
     aba:	4798      	blx	r3
     abc:	0003      	movs	r3, r0
     abe:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	685b      	ldr	r3, [r3, #4]
     ac4:	4a74      	ldr	r2, [pc, #464]	; (c98 <_i2c_master_read_packet+0x264>)
     ac6:	401a      	ands	r2, r3
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     acc:	2317      	movs	r3, #23
     ace:	18fb      	adds	r3, r7, r3
     ad0:	781b      	ldrb	r3, [r3, #0]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d107      	bne.n	ae6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
     ad6:	2317      	movs	r3, #23
     ad8:	18fc      	adds	r4, r7, r3
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	0018      	movs	r0, r3
     ade:	4b70      	ldr	r3, [pc, #448]	; (ca0 <_i2c_master_read_packet+0x26c>)
     ae0:	4798      	blx	r3
     ae2:	0003      	movs	r3, r0
     ae4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     ae6:	2317      	movs	r3, #23
     ae8:	18fb      	adds	r3, r7, r3
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	2b00      	cmp	r3, #0
     aee:	d111      	bne.n	b14 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     af0:	683b      	ldr	r3, [r7, #0]
     af2:	881b      	ldrh	r3, [r3, #0]
     af4:	0a1b      	lsrs	r3, r3, #8
     af6:	b29b      	uxth	r3, r3
     af8:	2278      	movs	r2, #120	; 0x78
     afa:	4313      	orrs	r3, r2
     afc:	b29b      	uxth	r3, r3
     afe:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	7a5b      	ldrb	r3, [r3, #9]
     b04:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     b06:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b08:	2201      	movs	r2, #1
     b0a:	4313      	orrs	r3, r2
     b0c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	625a      	str	r2, [r3, #36]	; 0x24
     b12:	e00f      	b.n	b34 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     b14:	2317      	movs	r3, #23
     b16:	18fb      	adds	r3, r7, r3
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	e0b6      	b.n	c8a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     b1c:	683b      	ldr	r3, [r7, #0]
     b1e:	881b      	ldrh	r3, [r3, #0]
     b20:	005b      	lsls	r3, r3, #1
     b22:	2201      	movs	r2, #1
     b24:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	7a5b      	ldrb	r3, [r3, #9]
     b2a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     b2c:	4313      	orrs	r3, r2
     b2e:	001a      	movs	r2, r3
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b34:	2317      	movs	r3, #23
     b36:	18fc      	adds	r4, r7, r3
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	0018      	movs	r0, r3
     b3c:	4b57      	ldr	r3, [pc, #348]	; (c9c <_i2c_master_read_packet+0x268>)
     b3e:	4798      	blx	r3
     b40:	0003      	movs	r3, r0
     b42:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     b44:	230b      	movs	r3, #11
     b46:	18fb      	adds	r3, r7, r3
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d00b      	beq.n	b66 <_i2c_master_read_packet+0x132>
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	885b      	ldrh	r3, [r3, #2]
     b52:	2b01      	cmp	r3, #1
     b54:	d107      	bne.n	b66 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	685b      	ldr	r3, [r3, #4]
     b5a:	2280      	movs	r2, #128	; 0x80
     b5c:	02d2      	lsls	r2, r2, #11
     b5e:	431a      	orrs	r2, r3
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	605a      	str	r2, [r3, #4]
     b64:	e005      	b.n	b72 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     b66:	68fb      	ldr	r3, [r7, #12]
     b68:	685b      	ldr	r3, [r3, #4]
     b6a:	4a4b      	ldr	r2, [pc, #300]	; (c98 <_i2c_master_read_packet+0x264>)
     b6c:	401a      	ands	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b72:	2317      	movs	r3, #23
     b74:	18fb      	adds	r3, r7, r3
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	d107      	bne.n	b8c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
     b7c:	2317      	movs	r3, #23
     b7e:	18fc      	adds	r4, r7, r3
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	0018      	movs	r0, r3
     b84:	4b46      	ldr	r3, [pc, #280]	; (ca0 <_i2c_master_read_packet+0x26c>)
     b86:	4798      	blx	r3
     b88:	0003      	movs	r3, r0
     b8a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     b8c:	2317      	movs	r3, #23
     b8e:	18fb      	adds	r3, r7, r3
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b00      	cmp	r3, #0
     b94:	d000      	beq.n	b98 <_i2c_master_read_packet+0x164>
     b96:	e075      	b.n	c84 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
     b98:	e04b      	b.n	c32 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	8b5b      	ldrh	r3, [r3, #26]
     b9e:	b29b      	uxth	r3, r3
     ba0:	001a      	movs	r2, r3
     ba2:	2320      	movs	r3, #32
     ba4:	4013      	ands	r3, r2
     ba6:	d101      	bne.n	bac <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
     ba8:	2341      	movs	r3, #65	; 0x41
     baa:	e06e      	b.n	c8a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	7adb      	ldrb	r3, [r3, #11]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d01e      	beq.n	bf2 <_i2c_master_read_packet+0x1be>
     bb4:	230b      	movs	r3, #11
     bb6:	18fb      	adds	r3, r7, r3
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2201      	movs	r2, #1
     bbc:	4053      	eors	r3, r2
     bbe:	b2db      	uxtb	r3, r3
     bc0:	2b00      	cmp	r3, #0
     bc2:	d004      	beq.n	bce <_i2c_master_read_packet+0x19a>
     bc4:	2314      	movs	r3, #20
     bc6:	18fb      	adds	r3, r7, r3
     bc8:	881b      	ldrh	r3, [r3, #0]
     bca:	2b00      	cmp	r3, #0
     bcc:	d009      	beq.n	be2 <_i2c_master_read_packet+0x1ae>
     bce:	230b      	movs	r3, #11
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d00c      	beq.n	bf2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     bd8:	2314      	movs	r3, #20
     bda:	18fb      	adds	r3, r7, r3
     bdc:	881b      	ldrh	r3, [r3, #0]
     bde:	2b01      	cmp	r3, #1
     be0:	d107      	bne.n	bf2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	685b      	ldr	r3, [r3, #4]
     be6:	2280      	movs	r2, #128	; 0x80
     be8:	02d2      	lsls	r2, r2, #11
     bea:	431a      	orrs	r2, r3
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	605a      	str	r2, [r3, #4]
     bf0:	e01a      	b.n	c28 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	0018      	movs	r0, r3
     bf6:	4b2b      	ldr	r3, [pc, #172]	; (ca4 <_i2c_master_read_packet+0x270>)
     bf8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     bfa:	683b      	ldr	r3, [r7, #0]
     bfc:	685a      	ldr	r2, [r3, #4]
     bfe:	2312      	movs	r3, #18
     c00:	18fb      	adds	r3, r7, r3
     c02:	881b      	ldrh	r3, [r3, #0]
     c04:	2112      	movs	r1, #18
     c06:	1879      	adds	r1, r7, r1
     c08:	1c58      	adds	r0, r3, #1
     c0a:	8008      	strh	r0, [r1, #0]
     c0c:	18d3      	adds	r3, r2, r3
     c0e:	68fa      	ldr	r2, [r7, #12]
     c10:	2128      	movs	r1, #40	; 0x28
     c12:	5c52      	ldrb	r2, [r2, r1]
     c14:	b2d2      	uxtb	r2, r2
     c16:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     c18:	2317      	movs	r3, #23
     c1a:	18fc      	adds	r4, r7, r3
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	0018      	movs	r0, r3
     c20:	4b1e      	ldr	r3, [pc, #120]	; (c9c <_i2c_master_read_packet+0x268>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     c28:	2317      	movs	r3, #23
     c2a:	18fb      	adds	r3, r7, r3
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d109      	bne.n	c46 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
     c32:	2314      	movs	r3, #20
     c34:	18fb      	adds	r3, r7, r3
     c36:	881b      	ldrh	r3, [r3, #0]
     c38:	2214      	movs	r2, #20
     c3a:	18ba      	adds	r2, r7, r2
     c3c:	1e59      	subs	r1, r3, #1
     c3e:	8011      	strh	r1, [r2, #0]
     c40:	2b00      	cmp	r3, #0
     c42:	d1aa      	bne.n	b9a <_i2c_master_read_packet+0x166>
     c44:	e000      	b.n	c48 <_i2c_master_read_packet+0x214>
				break;
     c46:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	7a9b      	ldrb	r3, [r3, #10]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d00a      	beq.n	c66 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	0018      	movs	r0, r3
     c54:	4b13      	ldr	r3, [pc, #76]	; (ca4 <_i2c_master_read_packet+0x270>)
     c56:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c58:	68fb      	ldr	r3, [r7, #12]
     c5a:	685b      	ldr	r3, [r3, #4]
     c5c:	22c0      	movs	r2, #192	; 0xc0
     c5e:	0292      	lsls	r2, r2, #10
     c60:	431a      	orrs	r2, r3
     c62:	68fb      	ldr	r3, [r7, #12]
     c64:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <_i2c_master_read_packet+0x270>)
     c6c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     c6e:	683b      	ldr	r3, [r7, #0]
     c70:	685a      	ldr	r2, [r3, #4]
     c72:	2312      	movs	r3, #18
     c74:	18fb      	adds	r3, r7, r3
     c76:	881b      	ldrh	r3, [r3, #0]
     c78:	18d3      	adds	r3, r2, r3
     c7a:	68fa      	ldr	r2, [r7, #12]
     c7c:	2128      	movs	r1, #40	; 0x28
     c7e:	5c52      	ldrb	r2, [r2, r1]
     c80:	b2d2      	uxtb	r2, r2
     c82:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     c84:	2317      	movs	r3, #23
     c86:	18fb      	adds	r3, r7, r3
     c88:	781b      	ldrb	r3, [r3, #0]
}
     c8a:	0018      	movs	r0, r3
     c8c:	46bd      	mov	sp, r7
     c8e:	b007      	add	sp, #28
     c90:	bd90      	pop	{r4, r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	000009e1 	.word	0x000009e1
     c98:	fffbffff 	.word	0xfffbffff
     c9c:	00000983 	.word	0x00000983
     ca0:	00000925 	.word	0x00000925
     ca4:	000003f9 	.word	0x000003f9

00000ca8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
     cb0:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	2201      	movs	r2, #1
     cb6:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	2201      	movs	r2, #1
     cbc:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
     cbe:	683a      	ldr	r2, [r7, #0]
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b03      	ldr	r3, [pc, #12]	; (cd4 <i2c_master_read_packet_wait+0x2c>)
     cc8:	4798      	blx	r3
     cca:	0003      	movs	r3, r0
}
     ccc:	0018      	movs	r0, r3
     cce:	46bd      	mov	sp, r7
     cd0:	b002      	add	sp, #8
     cd2:	bd80      	pop	{r7, pc}
     cd4:	00000a35 	.word	0x00000a35

00000cd8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     cd8:	b590      	push	{r4, r7, lr}
     cda:	b087      	sub	sp, #28
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
     ce0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     ce8:	2314      	movs	r3, #20
     cea:	18fb      	adds	r3, r7, r3
     cec:	683a      	ldr	r2, [r7, #0]
     cee:	8852      	ldrh	r2, [r2, #2]
     cf0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	0018      	movs	r0, r3
     cf6:	4b51      	ldr	r3, [pc, #324]	; (e3c <_i2c_master_write_packet+0x164>)
     cf8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     cfa:	683b      	ldr	r3, [r7, #0]
     cfc:	7a5b      	ldrb	r3, [r3, #9]
     cfe:	2b00      	cmp	r3, #0
     d00:	d006      	beq.n	d10 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     d02:	683b      	ldr	r3, [r7, #0]
     d04:	7a9a      	ldrb	r2, [r3, #10]
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	0011      	movs	r1, r2
     d0a:	0018      	movs	r0, r3
     d0c:	4b4c      	ldr	r3, [pc, #304]	; (e40 <_i2c_master_write_packet+0x168>)
     d0e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d10:	68fb      	ldr	r3, [r7, #12]
     d12:	685b      	ldr	r3, [r3, #4]
     d14:	4a4b      	ldr	r2, [pc, #300]	; (e44 <_i2c_master_write_packet+0x16c>)
     d16:	401a      	ands	r2, r3
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	7a1b      	ldrb	r3, [r3, #8]
     d20:	2b00      	cmp	r3, #0
     d22:	d00d      	beq.n	d40 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d24:	683b      	ldr	r3, [r7, #0]
     d26:	881b      	ldrh	r3, [r3, #0]
     d28:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d2a:	683b      	ldr	r3, [r7, #0]
     d2c:	7a5b      	ldrb	r3, [r3, #9]
     d2e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d30:	4313      	orrs	r3, r2
     d32:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d34:	2380      	movs	r3, #128	; 0x80
     d36:	021b      	lsls	r3, r3, #8
     d38:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	625a      	str	r2, [r3, #36]	; 0x24
     d3e:	e009      	b.n	d54 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d40:	683b      	ldr	r3, [r7, #0]
     d42:	881b      	ldrh	r3, [r3, #0]
     d44:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     d46:	683b      	ldr	r3, [r7, #0]
     d48:	7a5b      	ldrb	r3, [r3, #9]
     d4a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d4c:	4313      	orrs	r3, r2
     d4e:	001a      	movs	r2, r3
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     d54:	2317      	movs	r3, #23
     d56:	18fc      	adds	r4, r7, r3
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	0018      	movs	r0, r3
     d5c:	4b3a      	ldr	r3, [pc, #232]	; (e48 <_i2c_master_write_packet+0x170>)
     d5e:	4798      	blx	r3
     d60:	0003      	movs	r3, r0
     d62:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     d64:	2317      	movs	r3, #23
     d66:	18fb      	adds	r3, r7, r3
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d107      	bne.n	d7e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     d6e:	2317      	movs	r3, #23
     d70:	18fc      	adds	r4, r7, r3
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	0018      	movs	r0, r3
     d76:	4b35      	ldr	r3, [pc, #212]	; (e4c <_i2c_master_write_packet+0x174>)
     d78:	4798      	blx	r3
     d7a:	0003      	movs	r3, r0
     d7c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     d7e:	2317      	movs	r3, #23
     d80:	18fb      	adds	r3, r7, r3
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	2b00      	cmp	r3, #0
     d86:	d152      	bne.n	e2e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     d88:	2312      	movs	r3, #18
     d8a:	18fb      	adds	r3, r7, r3
     d8c:	2200      	movs	r2, #0
     d8e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     d90:	e033      	b.n	dfa <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	8b5b      	ldrh	r3, [r3, #26]
     d96:	b29b      	uxth	r3, r3
     d98:	001a      	movs	r2, r3
     d9a:	2320      	movs	r3, #32
     d9c:	4013      	ands	r3, r2
     d9e:	d101      	bne.n	da4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     da0:	2341      	movs	r3, #65	; 0x41
     da2:	e047      	b.n	e34 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	0018      	movs	r0, r3
     da8:	4b24      	ldr	r3, [pc, #144]	; (e3c <_i2c_master_write_packet+0x164>)
     daa:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     dac:	683b      	ldr	r3, [r7, #0]
     dae:	685a      	ldr	r2, [r3, #4]
     db0:	2312      	movs	r3, #18
     db2:	18fb      	adds	r3, r7, r3
     db4:	881b      	ldrh	r3, [r3, #0]
     db6:	2112      	movs	r1, #18
     db8:	1879      	adds	r1, r7, r1
     dba:	1c58      	adds	r0, r3, #1
     dbc:	8008      	strh	r0, [r1, #0]
     dbe:	18d3      	adds	r3, r2, r3
     dc0:	7819      	ldrb	r1, [r3, #0]
     dc2:	68fb      	ldr	r3, [r7, #12]
     dc4:	2228      	movs	r2, #40	; 0x28
     dc6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     dc8:	2317      	movs	r3, #23
     dca:	18fc      	adds	r4, r7, r3
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	0018      	movs	r0, r3
     dd0:	4b1d      	ldr	r3, [pc, #116]	; (e48 <_i2c_master_write_packet+0x170>)
     dd2:	4798      	blx	r3
     dd4:	0003      	movs	r3, r0
     dd6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     dd8:	2317      	movs	r3, #23
     dda:	18fb      	adds	r3, r7, r3
     ddc:	781b      	ldrb	r3, [r3, #0]
     dde:	2b00      	cmp	r3, #0
     de0:	d115      	bne.n	e0e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	8b5b      	ldrh	r3, [r3, #26]
     de6:	b29b      	uxth	r3, r3
     de8:	001a      	movs	r2, r3
     dea:	2304      	movs	r3, #4
     dec:	4013      	ands	r3, r2
     dee:	d004      	beq.n	dfa <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     df0:	2317      	movs	r3, #23
     df2:	18fb      	adds	r3, r7, r3
     df4:	221e      	movs	r2, #30
     df6:	701a      	strb	r2, [r3, #0]
				break;
     df8:	e00a      	b.n	e10 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
     dfa:	2314      	movs	r3, #20
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	881b      	ldrh	r3, [r3, #0]
     e00:	2214      	movs	r2, #20
     e02:	18ba      	adds	r2, r7, r2
     e04:	1e59      	subs	r1, r3, #1
     e06:	8011      	strh	r1, [r2, #0]
     e08:	2b00      	cmp	r3, #0
     e0a:	d1c2      	bne.n	d92 <_i2c_master_write_packet+0xba>
     e0c:	e000      	b.n	e10 <_i2c_master_write_packet+0x138>
				break;
     e0e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	7a9b      	ldrb	r3, [r3, #10]
     e14:	2b00      	cmp	r3, #0
     e16:	d00a      	beq.n	e2e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	0018      	movs	r0, r3
     e1c:	4b07      	ldr	r3, [pc, #28]	; (e3c <_i2c_master_write_packet+0x164>)
     e1e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	685b      	ldr	r3, [r3, #4]
     e24:	22c0      	movs	r2, #192	; 0xc0
     e26:	0292      	lsls	r2, r2, #10
     e28:	431a      	orrs	r2, r3
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     e2e:	2317      	movs	r3, #23
     e30:	18fb      	adds	r3, r7, r3
     e32:	781b      	ldrb	r3, [r3, #0]
}
     e34:	0018      	movs	r0, r3
     e36:	46bd      	mov	sp, r7
     e38:	b007      	add	sp, #28
     e3a:	bd90      	pop	{r4, r7, pc}
     e3c:	000003f9 	.word	0x000003f9
     e40:	000009e1 	.word	0x000009e1
     e44:	fffbffff 	.word	0xfffbffff
     e48:	00000983 	.word	0x00000983
     e4c:	00000925 	.word	0x00000925

00000e50 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e50:	b580      	push	{r7, lr}
     e52:	b082      	sub	sp, #8
     e54:	af00      	add	r7, sp, #0
     e56:	6078      	str	r0, [r7, #4]
     e58:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	2201      	movs	r2, #1
     e5e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	2201      	movs	r2, #1
     e64:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     e66:	683a      	ldr	r2, [r7, #0]
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	0011      	movs	r1, r2
     e6c:	0018      	movs	r0, r3
     e6e:	4b03      	ldr	r3, [pc, #12]	; (e7c <i2c_master_write_packet_wait+0x2c>)
     e70:	4798      	blx	r3
     e72:	0003      	movs	r3, r0
}
     e74:	0018      	movs	r0, r3
     e76:	46bd      	mov	sp, r7
     e78:	b002      	add	sp, #8
     e7a:	bd80      	pop	{r7, pc}
     e7c:	00000cd9 	.word	0x00000cd9

00000e80 <bmp280_write_configuration>:
 * \brief Configure Bosch BMP280 registers.
 *
 * \param config Pointer to BMP280 configuration object
 */
static void bmp280_write_configuration(const bmp280_config_t * config)
{
     e80:	b590      	push	{r4, r7, lr}
     e82:	b085      	sub	sp, #20
     e84:	af00      	add	r7, sp, #0
     e86:	6078      	str	r0, [r7, #4]
    // Sensor configuration register.
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	075b      	lsls	r3, r3, #29
     e8e:	0f5b      	lsrs	r3, r3, #29
     e90:	b2db      	uxtb	r3, r3
     e92:	015b      	lsls	r3, r3, #5
     e94:	b25a      	sxtb	r2, r3
                   ((config->filter & 0x07) << 2) |
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	069b      	lsls	r3, r3, #26
     e9c:	0f5b      	lsrs	r3, r3, #29
     e9e:	b2db      	uxtb	r3, r3
     ea0:	009b      	lsls	r3, r3, #2
     ea2:	b25b      	sxtb	r3, r3
     ea4:	211c      	movs	r1, #28
     ea6:	400b      	ands	r3, r1
     ea8:	b25b      	sxtb	r3, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
     eaa:	4313      	orrs	r3, r2
     eac:	b25a      	sxtb	r2, r3
                   (config->spi3w_en & 0x01);
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	065b      	lsls	r3, r3, #25
     eb4:	0fdb      	lsrs	r3, r3, #31
     eb6:	b2db      	uxtb	r3, r3
     eb8:	b25b      	sxtb	r3, r3
     eba:	2101      	movs	r1, #1
     ebc:	400b      	ands	r3, r1
     ebe:	b25b      	sxtb	r3, r3
                   ((config->filter & 0x07) << 2) |
     ec0:	4313      	orrs	r3, r2
     ec2:	b25b      	sxtb	r3, r3
     ec4:	b2da      	uxtb	r2, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
     ec6:	230f      	movs	r3, #15
     ec8:	18fb      	adds	r3, r7, r3
     eca:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CONFIG);
     ecc:	230f      	movs	r3, #15
     ece:	18f8      	adds	r0, r7, r3
     ed0:	23f5      	movs	r3, #245	; 0xf5
     ed2:	2276      	movs	r2, #118	; 0x76
     ed4:	2101      	movs	r1, #1
     ed6:	4c17      	ldr	r4, [pc, #92]	; (f34 <bmp280_write_configuration+0xb4>)
     ed8:	47a0      	blx	r4

    // Measurement control configuration register.
    temp = ((config->osrs_t & 0x07) << 5) |
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	785b      	ldrb	r3, [r3, #1]
     ede:	075b      	lsls	r3, r3, #29
     ee0:	0f5b      	lsrs	r3, r3, #29
     ee2:	b2db      	uxtb	r3, r3
     ee4:	015b      	lsls	r3, r3, #5
     ee6:	b25a      	sxtb	r2, r3
           ((config->osrs_p & 0x07) << 2) |
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	785b      	ldrb	r3, [r3, #1]
     eec:	069b      	lsls	r3, r3, #26
     eee:	0f5b      	lsrs	r3, r3, #29
     ef0:	b2db      	uxtb	r3, r3
     ef2:	009b      	lsls	r3, r3, #2
     ef4:	b25b      	sxtb	r3, r3
     ef6:	211c      	movs	r1, #28
     ef8:	400b      	ands	r3, r1
     efa:	b25b      	sxtb	r3, r3
    temp = ((config->osrs_t & 0x07) << 5) |
     efc:	4313      	orrs	r3, r2
     efe:	b25a      	sxtb	r2, r3
           (config->mode & 0x03);
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	785b      	ldrb	r3, [r3, #1]
     f04:	061b      	lsls	r3, r3, #24
     f06:	0f9b      	lsrs	r3, r3, #30
     f08:	b2db      	uxtb	r3, r3
     f0a:	b25b      	sxtb	r3, r3
     f0c:	2103      	movs	r1, #3
     f0e:	400b      	ands	r3, r1
     f10:	b25b      	sxtb	r3, r3
           ((config->osrs_p & 0x07) << 2) |
     f12:	4313      	orrs	r3, r2
     f14:	b25b      	sxtb	r3, r3
     f16:	b2da      	uxtb	r2, r3
    temp = ((config->osrs_t & 0x07) << 5) |
     f18:	230f      	movs	r3, #15
     f1a:	18fb      	adds	r3, r7, r3
     f1c:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CTRL_MEAS);
     f1e:	230f      	movs	r3, #15
     f20:	18f8      	adds	r0, r7, r3
     f22:	23f4      	movs	r3, #244	; 0xf4
     f24:	2276      	movs	r2, #118	; 0x76
     f26:	2101      	movs	r1, #1
     f28:	4c02      	ldr	r4, [pc, #8]	; (f34 <bmp280_write_configuration+0xb4>)
     f2a:	47a0      	blx	r4
}
     f2c:	46c0      	nop			; (mov r8, r8)
     f2e:	46bd      	mov	sp, r7
     f30:	b005      	add	sp, #20
     f32:	bd90      	pop	{r4, r7, pc}
     f34:	000017d5 	.word	0x000017d5

00000f38 <unpack_uint16>:

static uint16_t unpack_uint16(uint8_t * data)
{
     f38:	b580      	push	{r7, lr}
     f3a:	b084      	sub	sp, #16
     f3c:	af00      	add	r7, sp, #0
     f3e:	6078      	str	r0, [r7, #4]
	uint16_t val = 0;
     f40:	230e      	movs	r3, #14
     f42:	18fb      	adds	r3, r7, r3
     f44:	2200      	movs	r2, #0
     f46:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	b21a      	sxth	r2, r3
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	3301      	adds	r3, #1
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	021b      	lsls	r3, r3, #8
     f56:	b21b      	sxth	r3, r3
     f58:	4313      	orrs	r3, r2
     f5a:	b21a      	sxth	r2, r3
     f5c:	230e      	movs	r3, #14
     f5e:	18fb      	adds	r3, r7, r3
     f60:	2100      	movs	r1, #0
     f62:	5e5b      	ldrsh	r3, [r3, r1]
     f64:	4313      	orrs	r3, r2
     f66:	b21a      	sxth	r2, r3
     f68:	230e      	movs	r3, #14
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	801a      	strh	r2, [r3, #0]
	return val;
     f6e:	230e      	movs	r3, #14
     f70:	18fb      	adds	r3, r7, r3
     f72:	881b      	ldrh	r3, [r3, #0]
}
     f74:	0018      	movs	r0, r3
     f76:	46bd      	mov	sp, r7
     f78:	b004      	add	sp, #16
     f7a:	bd80      	pop	{r7, pc}

00000f7c <unpack_int16>:

static int16_t unpack_int16(uint8_t * data)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b084      	sub	sp, #16
     f80:	af00      	add	r7, sp, #0
     f82:	6078      	str	r0, [r7, #4]
	int16_t val = 0;
     f84:	230e      	movs	r3, #14
     f86:	18fb      	adds	r3, r7, r3
     f88:	2200      	movs	r2, #0
     f8a:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	781b      	ldrb	r3, [r3, #0]
     f90:	b21a      	sxth	r2, r3
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	3301      	adds	r3, #1
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	021b      	lsls	r3, r3, #8
     f9a:	b21b      	sxth	r3, r3
     f9c:	4313      	orrs	r3, r2
     f9e:	b219      	sxth	r1, r3
     fa0:	230e      	movs	r3, #14
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	220e      	movs	r2, #14
     fa6:	18ba      	adds	r2, r7, r2
     fa8:	8812      	ldrh	r2, [r2, #0]
     faa:	430a      	orrs	r2, r1
     fac:	801a      	strh	r2, [r3, #0]
	return val;
     fae:	230e      	movs	r3, #14
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	2200      	movs	r2, #0
     fb4:	5e9b      	ldrsh	r3, [r3, r2]
}
     fb6:	0018      	movs	r0, r3
     fb8:	46bd      	mov	sp, r7
     fba:	b004      	add	sp, #16
     fbc:	bd80      	pop	{r7, pc}
	...

00000fc0 <init_bmp280>:

/*!
 * \brief Basic initialization function for Bosch BMP280 pressure/temperature sensor.
 */
void init_bmp280(void)
{
     fc0:	b590      	push	{r4, r7, lr}
     fc2:	b089      	sub	sp, #36	; 0x24
     fc4:	af00      	add	r7, sp, #0
	uint8_t me = 0;
     fc6:	231f      	movs	r3, #31
     fc8:	18fb      	adds	r3, r7, r3
     fca:	2200      	movs	r2, #0
     fcc:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, BMP280_I2C_ADDR, BMP280_REG_ID);
     fce:	231f      	movs	r3, #31
     fd0:	18f8      	adds	r0, r7, r3
     fd2:	23d0      	movs	r3, #208	; 0xd0
     fd4:	2276      	movs	r2, #118	; 0x76
     fd6:	2101      	movs	r1, #1
     fd8:	4c49      	ldr	r4, [pc, #292]	; (1100 <init_bmp280+0x140>)
     fda:	47a0      	blx	r4
	if (me != BMP280_CHIP_ID)
     fdc:	231f      	movs	r3, #31
     fde:	18fb      	adds	r3, r7, r3
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	2b58      	cmp	r3, #88	; 0x58
     fe4:	d000      	beq.n	fe8 <init_bmp280+0x28>
     fe6:	e086      	b.n	10f6 <init_bmp280+0x136>
    {
        return;
    }

    // Read calibration data if not done already.
	if(bmp280_cal_data.dig_T1 == 0)
     fe8:	4b46      	ldr	r3, [pc, #280]	; (1104 <init_bmp280+0x144>)
     fea:	881b      	ldrh	r3, [r3, #0]
     fec:	2b00      	cmp	r3, #0
     fee:	d177      	bne.n	10e0 <init_bmp280+0x120>
	{
		uint8_t temp[24] = {0};
     ff0:	1d3b      	adds	r3, r7, #4
     ff2:	0018      	movs	r0, r3
     ff4:	2318      	movs	r3, #24
     ff6:	001a      	movs	r2, r3
     ff8:	2100      	movs	r1, #0
     ffa:	4b43      	ldr	r3, [pc, #268]	; (1108 <init_bmp280+0x148>)
     ffc:	4798      	blx	r3
		i2c_read_bytes(temp, 24, BMP280_I2C_ADDR, 0x88);
     ffe:	1d38      	adds	r0, r7, #4
    1000:	2388      	movs	r3, #136	; 0x88
    1002:	2276      	movs	r2, #118	; 0x76
    1004:	2118      	movs	r1, #24
    1006:	4c3e      	ldr	r4, [pc, #248]	; (1100 <init_bmp280+0x140>)
    1008:	47a0      	blx	r4

		// Parse calibration data.
		bmp280_cal_data.dig_T1 = unpack_uint16(&temp[0]);
    100a:	1d3b      	adds	r3, r7, #4
    100c:	0018      	movs	r0, r3
    100e:	4b3f      	ldr	r3, [pc, #252]	; (110c <init_bmp280+0x14c>)
    1010:	4798      	blx	r3
    1012:	0003      	movs	r3, r0
    1014:	001a      	movs	r2, r3
    1016:	4b3b      	ldr	r3, [pc, #236]	; (1104 <init_bmp280+0x144>)
    1018:	801a      	strh	r2, [r3, #0]
		bmp280_cal_data.dig_T2 = unpack_int16(&temp[2]);
    101a:	1d3b      	adds	r3, r7, #4
    101c:	3302      	adds	r3, #2
    101e:	0018      	movs	r0, r3
    1020:	4b3b      	ldr	r3, [pc, #236]	; (1110 <init_bmp280+0x150>)
    1022:	4798      	blx	r3
    1024:	0003      	movs	r3, r0
    1026:	001a      	movs	r2, r3
    1028:	4b36      	ldr	r3, [pc, #216]	; (1104 <init_bmp280+0x144>)
    102a:	805a      	strh	r2, [r3, #2]
		bmp280_cal_data.dig_T3 = unpack_int16(&temp[4]);
    102c:	1d3b      	adds	r3, r7, #4
    102e:	3304      	adds	r3, #4
    1030:	0018      	movs	r0, r3
    1032:	4b37      	ldr	r3, [pc, #220]	; (1110 <init_bmp280+0x150>)
    1034:	4798      	blx	r3
    1036:	0003      	movs	r3, r0
    1038:	001a      	movs	r2, r3
    103a:	4b32      	ldr	r3, [pc, #200]	; (1104 <init_bmp280+0x144>)
    103c:	809a      	strh	r2, [r3, #4]
		bmp280_cal_data.dig_P1 = unpack_uint16(&temp[6]);
    103e:	1d3b      	adds	r3, r7, #4
    1040:	3306      	adds	r3, #6
    1042:	0018      	movs	r0, r3
    1044:	4b31      	ldr	r3, [pc, #196]	; (110c <init_bmp280+0x14c>)
    1046:	4798      	blx	r3
    1048:	0003      	movs	r3, r0
    104a:	001a      	movs	r2, r3
    104c:	4b2d      	ldr	r3, [pc, #180]	; (1104 <init_bmp280+0x144>)
    104e:	80da      	strh	r2, [r3, #6]
		bmp280_cal_data.dig_P2 = unpack_int16(&temp[8]);
    1050:	1d3b      	adds	r3, r7, #4
    1052:	3308      	adds	r3, #8
    1054:	0018      	movs	r0, r3
    1056:	4b2e      	ldr	r3, [pc, #184]	; (1110 <init_bmp280+0x150>)
    1058:	4798      	blx	r3
    105a:	0003      	movs	r3, r0
    105c:	001a      	movs	r2, r3
    105e:	4b29      	ldr	r3, [pc, #164]	; (1104 <init_bmp280+0x144>)
    1060:	811a      	strh	r2, [r3, #8]
		bmp280_cal_data.dig_P3 = unpack_int16(&temp[10]);
    1062:	1d3b      	adds	r3, r7, #4
    1064:	330a      	adds	r3, #10
    1066:	0018      	movs	r0, r3
    1068:	4b29      	ldr	r3, [pc, #164]	; (1110 <init_bmp280+0x150>)
    106a:	4798      	blx	r3
    106c:	0003      	movs	r3, r0
    106e:	001a      	movs	r2, r3
    1070:	4b24      	ldr	r3, [pc, #144]	; (1104 <init_bmp280+0x144>)
    1072:	815a      	strh	r2, [r3, #10]
		bmp280_cal_data.dig_P4 = unpack_int16(&temp[12]);
    1074:	1d3b      	adds	r3, r7, #4
    1076:	330c      	adds	r3, #12
    1078:	0018      	movs	r0, r3
    107a:	4b25      	ldr	r3, [pc, #148]	; (1110 <init_bmp280+0x150>)
    107c:	4798      	blx	r3
    107e:	0003      	movs	r3, r0
    1080:	001a      	movs	r2, r3
    1082:	4b20      	ldr	r3, [pc, #128]	; (1104 <init_bmp280+0x144>)
    1084:	819a      	strh	r2, [r3, #12]
		bmp280_cal_data.dig_P5 = unpack_int16(&temp[14]);
    1086:	1d3b      	adds	r3, r7, #4
    1088:	330e      	adds	r3, #14
    108a:	0018      	movs	r0, r3
    108c:	4b20      	ldr	r3, [pc, #128]	; (1110 <init_bmp280+0x150>)
    108e:	4798      	blx	r3
    1090:	0003      	movs	r3, r0
    1092:	001a      	movs	r2, r3
    1094:	4b1b      	ldr	r3, [pc, #108]	; (1104 <init_bmp280+0x144>)
    1096:	81da      	strh	r2, [r3, #14]
		bmp280_cal_data.dig_P6 = unpack_int16(&temp[16]);
    1098:	1d3b      	adds	r3, r7, #4
    109a:	3310      	adds	r3, #16
    109c:	0018      	movs	r0, r3
    109e:	4b1c      	ldr	r3, [pc, #112]	; (1110 <init_bmp280+0x150>)
    10a0:	4798      	blx	r3
    10a2:	0003      	movs	r3, r0
    10a4:	001a      	movs	r2, r3
    10a6:	4b17      	ldr	r3, [pc, #92]	; (1104 <init_bmp280+0x144>)
    10a8:	821a      	strh	r2, [r3, #16]
		bmp280_cal_data.dig_P7 = unpack_int16(&temp[18]);
    10aa:	1d3b      	adds	r3, r7, #4
    10ac:	3312      	adds	r3, #18
    10ae:	0018      	movs	r0, r3
    10b0:	4b17      	ldr	r3, [pc, #92]	; (1110 <init_bmp280+0x150>)
    10b2:	4798      	blx	r3
    10b4:	0003      	movs	r3, r0
    10b6:	001a      	movs	r2, r3
    10b8:	4b12      	ldr	r3, [pc, #72]	; (1104 <init_bmp280+0x144>)
    10ba:	825a      	strh	r2, [r3, #18]
		bmp280_cal_data.dig_P8 = unpack_int16(&temp[20]);
    10bc:	1d3b      	adds	r3, r7, #4
    10be:	3314      	adds	r3, #20
    10c0:	0018      	movs	r0, r3
    10c2:	4b13      	ldr	r3, [pc, #76]	; (1110 <init_bmp280+0x150>)
    10c4:	4798      	blx	r3
    10c6:	0003      	movs	r3, r0
    10c8:	001a      	movs	r2, r3
    10ca:	4b0e      	ldr	r3, [pc, #56]	; (1104 <init_bmp280+0x144>)
    10cc:	829a      	strh	r2, [r3, #20]
		bmp280_cal_data.dig_P9 = unpack_int16(&temp[22]);
    10ce:	1d3b      	adds	r3, r7, #4
    10d0:	3316      	adds	r3, #22
    10d2:	0018      	movs	r0, r3
    10d4:	4b0e      	ldr	r3, [pc, #56]	; (1110 <init_bmp280+0x150>)
    10d6:	4798      	blx	r3
    10d8:	0003      	movs	r3, r0
    10da:	001a      	movs	r2, r3
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <init_bmp280+0x144>)
    10de:	82da      	strh	r2, [r3, #22]
	}

	// Configure barometer in forced mode (1 sample then sleep), 1x oversample on both for <6.4ms measurement time,
	// no filter
    bmp280_config_t config = {
    10e0:	231c      	movs	r3, #28
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	4a0b      	ldr	r2, [pc, #44]	; (1114 <init_bmp280+0x154>)
    10e6:	8812      	ldrh	r2, [r2, #0]
    10e8:	801a      	strh	r2, [r3, #0]
        .spi3w_en   = BMP280_SPI_4_WIRE,
        .osrs_t     = BMP280_TEMP_OSRS_x1,
        .osrs_p     = BMP280_PRES_OSRS_x1,
        .mode       = BMP280_MODE_FORCED,
    };
    bmp280_write_configuration(&config);
    10ea:	231c      	movs	r3, #28
    10ec:	18fb      	adds	r3, r7, r3
    10ee:	0018      	movs	r0, r3
    10f0:	4b09      	ldr	r3, [pc, #36]	; (1118 <init_bmp280+0x158>)
    10f2:	4798      	blx	r3
    10f4:	e000      	b.n	10f8 <init_bmp280+0x138>
        return;
    10f6:	46c0      	nop			; (mov r8, r8)
}
    10f8:	46bd      	mov	sp, r7
    10fa:	b009      	add	sp, #36	; 0x24
    10fc:	bd90      	pop	{r4, r7, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00001905 	.word	0x00001905
    1104:	2000002c 	.word	0x2000002c
    1108:	00004c97 	.word	0x00004c97
    110c:	00000f39 	.word	0x00000f39
    1110:	00000f7d 	.word	0x00000f7d
    1114:	00004cbc 	.word	0x00004cbc
    1118:	00000e81 	.word	0x00000e81

0000111c <bmp280_compensate_T_int32>:
	
/*!
 * \brief Temperature compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
    111c:	b580      	push	{r7, lr}
    111e:	b086      	sub	sp, #24
    1120:	af00      	add	r7, sp, #0
    1122:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	10da      	asrs	r2, r3, #3
    1128:	4b16      	ldr	r3, [pc, #88]	; (1184 <bmp280_compensate_T_int32+0x68>)
    112a:	881b      	ldrh	r3, [r3, #0]
    112c:	005b      	lsls	r3, r3, #1
    112e:	1ad3      	subs	r3, r2, r3
            ((int32_t)bmp280_cal_data.dig_T2)) >> 11;
    1130:	4a14      	ldr	r2, [pc, #80]	; (1184 <bmp280_compensate_T_int32+0x68>)
    1132:	2102      	movs	r1, #2
    1134:	5e52      	ldrsh	r2, [r2, r1]
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    1136:	4353      	muls	r3, r2
    1138:	12db      	asrs	r3, r3, #11
    113a:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    113c:	687b      	ldr	r3, [r7, #4]
    113e:	111b      	asrs	r3, r3, #4
    1140:	4a10      	ldr	r2, [pc, #64]	; (1184 <bmp280_compensate_T_int32+0x68>)
    1142:	8812      	ldrh	r2, [r2, #0]
    1144:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    1146:	687a      	ldr	r2, [r7, #4]
    1148:	1112      	asrs	r2, r2, #4
    114a:	490e      	ldr	r1, [pc, #56]	; (1184 <bmp280_compensate_T_int32+0x68>)
    114c:	8809      	ldrh	r1, [r1, #0]
    114e:	1a52      	subs	r2, r2, r1
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    1150:	4353      	muls	r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    1152:	131b      	asrs	r3, r3, #12
            ((int32_t)bmp280_cal_data.dig_T3)) >> 14;
    1154:	4a0b      	ldr	r2, [pc, #44]	; (1184 <bmp280_compensate_T_int32+0x68>)
    1156:	2104      	movs	r1, #4
    1158:	5e52      	ldrsh	r2, [r2, r1]
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    115a:	4353      	muls	r3, r2
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    115c:	139b      	asrs	r3, r3, #14
    115e:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
    1160:	697a      	ldr	r2, [r7, #20]
    1162:	693b      	ldr	r3, [r7, #16]
    1164:	18d2      	adds	r2, r2, r3
    1166:	4b08      	ldr	r3, [pc, #32]	; (1188 <bmp280_compensate_T_int32+0x6c>)
    1168:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
    116a:	4b07      	ldr	r3, [pc, #28]	; (1188 <bmp280_compensate_T_int32+0x6c>)
    116c:	681a      	ldr	r2, [r3, #0]
    116e:	0013      	movs	r3, r2
    1170:	009b      	lsls	r3, r3, #2
    1172:	189b      	adds	r3, r3, r2
    1174:	3380      	adds	r3, #128	; 0x80
    1176:	121b      	asrs	r3, r3, #8
    1178:	60fb      	str	r3, [r7, #12]
    return T;
    117a:	68fb      	ldr	r3, [r7, #12]
}
    117c:	0018      	movs	r0, r3
    117e:	46bd      	mov	sp, r7
    1180:	b006      	add	sp, #24
    1182:	bd80      	pop	{r7, pc}
    1184:	2000002c 	.word	0x2000002c
    1188:	20000044 	.word	0x20000044

0000118c <bmp280_compensate_P_int32>:

/*!
 * \brief Pressure compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
    118c:	b5f0      	push	{r4, r5, r6, r7, lr}
    118e:	b0ab      	sub	sp, #172	; 0xac
    1190:	af00      	add	r7, sp, #0
    1192:	238c      	movs	r3, #140	; 0x8c
    1194:	18fb      	adds	r3, r7, r3
    1196:	6018      	str	r0, [r3, #0]
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
    1198:	4bd0      	ldr	r3, [pc, #832]	; (14dc <bmp280_compensate_P_int32+0x350>)
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	0019      	movs	r1, r3
    119e:	17db      	asrs	r3, r3, #31
    11a0:	001a      	movs	r2, r3
    11a2:	4bcf      	ldr	r3, [pc, #828]	; (14e0 <bmp280_compensate_P_int32+0x354>)
    11a4:	2401      	movs	r4, #1
    11a6:	4264      	negs	r4, r4
    11a8:	185b      	adds	r3, r3, r1
    11aa:	4154      	adcs	r4, r2
    11ac:	22a0      	movs	r2, #160	; 0xa0
    11ae:	18ba      	adds	r2, r7, r2
    11b0:	6013      	str	r3, [r2, #0]
    11b2:	6054      	str	r4, [r2, #4]
    var2 = var1 * var1 * (int64_t)bmp280_cal_data.dig_P6;
    11b4:	4ccb      	ldr	r4, [pc, #812]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    11b6:	23a0      	movs	r3, #160	; 0xa0
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	685b      	ldr	r3, [r3, #4]
    11be:	21a0      	movs	r1, #160	; 0xa0
    11c0:	1879      	adds	r1, r7, r1
    11c2:	6808      	ldr	r0, [r1, #0]
    11c4:	6849      	ldr	r1, [r1, #4]
    11c6:	47a0      	blx	r4
    11c8:	0003      	movs	r3, r0
    11ca:	000c      	movs	r4, r1
    11cc:	0018      	movs	r0, r3
    11ce:	0021      	movs	r1, r4
    11d0:	4bc5      	ldr	r3, [pc, #788]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    11d2:	2210      	movs	r2, #16
    11d4:	5e9b      	ldrsh	r3, [r3, r2]
    11d6:	653b      	str	r3, [r7, #80]	; 0x50
    11d8:	17db      	asrs	r3, r3, #31
    11da:	657b      	str	r3, [r7, #84]	; 0x54
    11dc:	4cc1      	ldr	r4, [pc, #772]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    11de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    11e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11e2:	47a0      	blx	r4
    11e4:	0003      	movs	r3, r0
    11e6:	000c      	movs	r4, r1
    11e8:	2298      	movs	r2, #152	; 0x98
    11ea:	18ba      	adds	r2, r7, r2
    11ec:	6013      	str	r3, [r2, #0]
    11ee:	6054      	str	r4, [r2, #4]
    var2 = var2 + ((var1 * (int64_t)bmp280_cal_data.dig_P5) << 17);
    11f0:	4bbd      	ldr	r3, [pc, #756]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    11f2:	220e      	movs	r2, #14
    11f4:	5e9b      	ldrsh	r3, [r3, r2]
    11f6:	64bb      	str	r3, [r7, #72]	; 0x48
    11f8:	17db      	asrs	r3, r3, #31
    11fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    11fc:	4cb9      	ldr	r4, [pc, #740]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    11fe:	23a0      	movs	r3, #160	; 0xa0
    1200:	18fb      	adds	r3, r7, r3
    1202:	681a      	ldr	r2, [r3, #0]
    1204:	685b      	ldr	r3, [r3, #4]
    1206:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    1208:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    120a:	47a0      	blx	r4
    120c:	0003      	movs	r3, r0
    120e:	000c      	movs	r4, r1
    1210:	0bda      	lsrs	r2, r3, #15
    1212:	0466      	lsls	r6, r4, #17
    1214:	4316      	orrs	r6, r2
    1216:	045d      	lsls	r5, r3, #17
    1218:	2398      	movs	r3, #152	; 0x98
    121a:	18fb      	adds	r3, r7, r3
    121c:	685c      	ldr	r4, [r3, #4]
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	195b      	adds	r3, r3, r5
    1222:	4174      	adcs	r4, r6
    1224:	2298      	movs	r2, #152	; 0x98
    1226:	18ba      	adds	r2, r7, r2
    1228:	6013      	str	r3, [r2, #0]
    122a:	6054      	str	r4, [r2, #4]
    var2 = var2 + (((int64_t)bmp280_cal_data.dig_P4) << 35);
    122c:	4bae      	ldr	r3, [pc, #696]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    122e:	220c      	movs	r2, #12
    1230:	5e9b      	ldrsh	r3, [r3, r2]
    1232:	643b      	str	r3, [r7, #64]	; 0x40
    1234:	17db      	asrs	r3, r3, #31
    1236:	647b      	str	r3, [r7, #68]	; 0x44
    1238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    123a:	00db      	lsls	r3, r3, #3
    123c:	63fb      	str	r3, [r7, #60]	; 0x3c
    123e:	2300      	movs	r3, #0
    1240:	63bb      	str	r3, [r7, #56]	; 0x38
    1242:	2398      	movs	r3, #152	; 0x98
    1244:	18fb      	adds	r3, r7, r3
    1246:	685c      	ldr	r4, [r3, #4]
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    124c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    124e:	185b      	adds	r3, r3, r1
    1250:	4154      	adcs	r4, r2
    1252:	2298      	movs	r2, #152	; 0x98
    1254:	18ba      	adds	r2, r7, r2
    1256:	6013      	str	r3, [r2, #0]
    1258:	6054      	str	r4, [r2, #4]
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    125a:	4ca2      	ldr	r4, [pc, #648]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    125c:	23a0      	movs	r3, #160	; 0xa0
    125e:	18fb      	adds	r3, r7, r3
    1260:	681a      	ldr	r2, [r3, #0]
    1262:	685b      	ldr	r3, [r3, #4]
    1264:	21a0      	movs	r1, #160	; 0xa0
    1266:	1879      	adds	r1, r7, r1
    1268:	6808      	ldr	r0, [r1, #0]
    126a:	6849      	ldr	r1, [r1, #4]
    126c:	47a0      	blx	r4
    126e:	0003      	movs	r3, r0
    1270:	000c      	movs	r4, r1
    1272:	0018      	movs	r0, r3
    1274:	0021      	movs	r1, r4
    1276:	4b9c      	ldr	r3, [pc, #624]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    1278:	220a      	movs	r2, #10
    127a:	5e9b      	ldrsh	r3, [r3, r2]
    127c:	633b      	str	r3, [r7, #48]	; 0x30
    127e:	17db      	asrs	r3, r3, #31
    1280:	637b      	str	r3, [r7, #52]	; 0x34
    1282:	4c98      	ldr	r4, [pc, #608]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    1284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1288:	47a0      	blx	r4
    128a:	0003      	movs	r3, r0
    128c:	000c      	movs	r4, r1
    128e:	0622      	lsls	r2, r4, #24
    1290:	0a19      	lsrs	r1, r3, #8
    1292:	2080      	movs	r0, #128	; 0x80
    1294:	1838      	adds	r0, r7, r0
    1296:	6001      	str	r1, [r0, #0]
    1298:	2180      	movs	r1, #128	; 0x80
    129a:	1879      	adds	r1, r7, r1
    129c:	6809      	ldr	r1, [r1, #0]
    129e:	4311      	orrs	r1, r2
    12a0:	2280      	movs	r2, #128	; 0x80
    12a2:	18ba      	adds	r2, r7, r2
    12a4:	6011      	str	r1, [r2, #0]
    12a6:	1223      	asrs	r3, r4, #8
    12a8:	2284      	movs	r2, #132	; 0x84
    12aa:	18ba      	adds	r2, r7, r2
    12ac:	6013      	str	r3, [r2, #0]
            ((var1 * (int64_t)bmp280_cal_data.dig_P2) << 12);
    12ae:	4b8e      	ldr	r3, [pc, #568]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    12b0:	2208      	movs	r2, #8
    12b2:	5e9b      	ldrsh	r3, [r3, r2]
    12b4:	62bb      	str	r3, [r7, #40]	; 0x28
    12b6:	17db      	asrs	r3, r3, #31
    12b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    12ba:	4c8a      	ldr	r4, [pc, #552]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    12bc:	23a0      	movs	r3, #160	; 0xa0
    12be:	18fb      	adds	r3, r7, r3
    12c0:	681a      	ldr	r2, [r3, #0]
    12c2:	685b      	ldr	r3, [r3, #4]
    12c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    12c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    12c8:	47a0      	blx	r4
    12ca:	0003      	movs	r3, r0
    12cc:	000c      	movs	r4, r1
    12ce:	0d1a      	lsrs	r2, r3, #20
    12d0:	0321      	lsls	r1, r4, #12
    12d2:	67f9      	str	r1, [r7, #124]	; 0x7c
    12d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    12d6:	4311      	orrs	r1, r2
    12d8:	67f9      	str	r1, [r7, #124]	; 0x7c
    12da:	031b      	lsls	r3, r3, #12
    12dc:	67bb      	str	r3, [r7, #120]	; 0x78
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    12de:	2380      	movs	r3, #128	; 0x80
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	685c      	ldr	r4, [r3, #4]
    12e4:	681b      	ldr	r3, [r3, #0]
    12e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    12e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    12ea:	185b      	adds	r3, r3, r1
    12ec:	4154      	adcs	r4, r2
    12ee:	22a0      	movs	r2, #160	; 0xa0
    12f0:	18ba      	adds	r2, r7, r2
    12f2:	6013      	str	r3, [r2, #0]
    12f4:	6054      	str	r4, [r2, #4]
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280_cal_data.dig_P1) >> 33;
    12f6:	23a0      	movs	r3, #160	; 0xa0
    12f8:	18fb      	adds	r3, r7, r3
    12fa:	6819      	ldr	r1, [r3, #0]
    12fc:	685a      	ldr	r2, [r3, #4]
    12fe:	2300      	movs	r3, #0
    1300:	2480      	movs	r4, #128	; 0x80
    1302:	0224      	lsls	r4, r4, #8
    1304:	18c9      	adds	r1, r1, r3
    1306:	4162      	adcs	r2, r4
    1308:	0008      	movs	r0, r1
    130a:	0011      	movs	r1, r2
    130c:	4b76      	ldr	r3, [pc, #472]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    130e:	88db      	ldrh	r3, [r3, #6]
    1310:	623b      	str	r3, [r7, #32]
    1312:	2300      	movs	r3, #0
    1314:	627b      	str	r3, [r7, #36]	; 0x24
    1316:	4c73      	ldr	r4, [pc, #460]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    1318:	6a3a      	ldr	r2, [r7, #32]
    131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    131c:	47a0      	blx	r4
    131e:	0003      	movs	r3, r0
    1320:	000c      	movs	r4, r1
    1322:	1062      	asrs	r2, r4, #1
    1324:	21a0      	movs	r1, #160	; 0xa0
    1326:	1879      	adds	r1, r7, r1
    1328:	600a      	str	r2, [r1, #0]
    132a:	17e3      	asrs	r3, r4, #31
    132c:	22a4      	movs	r2, #164	; 0xa4
    132e:	18ba      	adds	r2, r7, r2
    1330:	6013      	str	r3, [r2, #0]
    if (var1 == 0)
    1332:	23a0      	movs	r3, #160	; 0xa0
    1334:	18fb      	adds	r3, r7, r3
    1336:	681a      	ldr	r2, [r3, #0]
    1338:	23a4      	movs	r3, #164	; 0xa4
    133a:	18fb      	adds	r3, r7, r3
    133c:	681b      	ldr	r3, [r3, #0]
    133e:	431a      	orrs	r2, r3
    1340:	d101      	bne.n	1346 <bmp280_compensate_P_int32+0x1ba>
    {
        return 0; // Avoid exception caused by division by zero.
    1342:	2300      	movs	r3, #0
    1344:	e0c6      	b.n	14d4 <bmp280_compensate_P_int32+0x348>
    }
    p = 1048576 - adc_P;
    1346:	238c      	movs	r3, #140	; 0x8c
    1348:	18fb      	adds	r3, r7, r3
    134a:	681a      	ldr	r2, [r3, #0]
    134c:	2380      	movs	r3, #128	; 0x80
    134e:	035b      	lsls	r3, r3, #13
    1350:	1a9b      	subs	r3, r3, r2
    1352:	2290      	movs	r2, #144	; 0x90
    1354:	18ba      	adds	r2, r7, r2
    1356:	6013      	str	r3, [r2, #0]
    1358:	17db      	asrs	r3, r3, #31
    135a:	2294      	movs	r2, #148	; 0x94
    135c:	18ba      	adds	r2, r7, r2
    135e:	6013      	str	r3, [r2, #0]
    p = (((p << 31) - var2) * 3125) / var1;
    1360:	2390      	movs	r3, #144	; 0x90
    1362:	18fb      	adds	r3, r7, r3
    1364:	681b      	ldr	r3, [r3, #0]
    1366:	105b      	asrs	r3, r3, #1
    1368:	61fb      	str	r3, [r7, #28]
    136a:	2390      	movs	r3, #144	; 0x90
    136c:	18fb      	adds	r3, r7, r3
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	07db      	lsls	r3, r3, #31
    1372:	61bb      	str	r3, [r7, #24]
    1374:	2398      	movs	r3, #152	; 0x98
    1376:	18fb      	adds	r3, r7, r3
    1378:	685c      	ldr	r4, [r3, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	69b8      	ldr	r0, [r7, #24]
    137e:	69f9      	ldr	r1, [r7, #28]
    1380:	1ac0      	subs	r0, r0, r3
    1382:	41a1      	sbcs	r1, r4
    1384:	4c57      	ldr	r4, [pc, #348]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    1386:	4a59      	ldr	r2, [pc, #356]	; (14ec <bmp280_compensate_P_int32+0x360>)
    1388:	2300      	movs	r3, #0
    138a:	47a0      	blx	r4
    138c:	0003      	movs	r3, r0
    138e:	000c      	movs	r4, r1
    1390:	0018      	movs	r0, r3
    1392:	0021      	movs	r1, r4
    1394:	4c56      	ldr	r4, [pc, #344]	; (14f0 <bmp280_compensate_P_int32+0x364>)
    1396:	23a0      	movs	r3, #160	; 0xa0
    1398:	18fb      	adds	r3, r7, r3
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	685b      	ldr	r3, [r3, #4]
    139e:	47a0      	blx	r4
    13a0:	0003      	movs	r3, r0
    13a2:	000c      	movs	r4, r1
    13a4:	2290      	movs	r2, #144	; 0x90
    13a6:	18ba      	adds	r2, r7, r2
    13a8:	6013      	str	r3, [r2, #0]
    13aa:	6054      	str	r4, [r2, #4]
    var1 = (((int64_t)bmp280_cal_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    13ac:	4b4e      	ldr	r3, [pc, #312]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    13ae:	2216      	movs	r2, #22
    13b0:	5e9b      	ldrsh	r3, [r3, r2]
    13b2:	613b      	str	r3, [r7, #16]
    13b4:	17db      	asrs	r3, r3, #31
    13b6:	617b      	str	r3, [r7, #20]
    13b8:	2394      	movs	r3, #148	; 0x94
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	681b      	ldr	r3, [r3, #0]
    13be:	04da      	lsls	r2, r3, #19
    13c0:	2390      	movs	r3, #144	; 0x90
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	0b5b      	lsrs	r3, r3, #13
    13c8:	673b      	str	r3, [r7, #112]	; 0x70
    13ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    13cc:	4313      	orrs	r3, r2
    13ce:	673b      	str	r3, [r7, #112]	; 0x70
    13d0:	2394      	movs	r3, #148	; 0x94
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	135b      	asrs	r3, r3, #13
    13d8:	677b      	str	r3, [r7, #116]	; 0x74
    13da:	4c42      	ldr	r4, [pc, #264]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    13dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    13de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    13e0:	6938      	ldr	r0, [r7, #16]
    13e2:	6979      	ldr	r1, [r7, #20]
    13e4:	47a0      	blx	r4
    13e6:	0003      	movs	r3, r0
    13e8:	000c      	movs	r4, r1
    13ea:	0018      	movs	r0, r3
    13ec:	0021      	movs	r1, r4
    13ee:	2394      	movs	r3, #148	; 0x94
    13f0:	18fb      	adds	r3, r7, r3
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	04da      	lsls	r2, r3, #19
    13f6:	2390      	movs	r3, #144	; 0x90
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	681b      	ldr	r3, [r3, #0]
    13fc:	0b5b      	lsrs	r3, r3, #13
    13fe:	66bb      	str	r3, [r7, #104]	; 0x68
    1400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1402:	4313      	orrs	r3, r2
    1404:	66bb      	str	r3, [r7, #104]	; 0x68
    1406:	2394      	movs	r3, #148	; 0x94
    1408:	18fb      	adds	r3, r7, r3
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	135b      	asrs	r3, r3, #13
    140e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1410:	4c34      	ldr	r4, [pc, #208]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    1412:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1416:	47a0      	blx	r4
    1418:	0003      	movs	r3, r0
    141a:	000c      	movs	r4, r1
    141c:	01e2      	lsls	r2, r4, #7
    141e:	0e59      	lsrs	r1, r3, #25
    1420:	430a      	orrs	r2, r1
    1422:	21a0      	movs	r1, #160	; 0xa0
    1424:	1879      	adds	r1, r7, r1
    1426:	600a      	str	r2, [r1, #0]
    1428:	1663      	asrs	r3, r4, #25
    142a:	22a4      	movs	r2, #164	; 0xa4
    142c:	18ba      	adds	r2, r7, r2
    142e:	6013      	str	r3, [r2, #0]
    var2 = (((int64_t)bmp280_cal_data.dig_P8) * p) >> 19;
    1430:	4b2d      	ldr	r3, [pc, #180]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    1432:	2214      	movs	r2, #20
    1434:	5e9b      	ldrsh	r3, [r3, r2]
    1436:	60bb      	str	r3, [r7, #8]
    1438:	17db      	asrs	r3, r3, #31
    143a:	60fb      	str	r3, [r7, #12]
    143c:	4c29      	ldr	r4, [pc, #164]	; (14e4 <bmp280_compensate_P_int32+0x358>)
    143e:	2390      	movs	r3, #144	; 0x90
    1440:	18fb      	adds	r3, r7, r3
    1442:	681a      	ldr	r2, [r3, #0]
    1444:	685b      	ldr	r3, [r3, #4]
    1446:	68b8      	ldr	r0, [r7, #8]
    1448:	68f9      	ldr	r1, [r7, #12]
    144a:	47a0      	blx	r4
    144c:	0003      	movs	r3, r0
    144e:	000c      	movs	r4, r1
    1450:	0362      	lsls	r2, r4, #13
    1452:	0cd9      	lsrs	r1, r3, #19
    1454:	430a      	orrs	r2, r1
    1456:	2198      	movs	r1, #152	; 0x98
    1458:	1879      	adds	r1, r7, r1
    145a:	600a      	str	r2, [r1, #0]
    145c:	14e3      	asrs	r3, r4, #19
    145e:	229c      	movs	r2, #156	; 0x9c
    1460:	18ba      	adds	r2, r7, r2
    1462:	6013      	str	r3, [r2, #0]
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280_cal_data.dig_P7) << 4);
    1464:	2390      	movs	r3, #144	; 0x90
    1466:	18fb      	adds	r3, r7, r3
    1468:	6819      	ldr	r1, [r3, #0]
    146a:	685a      	ldr	r2, [r3, #4]
    146c:	23a0      	movs	r3, #160	; 0xa0
    146e:	18fb      	adds	r3, r7, r3
    1470:	685c      	ldr	r4, [r3, #4]
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	18c9      	adds	r1, r1, r3
    1476:	4162      	adcs	r2, r4
    1478:	2398      	movs	r3, #152	; 0x98
    147a:	18fb      	adds	r3, r7, r3
    147c:	685c      	ldr	r4, [r3, #4]
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	185b      	adds	r3, r3, r1
    1482:	4154      	adcs	r4, r2
    1484:	0622      	lsls	r2, r4, #24
    1486:	0a19      	lsrs	r1, r3, #8
    1488:	6639      	str	r1, [r7, #96]	; 0x60
    148a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    148c:	4311      	orrs	r1, r2
    148e:	6639      	str	r1, [r7, #96]	; 0x60
    1490:	1223      	asrs	r3, r4, #8
    1492:	667b      	str	r3, [r7, #100]	; 0x64
    1494:	4b14      	ldr	r3, [pc, #80]	; (14e8 <bmp280_compensate_P_int32+0x35c>)
    1496:	2212      	movs	r2, #18
    1498:	5e9b      	ldrsh	r3, [r3, r2]
    149a:	603b      	str	r3, [r7, #0]
    149c:	17db      	asrs	r3, r3, #31
    149e:	607b      	str	r3, [r7, #4]
    14a0:	6839      	ldr	r1, [r7, #0]
    14a2:	687a      	ldr	r2, [r7, #4]
    14a4:	000b      	movs	r3, r1
    14a6:	0f1b      	lsrs	r3, r3, #28
    14a8:	0010      	movs	r0, r2
    14aa:	0100      	lsls	r0, r0, #4
    14ac:	65f8      	str	r0, [r7, #92]	; 0x5c
    14ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    14b0:	4318      	orrs	r0, r3
    14b2:	65f8      	str	r0, [r7, #92]	; 0x5c
    14b4:	000b      	movs	r3, r1
    14b6:	011b      	lsls	r3, r3, #4
    14b8:	65bb      	str	r3, [r7, #88]	; 0x58
    14ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    14bc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    14be:	6db9      	ldr	r1, [r7, #88]	; 0x58
    14c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    14c2:	185b      	adds	r3, r3, r1
    14c4:	4154      	adcs	r4, r2
    14c6:	2290      	movs	r2, #144	; 0x90
    14c8:	18ba      	adds	r2, r7, r2
    14ca:	6013      	str	r3, [r2, #0]
    14cc:	6054      	str	r4, [r2, #4]
    return (uint32_t)p;
    14ce:	2390      	movs	r3, #144	; 0x90
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	681b      	ldr	r3, [r3, #0]
}
    14d4:	0018      	movs	r0, r3
    14d6:	46bd      	mov	sp, r7
    14d8:	b02b      	add	sp, #172	; 0xac
    14da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14dc:	20000044 	.word	0x20000044
    14e0:	fffe0c00 	.word	0xfffe0c00
    14e4:	00002e01 	.word	0x00002e01
    14e8:	2000002c 	.word	0x2000002c
    14ec:	00000c35 	.word	0x00000c35
    14f0:	00002d79 	.word	0x00002d79

000014f4 <read_bmp280>:

/*!
 * \brief Gets BMP280 readings in Pa and deg C
 */
void read_bmp280(bmp280_meas_t * meas)
{
    14f4:	b590      	push	{r4, r7, lr}
    14f6:	b085      	sub	sp, #20
    14f8:	af00      	add	r7, sp, #0
    14fa:	6078      	str	r0, [r7, #4]
	bmp280_raw_data_t raw_data;
	read_bmp280_integer(&raw_data);
    14fc:	2308      	movs	r3, #8
    14fe:	18fb      	adds	r3, r7, r3
    1500:	0018      	movs	r0, r3
    1502:	4b18      	ldr	r3, [pc, #96]	; (1564 <read_bmp280+0x70>)
    1504:	4798      	blx	r3
	
	// Convert to Pascal and degrees C
	meas->pressure = raw_data.P / 256.0;
    1506:	2308      	movs	r3, #8
    1508:	18fb      	adds	r3, r7, r3
    150a:	681a      	ldr	r2, [r3, #0]
    150c:	4b16      	ldr	r3, [pc, #88]	; (1568 <read_bmp280+0x74>)
    150e:	0010      	movs	r0, r2
    1510:	4798      	blx	r3
    1512:	4c16      	ldr	r4, [pc, #88]	; (156c <read_bmp280+0x78>)
    1514:	2200      	movs	r2, #0
    1516:	4b16      	ldr	r3, [pc, #88]	; (1570 <read_bmp280+0x7c>)
    1518:	47a0      	blx	r4
    151a:	0003      	movs	r3, r0
    151c:	000c      	movs	r4, r1
    151e:	0019      	movs	r1, r3
    1520:	0022      	movs	r2, r4
    1522:	4b14      	ldr	r3, [pc, #80]	; (1574 <read_bmp280+0x80>)
    1524:	0008      	movs	r0, r1
    1526:	0011      	movs	r1, r2
    1528:	4798      	blx	r3
    152a:	1c02      	adds	r2, r0, #0
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	601a      	str	r2, [r3, #0]
	meas->temp = raw_data.T * 0.01;
    1530:	2308      	movs	r3, #8
    1532:	18fb      	adds	r3, r7, r3
    1534:	685a      	ldr	r2, [r3, #4]
    1536:	4b10      	ldr	r3, [pc, #64]	; (1578 <read_bmp280+0x84>)
    1538:	0010      	movs	r0, r2
    153a:	4798      	blx	r3
    153c:	4c0f      	ldr	r4, [pc, #60]	; (157c <read_bmp280+0x88>)
    153e:	4a10      	ldr	r2, [pc, #64]	; (1580 <read_bmp280+0x8c>)
    1540:	4b10      	ldr	r3, [pc, #64]	; (1584 <read_bmp280+0x90>)
    1542:	47a0      	blx	r4
    1544:	0003      	movs	r3, r0
    1546:	000c      	movs	r4, r1
    1548:	0019      	movs	r1, r3
    154a:	0022      	movs	r2, r4
    154c:	4b09      	ldr	r3, [pc, #36]	; (1574 <read_bmp280+0x80>)
    154e:	0008      	movs	r0, r1
    1550:	0011      	movs	r1, r2
    1552:	4798      	blx	r3
    1554:	1c02      	adds	r2, r0, #0
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	605a      	str	r2, [r3, #4]
}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	46bd      	mov	sp, r7
    155e:	b005      	add	sp, #20
    1560:	bd90      	pop	{r4, r7, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	00001589 	.word	0x00001589
    1568:	000048ad 	.word	0x000048ad
    156c:	0000362d 	.word	0x0000362d
    1570:	40700000 	.word	0x40700000
    1574:	0000491d 	.word	0x0000491d
    1578:	00004829 	.word	0x00004829
    157c:	00003c95 	.word	0x00003c95
    1580:	47ae147b 	.word	0x47ae147b
    1584:	3f847ae1 	.word	0x3f847ae1

00001588 <read_bmp280_integer>:

/*!
 * \brief Gets BMP280 readings in integer units for faster speed
 */
void read_bmp280_integer(bmp280_raw_data_t * meas)
{
    1588:	b590      	push	{r4, r7, lr}
    158a:	b087      	sub	sp, #28
    158c:	af00      	add	r7, sp, #0
    158e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6] = {0};
    1590:	2310      	movs	r3, #16
    1592:	18fb      	adds	r3, r7, r3
    1594:	0018      	movs	r0, r3
    1596:	2306      	movs	r3, #6
    1598:	001a      	movs	r2, r3
    159a:	2100      	movs	r1, #0
    159c:	4b24      	ldr	r3, [pc, #144]	; (1630 <read_bmp280_integer+0xa8>)
    159e:	4798      	blx	r3
	i2c_read_bytes(buffer, 6, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB);
    15a0:	2310      	movs	r3, #16
    15a2:	18f8      	adds	r0, r7, r3
    15a4:	23f7      	movs	r3, #247	; 0xf7
    15a6:	2276      	movs	r2, #118	; 0x76
    15a8:	2106      	movs	r1, #6
    15aa:	4c22      	ldr	r4, [pc, #136]	; (1634 <read_bmp280_integer+0xac>)
    15ac:	47a0      	blx	r4
		uint32_t i;
		uint8_t b[4];
	} UT, UP;

	// Parse uncompensated pressure measurement.
	UP.b[0] = *(buffer+2);
    15ae:	2310      	movs	r3, #16
    15b0:	18fb      	adds	r3, r7, r3
    15b2:	789a      	ldrb	r2, [r3, #2]
    15b4:	2308      	movs	r3, #8
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	701a      	strb	r2, [r3, #0]
	UP.b[1] = *(buffer+1);
    15ba:	2310      	movs	r3, #16
    15bc:	18fb      	adds	r3, r7, r3
    15be:	785a      	ldrb	r2, [r3, #1]
    15c0:	2308      	movs	r3, #8
    15c2:	18fb      	adds	r3, r7, r3
    15c4:	705a      	strb	r2, [r3, #1]
	UP.b[2] = *buffer;
    15c6:	2310      	movs	r3, #16
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	781a      	ldrb	r2, [r3, #0]
    15cc:	2308      	movs	r3, #8
    15ce:	18fb      	adds	r3, r7, r3
    15d0:	709a      	strb	r2, [r3, #2]
	UP.i = (UP.i >> 4) & 0xFFFFFul;
    15d2:	68bb      	ldr	r3, [r7, #8]
    15d4:	091b      	lsrs	r3, r3, #4
    15d6:	031b      	lsls	r3, r3, #12
    15d8:	0b1b      	lsrs	r3, r3, #12
    15da:	60bb      	str	r3, [r7, #8]

	// Parse uncompensated temperature measurement.
	UT.b[0] = *(buffer+5);
    15dc:	2310      	movs	r3, #16
    15de:	18fb      	adds	r3, r7, r3
    15e0:	795a      	ldrb	r2, [r3, #5]
    15e2:	230c      	movs	r3, #12
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	701a      	strb	r2, [r3, #0]
	UT.b[1] = *(buffer+4);
    15e8:	2310      	movs	r3, #16
    15ea:	18fb      	adds	r3, r7, r3
    15ec:	791a      	ldrb	r2, [r3, #4]
    15ee:	230c      	movs	r3, #12
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	705a      	strb	r2, [r3, #1]
	UT.b[2] = *(buffer+3);
    15f4:	2310      	movs	r3, #16
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	78da      	ldrb	r2, [r3, #3]
    15fa:	230c      	movs	r3, #12
    15fc:	18fb      	adds	r3, r7, r3
    15fe:	709a      	strb	r2, [r3, #2]
	UT.i = (UT.i >> 4) & 0xFFFFFul;
    1600:	68fb      	ldr	r3, [r7, #12]
    1602:	091b      	lsrs	r3, r3, #4
    1604:	031b      	lsls	r3, r3, #12
    1606:	0b1b      	lsrs	r3, r3, #12
    1608:	60fb      	str	r3, [r7, #12]

	// Perform pressure/temperature compensation.
	meas->T = bmp280_compensate_T_int32(UT.i);
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	0018      	movs	r0, r3
    160e:	4b0a      	ldr	r3, [pc, #40]	; (1638 <read_bmp280_integer+0xb0>)
    1610:	4798      	blx	r3
    1612:	0002      	movs	r2, r0
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	605a      	str	r2, [r3, #4]
	meas->P = (int32_t)bmp280_compensate_P_int32(UP.i);
    1618:	68bb      	ldr	r3, [r7, #8]
    161a:	0018      	movs	r0, r3
    161c:	4b07      	ldr	r3, [pc, #28]	; (163c <read_bmp280_integer+0xb4>)
    161e:	4798      	blx	r3
    1620:	0002      	movs	r2, r0
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	601a      	str	r2, [r3, #0]
}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	46bd      	mov	sp, r7
    162a:	b007      	add	sp, #28
    162c:	bd90      	pop	{r4, r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	00004c97 	.word	0x00004c97
    1634:	00001905 	.word	0x00001905
    1638:	0000111d 	.word	0x0000111d
    163c:	0000118d 	.word	0x0000118d

00001640 <i2c_master_is_syncing>:
{
    1640:	b580      	push	{r7, lr}
    1642:	b084      	sub	sp, #16
    1644:	af00      	add	r7, sp, #0
    1646:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	69db      	ldr	r3, [r3, #28]
    1652:	2207      	movs	r2, #7
    1654:	4013      	ands	r3, r2
    1656:	1e5a      	subs	r2, r3, #1
    1658:	4193      	sbcs	r3, r2
    165a:	b2db      	uxtb	r3, r3
}
    165c:	0018      	movs	r0, r3
    165e:	46bd      	mov	sp, r7
    1660:	b004      	add	sp, #16
    1662:	bd80      	pop	{r7, pc}

00001664 <_i2c_master_wait_for_sync>:
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    166c:	46c0      	nop			; (mov r8, r8)
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	0018      	movs	r0, r3
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <_i2c_master_wait_for_sync+0x20>)
    1674:	4798      	blx	r3
    1676:	1e03      	subs	r3, r0, #0
    1678:	d1f9      	bne.n	166e <_i2c_master_wait_for_sync+0xa>
}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	46bd      	mov	sp, r7
    167e:	b002      	add	sp, #8
    1680:	bd80      	pop	{r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	00001641 	.word	0x00001641

00001688 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    1688:	b580      	push	{r7, lr}
    168a:	b082      	sub	sp, #8
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	2264      	movs	r2, #100	; 0x64
    1694:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	4a1b      	ldr	r2, [pc, #108]	; (1708 <i2c_master_get_config_defaults+0x80>)
    169a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	2200      	movs	r2, #0
    16a0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2200      	movs	r2, #0
    16a6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	2200      	movs	r2, #0
    16ac:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	2280      	movs	r2, #128	; 0x80
    16b2:	0392      	lsls	r2, r2, #14
    16b4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	2201      	movs	r2, #1
    16ba:	4252      	negs	r2, r2
    16bc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	2201      	movs	r2, #1
    16c2:	4252      	negs	r2, r2
    16c4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	2200      	movs	r2, #0
    16ca:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	2200      	movs	r2, #0
    16d0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	2224      	movs	r2, #36	; 0x24
    16d6:	2100      	movs	r1, #0
    16d8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	2200      	movs	r2, #0
    16de:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	222c      	movs	r2, #44	; 0x2c
    16e4:	2100      	movs	r1, #0
    16e6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	222d      	movs	r2, #45	; 0x2d
    16ec:	2100      	movs	r1, #0
    16ee:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	222e      	movs	r2, #46	; 0x2e
    16f4:	2100      	movs	r1, #0
    16f6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	22d7      	movs	r2, #215	; 0xd7
    16fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	46bd      	mov	sp, r7
    1702:	b002      	add	sp, #8
    1704:	bd80      	pop	{r7, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	00000d48 	.word	0x00000d48

0000170c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    170c:	b580      	push	{r7, lr}
    170e:	b084      	sub	sp, #16
    1710:	af00      	add	r7, sp, #0
    1712:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    171a:	2300      	movs	r3, #0
    171c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	0018      	movs	r0, r3
    1722:	4b10      	ldr	r3, [pc, #64]	; (1764 <i2c_master_enable+0x58>)
    1724:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1726:	68bb      	ldr	r3, [r7, #8]
    1728:	681b      	ldr	r3, [r3, #0]
    172a:	2202      	movs	r2, #2
    172c:	431a      	orrs	r2, r3
    172e:	68bb      	ldr	r3, [r7, #8]
    1730:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1732:	e00c      	b.n	174e <i2c_master_enable+0x42>
		timeout_counter++;
    1734:	68fb      	ldr	r3, [r7, #12]
    1736:	3301      	adds	r3, #1
    1738:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	88db      	ldrh	r3, [r3, #6]
    173e:	001a      	movs	r2, r3
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	429a      	cmp	r2, r3
    1744:	d803      	bhi.n	174e <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1746:	68bb      	ldr	r3, [r7, #8]
    1748:	2210      	movs	r2, #16
    174a:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    174c:	e006      	b.n	175c <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    174e:	68bb      	ldr	r3, [r7, #8]
    1750:	8b5b      	ldrh	r3, [r3, #26]
    1752:	b29b      	uxth	r3, r3
    1754:	001a      	movs	r2, r3
    1756:	2310      	movs	r3, #16
    1758:	4013      	ands	r3, r2
    175a:	d0eb      	beq.n	1734 <i2c_master_enable+0x28>
		}
	}
}
    175c:	46bd      	mov	sp, r7
    175e:	b004      	add	sp, #16
    1760:	bd80      	pop	{r7, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00001665 	.word	0x00001665

00001768 <i2c_interface_init>:

 static struct i2c_master_config config;
 static struct i2c_master_module module;

 void i2c_interface_init(void)
 {
    1768:	b580      	push	{r7, lr}
    176a:	af00      	add	r7, sp, #0
	i2c_master_get_config_defaults(&config);
    176c:	4b10      	ldr	r3, [pc, #64]	; (17b0 <i2c_interface_init+0x48>)
    176e:	0018      	movs	r0, r3
    1770:	4b10      	ldr	r3, [pc, #64]	; (17b4 <i2c_interface_init+0x4c>)
    1772:	4798      	blx	r3
	config.start_hold_time = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    1774:	4b0e      	ldr	r3, [pc, #56]	; (17b0 <i2c_interface_init+0x48>)
    1776:	22c0      	movs	r2, #192	; 0xc0
    1778:	0392      	lsls	r2, r2, #14
    177a:	611a      	str	r2, [r3, #16]
	config.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    177c:	4b0c      	ldr	r3, [pc, #48]	; (17b0 <i2c_interface_init+0x48>)
    177e:	2264      	movs	r2, #100	; 0x64
    1780:	601a      	str	r2, [r3, #0]
	config.buffer_timeout = 10000;
    1782:	4b0b      	ldr	r3, [pc, #44]	; (17b0 <i2c_interface_init+0x48>)
    1784:	4a0c      	ldr	r2, [pc, #48]	; (17b8 <i2c_interface_init+0x50>)
    1786:	82da      	strh	r2, [r3, #22]
	config.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    1788:	4b09      	ldr	r3, [pc, #36]	; (17b0 <i2c_interface_init+0x48>)
    178a:	4a0c      	ldr	r2, [pc, #48]	; (17bc <i2c_interface_init+0x54>)
    178c:	61da      	str	r2, [r3, #28]
	config.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    178e:	4b08      	ldr	r3, [pc, #32]	; (17b0 <i2c_interface_init+0x48>)
    1790:	4a0b      	ldr	r2, [pc, #44]	; (17c0 <i2c_interface_init+0x58>)
    1792:	621a      	str	r2, [r3, #32]

	i2c_master_init(&module, SERCOM3, &config);
    1794:	4a06      	ldr	r2, [pc, #24]	; (17b0 <i2c_interface_init+0x48>)
    1796:	490b      	ldr	r1, [pc, #44]	; (17c4 <i2c_interface_init+0x5c>)
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <i2c_interface_init+0x60>)
    179a:	0018      	movs	r0, r3
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <i2c_interface_init+0x64>)
    179e:	4798      	blx	r3

	i2c_master_enable(&module);
    17a0:	4b09      	ldr	r3, [pc, #36]	; (17c8 <i2c_interface_init+0x60>)
    17a2:	0018      	movs	r0, r3
    17a4:	4b0a      	ldr	r3, [pc, #40]	; (17d0 <i2c_interface_init+0x68>)
    17a6:	4798      	blx	r3
 }
    17a8:	46c0      	nop			; (mov r8, r8)
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	20000048 	.word	0x20000048
    17b4:	00001689 	.word	0x00001689
    17b8:	00002710 	.word	0x00002710
    17bc:	00160002 	.word	0x00160002
    17c0:	00170002 	.word	0x00170002
    17c4:	42000c00 	.word	0x42000c00
    17c8:	2000007c 	.word	0x2000007c
    17cc:	0000082d 	.word	0x0000082d
    17d0:	0000170d 	.word	0x0000170d

000017d4 <i2c_write_bytes>:

 void i2c_write_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    17d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d6:	b091      	sub	sp, #68	; 0x44
    17d8:	af00      	add	r7, sp, #0
    17da:	6278      	str	r0, [r7, #36]	; 0x24
    17dc:	000e      	movs	r6, r1
    17de:	0010      	movs	r0, r2
    17e0:	0019      	movs	r1, r3
    17e2:	2323      	movs	r3, #35	; 0x23
    17e4:	18fb      	adds	r3, r7, r3
    17e6:	1c32      	adds	r2, r6, #0
    17e8:	701a      	strb	r2, [r3, #0]
    17ea:	2322      	movs	r3, #34	; 0x22
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	1c02      	adds	r2, r0, #0
    17f0:	701a      	strb	r2, [r3, #0]
    17f2:	2321      	movs	r3, #33	; 0x21
    17f4:	18fb      	adds	r3, r7, r3
    17f6:	1c0a      	adds	r2, r1, #0
    17f8:	701a      	strb	r2, [r3, #0]
    17fa:	466b      	mov	r3, sp
    17fc:	607b      	str	r3, [r7, #4]
	uint8_t buffer[data_length+2];
    17fe:	2323      	movs	r3, #35	; 0x23
    1800:	18fb      	adds	r3, r7, r3
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	3302      	adds	r3, #2
    1806:	1e5a      	subs	r2, r3, #1
    1808:	63fa      	str	r2, [r7, #60]	; 0x3c
    180a:	001a      	movs	r2, r3
    180c:	613a      	str	r2, [r7, #16]
    180e:	2200      	movs	r2, #0
    1810:	617a      	str	r2, [r7, #20]
    1812:	6938      	ldr	r0, [r7, #16]
    1814:	6979      	ldr	r1, [r7, #20]
    1816:	0002      	movs	r2, r0
    1818:	0f52      	lsrs	r2, r2, #29
    181a:	000e      	movs	r6, r1
    181c:	00f6      	lsls	r6, r6, #3
    181e:	61fe      	str	r6, [r7, #28]
    1820:	69fe      	ldr	r6, [r7, #28]
    1822:	4316      	orrs	r6, r2
    1824:	61fe      	str	r6, [r7, #28]
    1826:	0002      	movs	r2, r0
    1828:	00d2      	lsls	r2, r2, #3
    182a:	61ba      	str	r2, [r7, #24]
    182c:	001a      	movs	r2, r3
    182e:	60ba      	str	r2, [r7, #8]
    1830:	2200      	movs	r2, #0
    1832:	60fa      	str	r2, [r7, #12]
    1834:	68b8      	ldr	r0, [r7, #8]
    1836:	68f9      	ldr	r1, [r7, #12]
    1838:	0002      	movs	r2, r0
    183a:	0f52      	lsrs	r2, r2, #29
    183c:	000e      	movs	r6, r1
    183e:	00f5      	lsls	r5, r6, #3
    1840:	4315      	orrs	r5, r2
    1842:	0002      	movs	r2, r0
    1844:	00d4      	lsls	r4, r2, #3
    1846:	3307      	adds	r3, #7
    1848:	08db      	lsrs	r3, r3, #3
    184a:	00db      	lsls	r3, r3, #3
    184c:	466a      	mov	r2, sp
    184e:	1ad3      	subs	r3, r2, r3
    1850:	469d      	mov	sp, r3
    1852:	466b      	mov	r3, sp
    1854:	3300      	adds	r3, #0
    1856:	63bb      	str	r3, [r7, #56]	; 0x38
	buffer[0] = reg;
    1858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    185a:	2221      	movs	r2, #33	; 0x21
    185c:	18ba      	adds	r2, r7, r2
    185e:	7812      	ldrb	r2, [r2, #0]
    1860:	701a      	strb	r2, [r3, #0]
	memcpy(buffer+1, data, data_length);
    1862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1864:	1c58      	adds	r0, r3, #1
    1866:	2323      	movs	r3, #35	; 0x23
    1868:	18fb      	adds	r3, r7, r3
    186a:	781a      	ldrb	r2, [r3, #0]
    186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    186e:	0019      	movs	r1, r3
    1870:	4b21      	ldr	r3, [pc, #132]	; (18f8 <i2c_write_bytes+0x124>)
    1872:	4798      	blx	r3
	
	struct i2c_master_packet packet;
	packet.address = i2c_address;
    1874:	2322      	movs	r3, #34	; 0x22
    1876:	18fb      	adds	r3, r7, r3
    1878:	781b      	ldrb	r3, [r3, #0]
    187a:	b29a      	uxth	r2, r3
    187c:	230c      	movs	r3, #12
    187e:	2120      	movs	r1, #32
    1880:	468c      	mov	ip, r1
    1882:	44bc      	add	ip, r7
    1884:	4463      	add	r3, ip
    1886:	801a      	strh	r2, [r3, #0]
	packet.data = buffer;
    1888:	6bba      	ldr	r2, [r7, #56]	; 0x38
    188a:	230c      	movs	r3, #12
    188c:	2120      	movs	r1, #32
    188e:	468c      	mov	ip, r1
    1890:	44bc      	add	ip, r7
    1892:	4463      	add	r3, ip
    1894:	605a      	str	r2, [r3, #4]
	packet.data_length = data_length+1;
    1896:	2323      	movs	r3, #35	; 0x23
    1898:	18fb      	adds	r3, r7, r3
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	b29b      	uxth	r3, r3
    189e:	3301      	adds	r3, #1
    18a0:	b29a      	uxth	r2, r3
    18a2:	230c      	movs	r3, #12
    18a4:	2120      	movs	r1, #32
    18a6:	468c      	mov	ip, r1
    18a8:	44bc      	add	ip, r7
    18aa:	4463      	add	r3, ip
    18ac:	805a      	strh	r2, [r3, #2]
	packet.high_speed = false;
    18ae:	230c      	movs	r3, #12
    18b0:	2220      	movs	r2, #32
    18b2:	4694      	mov	ip, r2
    18b4:	44bc      	add	ip, r7
    18b6:	4463      	add	r3, ip
    18b8:	2200      	movs	r2, #0
    18ba:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0;
    18bc:	230c      	movs	r3, #12
    18be:	2220      	movs	r2, #32
    18c0:	4694      	mov	ip, r2
    18c2:	44bc      	add	ip, r7
    18c4:	4463      	add	r3, ip
    18c6:	2200      	movs	r2, #0
    18c8:	729a      	strb	r2, [r3, #10]
	packet.ten_bit_address = 0;
    18ca:	230c      	movs	r3, #12
    18cc:	2220      	movs	r2, #32
    18ce:	4694      	mov	ip, r2
    18d0:	44bc      	add	ip, r7
    18d2:	4463      	add	r3, ip
    18d4:	2200      	movs	r2, #0
    18d6:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet);
    18d8:	230c      	movs	r3, #12
    18da:	2220      	movs	r2, #32
    18dc:	18ba      	adds	r2, r7, r2
    18de:	18d2      	adds	r2, r2, r3
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <i2c_write_bytes+0x128>)
    18e2:	0011      	movs	r1, r2
    18e4:	0018      	movs	r0, r3
    18e6:	4b06      	ldr	r3, [pc, #24]	; (1900 <i2c_write_bytes+0x12c>)
    18e8:	4798      	blx	r3
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	469d      	mov	sp, r3
 }
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	46bd      	mov	sp, r7
    18f2:	b011      	add	sp, #68	; 0x44
    18f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	00004c85 	.word	0x00004c85
    18fc:	2000007c 	.word	0x2000007c
    1900:	00000e51 	.word	0x00000e51

00001904 <i2c_read_bytes>:

 void i2c_read_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    1904:	b590      	push	{r4, r7, lr}
    1906:	b089      	sub	sp, #36	; 0x24
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
    190c:	000c      	movs	r4, r1
    190e:	0010      	movs	r0, r2
    1910:	0019      	movs	r1, r3
    1912:	1cfb      	adds	r3, r7, #3
    1914:	1c22      	adds	r2, r4, #0
    1916:	701a      	strb	r2, [r3, #0]
    1918:	1cbb      	adds	r3, r7, #2
    191a:	1c02      	adds	r2, r0, #0
    191c:	701a      	strb	r2, [r3, #0]
    191e:	1c7b      	adds	r3, r7, #1
    1920:	1c0a      	adds	r2, r1, #0
    1922:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet_setup;
	packet_setup.address = i2c_address;
    1924:	1cbb      	adds	r3, r7, #2
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	b29a      	uxth	r2, r3
    192a:	2314      	movs	r3, #20
    192c:	18fb      	adds	r3, r7, r3
    192e:	801a      	strh	r2, [r3, #0]
	packet_setup.data = &reg;
    1930:	2314      	movs	r3, #20
    1932:	18fb      	adds	r3, r7, r3
    1934:	1c7a      	adds	r2, r7, #1
    1936:	605a      	str	r2, [r3, #4]
	packet_setup.data_length = 1;
    1938:	2314      	movs	r3, #20
    193a:	18fb      	adds	r3, r7, r3
    193c:	2201      	movs	r2, #1
    193e:	805a      	strh	r2, [r3, #2]
	packet_setup.high_speed = false;
    1940:	2314      	movs	r3, #20
    1942:	18fb      	adds	r3, r7, r3
    1944:	2200      	movs	r2, #0
    1946:	725a      	strb	r2, [r3, #9]
	packet_setup.hs_master_code = 0;
    1948:	2314      	movs	r3, #20
    194a:	18fb      	adds	r3, r7, r3
    194c:	2200      	movs	r2, #0
    194e:	729a      	strb	r2, [r3, #10]
	packet_setup.ten_bit_address = 0;
    1950:	2314      	movs	r3, #20
    1952:	18fb      	adds	r3, r7, r3
    1954:	2200      	movs	r2, #0
    1956:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet_setup);
    1958:	2314      	movs	r3, #20
    195a:	18fa      	adds	r2, r7, r3
    195c:	4b15      	ldr	r3, [pc, #84]	; (19b4 <i2c_read_bytes+0xb0>)
    195e:	0011      	movs	r1, r2
    1960:	0018      	movs	r0, r3
    1962:	4b15      	ldr	r3, [pc, #84]	; (19b8 <i2c_read_bytes+0xb4>)
    1964:	4798      	blx	r3

	struct i2c_master_packet packet_read;
	packet_read.address = i2c_address;
    1966:	1cbb      	adds	r3, r7, #2
    1968:	781b      	ldrb	r3, [r3, #0]
    196a:	b29a      	uxth	r2, r3
    196c:	2308      	movs	r3, #8
    196e:	18fb      	adds	r3, r7, r3
    1970:	801a      	strh	r2, [r3, #0]
	packet_read.data = data;
    1972:	2308      	movs	r3, #8
    1974:	18fb      	adds	r3, r7, r3
    1976:	687a      	ldr	r2, [r7, #4]
    1978:	605a      	str	r2, [r3, #4]
	packet_read.data_length = data_length;
    197a:	1cfb      	adds	r3, r7, #3
    197c:	781b      	ldrb	r3, [r3, #0]
    197e:	b29a      	uxth	r2, r3
    1980:	2308      	movs	r3, #8
    1982:	18fb      	adds	r3, r7, r3
    1984:	805a      	strh	r2, [r3, #2]
	packet_read.high_speed = false;
    1986:	2308      	movs	r3, #8
    1988:	18fb      	adds	r3, r7, r3
    198a:	2200      	movs	r2, #0
    198c:	725a      	strb	r2, [r3, #9]
	packet_read.hs_master_code = 0;
    198e:	2308      	movs	r3, #8
    1990:	18fb      	adds	r3, r7, r3
    1992:	2200      	movs	r2, #0
    1994:	729a      	strb	r2, [r3, #10]
	packet_read.ten_bit_address = 0;
    1996:	2308      	movs	r3, #8
    1998:	18fb      	adds	r3, r7, r3
    199a:	2200      	movs	r2, #0
    199c:	721a      	strb	r2, [r3, #8]

	i2c_master_read_packet_wait(&module, &packet_read);
    199e:	2308      	movs	r3, #8
    19a0:	18fa      	adds	r2, r7, r3
    19a2:	4b04      	ldr	r3, [pc, #16]	; (19b4 <i2c_read_bytes+0xb0>)
    19a4:	0011      	movs	r1, r2
    19a6:	0018      	movs	r0, r3
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <i2c_read_bytes+0xb8>)
    19aa:	4798      	blx	r3
    19ac:	46c0      	nop			; (mov r8, r8)
    19ae:	46bd      	mov	sp, r7
    19b0:	b009      	add	sp, #36	; 0x24
    19b2:	bd90      	pop	{r4, r7, pc}
    19b4:	2000007c 	.word	0x2000007c
    19b8:	00000e51 	.word	0x00000e51
    19bc:	00000ca9 	.word	0x00000ca9

000019c0 <init_lis3dh>:
 #include "i2c_interface.h"

 #include "lis3dh.h"

 void init_lis3dh(void)
 {
    19c0:	b590      	push	{r4, r7, lr}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    19c6:	1dfb      	adds	r3, r7, #7
    19c8:	2200      	movs	r2, #0
    19ca:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, LIS3DH_ADDRESS, REG_WHO_AM_I);
    19cc:	1df8      	adds	r0, r7, #7
    19ce:	230f      	movs	r3, #15
    19d0:	2219      	movs	r2, #25
    19d2:	2101      	movs	r1, #1
    19d4:	4c0e      	ldr	r4, [pc, #56]	; (1a10 <init_lis3dh+0x50>)
    19d6:	47a0      	blx	r4
	if(me != WHO_AM_I_VAL)
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	2b33      	cmp	r3, #51	; 0x33
    19de:	d112      	bne.n	1a06 <init_lis3dh+0x46>
		return;
	}

	// Set up sensors
	// 50Hz ODR, low power mode -> 6uA typical
	uint8_t data = (0x04 << 4) | (0x01 << 3) | (0x07 << 0);   // 50Hz, all axes enabled, low power mode
    19e0:	1dbb      	adds	r3, r7, #6
    19e2:	224f      	movs	r2, #79	; 0x4f
    19e4:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
    19e6:	1db8      	adds	r0, r7, #6
    19e8:	2320      	movs	r3, #32
    19ea:	2219      	movs	r2, #25
    19ec:	2101      	movs	r1, #1
    19ee:	4c09      	ldr	r4, [pc, #36]	; (1a14 <init_lis3dh+0x54>)
    19f0:	47a0      	blx	r4

	data = (0x01 << 4); // +/-4g range
    19f2:	1dbb      	adds	r3, r7, #6
    19f4:	2210      	movs	r2, #16
    19f6:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG4);
    19f8:	1db8      	adds	r0, r7, #6
    19fa:	2323      	movs	r3, #35	; 0x23
    19fc:	2219      	movs	r2, #25
    19fe:	2101      	movs	r1, #1
    1a00:	4c04      	ldr	r4, [pc, #16]	; (1a14 <init_lis3dh+0x54>)
    1a02:	47a0      	blx	r4
    1a04:	e000      	b.n	1a08 <init_lis3dh+0x48>
		return;
    1a06:	46c0      	nop			; (mov r8, r8)
 }
    1a08:	46bd      	mov	sp, r7
    1a0a:	b003      	add	sp, #12
    1a0c:	bd90      	pop	{r4, r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	00001905 	.word	0x00001905
    1a14:	000017d5 	.word	0x000017d5

00001a18 <read_lis3dh_raw>:

 void read_lis3dh_raw(lis3dh_data_raw_t * data)
 {
    1a18:	b590      	push	{r4, r7, lr}
    1a1a:	b085      	sub	sp, #20
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	i2c_read_bytes(buffer, 6, LIS3DH_ADDRESS, REG_OUT_X_L | 0x80); // 0x80 enables auto increment
    1a20:	2308      	movs	r3, #8
    1a22:	18f8      	adds	r0, r7, r3
    1a24:	23a8      	movs	r3, #168	; 0xa8
    1a26:	2219      	movs	r2, #25
    1a28:	2106      	movs	r1, #6
    1a2a:	4c1e      	ldr	r4, [pc, #120]	; (1aa4 <read_lis3dh_raw+0x8c>)
    1a2c:	47a0      	blx	r4
	data->x = buffer[0];
    1a2e:	2308      	movs	r3, #8
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	b21a      	sxth	r2, r3
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	801a      	strh	r2, [r3, #0]
	data->x |= ((uint16_t) buffer[1]) << 8;
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	2200      	movs	r2, #0
    1a3e:	5e9a      	ldrsh	r2, [r3, r2]
    1a40:	2308      	movs	r3, #8
    1a42:	18fb      	adds	r3, r7, r3
    1a44:	785b      	ldrb	r3, [r3, #1]
    1a46:	021b      	lsls	r3, r3, #8
    1a48:	b21b      	sxth	r3, r3
    1a4a:	4313      	orrs	r3, r2
    1a4c:	b21a      	sxth	r2, r3
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	801a      	strh	r2, [r3, #0]
	data->y = buffer[2];
    1a52:	2308      	movs	r3, #8
    1a54:	18fb      	adds	r3, r7, r3
    1a56:	789b      	ldrb	r3, [r3, #2]
    1a58:	b21a      	sxth	r2, r3
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	805a      	strh	r2, [r3, #2]
	data->y |= ((uint16_t) buffer[3]) << 8;
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	2202      	movs	r2, #2
    1a62:	5e9a      	ldrsh	r2, [r3, r2]
    1a64:	2308      	movs	r3, #8
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	78db      	ldrb	r3, [r3, #3]
    1a6a:	021b      	lsls	r3, r3, #8
    1a6c:	b21b      	sxth	r3, r3
    1a6e:	4313      	orrs	r3, r2
    1a70:	b21a      	sxth	r2, r3
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	805a      	strh	r2, [r3, #2]
	data->z = buffer[4];
    1a76:	2308      	movs	r3, #8
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	791b      	ldrb	r3, [r3, #4]
    1a7c:	b21a      	sxth	r2, r3
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	809a      	strh	r2, [r3, #4]
	data->z |= ((uint16_t) buffer[5]) << 8;
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	2204      	movs	r2, #4
    1a86:	5e9a      	ldrsh	r2, [r3, r2]
    1a88:	2308      	movs	r3, #8
    1a8a:	18fb      	adds	r3, r7, r3
    1a8c:	795b      	ldrb	r3, [r3, #5]
    1a8e:	021b      	lsls	r3, r3, #8
    1a90:	b21b      	sxth	r3, r3
    1a92:	4313      	orrs	r3, r2
    1a94:	b21a      	sxth	r2, r3
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	809a      	strh	r2, [r3, #4]
 }
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	46bd      	mov	sp, r7
    1a9e:	b005      	add	sp, #20
    1aa0:	bd90      	pop	{r4, r7, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	00001905 	.word	0x00001905

00001aa8 <read_lis3dh_g>:

 void read_lis3dh_g(lis3dh_data_g_t * data)
 {
    1aa8:	b590      	push	{r4, r7, lr}
    1aaa:	b085      	sub	sp, #20
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
	lis3dh_data_raw_t raw;
	read_lis3dh_raw(&raw);
    1ab0:	2308      	movs	r3, #8
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	0018      	movs	r0, r3
    1ab6:	4b24      	ldr	r3, [pc, #144]	; (1b48 <read_lis3dh_g+0xa0>)
    1ab8:	4798      	blx	r3
	// 8 bit mode, +/-4g range
	data->x = raw.x * 0.00012207;
    1aba:	2308      	movs	r3, #8
    1abc:	18fb      	adds	r3, r7, r3
    1abe:	2200      	movs	r2, #0
    1ac0:	5e9a      	ldrsh	r2, [r3, r2]
    1ac2:	4b22      	ldr	r3, [pc, #136]	; (1b4c <read_lis3dh_g+0xa4>)
    1ac4:	0010      	movs	r0, r2
    1ac6:	4798      	blx	r3
    1ac8:	4c21      	ldr	r4, [pc, #132]	; (1b50 <read_lis3dh_g+0xa8>)
    1aca:	4a22      	ldr	r2, [pc, #136]	; (1b54 <read_lis3dh_g+0xac>)
    1acc:	4b22      	ldr	r3, [pc, #136]	; (1b58 <read_lis3dh_g+0xb0>)
    1ace:	47a0      	blx	r4
    1ad0:	0003      	movs	r3, r0
    1ad2:	000c      	movs	r4, r1
    1ad4:	0019      	movs	r1, r3
    1ad6:	0022      	movs	r2, r4
    1ad8:	4b20      	ldr	r3, [pc, #128]	; (1b5c <read_lis3dh_g+0xb4>)
    1ada:	0008      	movs	r0, r1
    1adc:	0011      	movs	r1, r2
    1ade:	4798      	blx	r3
    1ae0:	1c02      	adds	r2, r0, #0
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	601a      	str	r2, [r3, #0]
	data->y = raw.y * 0.00012207;
    1ae6:	2308      	movs	r3, #8
    1ae8:	18fb      	adds	r3, r7, r3
    1aea:	2202      	movs	r2, #2
    1aec:	5e9a      	ldrsh	r2, [r3, r2]
    1aee:	4b17      	ldr	r3, [pc, #92]	; (1b4c <read_lis3dh_g+0xa4>)
    1af0:	0010      	movs	r0, r2
    1af2:	4798      	blx	r3
    1af4:	4c16      	ldr	r4, [pc, #88]	; (1b50 <read_lis3dh_g+0xa8>)
    1af6:	4a17      	ldr	r2, [pc, #92]	; (1b54 <read_lis3dh_g+0xac>)
    1af8:	4b17      	ldr	r3, [pc, #92]	; (1b58 <read_lis3dh_g+0xb0>)
    1afa:	47a0      	blx	r4
    1afc:	0003      	movs	r3, r0
    1afe:	000c      	movs	r4, r1
    1b00:	0019      	movs	r1, r3
    1b02:	0022      	movs	r2, r4
    1b04:	4b15      	ldr	r3, [pc, #84]	; (1b5c <read_lis3dh_g+0xb4>)
    1b06:	0008      	movs	r0, r1
    1b08:	0011      	movs	r1, r2
    1b0a:	4798      	blx	r3
    1b0c:	1c02      	adds	r2, r0, #0
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	605a      	str	r2, [r3, #4]
	data->z = raw.z * 0.00012207;
    1b12:	2308      	movs	r3, #8
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	2204      	movs	r2, #4
    1b18:	5e9a      	ldrsh	r2, [r3, r2]
    1b1a:	4b0c      	ldr	r3, [pc, #48]	; (1b4c <read_lis3dh_g+0xa4>)
    1b1c:	0010      	movs	r0, r2
    1b1e:	4798      	blx	r3
    1b20:	4c0b      	ldr	r4, [pc, #44]	; (1b50 <read_lis3dh_g+0xa8>)
    1b22:	4a0c      	ldr	r2, [pc, #48]	; (1b54 <read_lis3dh_g+0xac>)
    1b24:	4b0c      	ldr	r3, [pc, #48]	; (1b58 <read_lis3dh_g+0xb0>)
    1b26:	47a0      	blx	r4
    1b28:	0003      	movs	r3, r0
    1b2a:	000c      	movs	r4, r1
    1b2c:	0019      	movs	r1, r3
    1b2e:	0022      	movs	r2, r4
    1b30:	4b0a      	ldr	r3, [pc, #40]	; (1b5c <read_lis3dh_g+0xb4>)
    1b32:	0008      	movs	r0, r1
    1b34:	0011      	movs	r1, r2
    1b36:	4798      	blx	r3
    1b38:	1c02      	adds	r2, r0, #0
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	609a      	str	r2, [r3, #8]
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	46bd      	mov	sp, r7
    1b42:	b005      	add	sp, #20
    1b44:	bd90      	pop	{r4, r7, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00001a19 	.word	0x00001a19
    1b4c:	00004829 	.word	0x00004829
    1b50:	00003c95 	.word	0x00003c95
    1b54:	a19c4774 	.word	0xa19c4774
    1b58:	3f1ffffa 	.word	0x3f1ffffa
    1b5c:	0000491d 	.word	0x0000491d

00001b60 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1b66:	4b04      	ldr	r3, [pc, #16]	; (1b78 <wdt_clear_early_warning+0x18>)
    1b68:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	2201      	movs	r2, #1
    1b6e:	719a      	strb	r2, [r3, #6]
}
    1b70:	46c0      	nop			; (mov r8, r8)
    1b72:	46bd      	mov	sp, r7
    1b74:	b002      	add	sp, #8
    1b76:	bd80      	pop	{r7, pc}
    1b78:	40001c00 	.word	0x40001c00

00001b7c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1b80:	4b05      	ldr	r3, [pc, #20]	; (1b98 <WDT_Handler+0x1c>)
    1b82:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1b84:	4b05      	ldr	r3, [pc, #20]	; (1b9c <WDT_Handler+0x20>)
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d002      	beq.n	1b92 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1b8c:	4b03      	ldr	r3, [pc, #12]	; (1b9c <WDT_Handler+0x20>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	4798      	blx	r3
	}
}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	46bd      	mov	sp, r7
    1b96:	bd80      	pop	{r7, pc}
    1b98:	00001b61 	.word	0x00001b61
    1b9c:	200000b0 	.word	0x200000b0

00001ba0 <system_gclk_chan_get_config_defaults>:
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b082      	sub	sp, #8
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	2200      	movs	r2, #0
    1bac:	701a      	strb	r2, [r3, #0]
}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	46bd      	mov	sp, r7
    1bb2:	b002      	add	sp, #8
    1bb4:	bd80      	pop	{r7, pc}
	...

00001bb8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b084      	sub	sp, #16
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	0002      	movs	r2, r0
    1bc0:	1dfb      	adds	r3, r7, #7
    1bc2:	701a      	strb	r2, [r3, #0]
    1bc4:	1dbb      	adds	r3, r7, #6
    1bc6:	1c0a      	adds	r2, r1, #0
    1bc8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1bca:	4b1a      	ldr	r3, [pc, #104]	; (1c34 <sercom_set_gclk_generator+0x7c>)
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	2201      	movs	r2, #1
    1bd0:	4053      	eors	r3, r2
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d103      	bne.n	1be0 <sercom_set_gclk_generator+0x28>
    1bd8:	1dbb      	adds	r3, r7, #6
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d01b      	beq.n	1c18 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1be0:	230c      	movs	r3, #12
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	0018      	movs	r0, r3
    1be6:	4b14      	ldr	r3, [pc, #80]	; (1c38 <sercom_set_gclk_generator+0x80>)
    1be8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1bea:	230c      	movs	r3, #12
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	1dfa      	adds	r2, r7, #7
    1bf0:	7812      	ldrb	r2, [r2, #0]
    1bf2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1bf4:	230c      	movs	r3, #12
    1bf6:	18fb      	adds	r3, r7, r3
    1bf8:	0019      	movs	r1, r3
    1bfa:	2011      	movs	r0, #17
    1bfc:	4b0f      	ldr	r3, [pc, #60]	; (1c3c <sercom_set_gclk_generator+0x84>)
    1bfe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1c00:	2011      	movs	r0, #17
    1c02:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <sercom_set_gclk_generator+0x88>)
    1c04:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1c06:	4b0b      	ldr	r3, [pc, #44]	; (1c34 <sercom_set_gclk_generator+0x7c>)
    1c08:	1dfa      	adds	r2, r7, #7
    1c0a:	7812      	ldrb	r2, [r2, #0]
    1c0c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1c0e:	4b09      	ldr	r3, [pc, #36]	; (1c34 <sercom_set_gclk_generator+0x7c>)
    1c10:	2201      	movs	r2, #1
    1c12:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1c14:	2300      	movs	r3, #0
    1c16:	e008      	b.n	1c2a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1c18:	4b06      	ldr	r3, [pc, #24]	; (1c34 <sercom_set_gclk_generator+0x7c>)
    1c1a:	785b      	ldrb	r3, [r3, #1]
    1c1c:	1dfa      	adds	r2, r7, #7
    1c1e:	7812      	ldrb	r2, [r2, #0]
    1c20:	429a      	cmp	r2, r3
    1c22:	d101      	bne.n	1c28 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1c24:	2300      	movs	r3, #0
    1c26:	e000      	b.n	1c2a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1c28:	231d      	movs	r3, #29
}
    1c2a:	0018      	movs	r0, r3
    1c2c:	46bd      	mov	sp, r7
    1c2e:	b004      	add	sp, #16
    1c30:	bd80      	pop	{r7, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	20000088 	.word	0x20000088
    1c38:	00001ba1 	.word	0x00001ba1
    1c3c:	00002731 	.word	0x00002731
    1c40:	00002771 	.word	0x00002771

00001c44 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b082      	sub	sp, #8
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
    1c4c:	000a      	movs	r2, r1
    1c4e:	1cfb      	adds	r3, r7, #3
    1c50:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	4a4e      	ldr	r2, [pc, #312]	; (1d90 <_sercom_get_default_pad+0x14c>)
    1c56:	4293      	cmp	r3, r2
    1c58:	d040      	beq.n	1cdc <_sercom_get_default_pad+0x98>
    1c5a:	4a4d      	ldr	r2, [pc, #308]	; (1d90 <_sercom_get_default_pad+0x14c>)
    1c5c:	4293      	cmp	r3, r2
    1c5e:	d807      	bhi.n	1c70 <_sercom_get_default_pad+0x2c>
    1c60:	2284      	movs	r2, #132	; 0x84
    1c62:	05d2      	lsls	r2, r2, #23
    1c64:	4293      	cmp	r3, r2
    1c66:	d00f      	beq.n	1c88 <_sercom_get_default_pad+0x44>
    1c68:	4a4a      	ldr	r2, [pc, #296]	; (1d94 <_sercom_get_default_pad+0x150>)
    1c6a:	4293      	cmp	r3, r2
    1c6c:	d021      	beq.n	1cb2 <_sercom_get_default_pad+0x6e>
    1c6e:	e089      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1c70:	4a49      	ldr	r2, [pc, #292]	; (1d98 <_sercom_get_default_pad+0x154>)
    1c72:	4293      	cmp	r3, r2
    1c74:	d100      	bne.n	1c78 <_sercom_get_default_pad+0x34>
    1c76:	e05b      	b.n	1d30 <_sercom_get_default_pad+0xec>
    1c78:	4a48      	ldr	r2, [pc, #288]	; (1d9c <_sercom_get_default_pad+0x158>)
    1c7a:	4293      	cmp	r3, r2
    1c7c:	d100      	bne.n	1c80 <_sercom_get_default_pad+0x3c>
    1c7e:	e06c      	b.n	1d5a <_sercom_get_default_pad+0x116>
    1c80:	4a47      	ldr	r2, [pc, #284]	; (1da0 <_sercom_get_default_pad+0x15c>)
    1c82:	4293      	cmp	r3, r2
    1c84:	d03f      	beq.n	1d06 <_sercom_get_default_pad+0xc2>
    1c86:	e07d      	b.n	1d84 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c88:	1cfb      	adds	r3, r7, #3
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	2b01      	cmp	r3, #1
    1c8e:	d00a      	beq.n	1ca6 <_sercom_get_default_pad+0x62>
    1c90:	dc02      	bgt.n	1c98 <_sercom_get_default_pad+0x54>
    1c92:	2b00      	cmp	r3, #0
    1c94:	d005      	beq.n	1ca2 <_sercom_get_default_pad+0x5e>
    1c96:	e075      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1c98:	2b02      	cmp	r3, #2
    1c9a:	d006      	beq.n	1caa <_sercom_get_default_pad+0x66>
    1c9c:	2b03      	cmp	r3, #3
    1c9e:	d006      	beq.n	1cae <_sercom_get_default_pad+0x6a>
    1ca0:	e070      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1ca2:	4b40      	ldr	r3, [pc, #256]	; (1da4 <_sercom_get_default_pad+0x160>)
    1ca4:	e06f      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1ca6:	4b40      	ldr	r3, [pc, #256]	; (1da8 <_sercom_get_default_pad+0x164>)
    1ca8:	e06d      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1caa:	4b40      	ldr	r3, [pc, #256]	; (1dac <_sercom_get_default_pad+0x168>)
    1cac:	e06b      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cae:	4b40      	ldr	r3, [pc, #256]	; (1db0 <_sercom_get_default_pad+0x16c>)
    1cb0:	e069      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cb2:	1cfb      	adds	r3, r7, #3
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	2b01      	cmp	r3, #1
    1cb8:	d00a      	beq.n	1cd0 <_sercom_get_default_pad+0x8c>
    1cba:	dc02      	bgt.n	1cc2 <_sercom_get_default_pad+0x7e>
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d005      	beq.n	1ccc <_sercom_get_default_pad+0x88>
    1cc0:	e060      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1cc2:	2b02      	cmp	r3, #2
    1cc4:	d006      	beq.n	1cd4 <_sercom_get_default_pad+0x90>
    1cc6:	2b03      	cmp	r3, #3
    1cc8:	d006      	beq.n	1cd8 <_sercom_get_default_pad+0x94>
    1cca:	e05b      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1ccc:	2303      	movs	r3, #3
    1cce:	e05a      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cd0:	4b38      	ldr	r3, [pc, #224]	; (1db4 <_sercom_get_default_pad+0x170>)
    1cd2:	e058      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cd4:	4b38      	ldr	r3, [pc, #224]	; (1db8 <_sercom_get_default_pad+0x174>)
    1cd6:	e056      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cd8:	4b38      	ldr	r3, [pc, #224]	; (1dbc <_sercom_get_default_pad+0x178>)
    1cda:	e054      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cdc:	1cfb      	adds	r3, r7, #3
    1cde:	781b      	ldrb	r3, [r3, #0]
    1ce0:	2b01      	cmp	r3, #1
    1ce2:	d00a      	beq.n	1cfa <_sercom_get_default_pad+0xb6>
    1ce4:	dc02      	bgt.n	1cec <_sercom_get_default_pad+0xa8>
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d005      	beq.n	1cf6 <_sercom_get_default_pad+0xb2>
    1cea:	e04b      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1cec:	2b02      	cmp	r3, #2
    1cee:	d006      	beq.n	1cfe <_sercom_get_default_pad+0xba>
    1cf0:	2b03      	cmp	r3, #3
    1cf2:	d006      	beq.n	1d02 <_sercom_get_default_pad+0xbe>
    1cf4:	e046      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1cf6:	4b32      	ldr	r3, [pc, #200]	; (1dc0 <_sercom_get_default_pad+0x17c>)
    1cf8:	e045      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cfa:	4b32      	ldr	r3, [pc, #200]	; (1dc4 <_sercom_get_default_pad+0x180>)
    1cfc:	e043      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1cfe:	4b32      	ldr	r3, [pc, #200]	; (1dc8 <_sercom_get_default_pad+0x184>)
    1d00:	e041      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d02:	4b32      	ldr	r3, [pc, #200]	; (1dcc <_sercom_get_default_pad+0x188>)
    1d04:	e03f      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d06:	1cfb      	adds	r3, r7, #3
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	d00a      	beq.n	1d24 <_sercom_get_default_pad+0xe0>
    1d0e:	dc02      	bgt.n	1d16 <_sercom_get_default_pad+0xd2>
    1d10:	2b00      	cmp	r3, #0
    1d12:	d005      	beq.n	1d20 <_sercom_get_default_pad+0xdc>
    1d14:	e036      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d16:	2b02      	cmp	r3, #2
    1d18:	d006      	beq.n	1d28 <_sercom_get_default_pad+0xe4>
    1d1a:	2b03      	cmp	r3, #3
    1d1c:	d006      	beq.n	1d2c <_sercom_get_default_pad+0xe8>
    1d1e:	e031      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d20:	4b2b      	ldr	r3, [pc, #172]	; (1dd0 <_sercom_get_default_pad+0x18c>)
    1d22:	e030      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d24:	4b2b      	ldr	r3, [pc, #172]	; (1dd4 <_sercom_get_default_pad+0x190>)
    1d26:	e02e      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d28:	4b2b      	ldr	r3, [pc, #172]	; (1dd8 <_sercom_get_default_pad+0x194>)
    1d2a:	e02c      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d2c:	4b2b      	ldr	r3, [pc, #172]	; (1ddc <_sercom_get_default_pad+0x198>)
    1d2e:	e02a      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d30:	1cfb      	adds	r3, r7, #3
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	2b01      	cmp	r3, #1
    1d36:	d00a      	beq.n	1d4e <_sercom_get_default_pad+0x10a>
    1d38:	dc02      	bgt.n	1d40 <_sercom_get_default_pad+0xfc>
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d005      	beq.n	1d4a <_sercom_get_default_pad+0x106>
    1d3e:	e021      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d40:	2b02      	cmp	r3, #2
    1d42:	d006      	beq.n	1d52 <_sercom_get_default_pad+0x10e>
    1d44:	2b03      	cmp	r3, #3
    1d46:	d006      	beq.n	1d56 <_sercom_get_default_pad+0x112>
    1d48:	e01c      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d4a:	4b25      	ldr	r3, [pc, #148]	; (1de0 <_sercom_get_default_pad+0x19c>)
    1d4c:	e01b      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d4e:	4b25      	ldr	r3, [pc, #148]	; (1de4 <_sercom_get_default_pad+0x1a0>)
    1d50:	e019      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d52:	4b25      	ldr	r3, [pc, #148]	; (1de8 <_sercom_get_default_pad+0x1a4>)
    1d54:	e017      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d56:	4b25      	ldr	r3, [pc, #148]	; (1dec <_sercom_get_default_pad+0x1a8>)
    1d58:	e015      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d5a:	1cfb      	adds	r3, r7, #3
    1d5c:	781b      	ldrb	r3, [r3, #0]
    1d5e:	2b01      	cmp	r3, #1
    1d60:	d00a      	beq.n	1d78 <_sercom_get_default_pad+0x134>
    1d62:	dc02      	bgt.n	1d6a <_sercom_get_default_pad+0x126>
    1d64:	2b00      	cmp	r3, #0
    1d66:	d005      	beq.n	1d74 <_sercom_get_default_pad+0x130>
    1d68:	e00c      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d6a:	2b02      	cmp	r3, #2
    1d6c:	d006      	beq.n	1d7c <_sercom_get_default_pad+0x138>
    1d6e:	2b03      	cmp	r3, #3
    1d70:	d006      	beq.n	1d80 <_sercom_get_default_pad+0x13c>
    1d72:	e007      	b.n	1d84 <_sercom_get_default_pad+0x140>
    1d74:	4b1e      	ldr	r3, [pc, #120]	; (1df0 <_sercom_get_default_pad+0x1ac>)
    1d76:	e006      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d78:	4b1e      	ldr	r3, [pc, #120]	; (1df4 <_sercom_get_default_pad+0x1b0>)
    1d7a:	e004      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d7c:	4b1e      	ldr	r3, [pc, #120]	; (1df8 <_sercom_get_default_pad+0x1b4>)
    1d7e:	e002      	b.n	1d86 <_sercom_get_default_pad+0x142>
    1d80:	4b1e      	ldr	r3, [pc, #120]	; (1dfc <_sercom_get_default_pad+0x1b8>)
    1d82:	e000      	b.n	1d86 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    1d84:	2300      	movs	r3, #0
}
    1d86:	0018      	movs	r0, r3
    1d88:	46bd      	mov	sp, r7
    1d8a:	b002      	add	sp, #8
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	42000800 	.word	0x42000800
    1d94:	42000400 	.word	0x42000400
    1d98:	42001000 	.word	0x42001000
    1d9c:	43000400 	.word	0x43000400
    1da0:	42000c00 	.word	0x42000c00
    1da4:	00040003 	.word	0x00040003
    1da8:	00050003 	.word	0x00050003
    1dac:	00060003 	.word	0x00060003
    1db0:	00070003 	.word	0x00070003
    1db4:	00010003 	.word	0x00010003
    1db8:	001e0003 	.word	0x001e0003
    1dbc:	001f0003 	.word	0x001f0003
    1dc0:	00080003 	.word	0x00080003
    1dc4:	00090003 	.word	0x00090003
    1dc8:	000a0003 	.word	0x000a0003
    1dcc:	000b0003 	.word	0x000b0003
    1dd0:	00100003 	.word	0x00100003
    1dd4:	00110003 	.word	0x00110003
    1dd8:	00120003 	.word	0x00120003
    1ddc:	00130003 	.word	0x00130003
    1de0:	000c0003 	.word	0x000c0003
    1de4:	000d0003 	.word	0x000d0003
    1de8:	000e0003 	.word	0x000e0003
    1dec:	000f0003 	.word	0x000f0003
    1df0:	00160003 	.word	0x00160003
    1df4:	00170003 	.word	0x00170003
    1df8:	00180003 	.word	0x00180003
    1dfc:	00190003 	.word	0x00190003

00001e00 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1e00:	b590      	push	{r4, r7, lr}
    1e02:	b08b      	sub	sp, #44	; 0x2c
    1e04:	af00      	add	r7, sp, #0
    1e06:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1e08:	230c      	movs	r3, #12
    1e0a:	18fb      	adds	r3, r7, r3
    1e0c:	4a0f      	ldr	r2, [pc, #60]	; (1e4c <_sercom_get_sercom_inst_index+0x4c>)
    1e0e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1e10:	c313      	stmia	r3!, {r0, r1, r4}
    1e12:	ca13      	ldmia	r2!, {r0, r1, r4}
    1e14:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e16:	2300      	movs	r3, #0
    1e18:	627b      	str	r3, [r7, #36]	; 0x24
    1e1a:	e00e      	b.n	1e3a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1e1c:	230c      	movs	r3, #12
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1e22:	0092      	lsls	r2, r2, #2
    1e24:	58d3      	ldr	r3, [r2, r3]
    1e26:	001a      	movs	r2, r3
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	429a      	cmp	r2, r3
    1e2c:	d102      	bne.n	1e34 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e30:	b2db      	uxtb	r3, r3
    1e32:	e006      	b.n	1e42 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e36:	3301      	adds	r3, #1
    1e38:	627b      	str	r3, [r7, #36]	; 0x24
    1e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e3c:	2b05      	cmp	r3, #5
    1e3e:	d9ed      	bls.n	1e1c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1e40:	2300      	movs	r3, #0
}
    1e42:	0018      	movs	r0, r3
    1e44:	46bd      	mov	sp, r7
    1e46:	b00b      	add	sp, #44	; 0x2c
    1e48:	bd90      	pop	{r4, r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	00004cc0 	.word	0x00004cc0

00001e50 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	af00      	add	r7, sp, #0
}
    1e54:	46c0      	nop			; (mov r8, r8)
    1e56:	46bd      	mov	sp, r7
    1e58:	bd80      	pop	{r7, pc}

00001e5a <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    1e5a:	b580      	push	{r7, lr}
    1e5c:	b082      	sub	sp, #8
    1e5e:	af00      	add	r7, sp, #0
    1e60:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	095b      	lsrs	r3, r3, #5
}
    1e66:	0018      	movs	r0, r3
    1e68:	46bd      	mov	sp, r7
    1e6a:	b002      	add	sp, #8
    1e6c:	bd80      	pop	{r7, pc}
	...

00001e70 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	b082      	sub	sp, #8
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	01db      	lsls	r3, r3, #7
    1e7c:	4a03      	ldr	r2, [pc, #12]	; (1e8c <arch_ioport_port_to_base+0x1c>)
    1e7e:	4694      	mov	ip, r2
    1e80:	4463      	add	r3, ip
}
    1e82:	0018      	movs	r0, r3
    1e84:	46bd      	mov	sp, r7
    1e86:	b002      	add	sp, #8
    1e88:	bd80      	pop	{r7, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	40002800 	.word	0x40002800

00001e90 <arch_ioport_pin_to_mask>:
{
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    1e90:	b580      	push	{r7, lr}
    1e92:	b082      	sub	sp, #8
    1e94:	af00      	add	r7, sp, #0
    1e96:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    1e98:	687b      	ldr	r3, [r7, #4]
    1e9a:	221f      	movs	r2, #31
    1e9c:	4013      	ands	r3, r2
    1e9e:	2201      	movs	r2, #1
    1ea0:	409a      	lsls	r2, r3
    1ea2:	0013      	movs	r3, r2
}
    1ea4:	0018      	movs	r0, r3
    1ea6:	46bd      	mov	sp, r7
    1ea8:	b002      	add	sp, #8
    1eaa:	bd80      	pop	{r7, pc}

00001eac <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b08a      	sub	sp, #40	; 0x28
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	60f8      	str	r0, [r7, #12]
    1eb4:	60b9      	str	r1, [r7, #8]
    1eb6:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    1eb8:	68fb      	ldr	r3, [r7, #12]
    1eba:	0018      	movs	r0, r3
    1ebc:	4b2b      	ldr	r3, [pc, #172]	; (1f6c <arch_ioport_set_port_mode+0xc0>)
    1ebe:	4798      	blx	r3
    1ec0:	0003      	movs	r3, r0
    1ec2:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
    1ec4:	2300      	movs	r3, #0
    1ec6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    1ec8:	2300      	movs	r3, #0
    1eca:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
    1ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ece:	2280      	movs	r2, #128	; 0x80
    1ed0:	0292      	lsls	r2, r2, #10
    1ed2:	4313      	orrs	r3, r2
    1ed4:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	2220      	movs	r2, #32
    1eda:	4013      	ands	r3, r2
    1edc:	d103      	bne.n	1ee6 <arch_ioport_set_port_mode+0x3a>
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	2210      	movs	r2, #16
    1ee2:	4013      	ands	r3, r2
    1ee4:	d004      	beq.n	1ef0 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    1ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ee8:	2280      	movs	r2, #128	; 0x80
    1eea:	02d2      	lsls	r2, r2, #11
    1eec:	4313      	orrs	r3, r2
    1eee:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	2280      	movs	r2, #128	; 0x80
    1ef4:	4013      	ands	r3, r2
    1ef6:	d004      	beq.n	1f02 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    1ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1efa:	2280      	movs	r2, #128	; 0x80
    1efc:	03d2      	lsls	r2, r2, #15
    1efe:	4313      	orrs	r3, r2
    1f00:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	061a      	lsls	r2, r3, #24
    1f06:	23f0      	movs	r3, #240	; 0xf0
    1f08:	051b      	lsls	r3, r3, #20
    1f0a:	4013      	ands	r3, r2
    1f0c:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
    1f0e:	68bb      	ldr	r3, [r7, #8]
    1f10:	041b      	lsls	r3, r3, #16
    1f12:	0c1b      	lsrs	r3, r3, #16
    1f14:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    1f16:	68bb      	ldr	r3, [r7, #8]
    1f18:	0c1b      	lsrs	r3, r3, #16
    1f1a:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f1c:	69ba      	ldr	r2, [r7, #24]
    1f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f20:	431a      	orrs	r2, r3
			config_mask | config_mux |
    1f22:	69fb      	ldr	r3, [r7, #28]
    1f24:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f26:	22a0      	movs	r2, #160	; 0xa0
    1f28:	05d2      	lsls	r2, r2, #23
    1f2a:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    1f2c:	6a3b      	ldr	r3, [r7, #32]
    1f2e:	629a      	str	r2, [r3, #40]	; 0x28

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f30:	697a      	ldr	r2, [r7, #20]
    1f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f34:	431a      	orrs	r2, r3
			config_mask | config_mux |
    1f36:	69fb      	ldr	r3, [r7, #28]
    1f38:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f3a:	22d0      	movs	r2, #208	; 0xd0
    1f3c:	0612      	lsls	r2, r2, #24
    1f3e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    1f40:	6a3b      	ldr	r3, [r7, #32]
    1f42:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	2220      	movs	r2, #32
    1f48:	4013      	ands	r3, r2
    1f4a:	d003      	beq.n	1f54 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    1f4c:	6a3b      	ldr	r3, [r7, #32]
    1f4e:	68ba      	ldr	r2, [r7, #8]
    1f50:	615a      	str	r2, [r3, #20]
	}
	else if (mode & IOPORT_MODE_PULLUP) {
		base->OUTSET.reg = mask;
	}
}
    1f52:	e006      	b.n	1f62 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	2210      	movs	r2, #16
    1f58:	4013      	ands	r3, r2
    1f5a:	d002      	beq.n	1f62 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    1f5c:	6a3b      	ldr	r3, [r7, #32]
    1f5e:	68ba      	ldr	r2, [r7, #8]
    1f60:	619a      	str	r2, [r3, #24]
}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	46bd      	mov	sp, r7
    1f66:	b00a      	add	sp, #40	; 0x28
    1f68:	bd80      	pop	{r7, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	00001e71 	.word	0x00001e71

00001f70 <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
    1f70:	b590      	push	{r4, r7, lr}
    1f72:	b083      	sub	sp, #12
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
    1f78:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	0018      	movs	r0, r3
    1f7e:	4b08      	ldr	r3, [pc, #32]	; (1fa0 <arch_ioport_set_pin_mode+0x30>)
    1f80:	4798      	blx	r3
    1f82:	0004      	movs	r4, r0
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	0018      	movs	r0, r3
    1f88:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <arch_ioport_set_pin_mode+0x34>)
    1f8a:	4798      	blx	r3
    1f8c:	0001      	movs	r1, r0
    1f8e:	683b      	ldr	r3, [r7, #0]
    1f90:	001a      	movs	r2, r3
    1f92:	0020      	movs	r0, r4
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <arch_ioport_set_pin_mode+0x38>)
    1f96:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
    1f98:	46c0      	nop			; (mov r8, r8)
    1f9a:	46bd      	mov	sp, r7
    1f9c:	b003      	add	sp, #12
    1f9e:	bd90      	pop	{r4, r7, pc}
    1fa0:	00001e5b 	.word	0x00001e5b
    1fa4:	00001e91 	.word	0x00001e91
    1fa8:	00001ead 	.word	0x00001ead

00001fac <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	b082      	sub	sp, #8
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	6078      	str	r0, [r7, #4]
    1fb4:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    1fb6:	683a      	ldr	r2, [r7, #0]
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	0011      	movs	r1, r2
    1fbc:	0018      	movs	r0, r3
    1fbe:	4b03      	ldr	r3, [pc, #12]	; (1fcc <ioport_set_pin_mode+0x20>)
    1fc0:	4798      	blx	r3
}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	46bd      	mov	sp, r7
    1fc6:	b002      	add	sp, #8
    1fc8:	bd80      	pop	{r7, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	00001f71 	.word	0x00001f71

00001fd0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	af00      	add	r7, sp, #0
	ioport_set_pin_mode(SDA_PIN, SDA_PIN_MUX);
    1fd4:	2102      	movs	r1, #2
    1fd6:	2016      	movs	r0, #22
    1fd8:	4b14      	ldr	r3, [pc, #80]	; (202c <STACK_SIZE+0x2c>)
    1fda:	4798      	blx	r3
	ioport_set_pin_mode(SCL_PIN, SCL_PIN_MUX);
    1fdc:	2102      	movs	r1, #2
    1fde:	2017      	movs	r0, #23
    1fe0:	4b12      	ldr	r3, [pc, #72]	; (202c <STACK_SIZE+0x2c>)
    1fe2:	4798      	blx	r3

	ioport_set_pin_mode(A0_PIN, A0_PIN_MUX);
    1fe4:	2101      	movs	r1, #1
    1fe6:	2002      	movs	r0, #2
    1fe8:	4b10      	ldr	r3, [pc, #64]	; (202c <STACK_SIZE+0x2c>)
    1fea:	4798      	blx	r3
	ioport_set_pin_mode(A1_PIN, A1_PIN_MUX);
    1fec:	2101      	movs	r1, #1
    1fee:	2028      	movs	r0, #40	; 0x28
    1ff0:	4b0e      	ldr	r3, [pc, #56]	; (202c <STACK_SIZE+0x2c>)
    1ff2:	4798      	blx	r3
	ioport_set_pin_mode(A2_PIN, A2_PIN_MUX);
    1ff4:	2101      	movs	r1, #1
    1ff6:	2029      	movs	r0, #41	; 0x29
    1ff8:	4b0c      	ldr	r3, [pc, #48]	; (202c <STACK_SIZE+0x2c>)
    1ffa:	4798      	blx	r3
	ioport_set_pin_mode(A3_PIN, A3_PIN_MUX);
    1ffc:	2101      	movs	r1, #1
    1ffe:	2004      	movs	r0, #4
    2000:	4b0a      	ldr	r3, [pc, #40]	; (202c <STACK_SIZE+0x2c>)
    2002:	4798      	blx	r3
	ioport_set_pin_mode(A4_PIN, A4_PIN_MUX);
    2004:	2101      	movs	r1, #1
    2006:	2005      	movs	r0, #5
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <STACK_SIZE+0x2c>)
    200a:	4798      	blx	r3
	ioport_set_pin_mode(A5_PIN, A5_PIN_MUX);
    200c:	2101      	movs	r1, #1
    200e:	2022      	movs	r0, #34	; 0x22
    2010:	4b06      	ldr	r3, [pc, #24]	; (202c <STACK_SIZE+0x2c>)
    2012:	4798      	blx	r3

	ioport_set_pin_mode(TX_PIN, TX_PIN_MUX);
    2014:	2103      	movs	r1, #3
    2016:	2036      	movs	r0, #54	; 0x36
    2018:	4b04      	ldr	r3, [pc, #16]	; (202c <STACK_SIZE+0x2c>)
    201a:	4798      	blx	r3
	ioport_set_pin_mode(RX_PIN, RX_PIN_MUX);
    201c:	2103      	movs	r1, #3
    201e:	2037      	movs	r0, #55	; 0x37
    2020:	4b02      	ldr	r3, [pc, #8]	; (202c <STACK_SIZE+0x2c>)
    2022:	4798      	blx	r3
    2024:	46c0      	nop			; (mov r8, r8)
    2026:	46bd      	mov	sp, r7
    2028:	bd80      	pop	{r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	00001fad 	.word	0x00001fad

00002030 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2030:	b580      	push	{r7, lr}
    2032:	b082      	sub	sp, #8
    2034:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2036:	4b10      	ldr	r3, [pc, #64]	; (2078 <cpu_irq_enter_critical+0x48>)
    2038:	681b      	ldr	r3, [r3, #0]
    203a:	2b00      	cmp	r3, #0
    203c:	d112      	bne.n	2064 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    203e:	f3ef 8310 	mrs	r3, PRIMASK
    2042:	607b      	str	r3, [r7, #4]
  return(result);
    2044:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2046:	2b00      	cmp	r3, #0
    2048:	d109      	bne.n	205e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    204a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    204c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <cpu_irq_enter_critical+0x4c>)
    2052:	2200      	movs	r2, #0
    2054:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2056:	4b0a      	ldr	r3, [pc, #40]	; (2080 <cpu_irq_enter_critical+0x50>)
    2058:	2201      	movs	r2, #1
    205a:	701a      	strb	r2, [r3, #0]
    205c:	e002      	b.n	2064 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    205e:	4b08      	ldr	r3, [pc, #32]	; (2080 <cpu_irq_enter_critical+0x50>)
    2060:	2200      	movs	r2, #0
    2062:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2064:	4b04      	ldr	r3, [pc, #16]	; (2078 <cpu_irq_enter_critical+0x48>)
    2066:	681b      	ldr	r3, [r3, #0]
    2068:	1c5a      	adds	r2, r3, #1
    206a:	4b03      	ldr	r3, [pc, #12]	; (2078 <cpu_irq_enter_critical+0x48>)
    206c:	601a      	str	r2, [r3, #0]
}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	46bd      	mov	sp, r7
    2072:	b002      	add	sp, #8
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	2000008c 	.word	0x2000008c
    207c:	2000000c 	.word	0x2000000c
    2080:	20000090 	.word	0x20000090

00002084 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2084:	b580      	push	{r7, lr}
    2086:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2088:	4b0b      	ldr	r3, [pc, #44]	; (20b8 <cpu_irq_leave_critical+0x34>)
    208a:	681b      	ldr	r3, [r3, #0]
    208c:	1e5a      	subs	r2, r3, #1
    208e:	4b0a      	ldr	r3, [pc, #40]	; (20b8 <cpu_irq_leave_critical+0x34>)
    2090:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2092:	4b09      	ldr	r3, [pc, #36]	; (20b8 <cpu_irq_leave_critical+0x34>)
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d10a      	bne.n	20b0 <cpu_irq_leave_critical+0x2c>
    209a:	4b08      	ldr	r3, [pc, #32]	; (20bc <cpu_irq_leave_critical+0x38>)
    209c:	781b      	ldrb	r3, [r3, #0]
    209e:	b2db      	uxtb	r3, r3
    20a0:	2b00      	cmp	r3, #0
    20a2:	d005      	beq.n	20b0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    20a4:	4b06      	ldr	r3, [pc, #24]	; (20c0 <cpu_irq_leave_critical+0x3c>)
    20a6:	2201      	movs	r2, #1
    20a8:	701a      	strb	r2, [r3, #0]
    20aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    20ae:	b662      	cpsie	i
	}
}
    20b0:	46c0      	nop			; (mov r8, r8)
    20b2:	46bd      	mov	sp, r7
    20b4:	bd80      	pop	{r7, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	2000008c 	.word	0x2000008c
    20bc:	20000090 	.word	0x20000090
    20c0:	2000000c 	.word	0x2000000c

000020c4 <system_gclk_gen_get_config_defaults>:
{
    20c4:	b580      	push	{r7, lr}
    20c6:	b082      	sub	sp, #8
    20c8:	af00      	add	r7, sp, #0
    20ca:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	2201      	movs	r2, #1
    20d0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	2200      	movs	r2, #0
    20d6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	2206      	movs	r2, #6
    20dc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	2200      	movs	r2, #0
    20e2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	2200      	movs	r2, #0
    20e8:	725a      	strb	r2, [r3, #9]
}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	46bd      	mov	sp, r7
    20ee:	b002      	add	sp, #8
    20f0:	bd80      	pop	{r7, pc}

000020f2 <system_main_clock_set_failure_detect>:
{
    20f2:	b580      	push	{r7, lr}
    20f4:	b082      	sub	sp, #8
    20f6:	af00      	add	r7, sp, #0
    20f8:	0002      	movs	r2, r0
    20fa:	1dfb      	adds	r3, r7, #7
    20fc:	701a      	strb	r2, [r3, #0]
}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	46bd      	mov	sp, r7
    2102:	b002      	add	sp, #8
    2104:	bd80      	pop	{r7, pc}
	...

00002108 <system_cpu_clock_set_divider>:
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2114:	4a05      	ldr	r2, [pc, #20]	; (212c <system_cpu_clock_set_divider+0x24>)
    2116:	1dfb      	adds	r3, r7, #7
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	2101      	movs	r1, #1
    211c:	4099      	lsls	r1, r3
    211e:	000b      	movs	r3, r1
    2120:	b2db      	uxtb	r3, r3
    2122:	7113      	strb	r3, [r2, #4]
}
    2124:	46c0      	nop			; (mov r8, r8)
    2126:	46bd      	mov	sp, r7
    2128:	b002      	add	sp, #8
    212a:	bd80      	pop	{r7, pc}
    212c:	40000400 	.word	0x40000400

00002130 <system_low_power_clock_set_divider>:
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	0002      	movs	r2, r0
    2138:	1dfb      	adds	r3, r7, #7
    213a:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <system_low_power_clock_set_divider+0x24>)
    213e:	1dfb      	adds	r3, r7, #7
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	2101      	movs	r1, #1
    2144:	4099      	lsls	r1, r3
    2146:	000b      	movs	r3, r1
    2148:	b2db      	uxtb	r3, r3
    214a:	7153      	strb	r3, [r2, #5]
}
    214c:	46c0      	nop			; (mov r8, r8)
    214e:	46bd      	mov	sp, r7
    2150:	b002      	add	sp, #8
    2152:	bd80      	pop	{r7, pc}
    2154:	40000400 	.word	0x40000400

00002158 <system_backup_clock_set_divider>:
{
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	0002      	movs	r2, r0
    2160:	1dfb      	adds	r3, r7, #7
    2162:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2164:	4a05      	ldr	r2, [pc, #20]	; (217c <system_backup_clock_set_divider+0x24>)
    2166:	1dfb      	adds	r3, r7, #7
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	2101      	movs	r1, #1
    216c:	4099      	lsls	r1, r3
    216e:	000b      	movs	r3, r1
    2170:	b2db      	uxtb	r3, r3
    2172:	7193      	strb	r3, [r2, #6]
}
    2174:	46c0      	nop			; (mov r8, r8)
    2176:	46bd      	mov	sp, r7
    2178:	b002      	add	sp, #8
    217a:	bd80      	pop	{r7, pc}
    217c:	40000400 	.word	0x40000400

00002180 <system_cpu_clock_get_hz>:
{
    2180:	b580      	push	{r7, lr}
    2182:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2184:	2000      	movs	r0, #0
    2186:	4b07      	ldr	r3, [pc, #28]	; (21a4 <system_cpu_clock_get_hz+0x24>)
    2188:	4798      	blx	r3
    218a:	0002      	movs	r2, r0
    218c:	4b06      	ldr	r3, [pc, #24]	; (21a8 <system_cpu_clock_get_hz+0x28>)
    218e:	791b      	ldrb	r3, [r3, #4]
    2190:	b2db      	uxtb	r3, r3
    2192:	0019      	movs	r1, r3
    2194:	4b05      	ldr	r3, [pc, #20]	; (21ac <system_cpu_clock_get_hz+0x2c>)
    2196:	0010      	movs	r0, r2
    2198:	4798      	blx	r3
    219a:	0003      	movs	r3, r0
}
    219c:	0018      	movs	r0, r3
    219e:	46bd      	mov	sp, r7
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00002671 	.word	0x00002671
    21a8:	40000400 	.word	0x40000400
    21ac:	00002c61 	.word	0x00002c61

000021b0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21bc:	4a08      	ldr	r2, [pc, #32]	; (21e0 <system_flash_set_waitstates+0x30>)
    21be:	1dfb      	adds	r3, r7, #7
    21c0:	781b      	ldrb	r3, [r3, #0]
    21c2:	210f      	movs	r1, #15
    21c4:	400b      	ands	r3, r1
    21c6:	b2d9      	uxtb	r1, r3
    21c8:	6853      	ldr	r3, [r2, #4]
    21ca:	200f      	movs	r0, #15
    21cc:	4001      	ands	r1, r0
    21ce:	0049      	lsls	r1, r1, #1
    21d0:	201e      	movs	r0, #30
    21d2:	4383      	bics	r3, r0
    21d4:	430b      	orrs	r3, r1
    21d6:	6053      	str	r3, [r2, #4]
}
    21d8:	46c0      	nop			; (mov r8, r8)
    21da:	46bd      	mov	sp, r7
    21dc:	b002      	add	sp, #8
    21de:	bd80      	pop	{r7, pc}
    21e0:	41004000 	.word	0x41004000

000021e4 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    21e4:	b580      	push	{r7, lr}
    21e6:	b082      	sub	sp, #8
    21e8:	af00      	add	r7, sp, #0
    21ea:	0002      	movs	r2, r0
    21ec:	1dfb      	adds	r3, r7, #7
    21ee:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    21f0:	2380      	movs	r3, #128	; 0x80
    21f2:	05db      	lsls	r3, r3, #23
    21f4:	789b      	ldrb	r3, [r3, #2]
    21f6:	b2db      	uxtb	r3, r3
    21f8:	1dfa      	adds	r2, r7, #7
    21fa:	7812      	ldrb	r2, [r2, #0]
    21fc:	429a      	cmp	r2, r3
    21fe:	d101      	bne.n	2204 <system_switch_performance_level+0x20>
		return STATUS_OK;
    2200:	2300      	movs	r3, #0
    2202:	e019      	b.n	2238 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2204:	2380      	movs	r3, #128	; 0x80
    2206:	05db      	lsls	r3, r3, #23
    2208:	789b      	ldrb	r3, [r3, #2]
    220a:	b2db      	uxtb	r3, r3
    220c:	b25b      	sxtb	r3, r3
    220e:	2b00      	cmp	r3, #0
    2210:	da01      	bge.n	2216 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    2212:	2317      	movs	r3, #23
    2214:	e010      	b.n	2238 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2216:	2380      	movs	r3, #128	; 0x80
    2218:	05db      	lsls	r3, r3, #23
    221a:	2201      	movs	r2, #1
    221c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    221e:	2380      	movs	r3, #128	; 0x80
    2220:	05db      	lsls	r3, r3, #23
    2222:	1dfa      	adds	r2, r7, #7
    2224:	7812      	ldrb	r2, [r2, #0]
    2226:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2228:	46c0      	nop			; (mov r8, r8)
    222a:	2380      	movs	r3, #128	; 0x80
    222c:	05db      	lsls	r3, r3, #23
    222e:	799b      	ldrb	r3, [r3, #6]
    2230:	b2db      	uxtb	r3, r3
    2232:	2b00      	cmp	r3, #0
    2234:	d0f9      	beq.n	222a <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    2236:	2300      	movs	r3, #0
}
    2238:	0018      	movs	r0, r3
    223a:	46bd      	mov	sp, r7
    223c:	b002      	add	sp, #8
    223e:	bd80      	pop	{r7, pc}

00002240 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2240:	b580      	push	{r7, lr}
    2242:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2244:	46c0      	nop			; (mov r8, r8)
    2246:	4b04      	ldr	r3, [pc, #16]	; (2258 <_system_dfll_wait_for_sync+0x18>)
    2248:	68da      	ldr	r2, [r3, #12]
    224a:	2380      	movs	r3, #128	; 0x80
    224c:	005b      	lsls	r3, r3, #1
    224e:	4013      	ands	r3, r2
    2250:	d0f9      	beq.n	2246 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	46bd      	mov	sp, r7
    2256:	bd80      	pop	{r7, pc}
    2258:	40000c00 	.word	0x40000c00

0000225c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    225c:	b580      	push	{r7, lr}
    225e:	b082      	sub	sp, #8
    2260:	af00      	add	r7, sp, #0
    2262:	0002      	movs	r2, r0
    2264:	1dfb      	adds	r3, r7, #7
    2266:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2268:	1dfb      	adds	r3, r7, #7
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	2b08      	cmp	r3, #8
    226e:	d842      	bhi.n	22f6 <system_clock_source_get_hz+0x9a>
    2270:	009a      	lsls	r2, r3, #2
    2272:	4b23      	ldr	r3, [pc, #140]	; (2300 <system_clock_source_get_hz+0xa4>)
    2274:	18d3      	adds	r3, r2, r3
    2276:	681b      	ldr	r3, [r3, #0]
    2278:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    227a:	4b22      	ldr	r3, [pc, #136]	; (2304 <system_clock_source_get_hz+0xa8>)
    227c:	691b      	ldr	r3, [r3, #16]
    227e:	e03b      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2280:	4b21      	ldr	r3, [pc, #132]	; (2308 <system_clock_source_get_hz+0xac>)
    2282:	7d1b      	ldrb	r3, [r3, #20]
    2284:	071b      	lsls	r3, r3, #28
    2286:	0f9b      	lsrs	r3, r3, #30
    2288:	b2db      	uxtb	r3, r3
    228a:	3301      	adds	r3, #1
    228c:	001a      	movs	r2, r3
    228e:	4b1f      	ldr	r3, [pc, #124]	; (230c <system_clock_source_get_hz+0xb0>)
    2290:	4353      	muls	r3, r2
    2292:	e031      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2294:	2380      	movs	r3, #128	; 0x80
    2296:	021b      	lsls	r3, r3, #8
    2298:	e02e      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    229a:	2380      	movs	r3, #128	; 0x80
    229c:	021b      	lsls	r3, r3, #8
    229e:	e02b      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    22a0:	4b18      	ldr	r3, [pc, #96]	; (2304 <system_clock_source_get_hz+0xa8>)
    22a2:	695b      	ldr	r3, [r3, #20]
    22a4:	e028      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    22a6:	4b17      	ldr	r3, [pc, #92]	; (2304 <system_clock_source_get_hz+0xa8>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	2202      	movs	r2, #2
    22ac:	4013      	ands	r3, r2
    22ae:	d101      	bne.n	22b4 <system_clock_source_get_hz+0x58>
			return 0;
    22b0:	2300      	movs	r3, #0
    22b2:	e021      	b.n	22f8 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    22b4:	4b16      	ldr	r3, [pc, #88]	; (2310 <system_clock_source_get_hz+0xb4>)
    22b6:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    22b8:	4b12      	ldr	r3, [pc, #72]	; (2304 <system_clock_source_get_hz+0xa8>)
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	2224      	movs	r2, #36	; 0x24
    22be:	4013      	ands	r3, r2
    22c0:	2b04      	cmp	r3, #4
    22c2:	d109      	bne.n	22d8 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    22c4:	2000      	movs	r0, #0
    22c6:	4b13      	ldr	r3, [pc, #76]	; (2314 <system_clock_source_get_hz+0xb8>)
    22c8:	4798      	blx	r3
    22ca:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    22cc:	4b0d      	ldr	r3, [pc, #52]	; (2304 <system_clock_source_get_hz+0xa8>)
    22ce:	689b      	ldr	r3, [r3, #8]
    22d0:	041b      	lsls	r3, r3, #16
    22d2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    22d4:	4353      	muls	r3, r2
    22d6:	e00f      	b.n	22f8 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    22d8:	4b0f      	ldr	r3, [pc, #60]	; (2318 <system_clock_source_get_hz+0xbc>)
    22da:	e00d      	b.n	22f8 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22dc:	4a0a      	ldr	r2, [pc, #40]	; (2308 <system_clock_source_get_hz+0xac>)
    22de:	2328      	movs	r3, #40	; 0x28
    22e0:	5cd3      	ldrb	r3, [r2, r3]
    22e2:	b2db      	uxtb	r3, r3
    22e4:	001a      	movs	r2, r3
    22e6:	2302      	movs	r3, #2
    22e8:	4013      	ands	r3, r2
    22ea:	d101      	bne.n	22f0 <system_clock_source_get_hz+0x94>
			return 0;
    22ec:	2300      	movs	r3, #0
    22ee:	e003      	b.n	22f8 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    22f0:	4b04      	ldr	r3, [pc, #16]	; (2304 <system_clock_source_get_hz+0xa8>)
    22f2:	68db      	ldr	r3, [r3, #12]
    22f4:	e000      	b.n	22f8 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    22f6:	2300      	movs	r3, #0
	}
}
    22f8:	0018      	movs	r0, r3
    22fa:	46bd      	mov	sp, r7
    22fc:	b002      	add	sp, #8
    22fe:	bd80      	pop	{r7, pc}
    2300:	00004cd8 	.word	0x00004cd8
    2304:	20000094 	.word	0x20000094
    2308:	40000c00 	.word	0x40000c00
    230c:	003d0900 	.word	0x003d0900
    2310:	00002241 	.word	0x00002241
    2314:	00002821 	.word	0x00002821
    2318:	02dc6c00 	.word	0x02dc6c00

0000231c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    231c:	b580      	push	{r7, lr}
    231e:	b0a0      	sub	sp, #128	; 0x80
    2320:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2322:	4b26      	ldr	r3, [pc, #152]	; (23bc <system_clock_init+0xa0>)
    2324:	2280      	movs	r2, #128	; 0x80
    2326:	0052      	lsls	r2, r2, #1
    2328:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    232a:	4b25      	ldr	r3, [pc, #148]	; (23c0 <system_clock_init+0xa4>)
    232c:	2203      	movs	r2, #3
    232e:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2330:	2000      	movs	r0, #0
    2332:	4b24      	ldr	r3, [pc, #144]	; (23c4 <system_clock_init+0xa8>)
    2334:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    2336:	2002      	movs	r0, #2
    2338:	4b23      	ldr	r3, [pc, #140]	; (23c8 <system_clock_init+0xac>)
    233a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    233c:	4a1f      	ldr	r2, [pc, #124]	; (23bc <system_clock_init+0xa0>)
    233e:	7d13      	ldrb	r3, [r2, #20]
    2340:	2180      	movs	r1, #128	; 0x80
    2342:	4249      	negs	r1, r1
    2344:	430b      	orrs	r3, r1
    2346:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    2348:	4a1c      	ldr	r2, [pc, #112]	; (23bc <system_clock_init+0xa0>)
    234a:	7d13      	ldrb	r3, [r2, #20]
    234c:	2140      	movs	r1, #64	; 0x40
    234e:	438b      	bics	r3, r1
    2350:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2352:	4b1e      	ldr	r3, [pc, #120]	; (23cc <system_clock_init+0xb0>)
    2354:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    2356:	2000      	movs	r0, #0
    2358:	4b1d      	ldr	r3, [pc, #116]	; (23d0 <system_clock_init+0xb4>)
    235a:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    235c:	2000      	movs	r0, #0
    235e:	4b1d      	ldr	r3, [pc, #116]	; (23d4 <system_clock_init+0xb8>)
    2360:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2362:	2000      	movs	r0, #0
    2364:	4b1c      	ldr	r3, [pc, #112]	; (23d8 <system_clock_init+0xbc>)
    2366:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    2368:	2000      	movs	r0, #0
    236a:	4b1c      	ldr	r3, [pc, #112]	; (23dc <system_clock_init+0xc0>)
    236c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    236e:	1d3b      	adds	r3, r7, #4
    2370:	0018      	movs	r0, r3
    2372:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <system_clock_init+0xc4>)
    2374:	4798      	blx	r3
    2376:	1d3b      	adds	r3, r7, #4
    2378:	2206      	movs	r2, #6
    237a:	701a      	strb	r2, [r3, #0]
    237c:	1d3b      	adds	r3, r7, #4
    237e:	2201      	movs	r2, #1
    2380:	605a      	str	r2, [r3, #4]
    2382:	1d3b      	adds	r3, r7, #4
    2384:	2200      	movs	r2, #0
    2386:	721a      	strb	r2, [r3, #8]
    2388:	1d3b      	adds	r3, r7, #4
    238a:	2200      	movs	r2, #0
    238c:	725a      	strb	r2, [r3, #9]
    238e:	1d3b      	adds	r3, r7, #4
    2390:	0019      	movs	r1, r3
    2392:	2000      	movs	r0, #0
    2394:	4b13      	ldr	r3, [pc, #76]	; (23e4 <system_clock_init+0xc8>)
    2396:	4798      	blx	r3
    2398:	2000      	movs	r0, #0
    239a:	4b13      	ldr	r3, [pc, #76]	; (23e8 <system_clock_init+0xcc>)
    239c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    239e:	4b13      	ldr	r3, [pc, #76]	; (23ec <system_clock_init+0xd0>)
    23a0:	4798      	blx	r3
    23a2:	0003      	movs	r3, r0
    23a4:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
    23a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    23a8:	4a11      	ldr	r2, [pc, #68]	; (23f0 <system_clock_init+0xd4>)
    23aa:	4293      	cmp	r3, r2
    23ac:	d802      	bhi.n	23b4 <system_clock_init+0x98>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    23ae:	2000      	movs	r0, #0
    23b0:	4b05      	ldr	r3, [pc, #20]	; (23c8 <system_clock_init+0xac>)
    23b2:	4798      	blx	r3
	}
}
    23b4:	46c0      	nop			; (mov r8, r8)
    23b6:	46bd      	mov	sp, r7
    23b8:	b020      	add	sp, #128	; 0x80
    23ba:	bd80      	pop	{r7, pc}
    23bc:	40000c00 	.word	0x40000c00
    23c0:	40001400 	.word	0x40001400
    23c4:	000021b1 	.word	0x000021b1
    23c8:	000021e5 	.word	0x000021e5
    23cc:	000024d5 	.word	0x000024d5
    23d0:	00002159 	.word	0x00002159
    23d4:	00002131 	.word	0x00002131
    23d8:	00002109 	.word	0x00002109
    23dc:	000020f3 	.word	0x000020f3
    23e0:	000020c5 	.word	0x000020c5
    23e4:	00002505 	.word	0x00002505
    23e8:	00002615 	.word	0x00002615
    23ec:	00002181 	.word	0x00002181
    23f0:	00b71b00 	.word	0x00b71b00

000023f4 <system_apb_clock_set_mask>:
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b082      	sub	sp, #8
    23f8:	af00      	add	r7, sp, #0
    23fa:	0002      	movs	r2, r0
    23fc:	6039      	str	r1, [r7, #0]
    23fe:	1dfb      	adds	r3, r7, #7
    2400:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2402:	1dfb      	adds	r3, r7, #7
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	2b04      	cmp	r3, #4
    2408:	d827      	bhi.n	245a <system_apb_clock_set_mask+0x66>
    240a:	009a      	lsls	r2, r3, #2
    240c:	4b16      	ldr	r3, [pc, #88]	; (2468 <system_apb_clock_set_mask+0x74>)
    240e:	18d3      	adds	r3, r2, r3
    2410:	681b      	ldr	r3, [r3, #0]
    2412:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    2414:	4b15      	ldr	r3, [pc, #84]	; (246c <system_apb_clock_set_mask+0x78>)
    2416:	4a15      	ldr	r2, [pc, #84]	; (246c <system_apb_clock_set_mask+0x78>)
    2418:	6951      	ldr	r1, [r2, #20]
    241a:	683a      	ldr	r2, [r7, #0]
    241c:	430a      	orrs	r2, r1
    241e:	615a      	str	r2, [r3, #20]
			break;
    2420:	e01d      	b.n	245e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    2422:	4b12      	ldr	r3, [pc, #72]	; (246c <system_apb_clock_set_mask+0x78>)
    2424:	4a11      	ldr	r2, [pc, #68]	; (246c <system_apb_clock_set_mask+0x78>)
    2426:	6991      	ldr	r1, [r2, #24]
    2428:	683a      	ldr	r2, [r7, #0]
    242a:	430a      	orrs	r2, r1
    242c:	619a      	str	r2, [r3, #24]
			break;
    242e:	e016      	b.n	245e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    2430:	4b0e      	ldr	r3, [pc, #56]	; (246c <system_apb_clock_set_mask+0x78>)
    2432:	4a0e      	ldr	r2, [pc, #56]	; (246c <system_apb_clock_set_mask+0x78>)
    2434:	69d1      	ldr	r1, [r2, #28]
    2436:	683a      	ldr	r2, [r7, #0]
    2438:	430a      	orrs	r2, r1
    243a:	61da      	str	r2, [r3, #28]
			break;
    243c:	e00f      	b.n	245e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    243e:	4b0b      	ldr	r3, [pc, #44]	; (246c <system_apb_clock_set_mask+0x78>)
    2440:	4a0a      	ldr	r2, [pc, #40]	; (246c <system_apb_clock_set_mask+0x78>)
    2442:	6a11      	ldr	r1, [r2, #32]
    2444:	683a      	ldr	r2, [r7, #0]
    2446:	430a      	orrs	r2, r1
    2448:	621a      	str	r2, [r3, #32]
			break;
    244a:	e008      	b.n	245e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    244c:	4b07      	ldr	r3, [pc, #28]	; (246c <system_apb_clock_set_mask+0x78>)
    244e:	4a07      	ldr	r2, [pc, #28]	; (246c <system_apb_clock_set_mask+0x78>)
    2450:	6a51      	ldr	r1, [r2, #36]	; 0x24
    2452:	683a      	ldr	r2, [r7, #0]
    2454:	430a      	orrs	r2, r1
    2456:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    2458:	e001      	b.n	245e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    245a:	2317      	movs	r3, #23
    245c:	e000      	b.n	2460 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    245e:	2300      	movs	r3, #0
}
    2460:	0018      	movs	r0, r3
    2462:	46bd      	mov	sp, r7
    2464:	b002      	add	sp, #8
    2466:	bd80      	pop	{r7, pc}
    2468:	00004cfc 	.word	0x00004cfc
    246c:	40000400 	.word	0x40000400

00002470 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2470:	b580      	push	{r7, lr}
    2472:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2474:	4b02      	ldr	r3, [pc, #8]	; (2480 <system_interrupt_enter_critical_section+0x10>)
    2476:	4798      	blx	r3
}
    2478:	46c0      	nop			; (mov r8, r8)
    247a:	46bd      	mov	sp, r7
    247c:	bd80      	pop	{r7, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	00002031 	.word	0x00002031

00002484 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2484:	b580      	push	{r7, lr}
    2486:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2488:	4b02      	ldr	r3, [pc, #8]	; (2494 <system_interrupt_leave_critical_section+0x10>)
    248a:	4798      	blx	r3
}
    248c:	46c0      	nop			; (mov r8, r8)
    248e:	46bd      	mov	sp, r7
    2490:	bd80      	pop	{r7, pc}
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	00002085 	.word	0x00002085

00002498 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    2498:	b580      	push	{r7, lr}
    249a:	b082      	sub	sp, #8
    249c:	af00      	add	r7, sp, #0
    249e:	0002      	movs	r2, r0
    24a0:	1dfb      	adds	r3, r7, #7
    24a2:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24a4:	4b09      	ldr	r3, [pc, #36]	; (24cc <system_gclk_is_syncing+0x34>)
    24a6:	685b      	ldr	r3, [r3, #4]
    24a8:	1dfa      	adds	r2, r7, #7
    24aa:	7812      	ldrb	r2, [r2, #0]
    24ac:	2101      	movs	r1, #1
    24ae:	4091      	lsls	r1, r2
    24b0:	000a      	movs	r2, r1
    24b2:	0092      	lsls	r2, r2, #2
    24b4:	4013      	ands	r3, r2
    24b6:	4a06      	ldr	r2, [pc, #24]	; (24d0 <system_gclk_is_syncing+0x38>)
    24b8:	4013      	ands	r3, r2
    24ba:	d001      	beq.n	24c0 <system_gclk_is_syncing+0x28>
		 return true;
    24bc:	2301      	movs	r3, #1
    24be:	e000      	b.n	24c2 <system_gclk_is_syncing+0x2a>
	}

	 return false;
    24c0:	2300      	movs	r3, #0
}
    24c2:	0018      	movs	r0, r3
    24c4:	46bd      	mov	sp, r7
    24c6:	b002      	add	sp, #8
    24c8:	bd80      	pop	{r7, pc}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	40001800 	.word	0x40001800
    24d0:	000007fc 	.word	0x000007fc

000024d4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    24d8:	2140      	movs	r1, #64	; 0x40
    24da:	2000      	movs	r0, #0
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <system_gclk_init+0x28>)
    24de:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    24e0:	4b07      	ldr	r3, [pc, #28]	; (2500 <system_gclk_init+0x2c>)
    24e2:	2201      	movs	r2, #1
    24e4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	4b05      	ldr	r3, [pc, #20]	; (2500 <system_gclk_init+0x2c>)
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	b2db      	uxtb	r3, r3
    24ee:	001a      	movs	r2, r3
    24f0:	2301      	movs	r3, #1
    24f2:	4013      	ands	r3, r2
    24f4:	d1f8      	bne.n	24e8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	46bd      	mov	sp, r7
    24fa:	bd80      	pop	{r7, pc}
    24fc:	000023f5 	.word	0x000023f5
    2500:	40001800 	.word	0x40001800

00002504 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2504:	b580      	push	{r7, lr}
    2506:	b086      	sub	sp, #24
    2508:	af00      	add	r7, sp, #0
    250a:	0002      	movs	r2, r0
    250c:	6039      	str	r1, [r7, #0]
    250e:	1dfb      	adds	r3, r7, #7
    2510:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2512:	683b      	ldr	r3, [r7, #0]
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2518:	683b      	ldr	r3, [r7, #0]
    251a:	785b      	ldrb	r3, [r3, #1]
    251c:	2b00      	cmp	r3, #0
    251e:	d004      	beq.n	252a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2520:	697b      	ldr	r3, [r7, #20]
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	00d2      	lsls	r2, r2, #3
    2526:	4313      	orrs	r3, r2
    2528:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    252a:	683b      	ldr	r3, [r7, #0]
    252c:	7a5b      	ldrb	r3, [r3, #9]
    252e:	2b00      	cmp	r3, #0
    2530:	d004      	beq.n	253c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2532:	697b      	ldr	r3, [r7, #20]
    2534:	2280      	movs	r2, #128	; 0x80
    2536:	0112      	lsls	r2, r2, #4
    2538:	4313      	orrs	r3, r2
    253a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    253c:	683b      	ldr	r3, [r7, #0]
    253e:	685b      	ldr	r3, [r3, #4]
    2540:	2b01      	cmp	r3, #1
    2542:	d92c      	bls.n	259e <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2544:	683b      	ldr	r3, [r7, #0]
    2546:	685a      	ldr	r2, [r3, #4]
    2548:	683b      	ldr	r3, [r7, #0]
    254a:	685b      	ldr	r3, [r3, #4]
    254c:	3b01      	subs	r3, #1
    254e:	4013      	ands	r3, r2
    2550:	d11a      	bne.n	2588 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2552:	2300      	movs	r3, #0
    2554:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2556:	2302      	movs	r3, #2
    2558:	60fb      	str	r3, [r7, #12]
    255a:	e005      	b.n	2568 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    255c:	693b      	ldr	r3, [r7, #16]
    255e:	3301      	adds	r3, #1
    2560:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    2562:	68fb      	ldr	r3, [r7, #12]
    2564:	005b      	lsls	r3, r3, #1
    2566:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    2568:	683b      	ldr	r3, [r7, #0]
    256a:	685a      	ldr	r2, [r3, #4]
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	429a      	cmp	r2, r3
    2570:	d8f4      	bhi.n	255c <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2572:	693b      	ldr	r3, [r7, #16]
    2574:	041b      	lsls	r3, r3, #16
    2576:	697a      	ldr	r2, [r7, #20]
    2578:	4313      	orrs	r3, r2
    257a:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    257c:	697b      	ldr	r3, [r7, #20]
    257e:	2280      	movs	r2, #128	; 0x80
    2580:	0152      	lsls	r2, r2, #5
    2582:	4313      	orrs	r3, r2
    2584:	617b      	str	r3, [r7, #20]
    2586:	e00a      	b.n	259e <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2588:	683b      	ldr	r3, [r7, #0]
    258a:	685b      	ldr	r3, [r3, #4]
    258c:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    258e:	697a      	ldr	r2, [r7, #20]
    2590:	4313      	orrs	r3, r2
    2592:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2594:	697b      	ldr	r3, [r7, #20]
    2596:	2280      	movs	r2, #128	; 0x80
    2598:	0092      	lsls	r2, r2, #2
    259a:	4313      	orrs	r3, r2
    259c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	7a1b      	ldrb	r3, [r3, #8]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d004      	beq.n	25b0 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    25a6:	697b      	ldr	r3, [r7, #20]
    25a8:	2280      	movs	r2, #128	; 0x80
    25aa:	0192      	lsls	r2, r2, #6
    25ac:	4313      	orrs	r3, r2
    25ae:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    25b0:	46c0      	nop			; (mov r8, r8)
    25b2:	1dfb      	adds	r3, r7, #7
    25b4:	781b      	ldrb	r3, [r3, #0]
    25b6:	0018      	movs	r0, r3
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <system_gclk_gen_set_config+0x100>)
    25ba:	4798      	blx	r3
    25bc:	1e03      	subs	r3, r0, #0
    25be:	d1f8      	bne.n	25b2 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    25c0:	4b11      	ldr	r3, [pc, #68]	; (2608 <system_gclk_gen_set_config+0x104>)
    25c2:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    25c4:	4811      	ldr	r0, [pc, #68]	; (260c <system_gclk_gen_set_config+0x108>)
    25c6:	1dfb      	adds	r3, r7, #7
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	4910      	ldr	r1, [pc, #64]	; (260c <system_gclk_gen_set_config+0x108>)
    25cc:	1dfa      	adds	r2, r7, #7
    25ce:	7812      	ldrb	r2, [r2, #0]
    25d0:	3208      	adds	r2, #8
    25d2:	0092      	lsls	r2, r2, #2
    25d4:	5851      	ldr	r1, [r2, r1]
    25d6:	2280      	movs	r2, #128	; 0x80
    25d8:	0052      	lsls	r2, r2, #1
    25da:	4011      	ands	r1, r2
    25dc:	697a      	ldr	r2, [r7, #20]
    25de:	430a      	orrs	r2, r1
    25e0:	3308      	adds	r3, #8
    25e2:	009b      	lsls	r3, r3, #2
    25e4:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	1dfb      	adds	r3, r7, #7
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	0018      	movs	r0, r3
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <system_gclk_gen_set_config+0x100>)
    25f0:	4798      	blx	r3
    25f2:	1e03      	subs	r3, r0, #0
    25f4:	d1f8      	bne.n	25e8 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    25f6:	4b06      	ldr	r3, [pc, #24]	; (2610 <system_gclk_gen_set_config+0x10c>)
    25f8:	4798      	blx	r3
}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	46bd      	mov	sp, r7
    25fe:	b006      	add	sp, #24
    2600:	bd80      	pop	{r7, pc}
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	00002499 	.word	0x00002499
    2608:	00002471 	.word	0x00002471
    260c:	40001800 	.word	0x40001800
    2610:	00002485 	.word	0x00002485

00002614 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2614:	b580      	push	{r7, lr}
    2616:	b082      	sub	sp, #8
    2618:	af00      	add	r7, sp, #0
    261a:	0002      	movs	r2, r0
    261c:	1dfb      	adds	r3, r7, #7
    261e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    2620:	46c0      	nop			; (mov r8, r8)
    2622:	1dfb      	adds	r3, r7, #7
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	0018      	movs	r0, r3
    2628:	4b0d      	ldr	r3, [pc, #52]	; (2660 <system_gclk_gen_enable+0x4c>)
    262a:	4798      	blx	r3
    262c:	1e03      	subs	r3, r0, #0
    262e:	d1f8      	bne.n	2622 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2630:	4b0c      	ldr	r3, [pc, #48]	; (2664 <system_gclk_gen_enable+0x50>)
    2632:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2634:	480c      	ldr	r0, [pc, #48]	; (2668 <system_gclk_gen_enable+0x54>)
    2636:	1dfb      	adds	r3, r7, #7
    2638:	781b      	ldrb	r3, [r3, #0]
    263a:	490b      	ldr	r1, [pc, #44]	; (2668 <system_gclk_gen_enable+0x54>)
    263c:	1dfa      	adds	r2, r7, #7
    263e:	7812      	ldrb	r2, [r2, #0]
    2640:	3208      	adds	r2, #8
    2642:	0092      	lsls	r2, r2, #2
    2644:	5852      	ldr	r2, [r2, r1]
    2646:	2180      	movs	r1, #128	; 0x80
    2648:	0049      	lsls	r1, r1, #1
    264a:	430a      	orrs	r2, r1
    264c:	3308      	adds	r3, #8
    264e:	009b      	lsls	r3, r3, #2
    2650:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    2652:	4b06      	ldr	r3, [pc, #24]	; (266c <system_gclk_gen_enable+0x58>)
    2654:	4798      	blx	r3
}
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	46bd      	mov	sp, r7
    265a:	b002      	add	sp, #8
    265c:	bd80      	pop	{r7, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00002499 	.word	0x00002499
    2664:	00002471 	.word	0x00002471
    2668:	40001800 	.word	0x40001800
    266c:	00002485 	.word	0x00002485

00002670 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2670:	b580      	push	{r7, lr}
    2672:	b086      	sub	sp, #24
    2674:	af00      	add	r7, sp, #0
    2676:	0002      	movs	r2, r0
    2678:	1dfb      	adds	r3, r7, #7
    267a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    267c:	46c0      	nop			; (mov r8, r8)
    267e:	1dfb      	adds	r3, r7, #7
    2680:	781b      	ldrb	r3, [r3, #0]
    2682:	0018      	movs	r0, r3
    2684:	4b24      	ldr	r3, [pc, #144]	; (2718 <system_gclk_gen_get_hz+0xa8>)
    2686:	4798      	blx	r3
    2688:	1e03      	subs	r3, r0, #0
    268a:	d1f8      	bne.n	267e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    268c:	4b23      	ldr	r3, [pc, #140]	; (271c <system_gclk_gen_get_hz+0xac>)
    268e:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2690:	4a23      	ldr	r2, [pc, #140]	; (2720 <system_gclk_gen_get_hz+0xb0>)
    2692:	1dfb      	adds	r3, r7, #7
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	3308      	adds	r3, #8
    2698:	009b      	lsls	r3, r3, #2
    269a:	589b      	ldr	r3, [r3, r2]
    269c:	071b      	lsls	r3, r3, #28
    269e:	0f1b      	lsrs	r3, r3, #28
    26a0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26a2:	0018      	movs	r0, r3
    26a4:	4b1f      	ldr	r3, [pc, #124]	; (2724 <system_gclk_gen_get_hz+0xb4>)
    26a6:	4798      	blx	r3
    26a8:	0003      	movs	r3, r0
    26aa:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    26ac:	4a1c      	ldr	r2, [pc, #112]	; (2720 <system_gclk_gen_get_hz+0xb0>)
    26ae:	1dfb      	adds	r3, r7, #7
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	3308      	adds	r3, #8
    26b4:	009b      	lsls	r3, r3, #2
    26b6:	589b      	ldr	r3, [r3, r2]
    26b8:	04db      	lsls	r3, r3, #19
    26ba:	0fdb      	lsrs	r3, r3, #31
    26bc:	b2da      	uxtb	r2, r3
    26be:	2313      	movs	r3, #19
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    26c4:	4a16      	ldr	r2, [pc, #88]	; (2720 <system_gclk_gen_get_hz+0xb0>)
    26c6:	1dfb      	adds	r3, r7, #7
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	3308      	adds	r3, #8
    26cc:	009b      	lsls	r3, r3, #2
    26ce:	589b      	ldr	r3, [r3, r2]
    26d0:	0c1b      	lsrs	r3, r3, #16
    26d2:	b29b      	uxth	r3, r3
    26d4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    26d6:	4b14      	ldr	r3, [pc, #80]	; (2728 <system_gclk_gen_get_hz+0xb8>)
    26d8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    26da:	2313      	movs	r3, #19
    26dc:	18fb      	adds	r3, r7, r3
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d109      	bne.n	26f8 <system_gclk_gen_get_hz+0x88>
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	2b01      	cmp	r3, #1
    26e8:	d906      	bls.n	26f8 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    26ea:	4b10      	ldr	r3, [pc, #64]	; (272c <system_gclk_gen_get_hz+0xbc>)
    26ec:	68f9      	ldr	r1, [r7, #12]
    26ee:	6978      	ldr	r0, [r7, #20]
    26f0:	4798      	blx	r3
    26f2:	0003      	movs	r3, r0
    26f4:	617b      	str	r3, [r7, #20]
    26f6:	e00a      	b.n	270e <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    26f8:	2313      	movs	r3, #19
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	2b00      	cmp	r3, #0
    2700:	d005      	beq.n	270e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	3301      	adds	r3, #1
    2706:	697a      	ldr	r2, [r7, #20]
    2708:	40da      	lsrs	r2, r3
    270a:	0013      	movs	r3, r2
    270c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    270e:	697b      	ldr	r3, [r7, #20]
}
    2710:	0018      	movs	r0, r3
    2712:	46bd      	mov	sp, r7
    2714:	b006      	add	sp, #24
    2716:	bd80      	pop	{r7, pc}
    2718:	00002499 	.word	0x00002499
    271c:	00002471 	.word	0x00002471
    2720:	40001800 	.word	0x40001800
    2724:	0000225d 	.word	0x0000225d
    2728:	00002485 	.word	0x00002485
    272c:	00002c61 	.word	0x00002c61

00002730 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2730:	b580      	push	{r7, lr}
    2732:	b082      	sub	sp, #8
    2734:	af00      	add	r7, sp, #0
    2736:	0002      	movs	r2, r0
    2738:	6039      	str	r1, [r7, #0]
    273a:	1dfb      	adds	r3, r7, #7
    273c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    273e:	1dfb      	adds	r3, r7, #7
    2740:	781b      	ldrb	r3, [r3, #0]
    2742:	0018      	movs	r0, r3
    2744:	4b08      	ldr	r3, [pc, #32]	; (2768 <system_gclk_chan_set_config+0x38>)
    2746:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2748:	4908      	ldr	r1, [pc, #32]	; (276c <system_gclk_chan_set_config+0x3c>)
    274a:	1dfb      	adds	r3, r7, #7
    274c:	781b      	ldrb	r3, [r3, #0]
    274e:	683a      	ldr	r2, [r7, #0]
    2750:	7812      	ldrb	r2, [r2, #0]
    2752:	0010      	movs	r0, r2
    2754:	220f      	movs	r2, #15
    2756:	4002      	ands	r2, r0
    2758:	3320      	adds	r3, #32
    275a:	009b      	lsls	r3, r3, #2
    275c:	505a      	str	r2, [r3, r1]


}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	46bd      	mov	sp, r7
    2762:	b002      	add	sp, #8
    2764:	bd80      	pop	{r7, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	000027c9 	.word	0x000027c9
    276c:	40001800 	.word	0x40001800

00002770 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	0002      	movs	r2, r0
    2778:	1dfb      	adds	r3, r7, #7
    277a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    277c:	4b0f      	ldr	r3, [pc, #60]	; (27bc <system_gclk_chan_enable+0x4c>)
    277e:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2780:	490f      	ldr	r1, [pc, #60]	; (27c0 <system_gclk_chan_enable+0x50>)
    2782:	1dfb      	adds	r3, r7, #7
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	480e      	ldr	r0, [pc, #56]	; (27c0 <system_gclk_chan_enable+0x50>)
    2788:	1dfa      	adds	r2, r7, #7
    278a:	7812      	ldrb	r2, [r2, #0]
    278c:	3220      	adds	r2, #32
    278e:	0092      	lsls	r2, r2, #2
    2790:	5812      	ldr	r2, [r2, r0]
    2792:	2040      	movs	r0, #64	; 0x40
    2794:	4302      	orrs	r2, r0
    2796:	3320      	adds	r3, #32
    2798:	009b      	lsls	r3, r3, #2
    279a:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    279c:	46c0      	nop			; (mov r8, r8)
    279e:	4a08      	ldr	r2, [pc, #32]	; (27c0 <system_gclk_chan_enable+0x50>)
    27a0:	1dfb      	adds	r3, r7, #7
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	3320      	adds	r3, #32
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	589b      	ldr	r3, [r3, r2]
    27aa:	2240      	movs	r2, #64	; 0x40
    27ac:	4013      	ands	r3, r2
    27ae:	d0f6      	beq.n	279e <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    27b0:	4b04      	ldr	r3, [pc, #16]	; (27c4 <system_gclk_chan_enable+0x54>)
    27b2:	4798      	blx	r3
}
    27b4:	46c0      	nop			; (mov r8, r8)
    27b6:	46bd      	mov	sp, r7
    27b8:	b002      	add	sp, #8
    27ba:	bd80      	pop	{r7, pc}
    27bc:	00002471 	.word	0x00002471
    27c0:	40001800 	.word	0x40001800
    27c4:	00002485 	.word	0x00002485

000027c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27c8:	b580      	push	{r7, lr}
    27ca:	b082      	sub	sp, #8
    27cc:	af00      	add	r7, sp, #0
    27ce:	0002      	movs	r2, r0
    27d0:	1dfb      	adds	r3, r7, #7
    27d2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    27d4:	4b0f      	ldr	r3, [pc, #60]	; (2814 <system_gclk_chan_disable+0x4c>)
    27d6:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    27d8:	490f      	ldr	r1, [pc, #60]	; (2818 <system_gclk_chan_disable+0x50>)
    27da:	1dfb      	adds	r3, r7, #7
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	480e      	ldr	r0, [pc, #56]	; (2818 <system_gclk_chan_disable+0x50>)
    27e0:	1dfa      	adds	r2, r7, #7
    27e2:	7812      	ldrb	r2, [r2, #0]
    27e4:	3220      	adds	r2, #32
    27e6:	0092      	lsls	r2, r2, #2
    27e8:	5812      	ldr	r2, [r2, r0]
    27ea:	2040      	movs	r0, #64	; 0x40
    27ec:	4382      	bics	r2, r0
    27ee:	3320      	adds	r3, #32
    27f0:	009b      	lsls	r3, r3, #2
    27f2:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    27f4:	46c0      	nop			; (mov r8, r8)
    27f6:	4a08      	ldr	r2, [pc, #32]	; (2818 <system_gclk_chan_disable+0x50>)
    27f8:	1dfb      	adds	r3, r7, #7
    27fa:	781b      	ldrb	r3, [r3, #0]
    27fc:	3320      	adds	r3, #32
    27fe:	009b      	lsls	r3, r3, #2
    2800:	589b      	ldr	r3, [r3, r2]
    2802:	2240      	movs	r2, #64	; 0x40
    2804:	4013      	ands	r3, r2
    2806:	d1f6      	bne.n	27f6 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <system_gclk_chan_disable+0x54>)
    280a:	4798      	blx	r3
}
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46bd      	mov	sp, r7
    2810:	b002      	add	sp, #8
    2812:	bd80      	pop	{r7, pc}
    2814:	00002471 	.word	0x00002471
    2818:	40001800 	.word	0x40001800
    281c:	00002485 	.word	0x00002485

00002820 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2820:	b580      	push	{r7, lr}
    2822:	b084      	sub	sp, #16
    2824:	af00      	add	r7, sp, #0
    2826:	0002      	movs	r2, r0
    2828:	1dfb      	adds	r3, r7, #7
    282a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    282c:	4b0d      	ldr	r3, [pc, #52]	; (2864 <system_gclk_chan_get_hz+0x44>)
    282e:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2830:	4a0d      	ldr	r2, [pc, #52]	; (2868 <system_gclk_chan_get_hz+0x48>)
    2832:	1dfb      	adds	r3, r7, #7
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	3320      	adds	r3, #32
    2838:	009b      	lsls	r3, r3, #2
    283a:	589b      	ldr	r3, [r3, r2]
    283c:	071b      	lsls	r3, r3, #28
    283e:	0f1b      	lsrs	r3, r3, #28
    2840:	b2da      	uxtb	r2, r3
    2842:	230f      	movs	r3, #15
    2844:	18fb      	adds	r3, r7, r3
    2846:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    2848:	4b08      	ldr	r3, [pc, #32]	; (286c <system_gclk_chan_get_hz+0x4c>)
    284a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    284c:	230f      	movs	r3, #15
    284e:	18fb      	adds	r3, r7, r3
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	0018      	movs	r0, r3
    2854:	4b06      	ldr	r3, [pc, #24]	; (2870 <system_gclk_chan_get_hz+0x50>)
    2856:	4798      	blx	r3
    2858:	0003      	movs	r3, r0
}
    285a:	0018      	movs	r0, r3
    285c:	46bd      	mov	sp, r7
    285e:	b004      	add	sp, #16
    2860:	bd80      	pop	{r7, pc}
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	00002471 	.word	0x00002471
    2868:	40001800 	.word	0x40001800
    286c:	00002485 	.word	0x00002485
    2870:	00002671 	.word	0x00002671

00002874 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2874:	b580      	push	{r7, lr}
    2876:	b084      	sub	sp, #16
    2878:	af00      	add	r7, sp, #0
    287a:	0002      	movs	r2, r0
    287c:	1dfb      	adds	r3, r7, #7
    287e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2880:	230f      	movs	r3, #15
    2882:	18fb      	adds	r3, r7, r3
    2884:	1dfa      	adds	r2, r7, #7
    2886:	7812      	ldrb	r2, [r2, #0]
    2888:	09d2      	lsrs	r2, r2, #7
    288a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    288c:	230e      	movs	r3, #14
    288e:	18fb      	adds	r3, r7, r3
    2890:	1dfa      	adds	r2, r7, #7
    2892:	7812      	ldrb	r2, [r2, #0]
    2894:	0952      	lsrs	r2, r2, #5
    2896:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2898:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    289a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    289c:	230f      	movs	r3, #15
    289e:	18fb      	adds	r3, r7, r3
    28a0:	781b      	ldrb	r3, [r3, #0]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d10f      	bne.n	28c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    28a6:	230f      	movs	r3, #15
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	009b      	lsls	r3, r3, #2
    28ae:	2210      	movs	r2, #16
    28b0:	4694      	mov	ip, r2
    28b2:	44bc      	add	ip, r7
    28b4:	4463      	add	r3, ip
    28b6:	3b08      	subs	r3, #8
    28b8:	681a      	ldr	r2, [r3, #0]
    28ba:	230e      	movs	r3, #14
    28bc:	18fb      	adds	r3, r7, r3
    28be:	781b      	ldrb	r3, [r3, #0]
    28c0:	01db      	lsls	r3, r3, #7
    28c2:	18d3      	adds	r3, r2, r3
    28c4:	e000      	b.n	28c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    28c6:	2300      	movs	r3, #0
	}
}
    28c8:	0018      	movs	r0, r3
    28ca:	46bd      	mov	sp, r7
    28cc:	b004      	add	sp, #16
    28ce:	bd80      	pop	{r7, pc}
    28d0:	40002800 	.word	0x40002800

000028d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    28d4:	b580      	push	{r7, lr}
    28d6:	b088      	sub	sp, #32
    28d8:	af00      	add	r7, sp, #0
    28da:	60f8      	str	r0, [r7, #12]
    28dc:	60b9      	str	r1, [r7, #8]
    28de:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    28e0:	2300      	movs	r3, #0
    28e2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	78db      	ldrb	r3, [r3, #3]
    28e8:	2201      	movs	r2, #1
    28ea:	4053      	eors	r3, r2
    28ec:	b2db      	uxtb	r3, r3
    28ee:	2b00      	cmp	r3, #0
    28f0:	d035      	beq.n	295e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	781b      	ldrb	r3, [r3, #0]
    28f6:	2b80      	cmp	r3, #128	; 0x80
    28f8:	d00b      	beq.n	2912 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    28fa:	69fb      	ldr	r3, [r7, #28]
    28fc:	2280      	movs	r2, #128	; 0x80
    28fe:	0252      	lsls	r2, r2, #9
    2900:	4313      	orrs	r3, r2
    2902:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	061b      	lsls	r3, r3, #24
    290a:	001a      	movs	r2, r3
    290c:	69fb      	ldr	r3, [r7, #28]
    290e:	4313      	orrs	r3, r2
    2910:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	785b      	ldrb	r3, [r3, #1]
    2916:	2b00      	cmp	r3, #0
    2918:	d003      	beq.n	2922 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    291e:	2b02      	cmp	r3, #2
    2920:	d110      	bne.n	2944 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2922:	69fb      	ldr	r3, [r7, #28]
    2924:	2280      	movs	r2, #128	; 0x80
    2926:	0292      	lsls	r2, r2, #10
    2928:	4313      	orrs	r3, r2
    292a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	789b      	ldrb	r3, [r3, #2]
    2930:	2b00      	cmp	r3, #0
    2932:	d004      	beq.n	293e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2934:	69fb      	ldr	r3, [r7, #28]
    2936:	2280      	movs	r2, #128	; 0x80
    2938:	02d2      	lsls	r2, r2, #11
    293a:	4313      	orrs	r3, r2
    293c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	68ba      	ldr	r2, [r7, #8]
    2942:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	785b      	ldrb	r3, [r3, #1]
    2948:	2b01      	cmp	r3, #1
    294a:	d003      	beq.n	2954 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2950:	2b02      	cmp	r3, #2
    2952:	d107      	bne.n	2964 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2954:	69fb      	ldr	r3, [r7, #28]
    2956:	4a22      	ldr	r2, [pc, #136]	; (29e0 <_system_pinmux_config+0x10c>)
    2958:	4013      	ands	r3, r2
    295a:	61fb      	str	r3, [r7, #28]
    295c:	e002      	b.n	2964 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	68ba      	ldr	r2, [r7, #8]
    2962:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2964:	68bb      	ldr	r3, [r7, #8]
    2966:	041b      	lsls	r3, r3, #16
    2968:	0c1b      	lsrs	r3, r3, #16
    296a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    296c:	68bb      	ldr	r3, [r7, #8]
    296e:	0c1b      	lsrs	r3, r3, #16
    2970:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2972:	69ba      	ldr	r2, [r7, #24]
    2974:	69fb      	ldr	r3, [r7, #28]
    2976:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2978:	22a0      	movs	r2, #160	; 0xa0
    297a:	05d2      	lsls	r2, r2, #23
    297c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    297e:	68fb      	ldr	r3, [r7, #12]
    2980:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2982:	697a      	ldr	r2, [r7, #20]
    2984:	69fb      	ldr	r3, [r7, #28]
    2986:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2988:	22d0      	movs	r2, #208	; 0xd0
    298a:	0612      	lsls	r2, r2, #24
    298c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    298e:	68fb      	ldr	r3, [r7, #12]
    2990:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	78db      	ldrb	r3, [r3, #3]
    2996:	2201      	movs	r2, #1
    2998:	4053      	eors	r3, r2
    299a:	b2db      	uxtb	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	d01a      	beq.n	29d6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29a0:	69fa      	ldr	r2, [r7, #28]
    29a2:	2380      	movs	r3, #128	; 0x80
    29a4:	02db      	lsls	r3, r3, #11
    29a6:	4013      	ands	r3, r2
    29a8:	d00a      	beq.n	29c0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	789b      	ldrb	r3, [r3, #2]
    29ae:	2b01      	cmp	r3, #1
    29b0:	d103      	bne.n	29ba <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    29b2:	68fb      	ldr	r3, [r7, #12]
    29b4:	68ba      	ldr	r2, [r7, #8]
    29b6:	619a      	str	r2, [r3, #24]
    29b8:	e002      	b.n	29c0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    29ba:	68fb      	ldr	r3, [r7, #12]
    29bc:	68ba      	ldr	r2, [r7, #8]
    29be:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	785b      	ldrb	r3, [r3, #1]
    29c4:	2b01      	cmp	r3, #1
    29c6:	d003      	beq.n	29d0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29cc:	2b02      	cmp	r3, #2
    29ce:	d102      	bne.n	29d6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	68ba      	ldr	r2, [r7, #8]
    29d4:	609a      	str	r2, [r3, #8]
		}
	}
}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	46bd      	mov	sp, r7
    29da:	b008      	add	sp, #32
    29dc:	bd80      	pop	{r7, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	fffbffff 	.word	0xfffbffff

000029e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	b084      	sub	sp, #16
    29e8:	af00      	add	r7, sp, #0
    29ea:	0002      	movs	r2, r0
    29ec:	6039      	str	r1, [r7, #0]
    29ee:	1dfb      	adds	r3, r7, #7
    29f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    29f2:	1dfb      	adds	r3, r7, #7
    29f4:	781b      	ldrb	r3, [r3, #0]
    29f6:	0018      	movs	r0, r3
    29f8:	4b0a      	ldr	r3, [pc, #40]	; (2a24 <system_pinmux_pin_set_config+0x40>)
    29fa:	4798      	blx	r3
    29fc:	0003      	movs	r3, r0
    29fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a00:	1dfb      	adds	r3, r7, #7
    2a02:	781b      	ldrb	r3, [r3, #0]
    2a04:	221f      	movs	r2, #31
    2a06:	4013      	ands	r3, r2
    2a08:	2201      	movs	r2, #1
    2a0a:	409a      	lsls	r2, r3
    2a0c:	0013      	movs	r3, r2
    2a0e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2a10:	683a      	ldr	r2, [r7, #0]
    2a12:	68b9      	ldr	r1, [r7, #8]
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	0018      	movs	r0, r3
    2a18:	4b03      	ldr	r3, [pc, #12]	; (2a28 <system_pinmux_pin_set_config+0x44>)
    2a1a:	4798      	blx	r3
}
    2a1c:	46c0      	nop			; (mov r8, r8)
    2a1e:	46bd      	mov	sp, r7
    2a20:	b004      	add	sp, #16
    2a22:	bd80      	pop	{r7, pc}
    2a24:	00002875 	.word	0x00002875
    2a28:	000028d5 	.word	0x000028d5

00002a2c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2a2c:	b580      	push	{r7, lr}
    2a2e:	af00      	add	r7, sp, #0
	return;
    2a30:	46c0      	nop			; (mov r8, r8)
}
    2a32:	46bd      	mov	sp, r7
    2a34:	bd80      	pop	{r7, pc}
	...

00002a38 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a3c:	4b06      	ldr	r3, [pc, #24]	; (2a58 <system_init+0x20>)
    2a3e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a40:	4b06      	ldr	r3, [pc, #24]	; (2a5c <system_init+0x24>)
    2a42:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a44:	4b06      	ldr	r3, [pc, #24]	; (2a60 <system_init+0x28>)
    2a46:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a48:	4b06      	ldr	r3, [pc, #24]	; (2a64 <system_init+0x2c>)
    2a4a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a4c:	4b06      	ldr	r3, [pc, #24]	; (2a68 <system_init+0x30>)
    2a4e:	4798      	blx	r3
}
    2a50:	46c0      	nop			; (mov r8, r8)
    2a52:	46bd      	mov	sp, r7
    2a54:	bd80      	pop	{r7, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	0000231d 	.word	0x0000231d
    2a5c:	00001fd1 	.word	0x00001fd1
    2a60:	00002a2d 	.word	0x00002a2d
    2a64:	00002a2d 	.word	0x00002a2d
    2a68:	00002a2d 	.word	0x00002a2d

00002a6c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	b082      	sub	sp, #8
    2a70:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2a72:	4b19      	ldr	r3, [pc, #100]	; (2ad8 <Reset_Handler+0x6c>)
    2a74:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2a76:	4b19      	ldr	r3, [pc, #100]	; (2adc <Reset_Handler+0x70>)
    2a78:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2a7a:	687a      	ldr	r2, [r7, #4]
    2a7c:	683b      	ldr	r3, [r7, #0]
    2a7e:	429a      	cmp	r2, r3
    2a80:	d00c      	beq.n	2a9c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2a82:	e007      	b.n	2a94 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2a84:	683b      	ldr	r3, [r7, #0]
    2a86:	1d1a      	adds	r2, r3, #4
    2a88:	603a      	str	r2, [r7, #0]
    2a8a:	687a      	ldr	r2, [r7, #4]
    2a8c:	1d11      	adds	r1, r2, #4
    2a8e:	6079      	str	r1, [r7, #4]
    2a90:	6812      	ldr	r2, [r2, #0]
    2a92:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    2a94:	683a      	ldr	r2, [r7, #0]
    2a96:	4b12      	ldr	r3, [pc, #72]	; (2ae0 <Reset_Handler+0x74>)
    2a98:	429a      	cmp	r2, r3
    2a9a:	d3f3      	bcc.n	2a84 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2a9c:	4b11      	ldr	r3, [pc, #68]	; (2ae4 <Reset_Handler+0x78>)
    2a9e:	603b      	str	r3, [r7, #0]
    2aa0:	e004      	b.n	2aac <Reset_Handler+0x40>
                *pDest++ = 0;
    2aa2:	683b      	ldr	r3, [r7, #0]
    2aa4:	1d1a      	adds	r2, r3, #4
    2aa6:	603a      	str	r2, [r7, #0]
    2aa8:	2200      	movs	r2, #0
    2aaa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2aac:	683a      	ldr	r2, [r7, #0]
    2aae:	4b0e      	ldr	r3, [pc, #56]	; (2ae8 <Reset_Handler+0x7c>)
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d3f6      	bcc.n	2aa2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2ab4:	4b0d      	ldr	r3, [pc, #52]	; (2aec <Reset_Handler+0x80>)
    2ab6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2ab8:	4b0d      	ldr	r3, [pc, #52]	; (2af0 <Reset_Handler+0x84>)
    2aba:	687a      	ldr	r2, [r7, #4]
    2abc:	21ff      	movs	r1, #255	; 0xff
    2abe:	438a      	bics	r2, r1
    2ac0:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2ac2:	4a0c      	ldr	r2, [pc, #48]	; (2af4 <Reset_Handler+0x88>)
    2ac4:	6853      	ldr	r3, [r2, #4]
    2ac6:	2180      	movs	r1, #128	; 0x80
    2ac8:	430b      	orrs	r3, r1
    2aca:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2acc:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <Reset_Handler+0x8c>)
    2ace:	4798      	blx	r3

        /* Branch to main function */
        main();
    2ad0:	4b0a      	ldr	r3, [pc, #40]	; (2afc <Reset_Handler+0x90>)
    2ad2:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2ad4:	e7fe      	b.n	2ad4 <Reset_Handler+0x68>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	00004db8 	.word	0x00004db8
    2adc:	20000000 	.word	0x20000000
    2ae0:	20000010 	.word	0x20000010
    2ae4:	20000010 	.word	0x20000010
    2ae8:	200000b4 	.word	0x200000b4
    2aec:	00000000 	.word	0x00000000
    2af0:	e000ed00 	.word	0xe000ed00
    2af4:	41004000 	.word	0x41004000
    2af8:	00004c3d 	.word	0x00004c3d
    2afc:	00002b65 	.word	0x00002b65

00002b00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2b00:	b580      	push	{r7, lr}
    2b02:	af00      	add	r7, sp, #0
        while (1) {
    2b04:	e7fe      	b.n	2b04 <Dummy_Handler+0x4>

00002b06 <system_switch_performance_level>:
{
    2b06:	b580      	push	{r7, lr}
    2b08:	b082      	sub	sp, #8
    2b0a:	af00      	add	r7, sp, #0
    2b0c:	0002      	movs	r2, r0
    2b0e:	1dfb      	adds	r3, r7, #7
    2b10:	701a      	strb	r2, [r3, #0]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2b12:	2380      	movs	r3, #128	; 0x80
    2b14:	05db      	lsls	r3, r3, #23
    2b16:	789b      	ldrb	r3, [r3, #2]
    2b18:	b2db      	uxtb	r3, r3
    2b1a:	1dfa      	adds	r2, r7, #7
    2b1c:	7812      	ldrb	r2, [r2, #0]
    2b1e:	429a      	cmp	r2, r3
    2b20:	d101      	bne.n	2b26 <system_switch_performance_level+0x20>
		return STATUS_OK;
    2b22:	2300      	movs	r3, #0
    2b24:	e019      	b.n	2b5a <system_switch_performance_level+0x54>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2b26:	2380      	movs	r3, #128	; 0x80
    2b28:	05db      	lsls	r3, r3, #23
    2b2a:	789b      	ldrb	r3, [r3, #2]
    2b2c:	b2db      	uxtb	r3, r3
    2b2e:	b25b      	sxtb	r3, r3
    2b30:	2b00      	cmp	r3, #0
    2b32:	da01      	bge.n	2b38 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    2b34:	2317      	movs	r3, #23
    2b36:	e010      	b.n	2b5a <system_switch_performance_level+0x54>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	05db      	lsls	r3, r3, #23
    2b3c:	2201      	movs	r2, #1
    2b3e:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2b40:	2380      	movs	r3, #128	; 0x80
    2b42:	05db      	lsls	r3, r3, #23
    2b44:	1dfa      	adds	r2, r7, #7
    2b46:	7812      	ldrb	r2, [r2, #0]
    2b48:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	2380      	movs	r3, #128	; 0x80
    2b4e:	05db      	lsls	r3, r3, #23
    2b50:	799b      	ldrb	r3, [r3, #6]
    2b52:	b2db      	uxtb	r3, r3
    2b54:	2b00      	cmp	r3, #0
    2b56:	d0f9      	beq.n	2b4c <system_switch_performance_level+0x46>
	return STATUS_OK;
    2b58:	2300      	movs	r3, #0
}
    2b5a:	0018      	movs	r0, r3
    2b5c:	46bd      	mov	sp, r7
    2b5e:	b002      	add	sp, #8
    2b60:	bd80      	pop	{r7, pc}
	...

00002b64 <main>:
#include "sensor/i2c_interface.h"
#include "sensor/lis3dh.h"
#include "sensor/bmp280.h"

int main (void)
{
    2b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b66:	b089      	sub	sp, #36	; 0x24
    2b68:	af00      	add	r7, sp, #0
	system_init();
    2b6a:	4b2f      	ldr	r3, [pc, #188]	; (2c28 <main+0xc4>)
    2b6c:	4798      	blx	r3
	delay_init();
    2b6e:	4b2f      	ldr	r3, [pc, #188]	; (2c2c <main+0xc8>)
    2b70:	4798      	blx	r3

	delay_ms(50);
    2b72:	2000      	movs	r0, #0
    2b74:	4b2e      	ldr	r3, [pc, #184]	; (2c30 <main+0xcc>)
    2b76:	4798      	blx	r3
    2b78:	0003      	movs	r3, r0
    2b7a:	603b      	str	r3, [r7, #0]
    2b7c:	2300      	movs	r3, #0
    2b7e:	607b      	str	r3, [r7, #4]
    2b80:	4c2c      	ldr	r4, [pc, #176]	; (2c34 <main+0xd0>)
    2b82:	2232      	movs	r2, #50	; 0x32
    2b84:	2300      	movs	r3, #0
    2b86:	6838      	ldr	r0, [r7, #0]
    2b88:	6879      	ldr	r1, [r7, #4]
    2b8a:	47a0      	blx	r4
    2b8c:	0003      	movs	r3, r0
    2b8e:	000c      	movs	r4, r1
    2b90:	0019      	movs	r1, r3
    2b92:	0022      	movs	r2, r4
    2b94:	4b28      	ldr	r3, [pc, #160]	; (2c38 <main+0xd4>)
    2b96:	2400      	movs	r4, #0
    2b98:	18c9      	adds	r1, r1, r3
    2b9a:	4162      	adcs	r2, r4
    2b9c:	0008      	movs	r0, r1
    2b9e:	0011      	movs	r1, r2
    2ba0:	4c26      	ldr	r4, [pc, #152]	; (2c3c <main+0xd8>)
    2ba2:	4a27      	ldr	r2, [pc, #156]	; (2c40 <main+0xdc>)
    2ba4:	2300      	movs	r3, #0
    2ba6:	47a0      	blx	r4
    2ba8:	0003      	movs	r3, r0
    2baa:	000c      	movs	r4, r1
    2bac:	0018      	movs	r0, r3
    2bae:	4b25      	ldr	r3, [pc, #148]	; (2c44 <main+0xe0>)
    2bb0:	4798      	blx	r3

	// Set up to performance level 0, buck converter
	// Clock must be slow
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2); 
    2bb2:	2002      	movs	r0, #2
    2bb4:	4b24      	ldr	r3, [pc, #144]	; (2c48 <main+0xe4>)
    2bb6:	4798      	blx	r3
	system_voltage_regulator_get_config_defaults(&vreg_config);
	vreg_config.regulator_sel = SYSTEM_VOLTAGE_REGULATOR_BUCK;
	vreg_config.low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_HIGHTEST; // Higher efficiency, runs 2.5-3.6V only
	system_voltage_regulator_set_config(&vreg_config);*/

	i2c_interface_init();
    2bb8:	4b24      	ldr	r3, [pc, #144]	; (2c4c <main+0xe8>)
    2bba:	4798      	blx	r3
	init_lis3dh();
    2bbc:	4b24      	ldr	r3, [pc, #144]	; (2c50 <main+0xec>)
    2bbe:	4798      	blx	r3
	init_bmp280();
    2bc0:	4b24      	ldr	r3, [pc, #144]	; (2c54 <main+0xf0>)
    2bc2:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	int32_t i;
	for(;;)
	{
		delay_ms(1000);
    2bc4:	2000      	movs	r0, #0
    2bc6:	4b1a      	ldr	r3, [pc, #104]	; (2c30 <main+0xcc>)
    2bc8:	4798      	blx	r3
    2bca:	0003      	movs	r3, r0
    2bcc:	001d      	movs	r5, r3
    2bce:	2300      	movs	r3, #0
    2bd0:	001e      	movs	r6, r3
    2bd2:	4c18      	ldr	r4, [pc, #96]	; (2c34 <main+0xd0>)
    2bd4:	22fa      	movs	r2, #250	; 0xfa
    2bd6:	0092      	lsls	r2, r2, #2
    2bd8:	2300      	movs	r3, #0
    2bda:	0028      	movs	r0, r5
    2bdc:	0031      	movs	r1, r6
    2bde:	47a0      	blx	r4
    2be0:	0003      	movs	r3, r0
    2be2:	000c      	movs	r4, r1
    2be4:	0019      	movs	r1, r3
    2be6:	0022      	movs	r2, r4
    2be8:	4b13      	ldr	r3, [pc, #76]	; (2c38 <main+0xd4>)
    2bea:	2400      	movs	r4, #0
    2bec:	18c9      	adds	r1, r1, r3
    2bee:	4162      	adcs	r2, r4
    2bf0:	0008      	movs	r0, r1
    2bf2:	0011      	movs	r1, r2
    2bf4:	4c11      	ldr	r4, [pc, #68]	; (2c3c <main+0xd8>)
    2bf6:	4a12      	ldr	r2, [pc, #72]	; (2c40 <main+0xdc>)
    2bf8:	2300      	movs	r3, #0
    2bfa:	47a0      	blx	r4
    2bfc:	0003      	movs	r3, r0
    2bfe:	000c      	movs	r4, r1
    2c00:	0018      	movs	r0, r3
    2c02:	4b10      	ldr	r3, [pc, #64]	; (2c44 <main+0xe0>)
    2c04:	4798      	blx	r3
		lis3dh_data_g_t accel_data;
		read_lis3dh_g(&accel_data);
    2c06:	2308      	movs	r3, #8
    2c08:	2208      	movs	r2, #8
    2c0a:	4694      	mov	ip, r2
    2c0c:	44bc      	add	ip, r7
    2c0e:	4463      	add	r3, ip
    2c10:	0018      	movs	r0, r3
    2c12:	4b11      	ldr	r3, [pc, #68]	; (2c58 <main+0xf4>)
    2c14:	4798      	blx	r3

		bmp280_meas_t baro_data;
		read_bmp280(&baro_data);
    2c16:	2308      	movs	r3, #8
    2c18:	18fb      	adds	r3, r7, r3
    2c1a:	0018      	movs	r0, r3
    2c1c:	4b0f      	ldr	r3, [pc, #60]	; (2c5c <main+0xf8>)
    2c1e:	4798      	blx	r3

		i++;
    2c20:	69fb      	ldr	r3, [r7, #28]
    2c22:	3301      	adds	r3, #1
    2c24:	61fb      	str	r3, [r7, #28]
	{
    2c26:	e7cd      	b.n	2bc4 <main+0x60>
    2c28:	00002a39 	.word	0x00002a39
    2c2c:	00001e51 	.word	0x00001e51
    2c30:	00002671 	.word	0x00002671
    2c34:	00002e01 	.word	0x00002e01
    2c38:	00001b57 	.word	0x00001b57
    2c3c:	00002dc1 	.word	0x00002dc1
    2c40:	00001b58 	.word	0x00001b58
    2c44:	20000001 	.word	0x20000001
    2c48:	00002b07 	.word	0x00002b07
    2c4c:	00001769 	.word	0x00001769
    2c50:	000019c1 	.word	0x000019c1
    2c54:	00000fc1 	.word	0x00000fc1
    2c58:	00001aa9 	.word	0x00001aa9
    2c5c:	000014f5 	.word	0x000014f5

00002c60 <__udivsi3>:
    2c60:	2200      	movs	r2, #0
    2c62:	0843      	lsrs	r3, r0, #1
    2c64:	428b      	cmp	r3, r1
    2c66:	d374      	bcc.n	2d52 <__udivsi3+0xf2>
    2c68:	0903      	lsrs	r3, r0, #4
    2c6a:	428b      	cmp	r3, r1
    2c6c:	d35f      	bcc.n	2d2e <__udivsi3+0xce>
    2c6e:	0a03      	lsrs	r3, r0, #8
    2c70:	428b      	cmp	r3, r1
    2c72:	d344      	bcc.n	2cfe <__udivsi3+0x9e>
    2c74:	0b03      	lsrs	r3, r0, #12
    2c76:	428b      	cmp	r3, r1
    2c78:	d328      	bcc.n	2ccc <__udivsi3+0x6c>
    2c7a:	0c03      	lsrs	r3, r0, #16
    2c7c:	428b      	cmp	r3, r1
    2c7e:	d30d      	bcc.n	2c9c <__udivsi3+0x3c>
    2c80:	22ff      	movs	r2, #255	; 0xff
    2c82:	0209      	lsls	r1, r1, #8
    2c84:	ba12      	rev	r2, r2
    2c86:	0c03      	lsrs	r3, r0, #16
    2c88:	428b      	cmp	r3, r1
    2c8a:	d302      	bcc.n	2c92 <__udivsi3+0x32>
    2c8c:	1212      	asrs	r2, r2, #8
    2c8e:	0209      	lsls	r1, r1, #8
    2c90:	d065      	beq.n	2d5e <__udivsi3+0xfe>
    2c92:	0b03      	lsrs	r3, r0, #12
    2c94:	428b      	cmp	r3, r1
    2c96:	d319      	bcc.n	2ccc <__udivsi3+0x6c>
    2c98:	e000      	b.n	2c9c <__udivsi3+0x3c>
    2c9a:	0a09      	lsrs	r1, r1, #8
    2c9c:	0bc3      	lsrs	r3, r0, #15
    2c9e:	428b      	cmp	r3, r1
    2ca0:	d301      	bcc.n	2ca6 <__udivsi3+0x46>
    2ca2:	03cb      	lsls	r3, r1, #15
    2ca4:	1ac0      	subs	r0, r0, r3
    2ca6:	4152      	adcs	r2, r2
    2ca8:	0b83      	lsrs	r3, r0, #14
    2caa:	428b      	cmp	r3, r1
    2cac:	d301      	bcc.n	2cb2 <__udivsi3+0x52>
    2cae:	038b      	lsls	r3, r1, #14
    2cb0:	1ac0      	subs	r0, r0, r3
    2cb2:	4152      	adcs	r2, r2
    2cb4:	0b43      	lsrs	r3, r0, #13
    2cb6:	428b      	cmp	r3, r1
    2cb8:	d301      	bcc.n	2cbe <__udivsi3+0x5e>
    2cba:	034b      	lsls	r3, r1, #13
    2cbc:	1ac0      	subs	r0, r0, r3
    2cbe:	4152      	adcs	r2, r2
    2cc0:	0b03      	lsrs	r3, r0, #12
    2cc2:	428b      	cmp	r3, r1
    2cc4:	d301      	bcc.n	2cca <__udivsi3+0x6a>
    2cc6:	030b      	lsls	r3, r1, #12
    2cc8:	1ac0      	subs	r0, r0, r3
    2cca:	4152      	adcs	r2, r2
    2ccc:	0ac3      	lsrs	r3, r0, #11
    2cce:	428b      	cmp	r3, r1
    2cd0:	d301      	bcc.n	2cd6 <__udivsi3+0x76>
    2cd2:	02cb      	lsls	r3, r1, #11
    2cd4:	1ac0      	subs	r0, r0, r3
    2cd6:	4152      	adcs	r2, r2
    2cd8:	0a83      	lsrs	r3, r0, #10
    2cda:	428b      	cmp	r3, r1
    2cdc:	d301      	bcc.n	2ce2 <__udivsi3+0x82>
    2cde:	028b      	lsls	r3, r1, #10
    2ce0:	1ac0      	subs	r0, r0, r3
    2ce2:	4152      	adcs	r2, r2
    2ce4:	0a43      	lsrs	r3, r0, #9
    2ce6:	428b      	cmp	r3, r1
    2ce8:	d301      	bcc.n	2cee <__udivsi3+0x8e>
    2cea:	024b      	lsls	r3, r1, #9
    2cec:	1ac0      	subs	r0, r0, r3
    2cee:	4152      	adcs	r2, r2
    2cf0:	0a03      	lsrs	r3, r0, #8
    2cf2:	428b      	cmp	r3, r1
    2cf4:	d301      	bcc.n	2cfa <__udivsi3+0x9a>
    2cf6:	020b      	lsls	r3, r1, #8
    2cf8:	1ac0      	subs	r0, r0, r3
    2cfa:	4152      	adcs	r2, r2
    2cfc:	d2cd      	bcs.n	2c9a <__udivsi3+0x3a>
    2cfe:	09c3      	lsrs	r3, r0, #7
    2d00:	428b      	cmp	r3, r1
    2d02:	d301      	bcc.n	2d08 <__udivsi3+0xa8>
    2d04:	01cb      	lsls	r3, r1, #7
    2d06:	1ac0      	subs	r0, r0, r3
    2d08:	4152      	adcs	r2, r2
    2d0a:	0983      	lsrs	r3, r0, #6
    2d0c:	428b      	cmp	r3, r1
    2d0e:	d301      	bcc.n	2d14 <__udivsi3+0xb4>
    2d10:	018b      	lsls	r3, r1, #6
    2d12:	1ac0      	subs	r0, r0, r3
    2d14:	4152      	adcs	r2, r2
    2d16:	0943      	lsrs	r3, r0, #5
    2d18:	428b      	cmp	r3, r1
    2d1a:	d301      	bcc.n	2d20 <__udivsi3+0xc0>
    2d1c:	014b      	lsls	r3, r1, #5
    2d1e:	1ac0      	subs	r0, r0, r3
    2d20:	4152      	adcs	r2, r2
    2d22:	0903      	lsrs	r3, r0, #4
    2d24:	428b      	cmp	r3, r1
    2d26:	d301      	bcc.n	2d2c <__udivsi3+0xcc>
    2d28:	010b      	lsls	r3, r1, #4
    2d2a:	1ac0      	subs	r0, r0, r3
    2d2c:	4152      	adcs	r2, r2
    2d2e:	08c3      	lsrs	r3, r0, #3
    2d30:	428b      	cmp	r3, r1
    2d32:	d301      	bcc.n	2d38 <__udivsi3+0xd8>
    2d34:	00cb      	lsls	r3, r1, #3
    2d36:	1ac0      	subs	r0, r0, r3
    2d38:	4152      	adcs	r2, r2
    2d3a:	0883      	lsrs	r3, r0, #2
    2d3c:	428b      	cmp	r3, r1
    2d3e:	d301      	bcc.n	2d44 <__udivsi3+0xe4>
    2d40:	008b      	lsls	r3, r1, #2
    2d42:	1ac0      	subs	r0, r0, r3
    2d44:	4152      	adcs	r2, r2
    2d46:	0843      	lsrs	r3, r0, #1
    2d48:	428b      	cmp	r3, r1
    2d4a:	d301      	bcc.n	2d50 <__udivsi3+0xf0>
    2d4c:	004b      	lsls	r3, r1, #1
    2d4e:	1ac0      	subs	r0, r0, r3
    2d50:	4152      	adcs	r2, r2
    2d52:	1a41      	subs	r1, r0, r1
    2d54:	d200      	bcs.n	2d58 <__udivsi3+0xf8>
    2d56:	4601      	mov	r1, r0
    2d58:	4152      	adcs	r2, r2
    2d5a:	4610      	mov	r0, r2
    2d5c:	4770      	bx	lr
    2d5e:	e7ff      	b.n	2d60 <__udivsi3+0x100>
    2d60:	b501      	push	{r0, lr}
    2d62:	2000      	movs	r0, #0
    2d64:	f000 f806 	bl	2d74 <__aeabi_idiv0>
    2d68:	bd02      	pop	{r1, pc}
    2d6a:	46c0      	nop			; (mov r8, r8)

00002d6c <__aeabi_uidivmod>:
    2d6c:	2900      	cmp	r1, #0
    2d6e:	d0f7      	beq.n	2d60 <__udivsi3+0x100>
    2d70:	e776      	b.n	2c60 <__udivsi3>
    2d72:	4770      	bx	lr

00002d74 <__aeabi_idiv0>:
    2d74:	4770      	bx	lr
    2d76:	46c0      	nop			; (mov r8, r8)

00002d78 <__aeabi_ldivmod>:
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d115      	bne.n	2da8 <__aeabi_ldivmod+0x30>
    2d7c:	2a00      	cmp	r2, #0
    2d7e:	d113      	bne.n	2da8 <__aeabi_ldivmod+0x30>
    2d80:	2900      	cmp	r1, #0
    2d82:	db06      	blt.n	2d92 <__aeabi_ldivmod+0x1a>
    2d84:	dc01      	bgt.n	2d8a <__aeabi_ldivmod+0x12>
    2d86:	2800      	cmp	r0, #0
    2d88:	d006      	beq.n	2d98 <__aeabi_ldivmod+0x20>
    2d8a:	2000      	movs	r0, #0
    2d8c:	43c0      	mvns	r0, r0
    2d8e:	0841      	lsrs	r1, r0, #1
    2d90:	e002      	b.n	2d98 <__aeabi_ldivmod+0x20>
    2d92:	2180      	movs	r1, #128	; 0x80
    2d94:	0609      	lsls	r1, r1, #24
    2d96:	2000      	movs	r0, #0
    2d98:	b407      	push	{r0, r1, r2}
    2d9a:	4802      	ldr	r0, [pc, #8]	; (2da4 <__aeabi_ldivmod+0x2c>)
    2d9c:	a101      	add	r1, pc, #4	; (adr r1, 2da4 <__aeabi_ldivmod+0x2c>)
    2d9e:	1840      	adds	r0, r0, r1
    2da0:	9002      	str	r0, [sp, #8]
    2da2:	bd03      	pop	{r0, r1, pc}
    2da4:	ffffffd1 	.word	0xffffffd1
    2da8:	b403      	push	{r0, r1}
    2daa:	4668      	mov	r0, sp
    2dac:	b501      	push	{r0, lr}
    2dae:	9802      	ldr	r0, [sp, #8]
    2db0:	f000 f910 	bl	2fd4 <__gnu_ldivmod_helper>
    2db4:	9b01      	ldr	r3, [sp, #4]
    2db6:	469e      	mov	lr, r3
    2db8:	b002      	add	sp, #8
    2dba:	bc0c      	pop	{r2, r3}
    2dbc:	4770      	bx	lr
    2dbe:	46c0      	nop			; (mov r8, r8)

00002dc0 <__aeabi_uldivmod>:
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d111      	bne.n	2de8 <__aeabi_uldivmod+0x28>
    2dc4:	2a00      	cmp	r2, #0
    2dc6:	d10f      	bne.n	2de8 <__aeabi_uldivmod+0x28>
    2dc8:	2900      	cmp	r1, #0
    2dca:	d100      	bne.n	2dce <__aeabi_uldivmod+0xe>
    2dcc:	2800      	cmp	r0, #0
    2dce:	d002      	beq.n	2dd6 <__aeabi_uldivmod+0x16>
    2dd0:	2100      	movs	r1, #0
    2dd2:	43c9      	mvns	r1, r1
    2dd4:	1c08      	adds	r0, r1, #0
    2dd6:	b407      	push	{r0, r1, r2}
    2dd8:	4802      	ldr	r0, [pc, #8]	; (2de4 <__aeabi_uldivmod+0x24>)
    2dda:	a102      	add	r1, pc, #8	; (adr r1, 2de4 <__aeabi_uldivmod+0x24>)
    2ddc:	1840      	adds	r0, r0, r1
    2dde:	9002      	str	r0, [sp, #8]
    2de0:	bd03      	pop	{r0, r1, pc}
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	ffffff91 	.word	0xffffff91
    2de8:	b403      	push	{r0, r1}
    2dea:	4668      	mov	r0, sp
    2dec:	b501      	push	{r0, lr}
    2dee:	9802      	ldr	r0, [sp, #8]
    2df0:	f000 f830 	bl	2e54 <__udivmoddi4>
    2df4:	9b01      	ldr	r3, [sp, #4]
    2df6:	469e      	mov	lr, r3
    2df8:	b002      	add	sp, #8
    2dfa:	bc0c      	pop	{r2, r3}
    2dfc:	4770      	bx	lr
    2dfe:	46c0      	nop			; (mov r8, r8)

00002e00 <__aeabi_lmul>:
    2e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e02:	46ce      	mov	lr, r9
    2e04:	4647      	mov	r7, r8
    2e06:	0415      	lsls	r5, r2, #16
    2e08:	0c2d      	lsrs	r5, r5, #16
    2e0a:	002e      	movs	r6, r5
    2e0c:	b580      	push	{r7, lr}
    2e0e:	0407      	lsls	r7, r0, #16
    2e10:	0c14      	lsrs	r4, r2, #16
    2e12:	0c3f      	lsrs	r7, r7, #16
    2e14:	4699      	mov	r9, r3
    2e16:	0c03      	lsrs	r3, r0, #16
    2e18:	437e      	muls	r6, r7
    2e1a:	435d      	muls	r5, r3
    2e1c:	4367      	muls	r7, r4
    2e1e:	4363      	muls	r3, r4
    2e20:	197f      	adds	r7, r7, r5
    2e22:	0c34      	lsrs	r4, r6, #16
    2e24:	19e4      	adds	r4, r4, r7
    2e26:	469c      	mov	ip, r3
    2e28:	42a5      	cmp	r5, r4
    2e2a:	d903      	bls.n	2e34 <__aeabi_lmul+0x34>
    2e2c:	2380      	movs	r3, #128	; 0x80
    2e2e:	025b      	lsls	r3, r3, #9
    2e30:	4698      	mov	r8, r3
    2e32:	44c4      	add	ip, r8
    2e34:	464b      	mov	r3, r9
    2e36:	4351      	muls	r1, r2
    2e38:	4343      	muls	r3, r0
    2e3a:	0436      	lsls	r6, r6, #16
    2e3c:	0c36      	lsrs	r6, r6, #16
    2e3e:	0c25      	lsrs	r5, r4, #16
    2e40:	0424      	lsls	r4, r4, #16
    2e42:	4465      	add	r5, ip
    2e44:	19a4      	adds	r4, r4, r6
    2e46:	1859      	adds	r1, r3, r1
    2e48:	1949      	adds	r1, r1, r5
    2e4a:	0020      	movs	r0, r4
    2e4c:	bc0c      	pop	{r2, r3}
    2e4e:	4690      	mov	r8, r2
    2e50:	4699      	mov	r9, r3
    2e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002e54 <__udivmoddi4>:
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	4657      	mov	r7, sl
    2e58:	464e      	mov	r6, r9
    2e5a:	4645      	mov	r5, r8
    2e5c:	46de      	mov	lr, fp
    2e5e:	b5e0      	push	{r5, r6, r7, lr}
    2e60:	0004      	movs	r4, r0
    2e62:	b083      	sub	sp, #12
    2e64:	000d      	movs	r5, r1
    2e66:	4692      	mov	sl, r2
    2e68:	4699      	mov	r9, r3
    2e6a:	428b      	cmp	r3, r1
    2e6c:	d82f      	bhi.n	2ece <__udivmoddi4+0x7a>
    2e6e:	d02c      	beq.n	2eca <__udivmoddi4+0x76>
    2e70:	4649      	mov	r1, r9
    2e72:	4650      	mov	r0, sl
    2e74:	f001 fdfa 	bl	4a6c <__clzdi2>
    2e78:	0029      	movs	r1, r5
    2e7a:	0006      	movs	r6, r0
    2e7c:	0020      	movs	r0, r4
    2e7e:	f001 fdf5 	bl	4a6c <__clzdi2>
    2e82:	1a33      	subs	r3, r6, r0
    2e84:	4698      	mov	r8, r3
    2e86:	3b20      	subs	r3, #32
    2e88:	469b      	mov	fp, r3
    2e8a:	d500      	bpl.n	2e8e <__udivmoddi4+0x3a>
    2e8c:	e074      	b.n	2f78 <__udivmoddi4+0x124>
    2e8e:	4653      	mov	r3, sl
    2e90:	465a      	mov	r2, fp
    2e92:	4093      	lsls	r3, r2
    2e94:	001f      	movs	r7, r3
    2e96:	4653      	mov	r3, sl
    2e98:	4642      	mov	r2, r8
    2e9a:	4093      	lsls	r3, r2
    2e9c:	001e      	movs	r6, r3
    2e9e:	42af      	cmp	r7, r5
    2ea0:	d829      	bhi.n	2ef6 <__udivmoddi4+0xa2>
    2ea2:	d026      	beq.n	2ef2 <__udivmoddi4+0x9e>
    2ea4:	465b      	mov	r3, fp
    2ea6:	1ba4      	subs	r4, r4, r6
    2ea8:	41bd      	sbcs	r5, r7
    2eaa:	2b00      	cmp	r3, #0
    2eac:	da00      	bge.n	2eb0 <__udivmoddi4+0x5c>
    2eae:	e079      	b.n	2fa4 <__udivmoddi4+0x150>
    2eb0:	2200      	movs	r2, #0
    2eb2:	2300      	movs	r3, #0
    2eb4:	9200      	str	r2, [sp, #0]
    2eb6:	9301      	str	r3, [sp, #4]
    2eb8:	2301      	movs	r3, #1
    2eba:	465a      	mov	r2, fp
    2ebc:	4093      	lsls	r3, r2
    2ebe:	9301      	str	r3, [sp, #4]
    2ec0:	2301      	movs	r3, #1
    2ec2:	4642      	mov	r2, r8
    2ec4:	4093      	lsls	r3, r2
    2ec6:	9300      	str	r3, [sp, #0]
    2ec8:	e019      	b.n	2efe <__udivmoddi4+0xaa>
    2eca:	4282      	cmp	r2, r0
    2ecc:	d9d0      	bls.n	2e70 <__udivmoddi4+0x1c>
    2ece:	2200      	movs	r2, #0
    2ed0:	2300      	movs	r3, #0
    2ed2:	9200      	str	r2, [sp, #0]
    2ed4:	9301      	str	r3, [sp, #4]
    2ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d001      	beq.n	2ee0 <__udivmoddi4+0x8c>
    2edc:	601c      	str	r4, [r3, #0]
    2ede:	605d      	str	r5, [r3, #4]
    2ee0:	9800      	ldr	r0, [sp, #0]
    2ee2:	9901      	ldr	r1, [sp, #4]
    2ee4:	b003      	add	sp, #12
    2ee6:	bc3c      	pop	{r2, r3, r4, r5}
    2ee8:	4690      	mov	r8, r2
    2eea:	4699      	mov	r9, r3
    2eec:	46a2      	mov	sl, r4
    2eee:	46ab      	mov	fp, r5
    2ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef2:	42a3      	cmp	r3, r4
    2ef4:	d9d6      	bls.n	2ea4 <__udivmoddi4+0x50>
    2ef6:	2200      	movs	r2, #0
    2ef8:	2300      	movs	r3, #0
    2efa:	9200      	str	r2, [sp, #0]
    2efc:	9301      	str	r3, [sp, #4]
    2efe:	4643      	mov	r3, r8
    2f00:	2b00      	cmp	r3, #0
    2f02:	d0e8      	beq.n	2ed6 <__udivmoddi4+0x82>
    2f04:	07fb      	lsls	r3, r7, #31
    2f06:	0872      	lsrs	r2, r6, #1
    2f08:	431a      	orrs	r2, r3
    2f0a:	4646      	mov	r6, r8
    2f0c:	087b      	lsrs	r3, r7, #1
    2f0e:	e00e      	b.n	2f2e <__udivmoddi4+0xda>
    2f10:	42ab      	cmp	r3, r5
    2f12:	d101      	bne.n	2f18 <__udivmoddi4+0xc4>
    2f14:	42a2      	cmp	r2, r4
    2f16:	d80c      	bhi.n	2f32 <__udivmoddi4+0xde>
    2f18:	1aa4      	subs	r4, r4, r2
    2f1a:	419d      	sbcs	r5, r3
    2f1c:	2001      	movs	r0, #1
    2f1e:	1924      	adds	r4, r4, r4
    2f20:	416d      	adcs	r5, r5
    2f22:	2100      	movs	r1, #0
    2f24:	3e01      	subs	r6, #1
    2f26:	1824      	adds	r4, r4, r0
    2f28:	414d      	adcs	r5, r1
    2f2a:	2e00      	cmp	r6, #0
    2f2c:	d006      	beq.n	2f3c <__udivmoddi4+0xe8>
    2f2e:	42ab      	cmp	r3, r5
    2f30:	d9ee      	bls.n	2f10 <__udivmoddi4+0xbc>
    2f32:	3e01      	subs	r6, #1
    2f34:	1924      	adds	r4, r4, r4
    2f36:	416d      	adcs	r5, r5
    2f38:	2e00      	cmp	r6, #0
    2f3a:	d1f8      	bne.n	2f2e <__udivmoddi4+0xda>
    2f3c:	465b      	mov	r3, fp
    2f3e:	9800      	ldr	r0, [sp, #0]
    2f40:	9901      	ldr	r1, [sp, #4]
    2f42:	1900      	adds	r0, r0, r4
    2f44:	4169      	adcs	r1, r5
    2f46:	2b00      	cmp	r3, #0
    2f48:	db22      	blt.n	2f90 <__udivmoddi4+0x13c>
    2f4a:	002b      	movs	r3, r5
    2f4c:	465a      	mov	r2, fp
    2f4e:	40d3      	lsrs	r3, r2
    2f50:	002a      	movs	r2, r5
    2f52:	4644      	mov	r4, r8
    2f54:	40e2      	lsrs	r2, r4
    2f56:	001c      	movs	r4, r3
    2f58:	465b      	mov	r3, fp
    2f5a:	0015      	movs	r5, r2
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	db2c      	blt.n	2fba <__udivmoddi4+0x166>
    2f60:	0026      	movs	r6, r4
    2f62:	409e      	lsls	r6, r3
    2f64:	0033      	movs	r3, r6
    2f66:	0026      	movs	r6, r4
    2f68:	4647      	mov	r7, r8
    2f6a:	40be      	lsls	r6, r7
    2f6c:	0032      	movs	r2, r6
    2f6e:	1a80      	subs	r0, r0, r2
    2f70:	4199      	sbcs	r1, r3
    2f72:	9000      	str	r0, [sp, #0]
    2f74:	9101      	str	r1, [sp, #4]
    2f76:	e7ae      	b.n	2ed6 <__udivmoddi4+0x82>
    2f78:	4642      	mov	r2, r8
    2f7a:	2320      	movs	r3, #32
    2f7c:	1a9b      	subs	r3, r3, r2
    2f7e:	4652      	mov	r2, sl
    2f80:	40da      	lsrs	r2, r3
    2f82:	4641      	mov	r1, r8
    2f84:	0013      	movs	r3, r2
    2f86:	464a      	mov	r2, r9
    2f88:	408a      	lsls	r2, r1
    2f8a:	0017      	movs	r7, r2
    2f8c:	431f      	orrs	r7, r3
    2f8e:	e782      	b.n	2e96 <__udivmoddi4+0x42>
    2f90:	4642      	mov	r2, r8
    2f92:	2320      	movs	r3, #32
    2f94:	1a9b      	subs	r3, r3, r2
    2f96:	002a      	movs	r2, r5
    2f98:	4646      	mov	r6, r8
    2f9a:	409a      	lsls	r2, r3
    2f9c:	0023      	movs	r3, r4
    2f9e:	40f3      	lsrs	r3, r6
    2fa0:	4313      	orrs	r3, r2
    2fa2:	e7d5      	b.n	2f50 <__udivmoddi4+0xfc>
    2fa4:	4642      	mov	r2, r8
    2fa6:	2320      	movs	r3, #32
    2fa8:	2100      	movs	r1, #0
    2faa:	1a9b      	subs	r3, r3, r2
    2fac:	2200      	movs	r2, #0
    2fae:	9100      	str	r1, [sp, #0]
    2fb0:	9201      	str	r2, [sp, #4]
    2fb2:	2201      	movs	r2, #1
    2fb4:	40da      	lsrs	r2, r3
    2fb6:	9201      	str	r2, [sp, #4]
    2fb8:	e782      	b.n	2ec0 <__udivmoddi4+0x6c>
    2fba:	4642      	mov	r2, r8
    2fbc:	2320      	movs	r3, #32
    2fbe:	0026      	movs	r6, r4
    2fc0:	1a9b      	subs	r3, r3, r2
    2fc2:	40de      	lsrs	r6, r3
    2fc4:	002f      	movs	r7, r5
    2fc6:	46b4      	mov	ip, r6
    2fc8:	4097      	lsls	r7, r2
    2fca:	4666      	mov	r6, ip
    2fcc:	003b      	movs	r3, r7
    2fce:	4333      	orrs	r3, r6
    2fd0:	e7c9      	b.n	2f66 <__udivmoddi4+0x112>
    2fd2:	46c0      	nop			; (mov r8, r8)

00002fd4 <__gnu_ldivmod_helper>:
    2fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd6:	b083      	sub	sp, #12
    2fd8:	0016      	movs	r6, r2
    2fda:	001f      	movs	r7, r3
    2fdc:	9000      	str	r0, [sp, #0]
    2fde:	9101      	str	r1, [sp, #4]
    2fe0:	f001 fd50 	bl	4a84 <__divdi3>
    2fe4:	0004      	movs	r4, r0
    2fe6:	000d      	movs	r5, r1
    2fe8:	0002      	movs	r2, r0
    2fea:	000b      	movs	r3, r1
    2fec:	0030      	movs	r0, r6
    2fee:	0039      	movs	r1, r7
    2ff0:	f7ff ff06 	bl	2e00 <__aeabi_lmul>
    2ff4:	9a00      	ldr	r2, [sp, #0]
    2ff6:	9b01      	ldr	r3, [sp, #4]
    2ff8:	1a12      	subs	r2, r2, r0
    2ffa:	418b      	sbcs	r3, r1
    2ffc:	9908      	ldr	r1, [sp, #32]
    2ffe:	0020      	movs	r0, r4
    3000:	600a      	str	r2, [r1, #0]
    3002:	604b      	str	r3, [r1, #4]
    3004:	0029      	movs	r1, r5
    3006:	b003      	add	sp, #12
    3008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    300a:	46c0      	nop			; (mov r8, r8)

0000300c <__aeabi_dadd>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	4645      	mov	r5, r8
    3010:	46de      	mov	lr, fp
    3012:	4657      	mov	r7, sl
    3014:	464e      	mov	r6, r9
    3016:	030c      	lsls	r4, r1, #12
    3018:	b5e0      	push	{r5, r6, r7, lr}
    301a:	004e      	lsls	r6, r1, #1
    301c:	0fc9      	lsrs	r1, r1, #31
    301e:	4688      	mov	r8, r1
    3020:	000d      	movs	r5, r1
    3022:	0a61      	lsrs	r1, r4, #9
    3024:	0f44      	lsrs	r4, r0, #29
    3026:	430c      	orrs	r4, r1
    3028:	00c7      	lsls	r7, r0, #3
    302a:	0319      	lsls	r1, r3, #12
    302c:	0058      	lsls	r0, r3, #1
    302e:	0fdb      	lsrs	r3, r3, #31
    3030:	469b      	mov	fp, r3
    3032:	0a4b      	lsrs	r3, r1, #9
    3034:	0f51      	lsrs	r1, r2, #29
    3036:	430b      	orrs	r3, r1
    3038:	0d76      	lsrs	r6, r6, #21
    303a:	0d40      	lsrs	r0, r0, #21
    303c:	0019      	movs	r1, r3
    303e:	00d2      	lsls	r2, r2, #3
    3040:	45d8      	cmp	r8, fp
    3042:	d100      	bne.n	3046 <__aeabi_dadd+0x3a>
    3044:	e0ae      	b.n	31a4 <__aeabi_dadd+0x198>
    3046:	1a35      	subs	r5, r6, r0
    3048:	2d00      	cmp	r5, #0
    304a:	dc00      	bgt.n	304e <__aeabi_dadd+0x42>
    304c:	e0f6      	b.n	323c <__aeabi_dadd+0x230>
    304e:	2800      	cmp	r0, #0
    3050:	d10f      	bne.n	3072 <__aeabi_dadd+0x66>
    3052:	4313      	orrs	r3, r2
    3054:	d100      	bne.n	3058 <__aeabi_dadd+0x4c>
    3056:	e0db      	b.n	3210 <__aeabi_dadd+0x204>
    3058:	1e6b      	subs	r3, r5, #1
    305a:	2b00      	cmp	r3, #0
    305c:	d000      	beq.n	3060 <__aeabi_dadd+0x54>
    305e:	e137      	b.n	32d0 <__aeabi_dadd+0x2c4>
    3060:	1aba      	subs	r2, r7, r2
    3062:	4297      	cmp	r7, r2
    3064:	41bf      	sbcs	r7, r7
    3066:	1a64      	subs	r4, r4, r1
    3068:	427f      	negs	r7, r7
    306a:	1be4      	subs	r4, r4, r7
    306c:	2601      	movs	r6, #1
    306e:	0017      	movs	r7, r2
    3070:	e024      	b.n	30bc <__aeabi_dadd+0xb0>
    3072:	4bc6      	ldr	r3, [pc, #792]	; (338c <__aeabi_dadd+0x380>)
    3074:	429e      	cmp	r6, r3
    3076:	d04d      	beq.n	3114 <__aeabi_dadd+0x108>
    3078:	2380      	movs	r3, #128	; 0x80
    307a:	041b      	lsls	r3, r3, #16
    307c:	4319      	orrs	r1, r3
    307e:	2d38      	cmp	r5, #56	; 0x38
    3080:	dd00      	ble.n	3084 <__aeabi_dadd+0x78>
    3082:	e107      	b.n	3294 <__aeabi_dadd+0x288>
    3084:	2d1f      	cmp	r5, #31
    3086:	dd00      	ble.n	308a <__aeabi_dadd+0x7e>
    3088:	e138      	b.n	32fc <__aeabi_dadd+0x2f0>
    308a:	2020      	movs	r0, #32
    308c:	1b43      	subs	r3, r0, r5
    308e:	469a      	mov	sl, r3
    3090:	000b      	movs	r3, r1
    3092:	4650      	mov	r0, sl
    3094:	4083      	lsls	r3, r0
    3096:	4699      	mov	r9, r3
    3098:	0013      	movs	r3, r2
    309a:	4648      	mov	r0, r9
    309c:	40eb      	lsrs	r3, r5
    309e:	4318      	orrs	r0, r3
    30a0:	0003      	movs	r3, r0
    30a2:	4650      	mov	r0, sl
    30a4:	4082      	lsls	r2, r0
    30a6:	1e50      	subs	r0, r2, #1
    30a8:	4182      	sbcs	r2, r0
    30aa:	40e9      	lsrs	r1, r5
    30ac:	431a      	orrs	r2, r3
    30ae:	1aba      	subs	r2, r7, r2
    30b0:	1a61      	subs	r1, r4, r1
    30b2:	4297      	cmp	r7, r2
    30b4:	41a4      	sbcs	r4, r4
    30b6:	0017      	movs	r7, r2
    30b8:	4264      	negs	r4, r4
    30ba:	1b0c      	subs	r4, r1, r4
    30bc:	0223      	lsls	r3, r4, #8
    30be:	d562      	bpl.n	3186 <__aeabi_dadd+0x17a>
    30c0:	0264      	lsls	r4, r4, #9
    30c2:	0a65      	lsrs	r5, r4, #9
    30c4:	2d00      	cmp	r5, #0
    30c6:	d100      	bne.n	30ca <__aeabi_dadd+0xbe>
    30c8:	e0df      	b.n	328a <__aeabi_dadd+0x27e>
    30ca:	0028      	movs	r0, r5
    30cc:	f001 fcb0 	bl	4a30 <__clzsi2>
    30d0:	0003      	movs	r3, r0
    30d2:	3b08      	subs	r3, #8
    30d4:	2b1f      	cmp	r3, #31
    30d6:	dd00      	ble.n	30da <__aeabi_dadd+0xce>
    30d8:	e0d2      	b.n	3280 <__aeabi_dadd+0x274>
    30da:	2220      	movs	r2, #32
    30dc:	003c      	movs	r4, r7
    30de:	1ad2      	subs	r2, r2, r3
    30e0:	409d      	lsls	r5, r3
    30e2:	40d4      	lsrs	r4, r2
    30e4:	409f      	lsls	r7, r3
    30e6:	4325      	orrs	r5, r4
    30e8:	429e      	cmp	r6, r3
    30ea:	dd00      	ble.n	30ee <__aeabi_dadd+0xe2>
    30ec:	e0c4      	b.n	3278 <__aeabi_dadd+0x26c>
    30ee:	1b9e      	subs	r6, r3, r6
    30f0:	1c73      	adds	r3, r6, #1
    30f2:	2b1f      	cmp	r3, #31
    30f4:	dd00      	ble.n	30f8 <__aeabi_dadd+0xec>
    30f6:	e0f1      	b.n	32dc <__aeabi_dadd+0x2d0>
    30f8:	2220      	movs	r2, #32
    30fa:	0038      	movs	r0, r7
    30fc:	0029      	movs	r1, r5
    30fe:	1ad2      	subs	r2, r2, r3
    3100:	40d8      	lsrs	r0, r3
    3102:	4091      	lsls	r1, r2
    3104:	4097      	lsls	r7, r2
    3106:	002c      	movs	r4, r5
    3108:	4301      	orrs	r1, r0
    310a:	1e78      	subs	r0, r7, #1
    310c:	4187      	sbcs	r7, r0
    310e:	40dc      	lsrs	r4, r3
    3110:	2600      	movs	r6, #0
    3112:	430f      	orrs	r7, r1
    3114:	077b      	lsls	r3, r7, #29
    3116:	d009      	beq.n	312c <__aeabi_dadd+0x120>
    3118:	230f      	movs	r3, #15
    311a:	403b      	ands	r3, r7
    311c:	2b04      	cmp	r3, #4
    311e:	d005      	beq.n	312c <__aeabi_dadd+0x120>
    3120:	1d3b      	adds	r3, r7, #4
    3122:	42bb      	cmp	r3, r7
    3124:	41bf      	sbcs	r7, r7
    3126:	427f      	negs	r7, r7
    3128:	19e4      	adds	r4, r4, r7
    312a:	001f      	movs	r7, r3
    312c:	0223      	lsls	r3, r4, #8
    312e:	d52c      	bpl.n	318a <__aeabi_dadd+0x17e>
    3130:	4b96      	ldr	r3, [pc, #600]	; (338c <__aeabi_dadd+0x380>)
    3132:	3601      	adds	r6, #1
    3134:	429e      	cmp	r6, r3
    3136:	d100      	bne.n	313a <__aeabi_dadd+0x12e>
    3138:	e09a      	b.n	3270 <__aeabi_dadd+0x264>
    313a:	4645      	mov	r5, r8
    313c:	4b94      	ldr	r3, [pc, #592]	; (3390 <__aeabi_dadd+0x384>)
    313e:	08ff      	lsrs	r7, r7, #3
    3140:	401c      	ands	r4, r3
    3142:	0760      	lsls	r0, r4, #29
    3144:	0576      	lsls	r6, r6, #21
    3146:	0264      	lsls	r4, r4, #9
    3148:	4307      	orrs	r7, r0
    314a:	0b24      	lsrs	r4, r4, #12
    314c:	0d76      	lsrs	r6, r6, #21
    314e:	2100      	movs	r1, #0
    3150:	0324      	lsls	r4, r4, #12
    3152:	0b23      	lsrs	r3, r4, #12
    3154:	0d0c      	lsrs	r4, r1, #20
    3156:	4a8f      	ldr	r2, [pc, #572]	; (3394 <__aeabi_dadd+0x388>)
    3158:	0524      	lsls	r4, r4, #20
    315a:	431c      	orrs	r4, r3
    315c:	4014      	ands	r4, r2
    315e:	0533      	lsls	r3, r6, #20
    3160:	4323      	orrs	r3, r4
    3162:	005b      	lsls	r3, r3, #1
    3164:	07ed      	lsls	r5, r5, #31
    3166:	085b      	lsrs	r3, r3, #1
    3168:	432b      	orrs	r3, r5
    316a:	0038      	movs	r0, r7
    316c:	0019      	movs	r1, r3
    316e:	bc3c      	pop	{r2, r3, r4, r5}
    3170:	4690      	mov	r8, r2
    3172:	4699      	mov	r9, r3
    3174:	46a2      	mov	sl, r4
    3176:	46ab      	mov	fp, r5
    3178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    317a:	4664      	mov	r4, ip
    317c:	4304      	orrs	r4, r0
    317e:	d100      	bne.n	3182 <__aeabi_dadd+0x176>
    3180:	e211      	b.n	35a6 <__aeabi_dadd+0x59a>
    3182:	0004      	movs	r4, r0
    3184:	4667      	mov	r7, ip
    3186:	077b      	lsls	r3, r7, #29
    3188:	d1c6      	bne.n	3118 <__aeabi_dadd+0x10c>
    318a:	4645      	mov	r5, r8
    318c:	0760      	lsls	r0, r4, #29
    318e:	08ff      	lsrs	r7, r7, #3
    3190:	4307      	orrs	r7, r0
    3192:	08e4      	lsrs	r4, r4, #3
    3194:	4b7d      	ldr	r3, [pc, #500]	; (338c <__aeabi_dadd+0x380>)
    3196:	429e      	cmp	r6, r3
    3198:	d030      	beq.n	31fc <__aeabi_dadd+0x1f0>
    319a:	0324      	lsls	r4, r4, #12
    319c:	0576      	lsls	r6, r6, #21
    319e:	0b24      	lsrs	r4, r4, #12
    31a0:	0d76      	lsrs	r6, r6, #21
    31a2:	e7d4      	b.n	314e <__aeabi_dadd+0x142>
    31a4:	1a33      	subs	r3, r6, r0
    31a6:	469a      	mov	sl, r3
    31a8:	2b00      	cmp	r3, #0
    31aa:	dd78      	ble.n	329e <__aeabi_dadd+0x292>
    31ac:	2800      	cmp	r0, #0
    31ae:	d031      	beq.n	3214 <__aeabi_dadd+0x208>
    31b0:	4876      	ldr	r0, [pc, #472]	; (338c <__aeabi_dadd+0x380>)
    31b2:	4286      	cmp	r6, r0
    31b4:	d0ae      	beq.n	3114 <__aeabi_dadd+0x108>
    31b6:	2080      	movs	r0, #128	; 0x80
    31b8:	0400      	lsls	r0, r0, #16
    31ba:	4301      	orrs	r1, r0
    31bc:	4653      	mov	r3, sl
    31be:	2b38      	cmp	r3, #56	; 0x38
    31c0:	dc00      	bgt.n	31c4 <__aeabi_dadd+0x1b8>
    31c2:	e0e9      	b.n	3398 <__aeabi_dadd+0x38c>
    31c4:	430a      	orrs	r2, r1
    31c6:	1e51      	subs	r1, r2, #1
    31c8:	418a      	sbcs	r2, r1
    31ca:	2100      	movs	r1, #0
    31cc:	19d2      	adds	r2, r2, r7
    31ce:	42ba      	cmp	r2, r7
    31d0:	41bf      	sbcs	r7, r7
    31d2:	1909      	adds	r1, r1, r4
    31d4:	427c      	negs	r4, r7
    31d6:	0017      	movs	r7, r2
    31d8:	190c      	adds	r4, r1, r4
    31da:	0223      	lsls	r3, r4, #8
    31dc:	d5d3      	bpl.n	3186 <__aeabi_dadd+0x17a>
    31de:	4b6b      	ldr	r3, [pc, #428]	; (338c <__aeabi_dadd+0x380>)
    31e0:	3601      	adds	r6, #1
    31e2:	429e      	cmp	r6, r3
    31e4:	d100      	bne.n	31e8 <__aeabi_dadd+0x1dc>
    31e6:	e13a      	b.n	345e <__aeabi_dadd+0x452>
    31e8:	2001      	movs	r0, #1
    31ea:	4b69      	ldr	r3, [pc, #420]	; (3390 <__aeabi_dadd+0x384>)
    31ec:	401c      	ands	r4, r3
    31ee:	087b      	lsrs	r3, r7, #1
    31f0:	4007      	ands	r7, r0
    31f2:	431f      	orrs	r7, r3
    31f4:	07e0      	lsls	r0, r4, #31
    31f6:	4307      	orrs	r7, r0
    31f8:	0864      	lsrs	r4, r4, #1
    31fa:	e78b      	b.n	3114 <__aeabi_dadd+0x108>
    31fc:	0023      	movs	r3, r4
    31fe:	433b      	orrs	r3, r7
    3200:	d100      	bne.n	3204 <__aeabi_dadd+0x1f8>
    3202:	e1cb      	b.n	359c <__aeabi_dadd+0x590>
    3204:	2280      	movs	r2, #128	; 0x80
    3206:	0312      	lsls	r2, r2, #12
    3208:	4314      	orrs	r4, r2
    320a:	0324      	lsls	r4, r4, #12
    320c:	0b24      	lsrs	r4, r4, #12
    320e:	e79e      	b.n	314e <__aeabi_dadd+0x142>
    3210:	002e      	movs	r6, r5
    3212:	e77f      	b.n	3114 <__aeabi_dadd+0x108>
    3214:	0008      	movs	r0, r1
    3216:	4310      	orrs	r0, r2
    3218:	d100      	bne.n	321c <__aeabi_dadd+0x210>
    321a:	e0b4      	b.n	3386 <__aeabi_dadd+0x37a>
    321c:	1e58      	subs	r0, r3, #1
    321e:	2800      	cmp	r0, #0
    3220:	d000      	beq.n	3224 <__aeabi_dadd+0x218>
    3222:	e0de      	b.n	33e2 <__aeabi_dadd+0x3d6>
    3224:	18ba      	adds	r2, r7, r2
    3226:	42ba      	cmp	r2, r7
    3228:	419b      	sbcs	r3, r3
    322a:	1864      	adds	r4, r4, r1
    322c:	425b      	negs	r3, r3
    322e:	18e4      	adds	r4, r4, r3
    3230:	0017      	movs	r7, r2
    3232:	2601      	movs	r6, #1
    3234:	0223      	lsls	r3, r4, #8
    3236:	d5a6      	bpl.n	3186 <__aeabi_dadd+0x17a>
    3238:	2602      	movs	r6, #2
    323a:	e7d5      	b.n	31e8 <__aeabi_dadd+0x1dc>
    323c:	2d00      	cmp	r5, #0
    323e:	d16e      	bne.n	331e <__aeabi_dadd+0x312>
    3240:	1c70      	adds	r0, r6, #1
    3242:	0540      	lsls	r0, r0, #21
    3244:	0d40      	lsrs	r0, r0, #21
    3246:	2801      	cmp	r0, #1
    3248:	dc00      	bgt.n	324c <__aeabi_dadd+0x240>
    324a:	e0f9      	b.n	3440 <__aeabi_dadd+0x434>
    324c:	1ab8      	subs	r0, r7, r2
    324e:	4684      	mov	ip, r0
    3250:	4287      	cmp	r7, r0
    3252:	4180      	sbcs	r0, r0
    3254:	1ae5      	subs	r5, r4, r3
    3256:	4240      	negs	r0, r0
    3258:	1a2d      	subs	r5, r5, r0
    325a:	0228      	lsls	r0, r5, #8
    325c:	d400      	bmi.n	3260 <__aeabi_dadd+0x254>
    325e:	e089      	b.n	3374 <__aeabi_dadd+0x368>
    3260:	1bd7      	subs	r7, r2, r7
    3262:	42ba      	cmp	r2, r7
    3264:	4192      	sbcs	r2, r2
    3266:	1b1c      	subs	r4, r3, r4
    3268:	4252      	negs	r2, r2
    326a:	1aa5      	subs	r5, r4, r2
    326c:	46d8      	mov	r8, fp
    326e:	e729      	b.n	30c4 <__aeabi_dadd+0xb8>
    3270:	4645      	mov	r5, r8
    3272:	2400      	movs	r4, #0
    3274:	2700      	movs	r7, #0
    3276:	e76a      	b.n	314e <__aeabi_dadd+0x142>
    3278:	4c45      	ldr	r4, [pc, #276]	; (3390 <__aeabi_dadd+0x384>)
    327a:	1af6      	subs	r6, r6, r3
    327c:	402c      	ands	r4, r5
    327e:	e749      	b.n	3114 <__aeabi_dadd+0x108>
    3280:	003d      	movs	r5, r7
    3282:	3828      	subs	r0, #40	; 0x28
    3284:	4085      	lsls	r5, r0
    3286:	2700      	movs	r7, #0
    3288:	e72e      	b.n	30e8 <__aeabi_dadd+0xdc>
    328a:	0038      	movs	r0, r7
    328c:	f001 fbd0 	bl	4a30 <__clzsi2>
    3290:	3020      	adds	r0, #32
    3292:	e71d      	b.n	30d0 <__aeabi_dadd+0xc4>
    3294:	430a      	orrs	r2, r1
    3296:	1e51      	subs	r1, r2, #1
    3298:	418a      	sbcs	r2, r1
    329a:	2100      	movs	r1, #0
    329c:	e707      	b.n	30ae <__aeabi_dadd+0xa2>
    329e:	2b00      	cmp	r3, #0
    32a0:	d000      	beq.n	32a4 <__aeabi_dadd+0x298>
    32a2:	e0f3      	b.n	348c <__aeabi_dadd+0x480>
    32a4:	1c70      	adds	r0, r6, #1
    32a6:	0543      	lsls	r3, r0, #21
    32a8:	0d5b      	lsrs	r3, r3, #21
    32aa:	2b01      	cmp	r3, #1
    32ac:	dc00      	bgt.n	32b0 <__aeabi_dadd+0x2a4>
    32ae:	e0ad      	b.n	340c <__aeabi_dadd+0x400>
    32b0:	4b36      	ldr	r3, [pc, #216]	; (338c <__aeabi_dadd+0x380>)
    32b2:	4298      	cmp	r0, r3
    32b4:	d100      	bne.n	32b8 <__aeabi_dadd+0x2ac>
    32b6:	e0d1      	b.n	345c <__aeabi_dadd+0x450>
    32b8:	18ba      	adds	r2, r7, r2
    32ba:	42ba      	cmp	r2, r7
    32bc:	41bf      	sbcs	r7, r7
    32be:	1864      	adds	r4, r4, r1
    32c0:	427f      	negs	r7, r7
    32c2:	19e4      	adds	r4, r4, r7
    32c4:	07e7      	lsls	r7, r4, #31
    32c6:	0852      	lsrs	r2, r2, #1
    32c8:	4317      	orrs	r7, r2
    32ca:	0864      	lsrs	r4, r4, #1
    32cc:	0006      	movs	r6, r0
    32ce:	e721      	b.n	3114 <__aeabi_dadd+0x108>
    32d0:	482e      	ldr	r0, [pc, #184]	; (338c <__aeabi_dadd+0x380>)
    32d2:	4285      	cmp	r5, r0
    32d4:	d100      	bne.n	32d8 <__aeabi_dadd+0x2cc>
    32d6:	e093      	b.n	3400 <__aeabi_dadd+0x3f4>
    32d8:	001d      	movs	r5, r3
    32da:	e6d0      	b.n	307e <__aeabi_dadd+0x72>
    32dc:	0029      	movs	r1, r5
    32de:	3e1f      	subs	r6, #31
    32e0:	40f1      	lsrs	r1, r6
    32e2:	2b20      	cmp	r3, #32
    32e4:	d100      	bne.n	32e8 <__aeabi_dadd+0x2dc>
    32e6:	e08d      	b.n	3404 <__aeabi_dadd+0x3f8>
    32e8:	2240      	movs	r2, #64	; 0x40
    32ea:	1ad3      	subs	r3, r2, r3
    32ec:	409d      	lsls	r5, r3
    32ee:	432f      	orrs	r7, r5
    32f0:	1e7d      	subs	r5, r7, #1
    32f2:	41af      	sbcs	r7, r5
    32f4:	2400      	movs	r4, #0
    32f6:	430f      	orrs	r7, r1
    32f8:	2600      	movs	r6, #0
    32fa:	e744      	b.n	3186 <__aeabi_dadd+0x17a>
    32fc:	002b      	movs	r3, r5
    32fe:	0008      	movs	r0, r1
    3300:	3b20      	subs	r3, #32
    3302:	40d8      	lsrs	r0, r3
    3304:	0003      	movs	r3, r0
    3306:	2d20      	cmp	r5, #32
    3308:	d100      	bne.n	330c <__aeabi_dadd+0x300>
    330a:	e07d      	b.n	3408 <__aeabi_dadd+0x3fc>
    330c:	2040      	movs	r0, #64	; 0x40
    330e:	1b45      	subs	r5, r0, r5
    3310:	40a9      	lsls	r1, r5
    3312:	430a      	orrs	r2, r1
    3314:	1e51      	subs	r1, r2, #1
    3316:	418a      	sbcs	r2, r1
    3318:	2100      	movs	r1, #0
    331a:	431a      	orrs	r2, r3
    331c:	e6c7      	b.n	30ae <__aeabi_dadd+0xa2>
    331e:	2e00      	cmp	r6, #0
    3320:	d050      	beq.n	33c4 <__aeabi_dadd+0x3b8>
    3322:	4e1a      	ldr	r6, [pc, #104]	; (338c <__aeabi_dadd+0x380>)
    3324:	42b0      	cmp	r0, r6
    3326:	d057      	beq.n	33d8 <__aeabi_dadd+0x3cc>
    3328:	2680      	movs	r6, #128	; 0x80
    332a:	426b      	negs	r3, r5
    332c:	4699      	mov	r9, r3
    332e:	0436      	lsls	r6, r6, #16
    3330:	4334      	orrs	r4, r6
    3332:	464b      	mov	r3, r9
    3334:	2b38      	cmp	r3, #56	; 0x38
    3336:	dd00      	ble.n	333a <__aeabi_dadd+0x32e>
    3338:	e0d6      	b.n	34e8 <__aeabi_dadd+0x4dc>
    333a:	2b1f      	cmp	r3, #31
    333c:	dd00      	ble.n	3340 <__aeabi_dadd+0x334>
    333e:	e135      	b.n	35ac <__aeabi_dadd+0x5a0>
    3340:	2620      	movs	r6, #32
    3342:	1af5      	subs	r5, r6, r3
    3344:	0026      	movs	r6, r4
    3346:	40ae      	lsls	r6, r5
    3348:	46b2      	mov	sl, r6
    334a:	003e      	movs	r6, r7
    334c:	40de      	lsrs	r6, r3
    334e:	46ac      	mov	ip, r5
    3350:	0035      	movs	r5, r6
    3352:	4656      	mov	r6, sl
    3354:	432e      	orrs	r6, r5
    3356:	4665      	mov	r5, ip
    3358:	40af      	lsls	r7, r5
    335a:	1e7d      	subs	r5, r7, #1
    335c:	41af      	sbcs	r7, r5
    335e:	40dc      	lsrs	r4, r3
    3360:	4337      	orrs	r7, r6
    3362:	1bd7      	subs	r7, r2, r7
    3364:	42ba      	cmp	r2, r7
    3366:	4192      	sbcs	r2, r2
    3368:	1b0c      	subs	r4, r1, r4
    336a:	4252      	negs	r2, r2
    336c:	1aa4      	subs	r4, r4, r2
    336e:	0006      	movs	r6, r0
    3370:	46d8      	mov	r8, fp
    3372:	e6a3      	b.n	30bc <__aeabi_dadd+0xb0>
    3374:	4664      	mov	r4, ip
    3376:	4667      	mov	r7, ip
    3378:	432c      	orrs	r4, r5
    337a:	d000      	beq.n	337e <__aeabi_dadd+0x372>
    337c:	e6a2      	b.n	30c4 <__aeabi_dadd+0xb8>
    337e:	2500      	movs	r5, #0
    3380:	2600      	movs	r6, #0
    3382:	2700      	movs	r7, #0
    3384:	e706      	b.n	3194 <__aeabi_dadd+0x188>
    3386:	001e      	movs	r6, r3
    3388:	e6c4      	b.n	3114 <__aeabi_dadd+0x108>
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	000007ff 	.word	0x000007ff
    3390:	ff7fffff 	.word	0xff7fffff
    3394:	800fffff 	.word	0x800fffff
    3398:	2b1f      	cmp	r3, #31
    339a:	dc63      	bgt.n	3464 <__aeabi_dadd+0x458>
    339c:	2020      	movs	r0, #32
    339e:	1ac3      	subs	r3, r0, r3
    33a0:	0008      	movs	r0, r1
    33a2:	4098      	lsls	r0, r3
    33a4:	469c      	mov	ip, r3
    33a6:	4683      	mov	fp, r0
    33a8:	4653      	mov	r3, sl
    33aa:	0010      	movs	r0, r2
    33ac:	40d8      	lsrs	r0, r3
    33ae:	0003      	movs	r3, r0
    33b0:	4658      	mov	r0, fp
    33b2:	4318      	orrs	r0, r3
    33b4:	4663      	mov	r3, ip
    33b6:	409a      	lsls	r2, r3
    33b8:	1e53      	subs	r3, r2, #1
    33ba:	419a      	sbcs	r2, r3
    33bc:	4653      	mov	r3, sl
    33be:	4302      	orrs	r2, r0
    33c0:	40d9      	lsrs	r1, r3
    33c2:	e703      	b.n	31cc <__aeabi_dadd+0x1c0>
    33c4:	0026      	movs	r6, r4
    33c6:	433e      	orrs	r6, r7
    33c8:	d006      	beq.n	33d8 <__aeabi_dadd+0x3cc>
    33ca:	43eb      	mvns	r3, r5
    33cc:	4699      	mov	r9, r3
    33ce:	2b00      	cmp	r3, #0
    33d0:	d0c7      	beq.n	3362 <__aeabi_dadd+0x356>
    33d2:	4e94      	ldr	r6, [pc, #592]	; (3624 <__aeabi_dadd+0x618>)
    33d4:	42b0      	cmp	r0, r6
    33d6:	d1ac      	bne.n	3332 <__aeabi_dadd+0x326>
    33d8:	000c      	movs	r4, r1
    33da:	0017      	movs	r7, r2
    33dc:	0006      	movs	r6, r0
    33de:	46d8      	mov	r8, fp
    33e0:	e698      	b.n	3114 <__aeabi_dadd+0x108>
    33e2:	4b90      	ldr	r3, [pc, #576]	; (3624 <__aeabi_dadd+0x618>)
    33e4:	459a      	cmp	sl, r3
    33e6:	d00b      	beq.n	3400 <__aeabi_dadd+0x3f4>
    33e8:	4682      	mov	sl, r0
    33ea:	e6e7      	b.n	31bc <__aeabi_dadd+0x1b0>
    33ec:	2800      	cmp	r0, #0
    33ee:	d000      	beq.n	33f2 <__aeabi_dadd+0x3e6>
    33f0:	e09e      	b.n	3530 <__aeabi_dadd+0x524>
    33f2:	0018      	movs	r0, r3
    33f4:	4310      	orrs	r0, r2
    33f6:	d100      	bne.n	33fa <__aeabi_dadd+0x3ee>
    33f8:	e0e9      	b.n	35ce <__aeabi_dadd+0x5c2>
    33fa:	001c      	movs	r4, r3
    33fc:	0017      	movs	r7, r2
    33fe:	46d8      	mov	r8, fp
    3400:	4e88      	ldr	r6, [pc, #544]	; (3624 <__aeabi_dadd+0x618>)
    3402:	e687      	b.n	3114 <__aeabi_dadd+0x108>
    3404:	2500      	movs	r5, #0
    3406:	e772      	b.n	32ee <__aeabi_dadd+0x2e2>
    3408:	2100      	movs	r1, #0
    340a:	e782      	b.n	3312 <__aeabi_dadd+0x306>
    340c:	0023      	movs	r3, r4
    340e:	433b      	orrs	r3, r7
    3410:	2e00      	cmp	r6, #0
    3412:	d000      	beq.n	3416 <__aeabi_dadd+0x40a>
    3414:	e0ab      	b.n	356e <__aeabi_dadd+0x562>
    3416:	2b00      	cmp	r3, #0
    3418:	d100      	bne.n	341c <__aeabi_dadd+0x410>
    341a:	e0e7      	b.n	35ec <__aeabi_dadd+0x5e0>
    341c:	000b      	movs	r3, r1
    341e:	4313      	orrs	r3, r2
    3420:	d100      	bne.n	3424 <__aeabi_dadd+0x418>
    3422:	e677      	b.n	3114 <__aeabi_dadd+0x108>
    3424:	18ba      	adds	r2, r7, r2
    3426:	42ba      	cmp	r2, r7
    3428:	41bf      	sbcs	r7, r7
    342a:	1864      	adds	r4, r4, r1
    342c:	427f      	negs	r7, r7
    342e:	19e4      	adds	r4, r4, r7
    3430:	0223      	lsls	r3, r4, #8
    3432:	d400      	bmi.n	3436 <__aeabi_dadd+0x42a>
    3434:	e0f2      	b.n	361c <__aeabi_dadd+0x610>
    3436:	4b7c      	ldr	r3, [pc, #496]	; (3628 <__aeabi_dadd+0x61c>)
    3438:	0017      	movs	r7, r2
    343a:	401c      	ands	r4, r3
    343c:	0006      	movs	r6, r0
    343e:	e669      	b.n	3114 <__aeabi_dadd+0x108>
    3440:	0020      	movs	r0, r4
    3442:	4338      	orrs	r0, r7
    3444:	2e00      	cmp	r6, #0
    3446:	d1d1      	bne.n	33ec <__aeabi_dadd+0x3e0>
    3448:	2800      	cmp	r0, #0
    344a:	d15b      	bne.n	3504 <__aeabi_dadd+0x4f8>
    344c:	001c      	movs	r4, r3
    344e:	4314      	orrs	r4, r2
    3450:	d100      	bne.n	3454 <__aeabi_dadd+0x448>
    3452:	e0a8      	b.n	35a6 <__aeabi_dadd+0x59a>
    3454:	001c      	movs	r4, r3
    3456:	0017      	movs	r7, r2
    3458:	46d8      	mov	r8, fp
    345a:	e65b      	b.n	3114 <__aeabi_dadd+0x108>
    345c:	0006      	movs	r6, r0
    345e:	2400      	movs	r4, #0
    3460:	2700      	movs	r7, #0
    3462:	e697      	b.n	3194 <__aeabi_dadd+0x188>
    3464:	4650      	mov	r0, sl
    3466:	000b      	movs	r3, r1
    3468:	3820      	subs	r0, #32
    346a:	40c3      	lsrs	r3, r0
    346c:	4699      	mov	r9, r3
    346e:	4653      	mov	r3, sl
    3470:	2b20      	cmp	r3, #32
    3472:	d100      	bne.n	3476 <__aeabi_dadd+0x46a>
    3474:	e095      	b.n	35a2 <__aeabi_dadd+0x596>
    3476:	2340      	movs	r3, #64	; 0x40
    3478:	4650      	mov	r0, sl
    347a:	1a1b      	subs	r3, r3, r0
    347c:	4099      	lsls	r1, r3
    347e:	430a      	orrs	r2, r1
    3480:	1e51      	subs	r1, r2, #1
    3482:	418a      	sbcs	r2, r1
    3484:	464b      	mov	r3, r9
    3486:	2100      	movs	r1, #0
    3488:	431a      	orrs	r2, r3
    348a:	e69f      	b.n	31cc <__aeabi_dadd+0x1c0>
    348c:	2e00      	cmp	r6, #0
    348e:	d130      	bne.n	34f2 <__aeabi_dadd+0x4e6>
    3490:	0026      	movs	r6, r4
    3492:	433e      	orrs	r6, r7
    3494:	d067      	beq.n	3566 <__aeabi_dadd+0x55a>
    3496:	43db      	mvns	r3, r3
    3498:	469a      	mov	sl, r3
    349a:	2b00      	cmp	r3, #0
    349c:	d01c      	beq.n	34d8 <__aeabi_dadd+0x4cc>
    349e:	4e61      	ldr	r6, [pc, #388]	; (3624 <__aeabi_dadd+0x618>)
    34a0:	42b0      	cmp	r0, r6
    34a2:	d060      	beq.n	3566 <__aeabi_dadd+0x55a>
    34a4:	4653      	mov	r3, sl
    34a6:	2b38      	cmp	r3, #56	; 0x38
    34a8:	dd00      	ble.n	34ac <__aeabi_dadd+0x4a0>
    34aa:	e096      	b.n	35da <__aeabi_dadd+0x5ce>
    34ac:	2b1f      	cmp	r3, #31
    34ae:	dd00      	ble.n	34b2 <__aeabi_dadd+0x4a6>
    34b0:	e09f      	b.n	35f2 <__aeabi_dadd+0x5e6>
    34b2:	2620      	movs	r6, #32
    34b4:	1af3      	subs	r3, r6, r3
    34b6:	0026      	movs	r6, r4
    34b8:	409e      	lsls	r6, r3
    34ba:	469c      	mov	ip, r3
    34bc:	46b3      	mov	fp, r6
    34be:	4653      	mov	r3, sl
    34c0:	003e      	movs	r6, r7
    34c2:	40de      	lsrs	r6, r3
    34c4:	0033      	movs	r3, r6
    34c6:	465e      	mov	r6, fp
    34c8:	431e      	orrs	r6, r3
    34ca:	4663      	mov	r3, ip
    34cc:	409f      	lsls	r7, r3
    34ce:	1e7b      	subs	r3, r7, #1
    34d0:	419f      	sbcs	r7, r3
    34d2:	4653      	mov	r3, sl
    34d4:	40dc      	lsrs	r4, r3
    34d6:	4337      	orrs	r7, r6
    34d8:	18bf      	adds	r7, r7, r2
    34da:	4297      	cmp	r7, r2
    34dc:	4192      	sbcs	r2, r2
    34de:	1864      	adds	r4, r4, r1
    34e0:	4252      	negs	r2, r2
    34e2:	18a4      	adds	r4, r4, r2
    34e4:	0006      	movs	r6, r0
    34e6:	e678      	b.n	31da <__aeabi_dadd+0x1ce>
    34e8:	4327      	orrs	r7, r4
    34ea:	1e7c      	subs	r4, r7, #1
    34ec:	41a7      	sbcs	r7, r4
    34ee:	2400      	movs	r4, #0
    34f0:	e737      	b.n	3362 <__aeabi_dadd+0x356>
    34f2:	4e4c      	ldr	r6, [pc, #304]	; (3624 <__aeabi_dadd+0x618>)
    34f4:	42b0      	cmp	r0, r6
    34f6:	d036      	beq.n	3566 <__aeabi_dadd+0x55a>
    34f8:	2680      	movs	r6, #128	; 0x80
    34fa:	425b      	negs	r3, r3
    34fc:	0436      	lsls	r6, r6, #16
    34fe:	469a      	mov	sl, r3
    3500:	4334      	orrs	r4, r6
    3502:	e7cf      	b.n	34a4 <__aeabi_dadd+0x498>
    3504:	0018      	movs	r0, r3
    3506:	4310      	orrs	r0, r2
    3508:	d100      	bne.n	350c <__aeabi_dadd+0x500>
    350a:	e603      	b.n	3114 <__aeabi_dadd+0x108>
    350c:	1ab8      	subs	r0, r7, r2
    350e:	4684      	mov	ip, r0
    3510:	4567      	cmp	r7, ip
    3512:	41ad      	sbcs	r5, r5
    3514:	1ae0      	subs	r0, r4, r3
    3516:	426d      	negs	r5, r5
    3518:	1b40      	subs	r0, r0, r5
    351a:	0205      	lsls	r5, r0, #8
    351c:	d400      	bmi.n	3520 <__aeabi_dadd+0x514>
    351e:	e62c      	b.n	317a <__aeabi_dadd+0x16e>
    3520:	1bd7      	subs	r7, r2, r7
    3522:	42ba      	cmp	r2, r7
    3524:	4192      	sbcs	r2, r2
    3526:	1b1c      	subs	r4, r3, r4
    3528:	4252      	negs	r2, r2
    352a:	1aa4      	subs	r4, r4, r2
    352c:	46d8      	mov	r8, fp
    352e:	e5f1      	b.n	3114 <__aeabi_dadd+0x108>
    3530:	0018      	movs	r0, r3
    3532:	4310      	orrs	r0, r2
    3534:	d100      	bne.n	3538 <__aeabi_dadd+0x52c>
    3536:	e763      	b.n	3400 <__aeabi_dadd+0x3f4>
    3538:	08f8      	lsrs	r0, r7, #3
    353a:	0767      	lsls	r7, r4, #29
    353c:	4307      	orrs	r7, r0
    353e:	2080      	movs	r0, #128	; 0x80
    3540:	08e4      	lsrs	r4, r4, #3
    3542:	0300      	lsls	r0, r0, #12
    3544:	4204      	tst	r4, r0
    3546:	d008      	beq.n	355a <__aeabi_dadd+0x54e>
    3548:	08dd      	lsrs	r5, r3, #3
    354a:	4205      	tst	r5, r0
    354c:	d105      	bne.n	355a <__aeabi_dadd+0x54e>
    354e:	08d2      	lsrs	r2, r2, #3
    3550:	0759      	lsls	r1, r3, #29
    3552:	4311      	orrs	r1, r2
    3554:	000f      	movs	r7, r1
    3556:	002c      	movs	r4, r5
    3558:	46d8      	mov	r8, fp
    355a:	0f7b      	lsrs	r3, r7, #29
    355c:	00e4      	lsls	r4, r4, #3
    355e:	431c      	orrs	r4, r3
    3560:	00ff      	lsls	r7, r7, #3
    3562:	4e30      	ldr	r6, [pc, #192]	; (3624 <__aeabi_dadd+0x618>)
    3564:	e5d6      	b.n	3114 <__aeabi_dadd+0x108>
    3566:	000c      	movs	r4, r1
    3568:	0017      	movs	r7, r2
    356a:	0006      	movs	r6, r0
    356c:	e5d2      	b.n	3114 <__aeabi_dadd+0x108>
    356e:	2b00      	cmp	r3, #0
    3570:	d038      	beq.n	35e4 <__aeabi_dadd+0x5d8>
    3572:	000b      	movs	r3, r1
    3574:	4313      	orrs	r3, r2
    3576:	d100      	bne.n	357a <__aeabi_dadd+0x56e>
    3578:	e742      	b.n	3400 <__aeabi_dadd+0x3f4>
    357a:	08f8      	lsrs	r0, r7, #3
    357c:	0767      	lsls	r7, r4, #29
    357e:	4307      	orrs	r7, r0
    3580:	2080      	movs	r0, #128	; 0x80
    3582:	08e4      	lsrs	r4, r4, #3
    3584:	0300      	lsls	r0, r0, #12
    3586:	4204      	tst	r4, r0
    3588:	d0e7      	beq.n	355a <__aeabi_dadd+0x54e>
    358a:	08cb      	lsrs	r3, r1, #3
    358c:	4203      	tst	r3, r0
    358e:	d1e4      	bne.n	355a <__aeabi_dadd+0x54e>
    3590:	08d2      	lsrs	r2, r2, #3
    3592:	0749      	lsls	r1, r1, #29
    3594:	4311      	orrs	r1, r2
    3596:	000f      	movs	r7, r1
    3598:	001c      	movs	r4, r3
    359a:	e7de      	b.n	355a <__aeabi_dadd+0x54e>
    359c:	2700      	movs	r7, #0
    359e:	2400      	movs	r4, #0
    35a0:	e5d5      	b.n	314e <__aeabi_dadd+0x142>
    35a2:	2100      	movs	r1, #0
    35a4:	e76b      	b.n	347e <__aeabi_dadd+0x472>
    35a6:	2500      	movs	r5, #0
    35a8:	2700      	movs	r7, #0
    35aa:	e5f3      	b.n	3194 <__aeabi_dadd+0x188>
    35ac:	464e      	mov	r6, r9
    35ae:	0025      	movs	r5, r4
    35b0:	3e20      	subs	r6, #32
    35b2:	40f5      	lsrs	r5, r6
    35b4:	464b      	mov	r3, r9
    35b6:	002e      	movs	r6, r5
    35b8:	2b20      	cmp	r3, #32
    35ba:	d02d      	beq.n	3618 <__aeabi_dadd+0x60c>
    35bc:	2540      	movs	r5, #64	; 0x40
    35be:	1aed      	subs	r5, r5, r3
    35c0:	40ac      	lsls	r4, r5
    35c2:	4327      	orrs	r7, r4
    35c4:	1e7c      	subs	r4, r7, #1
    35c6:	41a7      	sbcs	r7, r4
    35c8:	2400      	movs	r4, #0
    35ca:	4337      	orrs	r7, r6
    35cc:	e6c9      	b.n	3362 <__aeabi_dadd+0x356>
    35ce:	2480      	movs	r4, #128	; 0x80
    35d0:	2500      	movs	r5, #0
    35d2:	0324      	lsls	r4, r4, #12
    35d4:	4e13      	ldr	r6, [pc, #76]	; (3624 <__aeabi_dadd+0x618>)
    35d6:	2700      	movs	r7, #0
    35d8:	e5dc      	b.n	3194 <__aeabi_dadd+0x188>
    35da:	4327      	orrs	r7, r4
    35dc:	1e7c      	subs	r4, r7, #1
    35de:	41a7      	sbcs	r7, r4
    35e0:	2400      	movs	r4, #0
    35e2:	e779      	b.n	34d8 <__aeabi_dadd+0x4cc>
    35e4:	000c      	movs	r4, r1
    35e6:	0017      	movs	r7, r2
    35e8:	4e0e      	ldr	r6, [pc, #56]	; (3624 <__aeabi_dadd+0x618>)
    35ea:	e593      	b.n	3114 <__aeabi_dadd+0x108>
    35ec:	000c      	movs	r4, r1
    35ee:	0017      	movs	r7, r2
    35f0:	e590      	b.n	3114 <__aeabi_dadd+0x108>
    35f2:	4656      	mov	r6, sl
    35f4:	0023      	movs	r3, r4
    35f6:	3e20      	subs	r6, #32
    35f8:	40f3      	lsrs	r3, r6
    35fa:	4699      	mov	r9, r3
    35fc:	4653      	mov	r3, sl
    35fe:	2b20      	cmp	r3, #32
    3600:	d00e      	beq.n	3620 <__aeabi_dadd+0x614>
    3602:	2340      	movs	r3, #64	; 0x40
    3604:	4656      	mov	r6, sl
    3606:	1b9b      	subs	r3, r3, r6
    3608:	409c      	lsls	r4, r3
    360a:	4327      	orrs	r7, r4
    360c:	1e7c      	subs	r4, r7, #1
    360e:	41a7      	sbcs	r7, r4
    3610:	464b      	mov	r3, r9
    3612:	2400      	movs	r4, #0
    3614:	431f      	orrs	r7, r3
    3616:	e75f      	b.n	34d8 <__aeabi_dadd+0x4cc>
    3618:	2400      	movs	r4, #0
    361a:	e7d2      	b.n	35c2 <__aeabi_dadd+0x5b6>
    361c:	0017      	movs	r7, r2
    361e:	e5b2      	b.n	3186 <__aeabi_dadd+0x17a>
    3620:	2400      	movs	r4, #0
    3622:	e7f2      	b.n	360a <__aeabi_dadd+0x5fe>
    3624:	000007ff 	.word	0x000007ff
    3628:	ff7fffff 	.word	0xff7fffff

0000362c <__aeabi_ddiv>:
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	4657      	mov	r7, sl
    3630:	4645      	mov	r5, r8
    3632:	46de      	mov	lr, fp
    3634:	464e      	mov	r6, r9
    3636:	b5e0      	push	{r5, r6, r7, lr}
    3638:	004c      	lsls	r4, r1, #1
    363a:	030e      	lsls	r6, r1, #12
    363c:	b087      	sub	sp, #28
    363e:	4683      	mov	fp, r0
    3640:	4692      	mov	sl, r2
    3642:	001d      	movs	r5, r3
    3644:	4680      	mov	r8, r0
    3646:	0b36      	lsrs	r6, r6, #12
    3648:	0d64      	lsrs	r4, r4, #21
    364a:	0fcf      	lsrs	r7, r1, #31
    364c:	2c00      	cmp	r4, #0
    364e:	d04f      	beq.n	36f0 <__aeabi_ddiv+0xc4>
    3650:	4b6f      	ldr	r3, [pc, #444]	; (3810 <__aeabi_ddiv+0x1e4>)
    3652:	429c      	cmp	r4, r3
    3654:	d035      	beq.n	36c2 <__aeabi_ddiv+0x96>
    3656:	2380      	movs	r3, #128	; 0x80
    3658:	0f42      	lsrs	r2, r0, #29
    365a:	041b      	lsls	r3, r3, #16
    365c:	00f6      	lsls	r6, r6, #3
    365e:	4313      	orrs	r3, r2
    3660:	4333      	orrs	r3, r6
    3662:	4699      	mov	r9, r3
    3664:	00c3      	lsls	r3, r0, #3
    3666:	4698      	mov	r8, r3
    3668:	4b6a      	ldr	r3, [pc, #424]	; (3814 <__aeabi_ddiv+0x1e8>)
    366a:	2600      	movs	r6, #0
    366c:	469c      	mov	ip, r3
    366e:	2300      	movs	r3, #0
    3670:	4464      	add	r4, ip
    3672:	9303      	str	r3, [sp, #12]
    3674:	032b      	lsls	r3, r5, #12
    3676:	0b1b      	lsrs	r3, r3, #12
    3678:	469b      	mov	fp, r3
    367a:	006b      	lsls	r3, r5, #1
    367c:	0fed      	lsrs	r5, r5, #31
    367e:	4650      	mov	r0, sl
    3680:	0d5b      	lsrs	r3, r3, #21
    3682:	9501      	str	r5, [sp, #4]
    3684:	d05e      	beq.n	3744 <__aeabi_ddiv+0x118>
    3686:	4a62      	ldr	r2, [pc, #392]	; (3810 <__aeabi_ddiv+0x1e4>)
    3688:	4293      	cmp	r3, r2
    368a:	d053      	beq.n	3734 <__aeabi_ddiv+0x108>
    368c:	465a      	mov	r2, fp
    368e:	00d1      	lsls	r1, r2, #3
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	0f40      	lsrs	r0, r0, #29
    3694:	0412      	lsls	r2, r2, #16
    3696:	4302      	orrs	r2, r0
    3698:	430a      	orrs	r2, r1
    369a:	4693      	mov	fp, r2
    369c:	4652      	mov	r2, sl
    369e:	00d1      	lsls	r1, r2, #3
    36a0:	4a5c      	ldr	r2, [pc, #368]	; (3814 <__aeabi_ddiv+0x1e8>)
    36a2:	4694      	mov	ip, r2
    36a4:	2200      	movs	r2, #0
    36a6:	4463      	add	r3, ip
    36a8:	0038      	movs	r0, r7
    36aa:	4068      	eors	r0, r5
    36ac:	4684      	mov	ip, r0
    36ae:	9002      	str	r0, [sp, #8]
    36b0:	1ae4      	subs	r4, r4, r3
    36b2:	4316      	orrs	r6, r2
    36b4:	2e0f      	cmp	r6, #15
    36b6:	d900      	bls.n	36ba <__aeabi_ddiv+0x8e>
    36b8:	e0b4      	b.n	3824 <__aeabi_ddiv+0x1f8>
    36ba:	4b57      	ldr	r3, [pc, #348]	; (3818 <__aeabi_ddiv+0x1ec>)
    36bc:	00b6      	lsls	r6, r6, #2
    36be:	599b      	ldr	r3, [r3, r6]
    36c0:	469f      	mov	pc, r3
    36c2:	0003      	movs	r3, r0
    36c4:	4333      	orrs	r3, r6
    36c6:	4699      	mov	r9, r3
    36c8:	d16c      	bne.n	37a4 <__aeabi_ddiv+0x178>
    36ca:	2300      	movs	r3, #0
    36cc:	4698      	mov	r8, r3
    36ce:	3302      	adds	r3, #2
    36d0:	2608      	movs	r6, #8
    36d2:	9303      	str	r3, [sp, #12]
    36d4:	e7ce      	b.n	3674 <__aeabi_ddiv+0x48>
    36d6:	46cb      	mov	fp, r9
    36d8:	4641      	mov	r1, r8
    36da:	9a03      	ldr	r2, [sp, #12]
    36dc:	9701      	str	r7, [sp, #4]
    36de:	2a02      	cmp	r2, #2
    36e0:	d165      	bne.n	37ae <__aeabi_ddiv+0x182>
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	4c4a      	ldr	r4, [pc, #296]	; (3810 <__aeabi_ddiv+0x1e4>)
    36e6:	469c      	mov	ip, r3
    36e8:	2300      	movs	r3, #0
    36ea:	2200      	movs	r2, #0
    36ec:	4698      	mov	r8, r3
    36ee:	e06b      	b.n	37c8 <__aeabi_ddiv+0x19c>
    36f0:	0003      	movs	r3, r0
    36f2:	4333      	orrs	r3, r6
    36f4:	4699      	mov	r9, r3
    36f6:	d04e      	beq.n	3796 <__aeabi_ddiv+0x16a>
    36f8:	2e00      	cmp	r6, #0
    36fa:	d100      	bne.n	36fe <__aeabi_ddiv+0xd2>
    36fc:	e1bc      	b.n	3a78 <__aeabi_ddiv+0x44c>
    36fe:	0030      	movs	r0, r6
    3700:	f001 f996 	bl	4a30 <__clzsi2>
    3704:	0003      	movs	r3, r0
    3706:	3b0b      	subs	r3, #11
    3708:	2b1c      	cmp	r3, #28
    370a:	dd00      	ble.n	370e <__aeabi_ddiv+0xe2>
    370c:	e1ac      	b.n	3a68 <__aeabi_ddiv+0x43c>
    370e:	221d      	movs	r2, #29
    3710:	1ad3      	subs	r3, r2, r3
    3712:	465a      	mov	r2, fp
    3714:	0001      	movs	r1, r0
    3716:	40da      	lsrs	r2, r3
    3718:	3908      	subs	r1, #8
    371a:	408e      	lsls	r6, r1
    371c:	0013      	movs	r3, r2
    371e:	4333      	orrs	r3, r6
    3720:	4699      	mov	r9, r3
    3722:	465b      	mov	r3, fp
    3724:	408b      	lsls	r3, r1
    3726:	4698      	mov	r8, r3
    3728:	2300      	movs	r3, #0
    372a:	4c3c      	ldr	r4, [pc, #240]	; (381c <__aeabi_ddiv+0x1f0>)
    372c:	2600      	movs	r6, #0
    372e:	1a24      	subs	r4, r4, r0
    3730:	9303      	str	r3, [sp, #12]
    3732:	e79f      	b.n	3674 <__aeabi_ddiv+0x48>
    3734:	4651      	mov	r1, sl
    3736:	465a      	mov	r2, fp
    3738:	4311      	orrs	r1, r2
    373a:	d129      	bne.n	3790 <__aeabi_ddiv+0x164>
    373c:	2200      	movs	r2, #0
    373e:	4693      	mov	fp, r2
    3740:	3202      	adds	r2, #2
    3742:	e7b1      	b.n	36a8 <__aeabi_ddiv+0x7c>
    3744:	4659      	mov	r1, fp
    3746:	4301      	orrs	r1, r0
    3748:	d01e      	beq.n	3788 <__aeabi_ddiv+0x15c>
    374a:	465b      	mov	r3, fp
    374c:	2b00      	cmp	r3, #0
    374e:	d100      	bne.n	3752 <__aeabi_ddiv+0x126>
    3750:	e19e      	b.n	3a90 <__aeabi_ddiv+0x464>
    3752:	4658      	mov	r0, fp
    3754:	f001 f96c 	bl	4a30 <__clzsi2>
    3758:	0003      	movs	r3, r0
    375a:	3b0b      	subs	r3, #11
    375c:	2b1c      	cmp	r3, #28
    375e:	dd00      	ble.n	3762 <__aeabi_ddiv+0x136>
    3760:	e18f      	b.n	3a82 <__aeabi_ddiv+0x456>
    3762:	0002      	movs	r2, r0
    3764:	4659      	mov	r1, fp
    3766:	3a08      	subs	r2, #8
    3768:	4091      	lsls	r1, r2
    376a:	468b      	mov	fp, r1
    376c:	211d      	movs	r1, #29
    376e:	1acb      	subs	r3, r1, r3
    3770:	4651      	mov	r1, sl
    3772:	40d9      	lsrs	r1, r3
    3774:	000b      	movs	r3, r1
    3776:	4659      	mov	r1, fp
    3778:	430b      	orrs	r3, r1
    377a:	4651      	mov	r1, sl
    377c:	469b      	mov	fp, r3
    377e:	4091      	lsls	r1, r2
    3780:	4b26      	ldr	r3, [pc, #152]	; (381c <__aeabi_ddiv+0x1f0>)
    3782:	2200      	movs	r2, #0
    3784:	1a1b      	subs	r3, r3, r0
    3786:	e78f      	b.n	36a8 <__aeabi_ddiv+0x7c>
    3788:	2300      	movs	r3, #0
    378a:	2201      	movs	r2, #1
    378c:	469b      	mov	fp, r3
    378e:	e78b      	b.n	36a8 <__aeabi_ddiv+0x7c>
    3790:	4651      	mov	r1, sl
    3792:	2203      	movs	r2, #3
    3794:	e788      	b.n	36a8 <__aeabi_ddiv+0x7c>
    3796:	2300      	movs	r3, #0
    3798:	4698      	mov	r8, r3
    379a:	3301      	adds	r3, #1
    379c:	2604      	movs	r6, #4
    379e:	2400      	movs	r4, #0
    37a0:	9303      	str	r3, [sp, #12]
    37a2:	e767      	b.n	3674 <__aeabi_ddiv+0x48>
    37a4:	2303      	movs	r3, #3
    37a6:	46b1      	mov	r9, r6
    37a8:	9303      	str	r3, [sp, #12]
    37aa:	260c      	movs	r6, #12
    37ac:	e762      	b.n	3674 <__aeabi_ddiv+0x48>
    37ae:	2a03      	cmp	r2, #3
    37b0:	d100      	bne.n	37b4 <__aeabi_ddiv+0x188>
    37b2:	e25c      	b.n	3c6e <__aeabi_ddiv+0x642>
    37b4:	9b01      	ldr	r3, [sp, #4]
    37b6:	2a01      	cmp	r2, #1
    37b8:	d000      	beq.n	37bc <__aeabi_ddiv+0x190>
    37ba:	e1e4      	b.n	3b86 <__aeabi_ddiv+0x55a>
    37bc:	4013      	ands	r3, r2
    37be:	469c      	mov	ip, r3
    37c0:	2300      	movs	r3, #0
    37c2:	2400      	movs	r4, #0
    37c4:	2200      	movs	r2, #0
    37c6:	4698      	mov	r8, r3
    37c8:	2100      	movs	r1, #0
    37ca:	0312      	lsls	r2, r2, #12
    37cc:	0b13      	lsrs	r3, r2, #12
    37ce:	0d0a      	lsrs	r2, r1, #20
    37d0:	0512      	lsls	r2, r2, #20
    37d2:	431a      	orrs	r2, r3
    37d4:	0523      	lsls	r3, r4, #20
    37d6:	4c12      	ldr	r4, [pc, #72]	; (3820 <__aeabi_ddiv+0x1f4>)
    37d8:	4640      	mov	r0, r8
    37da:	4022      	ands	r2, r4
    37dc:	4313      	orrs	r3, r2
    37de:	4662      	mov	r2, ip
    37e0:	005b      	lsls	r3, r3, #1
    37e2:	07d2      	lsls	r2, r2, #31
    37e4:	085b      	lsrs	r3, r3, #1
    37e6:	4313      	orrs	r3, r2
    37e8:	0019      	movs	r1, r3
    37ea:	b007      	add	sp, #28
    37ec:	bc3c      	pop	{r2, r3, r4, r5}
    37ee:	4690      	mov	r8, r2
    37f0:	4699      	mov	r9, r3
    37f2:	46a2      	mov	sl, r4
    37f4:	46ab      	mov	fp, r5
    37f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37f8:	2300      	movs	r3, #0
    37fa:	2280      	movs	r2, #128	; 0x80
    37fc:	469c      	mov	ip, r3
    37fe:	0312      	lsls	r2, r2, #12
    3800:	4698      	mov	r8, r3
    3802:	4c03      	ldr	r4, [pc, #12]	; (3810 <__aeabi_ddiv+0x1e4>)
    3804:	e7e0      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3806:	2300      	movs	r3, #0
    3808:	4c01      	ldr	r4, [pc, #4]	; (3810 <__aeabi_ddiv+0x1e4>)
    380a:	2200      	movs	r2, #0
    380c:	4698      	mov	r8, r3
    380e:	e7db      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3810:	000007ff 	.word	0x000007ff
    3814:	fffffc01 	.word	0xfffffc01
    3818:	00004d10 	.word	0x00004d10
    381c:	fffffc0d 	.word	0xfffffc0d
    3820:	800fffff 	.word	0x800fffff
    3824:	45d9      	cmp	r9, fp
    3826:	d900      	bls.n	382a <__aeabi_ddiv+0x1fe>
    3828:	e139      	b.n	3a9e <__aeabi_ddiv+0x472>
    382a:	d100      	bne.n	382e <__aeabi_ddiv+0x202>
    382c:	e134      	b.n	3a98 <__aeabi_ddiv+0x46c>
    382e:	2300      	movs	r3, #0
    3830:	4646      	mov	r6, r8
    3832:	464d      	mov	r5, r9
    3834:	469a      	mov	sl, r3
    3836:	3c01      	subs	r4, #1
    3838:	465b      	mov	r3, fp
    383a:	0e0a      	lsrs	r2, r1, #24
    383c:	021b      	lsls	r3, r3, #8
    383e:	431a      	orrs	r2, r3
    3840:	020b      	lsls	r3, r1, #8
    3842:	0c17      	lsrs	r7, r2, #16
    3844:	9303      	str	r3, [sp, #12]
    3846:	0413      	lsls	r3, r2, #16
    3848:	0c1b      	lsrs	r3, r3, #16
    384a:	0039      	movs	r1, r7
    384c:	0028      	movs	r0, r5
    384e:	4690      	mov	r8, r2
    3850:	9301      	str	r3, [sp, #4]
    3852:	f7ff fa05 	bl	2c60 <__udivsi3>
    3856:	0002      	movs	r2, r0
    3858:	9b01      	ldr	r3, [sp, #4]
    385a:	4683      	mov	fp, r0
    385c:	435a      	muls	r2, r3
    385e:	0028      	movs	r0, r5
    3860:	0039      	movs	r1, r7
    3862:	4691      	mov	r9, r2
    3864:	f7ff fa82 	bl	2d6c <__aeabi_uidivmod>
    3868:	0c35      	lsrs	r5, r6, #16
    386a:	0409      	lsls	r1, r1, #16
    386c:	430d      	orrs	r5, r1
    386e:	45a9      	cmp	r9, r5
    3870:	d90d      	bls.n	388e <__aeabi_ddiv+0x262>
    3872:	465b      	mov	r3, fp
    3874:	4445      	add	r5, r8
    3876:	3b01      	subs	r3, #1
    3878:	45a8      	cmp	r8, r5
    387a:	d900      	bls.n	387e <__aeabi_ddiv+0x252>
    387c:	e13a      	b.n	3af4 <__aeabi_ddiv+0x4c8>
    387e:	45a9      	cmp	r9, r5
    3880:	d800      	bhi.n	3884 <__aeabi_ddiv+0x258>
    3882:	e137      	b.n	3af4 <__aeabi_ddiv+0x4c8>
    3884:	2302      	movs	r3, #2
    3886:	425b      	negs	r3, r3
    3888:	469c      	mov	ip, r3
    388a:	4445      	add	r5, r8
    388c:	44e3      	add	fp, ip
    388e:	464b      	mov	r3, r9
    3890:	1aeb      	subs	r3, r5, r3
    3892:	0039      	movs	r1, r7
    3894:	0018      	movs	r0, r3
    3896:	9304      	str	r3, [sp, #16]
    3898:	f7ff f9e2 	bl	2c60 <__udivsi3>
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	0005      	movs	r5, r0
    38a0:	4343      	muls	r3, r0
    38a2:	0039      	movs	r1, r7
    38a4:	9804      	ldr	r0, [sp, #16]
    38a6:	4699      	mov	r9, r3
    38a8:	f7ff fa60 	bl	2d6c <__aeabi_uidivmod>
    38ac:	0433      	lsls	r3, r6, #16
    38ae:	0409      	lsls	r1, r1, #16
    38b0:	0c1b      	lsrs	r3, r3, #16
    38b2:	430b      	orrs	r3, r1
    38b4:	4599      	cmp	r9, r3
    38b6:	d909      	bls.n	38cc <__aeabi_ddiv+0x2a0>
    38b8:	4443      	add	r3, r8
    38ba:	1e6a      	subs	r2, r5, #1
    38bc:	4598      	cmp	r8, r3
    38be:	d900      	bls.n	38c2 <__aeabi_ddiv+0x296>
    38c0:	e11a      	b.n	3af8 <__aeabi_ddiv+0x4cc>
    38c2:	4599      	cmp	r9, r3
    38c4:	d800      	bhi.n	38c8 <__aeabi_ddiv+0x29c>
    38c6:	e117      	b.n	3af8 <__aeabi_ddiv+0x4cc>
    38c8:	3d02      	subs	r5, #2
    38ca:	4443      	add	r3, r8
    38cc:	464a      	mov	r2, r9
    38ce:	1a9b      	subs	r3, r3, r2
    38d0:	465a      	mov	r2, fp
    38d2:	0412      	lsls	r2, r2, #16
    38d4:	432a      	orrs	r2, r5
    38d6:	9903      	ldr	r1, [sp, #12]
    38d8:	4693      	mov	fp, r2
    38da:	0c10      	lsrs	r0, r2, #16
    38dc:	0c0a      	lsrs	r2, r1, #16
    38de:	4691      	mov	r9, r2
    38e0:	0409      	lsls	r1, r1, #16
    38e2:	465a      	mov	r2, fp
    38e4:	0c09      	lsrs	r1, r1, #16
    38e6:	464e      	mov	r6, r9
    38e8:	000d      	movs	r5, r1
    38ea:	0412      	lsls	r2, r2, #16
    38ec:	0c12      	lsrs	r2, r2, #16
    38ee:	4345      	muls	r5, r0
    38f0:	9105      	str	r1, [sp, #20]
    38f2:	4351      	muls	r1, r2
    38f4:	4372      	muls	r2, r6
    38f6:	4370      	muls	r0, r6
    38f8:	1952      	adds	r2, r2, r5
    38fa:	0c0e      	lsrs	r6, r1, #16
    38fc:	18b2      	adds	r2, r6, r2
    38fe:	4295      	cmp	r5, r2
    3900:	d903      	bls.n	390a <__aeabi_ddiv+0x2de>
    3902:	2580      	movs	r5, #128	; 0x80
    3904:	026d      	lsls	r5, r5, #9
    3906:	46ac      	mov	ip, r5
    3908:	4460      	add	r0, ip
    390a:	0c15      	lsrs	r5, r2, #16
    390c:	0409      	lsls	r1, r1, #16
    390e:	0412      	lsls	r2, r2, #16
    3910:	0c09      	lsrs	r1, r1, #16
    3912:	1828      	adds	r0, r5, r0
    3914:	1852      	adds	r2, r2, r1
    3916:	4283      	cmp	r3, r0
    3918:	d200      	bcs.n	391c <__aeabi_ddiv+0x2f0>
    391a:	e0ce      	b.n	3aba <__aeabi_ddiv+0x48e>
    391c:	d100      	bne.n	3920 <__aeabi_ddiv+0x2f4>
    391e:	e0c8      	b.n	3ab2 <__aeabi_ddiv+0x486>
    3920:	1a1d      	subs	r5, r3, r0
    3922:	4653      	mov	r3, sl
    3924:	1a9e      	subs	r6, r3, r2
    3926:	45b2      	cmp	sl, r6
    3928:	4192      	sbcs	r2, r2
    392a:	4252      	negs	r2, r2
    392c:	1aab      	subs	r3, r5, r2
    392e:	469a      	mov	sl, r3
    3930:	4598      	cmp	r8, r3
    3932:	d100      	bne.n	3936 <__aeabi_ddiv+0x30a>
    3934:	e117      	b.n	3b66 <__aeabi_ddiv+0x53a>
    3936:	0039      	movs	r1, r7
    3938:	0018      	movs	r0, r3
    393a:	f7ff f991 	bl	2c60 <__udivsi3>
    393e:	9b01      	ldr	r3, [sp, #4]
    3940:	0005      	movs	r5, r0
    3942:	4343      	muls	r3, r0
    3944:	0039      	movs	r1, r7
    3946:	4650      	mov	r0, sl
    3948:	9304      	str	r3, [sp, #16]
    394a:	f7ff fa0f 	bl	2d6c <__aeabi_uidivmod>
    394e:	9804      	ldr	r0, [sp, #16]
    3950:	040b      	lsls	r3, r1, #16
    3952:	0c31      	lsrs	r1, r6, #16
    3954:	4319      	orrs	r1, r3
    3956:	4288      	cmp	r0, r1
    3958:	d909      	bls.n	396e <__aeabi_ddiv+0x342>
    395a:	4441      	add	r1, r8
    395c:	1e6b      	subs	r3, r5, #1
    395e:	4588      	cmp	r8, r1
    3960:	d900      	bls.n	3964 <__aeabi_ddiv+0x338>
    3962:	e107      	b.n	3b74 <__aeabi_ddiv+0x548>
    3964:	4288      	cmp	r0, r1
    3966:	d800      	bhi.n	396a <__aeabi_ddiv+0x33e>
    3968:	e104      	b.n	3b74 <__aeabi_ddiv+0x548>
    396a:	3d02      	subs	r5, #2
    396c:	4441      	add	r1, r8
    396e:	9b04      	ldr	r3, [sp, #16]
    3970:	1acb      	subs	r3, r1, r3
    3972:	0018      	movs	r0, r3
    3974:	0039      	movs	r1, r7
    3976:	9304      	str	r3, [sp, #16]
    3978:	f7ff f972 	bl	2c60 <__udivsi3>
    397c:	9b01      	ldr	r3, [sp, #4]
    397e:	4682      	mov	sl, r0
    3980:	4343      	muls	r3, r0
    3982:	0039      	movs	r1, r7
    3984:	9804      	ldr	r0, [sp, #16]
    3986:	9301      	str	r3, [sp, #4]
    3988:	f7ff f9f0 	bl	2d6c <__aeabi_uidivmod>
    398c:	9801      	ldr	r0, [sp, #4]
    398e:	040b      	lsls	r3, r1, #16
    3990:	0431      	lsls	r1, r6, #16
    3992:	0c09      	lsrs	r1, r1, #16
    3994:	4319      	orrs	r1, r3
    3996:	4288      	cmp	r0, r1
    3998:	d90d      	bls.n	39b6 <__aeabi_ddiv+0x38a>
    399a:	4653      	mov	r3, sl
    399c:	4441      	add	r1, r8
    399e:	3b01      	subs	r3, #1
    39a0:	4588      	cmp	r8, r1
    39a2:	d900      	bls.n	39a6 <__aeabi_ddiv+0x37a>
    39a4:	e0e8      	b.n	3b78 <__aeabi_ddiv+0x54c>
    39a6:	4288      	cmp	r0, r1
    39a8:	d800      	bhi.n	39ac <__aeabi_ddiv+0x380>
    39aa:	e0e5      	b.n	3b78 <__aeabi_ddiv+0x54c>
    39ac:	2302      	movs	r3, #2
    39ae:	425b      	negs	r3, r3
    39b0:	469c      	mov	ip, r3
    39b2:	4441      	add	r1, r8
    39b4:	44e2      	add	sl, ip
    39b6:	9b01      	ldr	r3, [sp, #4]
    39b8:	042d      	lsls	r5, r5, #16
    39ba:	1ace      	subs	r6, r1, r3
    39bc:	4651      	mov	r1, sl
    39be:	4329      	orrs	r1, r5
    39c0:	9d05      	ldr	r5, [sp, #20]
    39c2:	464f      	mov	r7, r9
    39c4:	002a      	movs	r2, r5
    39c6:	040b      	lsls	r3, r1, #16
    39c8:	0c08      	lsrs	r0, r1, #16
    39ca:	0c1b      	lsrs	r3, r3, #16
    39cc:	435a      	muls	r2, r3
    39ce:	4345      	muls	r5, r0
    39d0:	437b      	muls	r3, r7
    39d2:	4378      	muls	r0, r7
    39d4:	195b      	adds	r3, r3, r5
    39d6:	0c17      	lsrs	r7, r2, #16
    39d8:	18fb      	adds	r3, r7, r3
    39da:	429d      	cmp	r5, r3
    39dc:	d903      	bls.n	39e6 <__aeabi_ddiv+0x3ba>
    39de:	2580      	movs	r5, #128	; 0x80
    39e0:	026d      	lsls	r5, r5, #9
    39e2:	46ac      	mov	ip, r5
    39e4:	4460      	add	r0, ip
    39e6:	0c1d      	lsrs	r5, r3, #16
    39e8:	0412      	lsls	r2, r2, #16
    39ea:	041b      	lsls	r3, r3, #16
    39ec:	0c12      	lsrs	r2, r2, #16
    39ee:	1828      	adds	r0, r5, r0
    39f0:	189b      	adds	r3, r3, r2
    39f2:	4286      	cmp	r6, r0
    39f4:	d200      	bcs.n	39f8 <__aeabi_ddiv+0x3cc>
    39f6:	e093      	b.n	3b20 <__aeabi_ddiv+0x4f4>
    39f8:	d100      	bne.n	39fc <__aeabi_ddiv+0x3d0>
    39fa:	e08e      	b.n	3b1a <__aeabi_ddiv+0x4ee>
    39fc:	2301      	movs	r3, #1
    39fe:	4319      	orrs	r1, r3
    3a00:	4ba0      	ldr	r3, [pc, #640]	; (3c84 <__aeabi_ddiv+0x658>)
    3a02:	18e3      	adds	r3, r4, r3
    3a04:	2b00      	cmp	r3, #0
    3a06:	dc00      	bgt.n	3a0a <__aeabi_ddiv+0x3de>
    3a08:	e099      	b.n	3b3e <__aeabi_ddiv+0x512>
    3a0a:	074a      	lsls	r2, r1, #29
    3a0c:	d000      	beq.n	3a10 <__aeabi_ddiv+0x3e4>
    3a0e:	e09e      	b.n	3b4e <__aeabi_ddiv+0x522>
    3a10:	465a      	mov	r2, fp
    3a12:	01d2      	lsls	r2, r2, #7
    3a14:	d506      	bpl.n	3a24 <__aeabi_ddiv+0x3f8>
    3a16:	465a      	mov	r2, fp
    3a18:	4b9b      	ldr	r3, [pc, #620]	; (3c88 <__aeabi_ddiv+0x65c>)
    3a1a:	401a      	ands	r2, r3
    3a1c:	2380      	movs	r3, #128	; 0x80
    3a1e:	4693      	mov	fp, r2
    3a20:	00db      	lsls	r3, r3, #3
    3a22:	18e3      	adds	r3, r4, r3
    3a24:	4a99      	ldr	r2, [pc, #612]	; (3c8c <__aeabi_ddiv+0x660>)
    3a26:	4293      	cmp	r3, r2
    3a28:	dd68      	ble.n	3afc <__aeabi_ddiv+0x4d0>
    3a2a:	2301      	movs	r3, #1
    3a2c:	9a02      	ldr	r2, [sp, #8]
    3a2e:	4c98      	ldr	r4, [pc, #608]	; (3c90 <__aeabi_ddiv+0x664>)
    3a30:	401a      	ands	r2, r3
    3a32:	2300      	movs	r3, #0
    3a34:	4694      	mov	ip, r2
    3a36:	4698      	mov	r8, r3
    3a38:	2200      	movs	r2, #0
    3a3a:	e6c5      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3a3c:	2280      	movs	r2, #128	; 0x80
    3a3e:	464b      	mov	r3, r9
    3a40:	0312      	lsls	r2, r2, #12
    3a42:	4213      	tst	r3, r2
    3a44:	d00a      	beq.n	3a5c <__aeabi_ddiv+0x430>
    3a46:	465b      	mov	r3, fp
    3a48:	4213      	tst	r3, r2
    3a4a:	d106      	bne.n	3a5a <__aeabi_ddiv+0x42e>
    3a4c:	431a      	orrs	r2, r3
    3a4e:	0312      	lsls	r2, r2, #12
    3a50:	0b12      	lsrs	r2, r2, #12
    3a52:	46ac      	mov	ip, r5
    3a54:	4688      	mov	r8, r1
    3a56:	4c8e      	ldr	r4, [pc, #568]	; (3c90 <__aeabi_ddiv+0x664>)
    3a58:	e6b6      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3a5a:	464b      	mov	r3, r9
    3a5c:	431a      	orrs	r2, r3
    3a5e:	0312      	lsls	r2, r2, #12
    3a60:	0b12      	lsrs	r2, r2, #12
    3a62:	46bc      	mov	ip, r7
    3a64:	4c8a      	ldr	r4, [pc, #552]	; (3c90 <__aeabi_ddiv+0x664>)
    3a66:	e6af      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3a68:	0003      	movs	r3, r0
    3a6a:	465a      	mov	r2, fp
    3a6c:	3b28      	subs	r3, #40	; 0x28
    3a6e:	409a      	lsls	r2, r3
    3a70:	2300      	movs	r3, #0
    3a72:	4691      	mov	r9, r2
    3a74:	4698      	mov	r8, r3
    3a76:	e657      	b.n	3728 <__aeabi_ddiv+0xfc>
    3a78:	4658      	mov	r0, fp
    3a7a:	f000 ffd9 	bl	4a30 <__clzsi2>
    3a7e:	3020      	adds	r0, #32
    3a80:	e640      	b.n	3704 <__aeabi_ddiv+0xd8>
    3a82:	0003      	movs	r3, r0
    3a84:	4652      	mov	r2, sl
    3a86:	3b28      	subs	r3, #40	; 0x28
    3a88:	409a      	lsls	r2, r3
    3a8a:	2100      	movs	r1, #0
    3a8c:	4693      	mov	fp, r2
    3a8e:	e677      	b.n	3780 <__aeabi_ddiv+0x154>
    3a90:	f000 ffce 	bl	4a30 <__clzsi2>
    3a94:	3020      	adds	r0, #32
    3a96:	e65f      	b.n	3758 <__aeabi_ddiv+0x12c>
    3a98:	4588      	cmp	r8, r1
    3a9a:	d200      	bcs.n	3a9e <__aeabi_ddiv+0x472>
    3a9c:	e6c7      	b.n	382e <__aeabi_ddiv+0x202>
    3a9e:	464b      	mov	r3, r9
    3aa0:	07de      	lsls	r6, r3, #31
    3aa2:	085d      	lsrs	r5, r3, #1
    3aa4:	4643      	mov	r3, r8
    3aa6:	085b      	lsrs	r3, r3, #1
    3aa8:	431e      	orrs	r6, r3
    3aaa:	4643      	mov	r3, r8
    3aac:	07db      	lsls	r3, r3, #31
    3aae:	469a      	mov	sl, r3
    3ab0:	e6c2      	b.n	3838 <__aeabi_ddiv+0x20c>
    3ab2:	2500      	movs	r5, #0
    3ab4:	4592      	cmp	sl, r2
    3ab6:	d300      	bcc.n	3aba <__aeabi_ddiv+0x48e>
    3ab8:	e733      	b.n	3922 <__aeabi_ddiv+0x2f6>
    3aba:	9e03      	ldr	r6, [sp, #12]
    3abc:	4659      	mov	r1, fp
    3abe:	46b4      	mov	ip, r6
    3ac0:	44e2      	add	sl, ip
    3ac2:	45b2      	cmp	sl, r6
    3ac4:	41ad      	sbcs	r5, r5
    3ac6:	426d      	negs	r5, r5
    3ac8:	4445      	add	r5, r8
    3aca:	18eb      	adds	r3, r5, r3
    3acc:	3901      	subs	r1, #1
    3ace:	4598      	cmp	r8, r3
    3ad0:	d207      	bcs.n	3ae2 <__aeabi_ddiv+0x4b6>
    3ad2:	4298      	cmp	r0, r3
    3ad4:	d900      	bls.n	3ad8 <__aeabi_ddiv+0x4ac>
    3ad6:	e07f      	b.n	3bd8 <__aeabi_ddiv+0x5ac>
    3ad8:	d100      	bne.n	3adc <__aeabi_ddiv+0x4b0>
    3ada:	e0bc      	b.n	3c56 <__aeabi_ddiv+0x62a>
    3adc:	1a1d      	subs	r5, r3, r0
    3ade:	468b      	mov	fp, r1
    3ae0:	e71f      	b.n	3922 <__aeabi_ddiv+0x2f6>
    3ae2:	4598      	cmp	r8, r3
    3ae4:	d1fa      	bne.n	3adc <__aeabi_ddiv+0x4b0>
    3ae6:	9d03      	ldr	r5, [sp, #12]
    3ae8:	4555      	cmp	r5, sl
    3aea:	d9f2      	bls.n	3ad2 <__aeabi_ddiv+0x4a6>
    3aec:	4643      	mov	r3, r8
    3aee:	468b      	mov	fp, r1
    3af0:	1a1d      	subs	r5, r3, r0
    3af2:	e716      	b.n	3922 <__aeabi_ddiv+0x2f6>
    3af4:	469b      	mov	fp, r3
    3af6:	e6ca      	b.n	388e <__aeabi_ddiv+0x262>
    3af8:	0015      	movs	r5, r2
    3afa:	e6e7      	b.n	38cc <__aeabi_ddiv+0x2a0>
    3afc:	465a      	mov	r2, fp
    3afe:	08c9      	lsrs	r1, r1, #3
    3b00:	0752      	lsls	r2, r2, #29
    3b02:	430a      	orrs	r2, r1
    3b04:	055b      	lsls	r3, r3, #21
    3b06:	4690      	mov	r8, r2
    3b08:	0d5c      	lsrs	r4, r3, #21
    3b0a:	465a      	mov	r2, fp
    3b0c:	2301      	movs	r3, #1
    3b0e:	9902      	ldr	r1, [sp, #8]
    3b10:	0252      	lsls	r2, r2, #9
    3b12:	4019      	ands	r1, r3
    3b14:	0b12      	lsrs	r2, r2, #12
    3b16:	468c      	mov	ip, r1
    3b18:	e656      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d100      	bne.n	3b20 <__aeabi_ddiv+0x4f4>
    3b1e:	e76f      	b.n	3a00 <__aeabi_ddiv+0x3d4>
    3b20:	4446      	add	r6, r8
    3b22:	1e4a      	subs	r2, r1, #1
    3b24:	45b0      	cmp	r8, r6
    3b26:	d929      	bls.n	3b7c <__aeabi_ddiv+0x550>
    3b28:	0011      	movs	r1, r2
    3b2a:	4286      	cmp	r6, r0
    3b2c:	d000      	beq.n	3b30 <__aeabi_ddiv+0x504>
    3b2e:	e765      	b.n	39fc <__aeabi_ddiv+0x3d0>
    3b30:	9a03      	ldr	r2, [sp, #12]
    3b32:	4293      	cmp	r3, r2
    3b34:	d000      	beq.n	3b38 <__aeabi_ddiv+0x50c>
    3b36:	e761      	b.n	39fc <__aeabi_ddiv+0x3d0>
    3b38:	e762      	b.n	3a00 <__aeabi_ddiv+0x3d4>
    3b3a:	2101      	movs	r1, #1
    3b3c:	4249      	negs	r1, r1
    3b3e:	2001      	movs	r0, #1
    3b40:	1ac2      	subs	r2, r0, r3
    3b42:	2a38      	cmp	r2, #56	; 0x38
    3b44:	dd21      	ble.n	3b8a <__aeabi_ddiv+0x55e>
    3b46:	9b02      	ldr	r3, [sp, #8]
    3b48:	4003      	ands	r3, r0
    3b4a:	469c      	mov	ip, r3
    3b4c:	e638      	b.n	37c0 <__aeabi_ddiv+0x194>
    3b4e:	220f      	movs	r2, #15
    3b50:	400a      	ands	r2, r1
    3b52:	2a04      	cmp	r2, #4
    3b54:	d100      	bne.n	3b58 <__aeabi_ddiv+0x52c>
    3b56:	e75b      	b.n	3a10 <__aeabi_ddiv+0x3e4>
    3b58:	000a      	movs	r2, r1
    3b5a:	1d11      	adds	r1, r2, #4
    3b5c:	4291      	cmp	r1, r2
    3b5e:	4192      	sbcs	r2, r2
    3b60:	4252      	negs	r2, r2
    3b62:	4493      	add	fp, r2
    3b64:	e754      	b.n	3a10 <__aeabi_ddiv+0x3e4>
    3b66:	4b47      	ldr	r3, [pc, #284]	; (3c84 <__aeabi_ddiv+0x658>)
    3b68:	18e3      	adds	r3, r4, r3
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	dde5      	ble.n	3b3a <__aeabi_ddiv+0x50e>
    3b6e:	2201      	movs	r2, #1
    3b70:	4252      	negs	r2, r2
    3b72:	e7f2      	b.n	3b5a <__aeabi_ddiv+0x52e>
    3b74:	001d      	movs	r5, r3
    3b76:	e6fa      	b.n	396e <__aeabi_ddiv+0x342>
    3b78:	469a      	mov	sl, r3
    3b7a:	e71c      	b.n	39b6 <__aeabi_ddiv+0x38a>
    3b7c:	42b0      	cmp	r0, r6
    3b7e:	d839      	bhi.n	3bf4 <__aeabi_ddiv+0x5c8>
    3b80:	d06e      	beq.n	3c60 <__aeabi_ddiv+0x634>
    3b82:	0011      	movs	r1, r2
    3b84:	e73a      	b.n	39fc <__aeabi_ddiv+0x3d0>
    3b86:	9302      	str	r3, [sp, #8]
    3b88:	e73a      	b.n	3a00 <__aeabi_ddiv+0x3d4>
    3b8a:	2a1f      	cmp	r2, #31
    3b8c:	dc3c      	bgt.n	3c08 <__aeabi_ddiv+0x5dc>
    3b8e:	2320      	movs	r3, #32
    3b90:	1a9b      	subs	r3, r3, r2
    3b92:	000c      	movs	r4, r1
    3b94:	4658      	mov	r0, fp
    3b96:	4099      	lsls	r1, r3
    3b98:	4098      	lsls	r0, r3
    3b9a:	1e4b      	subs	r3, r1, #1
    3b9c:	4199      	sbcs	r1, r3
    3b9e:	465b      	mov	r3, fp
    3ba0:	40d4      	lsrs	r4, r2
    3ba2:	40d3      	lsrs	r3, r2
    3ba4:	4320      	orrs	r0, r4
    3ba6:	4308      	orrs	r0, r1
    3ba8:	001a      	movs	r2, r3
    3baa:	0743      	lsls	r3, r0, #29
    3bac:	d009      	beq.n	3bc2 <__aeabi_ddiv+0x596>
    3bae:	230f      	movs	r3, #15
    3bb0:	4003      	ands	r3, r0
    3bb2:	2b04      	cmp	r3, #4
    3bb4:	d005      	beq.n	3bc2 <__aeabi_ddiv+0x596>
    3bb6:	0001      	movs	r1, r0
    3bb8:	1d08      	adds	r0, r1, #4
    3bba:	4288      	cmp	r0, r1
    3bbc:	419b      	sbcs	r3, r3
    3bbe:	425b      	negs	r3, r3
    3bc0:	18d2      	adds	r2, r2, r3
    3bc2:	0213      	lsls	r3, r2, #8
    3bc4:	d53a      	bpl.n	3c3c <__aeabi_ddiv+0x610>
    3bc6:	2301      	movs	r3, #1
    3bc8:	9a02      	ldr	r2, [sp, #8]
    3bca:	2401      	movs	r4, #1
    3bcc:	401a      	ands	r2, r3
    3bce:	2300      	movs	r3, #0
    3bd0:	4694      	mov	ip, r2
    3bd2:	4698      	mov	r8, r3
    3bd4:	2200      	movs	r2, #0
    3bd6:	e5f7      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3bd8:	2102      	movs	r1, #2
    3bda:	4249      	negs	r1, r1
    3bdc:	468c      	mov	ip, r1
    3bde:	9d03      	ldr	r5, [sp, #12]
    3be0:	44e3      	add	fp, ip
    3be2:	46ac      	mov	ip, r5
    3be4:	44e2      	add	sl, ip
    3be6:	45aa      	cmp	sl, r5
    3be8:	41ad      	sbcs	r5, r5
    3bea:	426d      	negs	r5, r5
    3bec:	4445      	add	r5, r8
    3bee:	18ed      	adds	r5, r5, r3
    3bf0:	1a2d      	subs	r5, r5, r0
    3bf2:	e696      	b.n	3922 <__aeabi_ddiv+0x2f6>
    3bf4:	1e8a      	subs	r2, r1, #2
    3bf6:	9903      	ldr	r1, [sp, #12]
    3bf8:	004d      	lsls	r5, r1, #1
    3bfa:	428d      	cmp	r5, r1
    3bfc:	4189      	sbcs	r1, r1
    3bfe:	4249      	negs	r1, r1
    3c00:	4441      	add	r1, r8
    3c02:	1876      	adds	r6, r6, r1
    3c04:	9503      	str	r5, [sp, #12]
    3c06:	e78f      	b.n	3b28 <__aeabi_ddiv+0x4fc>
    3c08:	201f      	movs	r0, #31
    3c0a:	4240      	negs	r0, r0
    3c0c:	1ac3      	subs	r3, r0, r3
    3c0e:	4658      	mov	r0, fp
    3c10:	40d8      	lsrs	r0, r3
    3c12:	0003      	movs	r3, r0
    3c14:	2a20      	cmp	r2, #32
    3c16:	d028      	beq.n	3c6a <__aeabi_ddiv+0x63e>
    3c18:	2040      	movs	r0, #64	; 0x40
    3c1a:	465d      	mov	r5, fp
    3c1c:	1a82      	subs	r2, r0, r2
    3c1e:	4095      	lsls	r5, r2
    3c20:	4329      	orrs	r1, r5
    3c22:	1e4a      	subs	r2, r1, #1
    3c24:	4191      	sbcs	r1, r2
    3c26:	4319      	orrs	r1, r3
    3c28:	2307      	movs	r3, #7
    3c2a:	2200      	movs	r2, #0
    3c2c:	400b      	ands	r3, r1
    3c2e:	d009      	beq.n	3c44 <__aeabi_ddiv+0x618>
    3c30:	230f      	movs	r3, #15
    3c32:	2200      	movs	r2, #0
    3c34:	400b      	ands	r3, r1
    3c36:	0008      	movs	r0, r1
    3c38:	2b04      	cmp	r3, #4
    3c3a:	d1bd      	bne.n	3bb8 <__aeabi_ddiv+0x58c>
    3c3c:	0001      	movs	r1, r0
    3c3e:	0753      	lsls	r3, r2, #29
    3c40:	0252      	lsls	r2, r2, #9
    3c42:	0b12      	lsrs	r2, r2, #12
    3c44:	08c9      	lsrs	r1, r1, #3
    3c46:	4319      	orrs	r1, r3
    3c48:	2301      	movs	r3, #1
    3c4a:	4688      	mov	r8, r1
    3c4c:	9902      	ldr	r1, [sp, #8]
    3c4e:	2400      	movs	r4, #0
    3c50:	4019      	ands	r1, r3
    3c52:	468c      	mov	ip, r1
    3c54:	e5b8      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3c56:	4552      	cmp	r2, sl
    3c58:	d8be      	bhi.n	3bd8 <__aeabi_ddiv+0x5ac>
    3c5a:	468b      	mov	fp, r1
    3c5c:	2500      	movs	r5, #0
    3c5e:	e660      	b.n	3922 <__aeabi_ddiv+0x2f6>
    3c60:	9d03      	ldr	r5, [sp, #12]
    3c62:	429d      	cmp	r5, r3
    3c64:	d3c6      	bcc.n	3bf4 <__aeabi_ddiv+0x5c8>
    3c66:	0011      	movs	r1, r2
    3c68:	e762      	b.n	3b30 <__aeabi_ddiv+0x504>
    3c6a:	2500      	movs	r5, #0
    3c6c:	e7d8      	b.n	3c20 <__aeabi_ddiv+0x5f4>
    3c6e:	2280      	movs	r2, #128	; 0x80
    3c70:	465b      	mov	r3, fp
    3c72:	0312      	lsls	r2, r2, #12
    3c74:	431a      	orrs	r2, r3
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	0312      	lsls	r2, r2, #12
    3c7a:	0b12      	lsrs	r2, r2, #12
    3c7c:	469c      	mov	ip, r3
    3c7e:	4688      	mov	r8, r1
    3c80:	4c03      	ldr	r4, [pc, #12]	; (3c90 <__aeabi_ddiv+0x664>)
    3c82:	e5a1      	b.n	37c8 <__aeabi_ddiv+0x19c>
    3c84:	000003ff 	.word	0x000003ff
    3c88:	feffffff 	.word	0xfeffffff
    3c8c:	000007fe 	.word	0x000007fe
    3c90:	000007ff 	.word	0x000007ff

00003c94 <__aeabi_dmul>:
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	4657      	mov	r7, sl
    3c98:	4645      	mov	r5, r8
    3c9a:	46de      	mov	lr, fp
    3c9c:	464e      	mov	r6, r9
    3c9e:	b5e0      	push	{r5, r6, r7, lr}
    3ca0:	030c      	lsls	r4, r1, #12
    3ca2:	4698      	mov	r8, r3
    3ca4:	004e      	lsls	r6, r1, #1
    3ca6:	0b23      	lsrs	r3, r4, #12
    3ca8:	b087      	sub	sp, #28
    3caa:	0007      	movs	r7, r0
    3cac:	4692      	mov	sl, r2
    3cae:	469b      	mov	fp, r3
    3cb0:	0d76      	lsrs	r6, r6, #21
    3cb2:	0fcd      	lsrs	r5, r1, #31
    3cb4:	2e00      	cmp	r6, #0
    3cb6:	d06b      	beq.n	3d90 <__aeabi_dmul+0xfc>
    3cb8:	4b6d      	ldr	r3, [pc, #436]	; (3e70 <__aeabi_dmul+0x1dc>)
    3cba:	429e      	cmp	r6, r3
    3cbc:	d035      	beq.n	3d2a <__aeabi_dmul+0x96>
    3cbe:	2480      	movs	r4, #128	; 0x80
    3cc0:	465b      	mov	r3, fp
    3cc2:	0f42      	lsrs	r2, r0, #29
    3cc4:	0424      	lsls	r4, r4, #16
    3cc6:	00db      	lsls	r3, r3, #3
    3cc8:	4314      	orrs	r4, r2
    3cca:	431c      	orrs	r4, r3
    3ccc:	00c3      	lsls	r3, r0, #3
    3cce:	4699      	mov	r9, r3
    3cd0:	4b68      	ldr	r3, [pc, #416]	; (3e74 <__aeabi_dmul+0x1e0>)
    3cd2:	46a3      	mov	fp, r4
    3cd4:	469c      	mov	ip, r3
    3cd6:	2300      	movs	r3, #0
    3cd8:	2700      	movs	r7, #0
    3cda:	4466      	add	r6, ip
    3cdc:	9302      	str	r3, [sp, #8]
    3cde:	4643      	mov	r3, r8
    3ce0:	031c      	lsls	r4, r3, #12
    3ce2:	005a      	lsls	r2, r3, #1
    3ce4:	0fdb      	lsrs	r3, r3, #31
    3ce6:	4650      	mov	r0, sl
    3ce8:	0b24      	lsrs	r4, r4, #12
    3cea:	0d52      	lsrs	r2, r2, #21
    3cec:	4698      	mov	r8, r3
    3cee:	d100      	bne.n	3cf2 <__aeabi_dmul+0x5e>
    3cf0:	e076      	b.n	3de0 <__aeabi_dmul+0x14c>
    3cf2:	4b5f      	ldr	r3, [pc, #380]	; (3e70 <__aeabi_dmul+0x1dc>)
    3cf4:	429a      	cmp	r2, r3
    3cf6:	d06d      	beq.n	3dd4 <__aeabi_dmul+0x140>
    3cf8:	2380      	movs	r3, #128	; 0x80
    3cfa:	0f41      	lsrs	r1, r0, #29
    3cfc:	041b      	lsls	r3, r3, #16
    3cfe:	430b      	orrs	r3, r1
    3d00:	495c      	ldr	r1, [pc, #368]	; (3e74 <__aeabi_dmul+0x1e0>)
    3d02:	00e4      	lsls	r4, r4, #3
    3d04:	468c      	mov	ip, r1
    3d06:	431c      	orrs	r4, r3
    3d08:	00c3      	lsls	r3, r0, #3
    3d0a:	2000      	movs	r0, #0
    3d0c:	4462      	add	r2, ip
    3d0e:	4641      	mov	r1, r8
    3d10:	18b6      	adds	r6, r6, r2
    3d12:	4069      	eors	r1, r5
    3d14:	1c72      	adds	r2, r6, #1
    3d16:	9101      	str	r1, [sp, #4]
    3d18:	4694      	mov	ip, r2
    3d1a:	4307      	orrs	r7, r0
    3d1c:	2f0f      	cmp	r7, #15
    3d1e:	d900      	bls.n	3d22 <__aeabi_dmul+0x8e>
    3d20:	e0b0      	b.n	3e84 <__aeabi_dmul+0x1f0>
    3d22:	4a55      	ldr	r2, [pc, #340]	; (3e78 <__aeabi_dmul+0x1e4>)
    3d24:	00bf      	lsls	r7, r7, #2
    3d26:	59d2      	ldr	r2, [r2, r7]
    3d28:	4697      	mov	pc, r2
    3d2a:	465b      	mov	r3, fp
    3d2c:	4303      	orrs	r3, r0
    3d2e:	4699      	mov	r9, r3
    3d30:	d000      	beq.n	3d34 <__aeabi_dmul+0xa0>
    3d32:	e087      	b.n	3e44 <__aeabi_dmul+0x1b0>
    3d34:	2300      	movs	r3, #0
    3d36:	469b      	mov	fp, r3
    3d38:	3302      	adds	r3, #2
    3d3a:	2708      	movs	r7, #8
    3d3c:	9302      	str	r3, [sp, #8]
    3d3e:	e7ce      	b.n	3cde <__aeabi_dmul+0x4a>
    3d40:	4642      	mov	r2, r8
    3d42:	9201      	str	r2, [sp, #4]
    3d44:	2802      	cmp	r0, #2
    3d46:	d067      	beq.n	3e18 <__aeabi_dmul+0x184>
    3d48:	2803      	cmp	r0, #3
    3d4a:	d100      	bne.n	3d4e <__aeabi_dmul+0xba>
    3d4c:	e20e      	b.n	416c <__aeabi_dmul+0x4d8>
    3d4e:	2801      	cmp	r0, #1
    3d50:	d000      	beq.n	3d54 <__aeabi_dmul+0xc0>
    3d52:	e162      	b.n	401a <__aeabi_dmul+0x386>
    3d54:	2300      	movs	r3, #0
    3d56:	2400      	movs	r4, #0
    3d58:	2200      	movs	r2, #0
    3d5a:	4699      	mov	r9, r3
    3d5c:	9901      	ldr	r1, [sp, #4]
    3d5e:	4001      	ands	r1, r0
    3d60:	b2cd      	uxtb	r5, r1
    3d62:	2100      	movs	r1, #0
    3d64:	0312      	lsls	r2, r2, #12
    3d66:	0d0b      	lsrs	r3, r1, #20
    3d68:	0b12      	lsrs	r2, r2, #12
    3d6a:	051b      	lsls	r3, r3, #20
    3d6c:	4313      	orrs	r3, r2
    3d6e:	4a43      	ldr	r2, [pc, #268]	; (3e7c <__aeabi_dmul+0x1e8>)
    3d70:	0524      	lsls	r4, r4, #20
    3d72:	4013      	ands	r3, r2
    3d74:	431c      	orrs	r4, r3
    3d76:	0064      	lsls	r4, r4, #1
    3d78:	07ed      	lsls	r5, r5, #31
    3d7a:	0864      	lsrs	r4, r4, #1
    3d7c:	432c      	orrs	r4, r5
    3d7e:	4648      	mov	r0, r9
    3d80:	0021      	movs	r1, r4
    3d82:	b007      	add	sp, #28
    3d84:	bc3c      	pop	{r2, r3, r4, r5}
    3d86:	4690      	mov	r8, r2
    3d88:	4699      	mov	r9, r3
    3d8a:	46a2      	mov	sl, r4
    3d8c:	46ab      	mov	fp, r5
    3d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d90:	4303      	orrs	r3, r0
    3d92:	4699      	mov	r9, r3
    3d94:	d04f      	beq.n	3e36 <__aeabi_dmul+0x1a2>
    3d96:	465b      	mov	r3, fp
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d100      	bne.n	3d9e <__aeabi_dmul+0x10a>
    3d9c:	e189      	b.n	40b2 <__aeabi_dmul+0x41e>
    3d9e:	4658      	mov	r0, fp
    3da0:	f000 fe46 	bl	4a30 <__clzsi2>
    3da4:	0003      	movs	r3, r0
    3da6:	3b0b      	subs	r3, #11
    3da8:	2b1c      	cmp	r3, #28
    3daa:	dd00      	ble.n	3dae <__aeabi_dmul+0x11a>
    3dac:	e17a      	b.n	40a4 <__aeabi_dmul+0x410>
    3dae:	221d      	movs	r2, #29
    3db0:	1ad3      	subs	r3, r2, r3
    3db2:	003a      	movs	r2, r7
    3db4:	0001      	movs	r1, r0
    3db6:	465c      	mov	r4, fp
    3db8:	40da      	lsrs	r2, r3
    3dba:	3908      	subs	r1, #8
    3dbc:	408c      	lsls	r4, r1
    3dbe:	0013      	movs	r3, r2
    3dc0:	408f      	lsls	r7, r1
    3dc2:	4323      	orrs	r3, r4
    3dc4:	469b      	mov	fp, r3
    3dc6:	46b9      	mov	r9, r7
    3dc8:	2300      	movs	r3, #0
    3dca:	4e2d      	ldr	r6, [pc, #180]	; (3e80 <__aeabi_dmul+0x1ec>)
    3dcc:	2700      	movs	r7, #0
    3dce:	1a36      	subs	r6, r6, r0
    3dd0:	9302      	str	r3, [sp, #8]
    3dd2:	e784      	b.n	3cde <__aeabi_dmul+0x4a>
    3dd4:	4653      	mov	r3, sl
    3dd6:	4323      	orrs	r3, r4
    3dd8:	d12a      	bne.n	3e30 <__aeabi_dmul+0x19c>
    3dda:	2400      	movs	r4, #0
    3ddc:	2002      	movs	r0, #2
    3dde:	e796      	b.n	3d0e <__aeabi_dmul+0x7a>
    3de0:	4653      	mov	r3, sl
    3de2:	4323      	orrs	r3, r4
    3de4:	d020      	beq.n	3e28 <__aeabi_dmul+0x194>
    3de6:	2c00      	cmp	r4, #0
    3de8:	d100      	bne.n	3dec <__aeabi_dmul+0x158>
    3dea:	e157      	b.n	409c <__aeabi_dmul+0x408>
    3dec:	0020      	movs	r0, r4
    3dee:	f000 fe1f 	bl	4a30 <__clzsi2>
    3df2:	0003      	movs	r3, r0
    3df4:	3b0b      	subs	r3, #11
    3df6:	2b1c      	cmp	r3, #28
    3df8:	dd00      	ble.n	3dfc <__aeabi_dmul+0x168>
    3dfa:	e149      	b.n	4090 <__aeabi_dmul+0x3fc>
    3dfc:	211d      	movs	r1, #29
    3dfe:	1acb      	subs	r3, r1, r3
    3e00:	4651      	mov	r1, sl
    3e02:	0002      	movs	r2, r0
    3e04:	40d9      	lsrs	r1, r3
    3e06:	4653      	mov	r3, sl
    3e08:	3a08      	subs	r2, #8
    3e0a:	4094      	lsls	r4, r2
    3e0c:	4093      	lsls	r3, r2
    3e0e:	430c      	orrs	r4, r1
    3e10:	4a1b      	ldr	r2, [pc, #108]	; (3e80 <__aeabi_dmul+0x1ec>)
    3e12:	1a12      	subs	r2, r2, r0
    3e14:	2000      	movs	r0, #0
    3e16:	e77a      	b.n	3d0e <__aeabi_dmul+0x7a>
    3e18:	2501      	movs	r5, #1
    3e1a:	9b01      	ldr	r3, [sp, #4]
    3e1c:	4c14      	ldr	r4, [pc, #80]	; (3e70 <__aeabi_dmul+0x1dc>)
    3e1e:	401d      	ands	r5, r3
    3e20:	2300      	movs	r3, #0
    3e22:	2200      	movs	r2, #0
    3e24:	4699      	mov	r9, r3
    3e26:	e79c      	b.n	3d62 <__aeabi_dmul+0xce>
    3e28:	2400      	movs	r4, #0
    3e2a:	2200      	movs	r2, #0
    3e2c:	2001      	movs	r0, #1
    3e2e:	e76e      	b.n	3d0e <__aeabi_dmul+0x7a>
    3e30:	4653      	mov	r3, sl
    3e32:	2003      	movs	r0, #3
    3e34:	e76b      	b.n	3d0e <__aeabi_dmul+0x7a>
    3e36:	2300      	movs	r3, #0
    3e38:	469b      	mov	fp, r3
    3e3a:	3301      	adds	r3, #1
    3e3c:	2704      	movs	r7, #4
    3e3e:	2600      	movs	r6, #0
    3e40:	9302      	str	r3, [sp, #8]
    3e42:	e74c      	b.n	3cde <__aeabi_dmul+0x4a>
    3e44:	2303      	movs	r3, #3
    3e46:	4681      	mov	r9, r0
    3e48:	270c      	movs	r7, #12
    3e4a:	9302      	str	r3, [sp, #8]
    3e4c:	e747      	b.n	3cde <__aeabi_dmul+0x4a>
    3e4e:	2280      	movs	r2, #128	; 0x80
    3e50:	2300      	movs	r3, #0
    3e52:	2500      	movs	r5, #0
    3e54:	0312      	lsls	r2, r2, #12
    3e56:	4699      	mov	r9, r3
    3e58:	4c05      	ldr	r4, [pc, #20]	; (3e70 <__aeabi_dmul+0x1dc>)
    3e5a:	e782      	b.n	3d62 <__aeabi_dmul+0xce>
    3e5c:	465c      	mov	r4, fp
    3e5e:	464b      	mov	r3, r9
    3e60:	9802      	ldr	r0, [sp, #8]
    3e62:	e76f      	b.n	3d44 <__aeabi_dmul+0xb0>
    3e64:	465c      	mov	r4, fp
    3e66:	464b      	mov	r3, r9
    3e68:	9501      	str	r5, [sp, #4]
    3e6a:	9802      	ldr	r0, [sp, #8]
    3e6c:	e76a      	b.n	3d44 <__aeabi_dmul+0xb0>
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	000007ff 	.word	0x000007ff
    3e74:	fffffc01 	.word	0xfffffc01
    3e78:	00004d50 	.word	0x00004d50
    3e7c:	800fffff 	.word	0x800fffff
    3e80:	fffffc0d 	.word	0xfffffc0d
    3e84:	464a      	mov	r2, r9
    3e86:	4649      	mov	r1, r9
    3e88:	0c17      	lsrs	r7, r2, #16
    3e8a:	0c1a      	lsrs	r2, r3, #16
    3e8c:	041b      	lsls	r3, r3, #16
    3e8e:	0c1b      	lsrs	r3, r3, #16
    3e90:	0408      	lsls	r0, r1, #16
    3e92:	0019      	movs	r1, r3
    3e94:	0c00      	lsrs	r0, r0, #16
    3e96:	4341      	muls	r1, r0
    3e98:	0015      	movs	r5, r2
    3e9a:	4688      	mov	r8, r1
    3e9c:	0019      	movs	r1, r3
    3e9e:	437d      	muls	r5, r7
    3ea0:	4379      	muls	r1, r7
    3ea2:	9503      	str	r5, [sp, #12]
    3ea4:	4689      	mov	r9, r1
    3ea6:	0029      	movs	r1, r5
    3ea8:	0015      	movs	r5, r2
    3eaa:	4345      	muls	r5, r0
    3eac:	444d      	add	r5, r9
    3eae:	9502      	str	r5, [sp, #8]
    3eb0:	4645      	mov	r5, r8
    3eb2:	0c2d      	lsrs	r5, r5, #16
    3eb4:	46aa      	mov	sl, r5
    3eb6:	9d02      	ldr	r5, [sp, #8]
    3eb8:	4455      	add	r5, sl
    3eba:	45a9      	cmp	r9, r5
    3ebc:	d906      	bls.n	3ecc <__aeabi_dmul+0x238>
    3ebe:	468a      	mov	sl, r1
    3ec0:	2180      	movs	r1, #128	; 0x80
    3ec2:	0249      	lsls	r1, r1, #9
    3ec4:	4689      	mov	r9, r1
    3ec6:	44ca      	add	sl, r9
    3ec8:	4651      	mov	r1, sl
    3eca:	9103      	str	r1, [sp, #12]
    3ecc:	0c29      	lsrs	r1, r5, #16
    3ece:	9104      	str	r1, [sp, #16]
    3ed0:	4641      	mov	r1, r8
    3ed2:	0409      	lsls	r1, r1, #16
    3ed4:	042d      	lsls	r5, r5, #16
    3ed6:	0c09      	lsrs	r1, r1, #16
    3ed8:	4688      	mov	r8, r1
    3eda:	0029      	movs	r1, r5
    3edc:	0c25      	lsrs	r5, r4, #16
    3ede:	0424      	lsls	r4, r4, #16
    3ee0:	4441      	add	r1, r8
    3ee2:	0c24      	lsrs	r4, r4, #16
    3ee4:	9105      	str	r1, [sp, #20]
    3ee6:	0021      	movs	r1, r4
    3ee8:	4341      	muls	r1, r0
    3eea:	4688      	mov	r8, r1
    3eec:	0021      	movs	r1, r4
    3eee:	4379      	muls	r1, r7
    3ef0:	468a      	mov	sl, r1
    3ef2:	4368      	muls	r0, r5
    3ef4:	4641      	mov	r1, r8
    3ef6:	4450      	add	r0, sl
    3ef8:	4681      	mov	r9, r0
    3efa:	0c08      	lsrs	r0, r1, #16
    3efc:	4448      	add	r0, r9
    3efe:	436f      	muls	r7, r5
    3f00:	4582      	cmp	sl, r0
    3f02:	d903      	bls.n	3f0c <__aeabi_dmul+0x278>
    3f04:	2180      	movs	r1, #128	; 0x80
    3f06:	0249      	lsls	r1, r1, #9
    3f08:	4689      	mov	r9, r1
    3f0a:	444f      	add	r7, r9
    3f0c:	0c01      	lsrs	r1, r0, #16
    3f0e:	4689      	mov	r9, r1
    3f10:	0039      	movs	r1, r7
    3f12:	4449      	add	r1, r9
    3f14:	9102      	str	r1, [sp, #8]
    3f16:	4641      	mov	r1, r8
    3f18:	040f      	lsls	r7, r1, #16
    3f1a:	9904      	ldr	r1, [sp, #16]
    3f1c:	0c3f      	lsrs	r7, r7, #16
    3f1e:	4688      	mov	r8, r1
    3f20:	0400      	lsls	r0, r0, #16
    3f22:	19c0      	adds	r0, r0, r7
    3f24:	4480      	add	r8, r0
    3f26:	4641      	mov	r1, r8
    3f28:	9104      	str	r1, [sp, #16]
    3f2a:	4659      	mov	r1, fp
    3f2c:	0c0f      	lsrs	r7, r1, #16
    3f2e:	0409      	lsls	r1, r1, #16
    3f30:	0c09      	lsrs	r1, r1, #16
    3f32:	4688      	mov	r8, r1
    3f34:	4359      	muls	r1, r3
    3f36:	468a      	mov	sl, r1
    3f38:	0039      	movs	r1, r7
    3f3a:	4351      	muls	r1, r2
    3f3c:	4689      	mov	r9, r1
    3f3e:	4641      	mov	r1, r8
    3f40:	434a      	muls	r2, r1
    3f42:	4651      	mov	r1, sl
    3f44:	0c09      	lsrs	r1, r1, #16
    3f46:	468b      	mov	fp, r1
    3f48:	437b      	muls	r3, r7
    3f4a:	18d2      	adds	r2, r2, r3
    3f4c:	445a      	add	r2, fp
    3f4e:	4293      	cmp	r3, r2
    3f50:	d903      	bls.n	3f5a <__aeabi_dmul+0x2c6>
    3f52:	2380      	movs	r3, #128	; 0x80
    3f54:	025b      	lsls	r3, r3, #9
    3f56:	469b      	mov	fp, r3
    3f58:	44d9      	add	r9, fp
    3f5a:	4651      	mov	r1, sl
    3f5c:	0409      	lsls	r1, r1, #16
    3f5e:	0c09      	lsrs	r1, r1, #16
    3f60:	468a      	mov	sl, r1
    3f62:	4641      	mov	r1, r8
    3f64:	4361      	muls	r1, r4
    3f66:	437c      	muls	r4, r7
    3f68:	0c13      	lsrs	r3, r2, #16
    3f6a:	0412      	lsls	r2, r2, #16
    3f6c:	444b      	add	r3, r9
    3f6e:	4452      	add	r2, sl
    3f70:	46a1      	mov	r9, r4
    3f72:	468a      	mov	sl, r1
    3f74:	003c      	movs	r4, r7
    3f76:	4641      	mov	r1, r8
    3f78:	436c      	muls	r4, r5
    3f7a:	434d      	muls	r5, r1
    3f7c:	4651      	mov	r1, sl
    3f7e:	444d      	add	r5, r9
    3f80:	0c0f      	lsrs	r7, r1, #16
    3f82:	197d      	adds	r5, r7, r5
    3f84:	45a9      	cmp	r9, r5
    3f86:	d903      	bls.n	3f90 <__aeabi_dmul+0x2fc>
    3f88:	2180      	movs	r1, #128	; 0x80
    3f8a:	0249      	lsls	r1, r1, #9
    3f8c:	4688      	mov	r8, r1
    3f8e:	4444      	add	r4, r8
    3f90:	9f04      	ldr	r7, [sp, #16]
    3f92:	9903      	ldr	r1, [sp, #12]
    3f94:	46b8      	mov	r8, r7
    3f96:	4441      	add	r1, r8
    3f98:	468b      	mov	fp, r1
    3f9a:	4583      	cmp	fp, r0
    3f9c:	4180      	sbcs	r0, r0
    3f9e:	4241      	negs	r1, r0
    3fa0:	4688      	mov	r8, r1
    3fa2:	4651      	mov	r1, sl
    3fa4:	0408      	lsls	r0, r1, #16
    3fa6:	042f      	lsls	r7, r5, #16
    3fa8:	0c00      	lsrs	r0, r0, #16
    3faa:	183f      	adds	r7, r7, r0
    3fac:	4658      	mov	r0, fp
    3fae:	9902      	ldr	r1, [sp, #8]
    3fb0:	1810      	adds	r0, r2, r0
    3fb2:	4689      	mov	r9, r1
    3fb4:	4290      	cmp	r0, r2
    3fb6:	4192      	sbcs	r2, r2
    3fb8:	444f      	add	r7, r9
    3fba:	46ba      	mov	sl, r7
    3fbc:	4252      	negs	r2, r2
    3fbe:	4699      	mov	r9, r3
    3fc0:	4693      	mov	fp, r2
    3fc2:	44c2      	add	sl, r8
    3fc4:	44d1      	add	r9, sl
    3fc6:	44cb      	add	fp, r9
    3fc8:	428f      	cmp	r7, r1
    3fca:	41bf      	sbcs	r7, r7
    3fcc:	45c2      	cmp	sl, r8
    3fce:	4189      	sbcs	r1, r1
    3fd0:	4599      	cmp	r9, r3
    3fd2:	419b      	sbcs	r3, r3
    3fd4:	4593      	cmp	fp, r2
    3fd6:	4192      	sbcs	r2, r2
    3fd8:	427f      	negs	r7, r7
    3fda:	4249      	negs	r1, r1
    3fdc:	0c2d      	lsrs	r5, r5, #16
    3fde:	4252      	negs	r2, r2
    3fe0:	430f      	orrs	r7, r1
    3fe2:	425b      	negs	r3, r3
    3fe4:	4313      	orrs	r3, r2
    3fe6:	197f      	adds	r7, r7, r5
    3fe8:	18ff      	adds	r7, r7, r3
    3fea:	465b      	mov	r3, fp
    3fec:	193c      	adds	r4, r7, r4
    3fee:	0ddb      	lsrs	r3, r3, #23
    3ff0:	9a05      	ldr	r2, [sp, #20]
    3ff2:	0264      	lsls	r4, r4, #9
    3ff4:	431c      	orrs	r4, r3
    3ff6:	0243      	lsls	r3, r0, #9
    3ff8:	4313      	orrs	r3, r2
    3ffa:	1e5d      	subs	r5, r3, #1
    3ffc:	41ab      	sbcs	r3, r5
    3ffe:	465a      	mov	r2, fp
    4000:	0dc0      	lsrs	r0, r0, #23
    4002:	4303      	orrs	r3, r0
    4004:	0252      	lsls	r2, r2, #9
    4006:	4313      	orrs	r3, r2
    4008:	01e2      	lsls	r2, r4, #7
    400a:	d556      	bpl.n	40ba <__aeabi_dmul+0x426>
    400c:	2001      	movs	r0, #1
    400e:	085a      	lsrs	r2, r3, #1
    4010:	4003      	ands	r3, r0
    4012:	4313      	orrs	r3, r2
    4014:	07e2      	lsls	r2, r4, #31
    4016:	4313      	orrs	r3, r2
    4018:	0864      	lsrs	r4, r4, #1
    401a:	485a      	ldr	r0, [pc, #360]	; (4184 <__aeabi_dmul+0x4f0>)
    401c:	4460      	add	r0, ip
    401e:	2800      	cmp	r0, #0
    4020:	dd4d      	ble.n	40be <__aeabi_dmul+0x42a>
    4022:	075a      	lsls	r2, r3, #29
    4024:	d009      	beq.n	403a <__aeabi_dmul+0x3a6>
    4026:	220f      	movs	r2, #15
    4028:	401a      	ands	r2, r3
    402a:	2a04      	cmp	r2, #4
    402c:	d005      	beq.n	403a <__aeabi_dmul+0x3a6>
    402e:	1d1a      	adds	r2, r3, #4
    4030:	429a      	cmp	r2, r3
    4032:	419b      	sbcs	r3, r3
    4034:	425b      	negs	r3, r3
    4036:	18e4      	adds	r4, r4, r3
    4038:	0013      	movs	r3, r2
    403a:	01e2      	lsls	r2, r4, #7
    403c:	d504      	bpl.n	4048 <__aeabi_dmul+0x3b4>
    403e:	2080      	movs	r0, #128	; 0x80
    4040:	4a51      	ldr	r2, [pc, #324]	; (4188 <__aeabi_dmul+0x4f4>)
    4042:	00c0      	lsls	r0, r0, #3
    4044:	4014      	ands	r4, r2
    4046:	4460      	add	r0, ip
    4048:	4a50      	ldr	r2, [pc, #320]	; (418c <__aeabi_dmul+0x4f8>)
    404a:	4290      	cmp	r0, r2
    404c:	dd00      	ble.n	4050 <__aeabi_dmul+0x3bc>
    404e:	e6e3      	b.n	3e18 <__aeabi_dmul+0x184>
    4050:	2501      	movs	r5, #1
    4052:	08db      	lsrs	r3, r3, #3
    4054:	0762      	lsls	r2, r4, #29
    4056:	431a      	orrs	r2, r3
    4058:	0264      	lsls	r4, r4, #9
    405a:	9b01      	ldr	r3, [sp, #4]
    405c:	4691      	mov	r9, r2
    405e:	0b22      	lsrs	r2, r4, #12
    4060:	0544      	lsls	r4, r0, #21
    4062:	0d64      	lsrs	r4, r4, #21
    4064:	401d      	ands	r5, r3
    4066:	e67c      	b.n	3d62 <__aeabi_dmul+0xce>
    4068:	2280      	movs	r2, #128	; 0x80
    406a:	4659      	mov	r1, fp
    406c:	0312      	lsls	r2, r2, #12
    406e:	4211      	tst	r1, r2
    4070:	d008      	beq.n	4084 <__aeabi_dmul+0x3f0>
    4072:	4214      	tst	r4, r2
    4074:	d106      	bne.n	4084 <__aeabi_dmul+0x3f0>
    4076:	4322      	orrs	r2, r4
    4078:	0312      	lsls	r2, r2, #12
    407a:	0b12      	lsrs	r2, r2, #12
    407c:	4645      	mov	r5, r8
    407e:	4699      	mov	r9, r3
    4080:	4c43      	ldr	r4, [pc, #268]	; (4190 <__aeabi_dmul+0x4fc>)
    4082:	e66e      	b.n	3d62 <__aeabi_dmul+0xce>
    4084:	465b      	mov	r3, fp
    4086:	431a      	orrs	r2, r3
    4088:	0312      	lsls	r2, r2, #12
    408a:	0b12      	lsrs	r2, r2, #12
    408c:	4c40      	ldr	r4, [pc, #256]	; (4190 <__aeabi_dmul+0x4fc>)
    408e:	e668      	b.n	3d62 <__aeabi_dmul+0xce>
    4090:	0003      	movs	r3, r0
    4092:	4654      	mov	r4, sl
    4094:	3b28      	subs	r3, #40	; 0x28
    4096:	409c      	lsls	r4, r3
    4098:	2300      	movs	r3, #0
    409a:	e6b9      	b.n	3e10 <__aeabi_dmul+0x17c>
    409c:	f000 fcc8 	bl	4a30 <__clzsi2>
    40a0:	3020      	adds	r0, #32
    40a2:	e6a6      	b.n	3df2 <__aeabi_dmul+0x15e>
    40a4:	0003      	movs	r3, r0
    40a6:	3b28      	subs	r3, #40	; 0x28
    40a8:	409f      	lsls	r7, r3
    40aa:	2300      	movs	r3, #0
    40ac:	46bb      	mov	fp, r7
    40ae:	4699      	mov	r9, r3
    40b0:	e68a      	b.n	3dc8 <__aeabi_dmul+0x134>
    40b2:	f000 fcbd 	bl	4a30 <__clzsi2>
    40b6:	3020      	adds	r0, #32
    40b8:	e674      	b.n	3da4 <__aeabi_dmul+0x110>
    40ba:	46b4      	mov	ip, r6
    40bc:	e7ad      	b.n	401a <__aeabi_dmul+0x386>
    40be:	2501      	movs	r5, #1
    40c0:	1a2a      	subs	r2, r5, r0
    40c2:	2a38      	cmp	r2, #56	; 0x38
    40c4:	dd06      	ble.n	40d4 <__aeabi_dmul+0x440>
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	2400      	movs	r4, #0
    40ca:	401d      	ands	r5, r3
    40cc:	2300      	movs	r3, #0
    40ce:	2200      	movs	r2, #0
    40d0:	4699      	mov	r9, r3
    40d2:	e646      	b.n	3d62 <__aeabi_dmul+0xce>
    40d4:	2a1f      	cmp	r2, #31
    40d6:	dc21      	bgt.n	411c <__aeabi_dmul+0x488>
    40d8:	2520      	movs	r5, #32
    40da:	0020      	movs	r0, r4
    40dc:	1aad      	subs	r5, r5, r2
    40de:	001e      	movs	r6, r3
    40e0:	40ab      	lsls	r3, r5
    40e2:	40a8      	lsls	r0, r5
    40e4:	40d6      	lsrs	r6, r2
    40e6:	1e5d      	subs	r5, r3, #1
    40e8:	41ab      	sbcs	r3, r5
    40ea:	4330      	orrs	r0, r6
    40ec:	4318      	orrs	r0, r3
    40ee:	40d4      	lsrs	r4, r2
    40f0:	0743      	lsls	r3, r0, #29
    40f2:	d009      	beq.n	4108 <__aeabi_dmul+0x474>
    40f4:	230f      	movs	r3, #15
    40f6:	4003      	ands	r3, r0
    40f8:	2b04      	cmp	r3, #4
    40fa:	d005      	beq.n	4108 <__aeabi_dmul+0x474>
    40fc:	0003      	movs	r3, r0
    40fe:	1d18      	adds	r0, r3, #4
    4100:	4298      	cmp	r0, r3
    4102:	419b      	sbcs	r3, r3
    4104:	425b      	negs	r3, r3
    4106:	18e4      	adds	r4, r4, r3
    4108:	0223      	lsls	r3, r4, #8
    410a:	d521      	bpl.n	4150 <__aeabi_dmul+0x4bc>
    410c:	2501      	movs	r5, #1
    410e:	9b01      	ldr	r3, [sp, #4]
    4110:	2401      	movs	r4, #1
    4112:	401d      	ands	r5, r3
    4114:	2300      	movs	r3, #0
    4116:	2200      	movs	r2, #0
    4118:	4699      	mov	r9, r3
    411a:	e622      	b.n	3d62 <__aeabi_dmul+0xce>
    411c:	251f      	movs	r5, #31
    411e:	0021      	movs	r1, r4
    4120:	426d      	negs	r5, r5
    4122:	1a28      	subs	r0, r5, r0
    4124:	40c1      	lsrs	r1, r0
    4126:	0008      	movs	r0, r1
    4128:	2a20      	cmp	r2, #32
    412a:	d01d      	beq.n	4168 <__aeabi_dmul+0x4d4>
    412c:	355f      	adds	r5, #95	; 0x5f
    412e:	1aaa      	subs	r2, r5, r2
    4130:	4094      	lsls	r4, r2
    4132:	4323      	orrs	r3, r4
    4134:	1e5c      	subs	r4, r3, #1
    4136:	41a3      	sbcs	r3, r4
    4138:	2507      	movs	r5, #7
    413a:	4303      	orrs	r3, r0
    413c:	401d      	ands	r5, r3
    413e:	2200      	movs	r2, #0
    4140:	2d00      	cmp	r5, #0
    4142:	d009      	beq.n	4158 <__aeabi_dmul+0x4c4>
    4144:	220f      	movs	r2, #15
    4146:	2400      	movs	r4, #0
    4148:	401a      	ands	r2, r3
    414a:	0018      	movs	r0, r3
    414c:	2a04      	cmp	r2, #4
    414e:	d1d6      	bne.n	40fe <__aeabi_dmul+0x46a>
    4150:	0003      	movs	r3, r0
    4152:	0765      	lsls	r5, r4, #29
    4154:	0264      	lsls	r4, r4, #9
    4156:	0b22      	lsrs	r2, r4, #12
    4158:	08db      	lsrs	r3, r3, #3
    415a:	432b      	orrs	r3, r5
    415c:	2501      	movs	r5, #1
    415e:	4699      	mov	r9, r3
    4160:	9b01      	ldr	r3, [sp, #4]
    4162:	2400      	movs	r4, #0
    4164:	401d      	ands	r5, r3
    4166:	e5fc      	b.n	3d62 <__aeabi_dmul+0xce>
    4168:	2400      	movs	r4, #0
    416a:	e7e2      	b.n	4132 <__aeabi_dmul+0x49e>
    416c:	2280      	movs	r2, #128	; 0x80
    416e:	2501      	movs	r5, #1
    4170:	0312      	lsls	r2, r2, #12
    4172:	4322      	orrs	r2, r4
    4174:	9901      	ldr	r1, [sp, #4]
    4176:	0312      	lsls	r2, r2, #12
    4178:	0b12      	lsrs	r2, r2, #12
    417a:	400d      	ands	r5, r1
    417c:	4699      	mov	r9, r3
    417e:	4c04      	ldr	r4, [pc, #16]	; (4190 <__aeabi_dmul+0x4fc>)
    4180:	e5ef      	b.n	3d62 <__aeabi_dmul+0xce>
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	000003ff 	.word	0x000003ff
    4188:	feffffff 	.word	0xfeffffff
    418c:	000007fe 	.word	0x000007fe
    4190:	000007ff 	.word	0x000007ff

00004194 <__aeabi_dsub>:
    4194:	b5f0      	push	{r4, r5, r6, r7, lr}
    4196:	4646      	mov	r6, r8
    4198:	46d6      	mov	lr, sl
    419a:	464f      	mov	r7, r9
    419c:	030c      	lsls	r4, r1, #12
    419e:	b5c0      	push	{r6, r7, lr}
    41a0:	0fcd      	lsrs	r5, r1, #31
    41a2:	004e      	lsls	r6, r1, #1
    41a4:	0a61      	lsrs	r1, r4, #9
    41a6:	0f44      	lsrs	r4, r0, #29
    41a8:	430c      	orrs	r4, r1
    41aa:	00c1      	lsls	r1, r0, #3
    41ac:	0058      	lsls	r0, r3, #1
    41ae:	0d40      	lsrs	r0, r0, #21
    41b0:	4684      	mov	ip, r0
    41b2:	468a      	mov	sl, r1
    41b4:	000f      	movs	r7, r1
    41b6:	0319      	lsls	r1, r3, #12
    41b8:	0f50      	lsrs	r0, r2, #29
    41ba:	0a49      	lsrs	r1, r1, #9
    41bc:	4301      	orrs	r1, r0
    41be:	48c6      	ldr	r0, [pc, #792]	; (44d8 <__aeabi_dsub+0x344>)
    41c0:	0d76      	lsrs	r6, r6, #21
    41c2:	46a8      	mov	r8, r5
    41c4:	0fdb      	lsrs	r3, r3, #31
    41c6:	00d2      	lsls	r2, r2, #3
    41c8:	4584      	cmp	ip, r0
    41ca:	d100      	bne.n	41ce <__aeabi_dsub+0x3a>
    41cc:	e0d8      	b.n	4380 <__aeabi_dsub+0x1ec>
    41ce:	2001      	movs	r0, #1
    41d0:	4043      	eors	r3, r0
    41d2:	42ab      	cmp	r3, r5
    41d4:	d100      	bne.n	41d8 <__aeabi_dsub+0x44>
    41d6:	e0a6      	b.n	4326 <__aeabi_dsub+0x192>
    41d8:	4660      	mov	r0, ip
    41da:	1a35      	subs	r5, r6, r0
    41dc:	2d00      	cmp	r5, #0
    41de:	dc00      	bgt.n	41e2 <__aeabi_dsub+0x4e>
    41e0:	e105      	b.n	43ee <__aeabi_dsub+0x25a>
    41e2:	2800      	cmp	r0, #0
    41e4:	d110      	bne.n	4208 <__aeabi_dsub+0x74>
    41e6:	000b      	movs	r3, r1
    41e8:	4313      	orrs	r3, r2
    41ea:	d100      	bne.n	41ee <__aeabi_dsub+0x5a>
    41ec:	e0d7      	b.n	439e <__aeabi_dsub+0x20a>
    41ee:	1e6b      	subs	r3, r5, #1
    41f0:	2b00      	cmp	r3, #0
    41f2:	d000      	beq.n	41f6 <__aeabi_dsub+0x62>
    41f4:	e14b      	b.n	448e <__aeabi_dsub+0x2fa>
    41f6:	4653      	mov	r3, sl
    41f8:	1a9f      	subs	r7, r3, r2
    41fa:	45ba      	cmp	sl, r7
    41fc:	4180      	sbcs	r0, r0
    41fe:	1a64      	subs	r4, r4, r1
    4200:	4240      	negs	r0, r0
    4202:	1a24      	subs	r4, r4, r0
    4204:	2601      	movs	r6, #1
    4206:	e01e      	b.n	4246 <__aeabi_dsub+0xb2>
    4208:	4bb3      	ldr	r3, [pc, #716]	; (44d8 <__aeabi_dsub+0x344>)
    420a:	429e      	cmp	r6, r3
    420c:	d048      	beq.n	42a0 <__aeabi_dsub+0x10c>
    420e:	2380      	movs	r3, #128	; 0x80
    4210:	041b      	lsls	r3, r3, #16
    4212:	4319      	orrs	r1, r3
    4214:	2d38      	cmp	r5, #56	; 0x38
    4216:	dd00      	ble.n	421a <__aeabi_dsub+0x86>
    4218:	e119      	b.n	444e <__aeabi_dsub+0x2ba>
    421a:	2d1f      	cmp	r5, #31
    421c:	dd00      	ble.n	4220 <__aeabi_dsub+0x8c>
    421e:	e14c      	b.n	44ba <__aeabi_dsub+0x326>
    4220:	2320      	movs	r3, #32
    4222:	000f      	movs	r7, r1
    4224:	1b5b      	subs	r3, r3, r5
    4226:	0010      	movs	r0, r2
    4228:	409a      	lsls	r2, r3
    422a:	409f      	lsls	r7, r3
    422c:	40e8      	lsrs	r0, r5
    422e:	1e53      	subs	r3, r2, #1
    4230:	419a      	sbcs	r2, r3
    4232:	40e9      	lsrs	r1, r5
    4234:	4307      	orrs	r7, r0
    4236:	4317      	orrs	r7, r2
    4238:	4653      	mov	r3, sl
    423a:	1bdf      	subs	r7, r3, r7
    423c:	1a61      	subs	r1, r4, r1
    423e:	45ba      	cmp	sl, r7
    4240:	41a4      	sbcs	r4, r4
    4242:	4264      	negs	r4, r4
    4244:	1b0c      	subs	r4, r1, r4
    4246:	0223      	lsls	r3, r4, #8
    4248:	d400      	bmi.n	424c <__aeabi_dsub+0xb8>
    424a:	e0c5      	b.n	43d8 <__aeabi_dsub+0x244>
    424c:	0264      	lsls	r4, r4, #9
    424e:	0a65      	lsrs	r5, r4, #9
    4250:	2d00      	cmp	r5, #0
    4252:	d100      	bne.n	4256 <__aeabi_dsub+0xc2>
    4254:	e0f6      	b.n	4444 <__aeabi_dsub+0x2b0>
    4256:	0028      	movs	r0, r5
    4258:	f000 fbea 	bl	4a30 <__clzsi2>
    425c:	0003      	movs	r3, r0
    425e:	3b08      	subs	r3, #8
    4260:	2b1f      	cmp	r3, #31
    4262:	dd00      	ble.n	4266 <__aeabi_dsub+0xd2>
    4264:	e0e9      	b.n	443a <__aeabi_dsub+0x2a6>
    4266:	2220      	movs	r2, #32
    4268:	003c      	movs	r4, r7
    426a:	1ad2      	subs	r2, r2, r3
    426c:	409d      	lsls	r5, r3
    426e:	40d4      	lsrs	r4, r2
    4270:	409f      	lsls	r7, r3
    4272:	4325      	orrs	r5, r4
    4274:	429e      	cmp	r6, r3
    4276:	dd00      	ble.n	427a <__aeabi_dsub+0xe6>
    4278:	e0db      	b.n	4432 <__aeabi_dsub+0x29e>
    427a:	1b9e      	subs	r6, r3, r6
    427c:	1c73      	adds	r3, r6, #1
    427e:	2b1f      	cmp	r3, #31
    4280:	dd00      	ble.n	4284 <__aeabi_dsub+0xf0>
    4282:	e10a      	b.n	449a <__aeabi_dsub+0x306>
    4284:	2220      	movs	r2, #32
    4286:	0038      	movs	r0, r7
    4288:	1ad2      	subs	r2, r2, r3
    428a:	0029      	movs	r1, r5
    428c:	4097      	lsls	r7, r2
    428e:	002c      	movs	r4, r5
    4290:	4091      	lsls	r1, r2
    4292:	40d8      	lsrs	r0, r3
    4294:	1e7a      	subs	r2, r7, #1
    4296:	4197      	sbcs	r7, r2
    4298:	40dc      	lsrs	r4, r3
    429a:	2600      	movs	r6, #0
    429c:	4301      	orrs	r1, r0
    429e:	430f      	orrs	r7, r1
    42a0:	077b      	lsls	r3, r7, #29
    42a2:	d009      	beq.n	42b8 <__aeabi_dsub+0x124>
    42a4:	230f      	movs	r3, #15
    42a6:	403b      	ands	r3, r7
    42a8:	2b04      	cmp	r3, #4
    42aa:	d005      	beq.n	42b8 <__aeabi_dsub+0x124>
    42ac:	1d3b      	adds	r3, r7, #4
    42ae:	42bb      	cmp	r3, r7
    42b0:	41bf      	sbcs	r7, r7
    42b2:	427f      	negs	r7, r7
    42b4:	19e4      	adds	r4, r4, r7
    42b6:	001f      	movs	r7, r3
    42b8:	0223      	lsls	r3, r4, #8
    42ba:	d525      	bpl.n	4308 <__aeabi_dsub+0x174>
    42bc:	4b86      	ldr	r3, [pc, #536]	; (44d8 <__aeabi_dsub+0x344>)
    42be:	3601      	adds	r6, #1
    42c0:	429e      	cmp	r6, r3
    42c2:	d100      	bne.n	42c6 <__aeabi_dsub+0x132>
    42c4:	e0af      	b.n	4426 <__aeabi_dsub+0x292>
    42c6:	4b85      	ldr	r3, [pc, #532]	; (44dc <__aeabi_dsub+0x348>)
    42c8:	2501      	movs	r5, #1
    42ca:	401c      	ands	r4, r3
    42cc:	4643      	mov	r3, r8
    42ce:	0762      	lsls	r2, r4, #29
    42d0:	08ff      	lsrs	r7, r7, #3
    42d2:	0264      	lsls	r4, r4, #9
    42d4:	0576      	lsls	r6, r6, #21
    42d6:	4317      	orrs	r7, r2
    42d8:	0b24      	lsrs	r4, r4, #12
    42da:	0d76      	lsrs	r6, r6, #21
    42dc:	401d      	ands	r5, r3
    42de:	2100      	movs	r1, #0
    42e0:	0324      	lsls	r4, r4, #12
    42e2:	0b23      	lsrs	r3, r4, #12
    42e4:	0d0c      	lsrs	r4, r1, #20
    42e6:	4a7e      	ldr	r2, [pc, #504]	; (44e0 <__aeabi_dsub+0x34c>)
    42e8:	0524      	lsls	r4, r4, #20
    42ea:	431c      	orrs	r4, r3
    42ec:	4014      	ands	r4, r2
    42ee:	0533      	lsls	r3, r6, #20
    42f0:	4323      	orrs	r3, r4
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	07ed      	lsls	r5, r5, #31
    42f6:	085b      	lsrs	r3, r3, #1
    42f8:	432b      	orrs	r3, r5
    42fa:	0038      	movs	r0, r7
    42fc:	0019      	movs	r1, r3
    42fe:	bc1c      	pop	{r2, r3, r4}
    4300:	4690      	mov	r8, r2
    4302:	4699      	mov	r9, r3
    4304:	46a2      	mov	sl, r4
    4306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4308:	2501      	movs	r5, #1
    430a:	4643      	mov	r3, r8
    430c:	0762      	lsls	r2, r4, #29
    430e:	08ff      	lsrs	r7, r7, #3
    4310:	4317      	orrs	r7, r2
    4312:	08e4      	lsrs	r4, r4, #3
    4314:	401d      	ands	r5, r3
    4316:	4b70      	ldr	r3, [pc, #448]	; (44d8 <__aeabi_dsub+0x344>)
    4318:	429e      	cmp	r6, r3
    431a:	d036      	beq.n	438a <__aeabi_dsub+0x1f6>
    431c:	0324      	lsls	r4, r4, #12
    431e:	0576      	lsls	r6, r6, #21
    4320:	0b24      	lsrs	r4, r4, #12
    4322:	0d76      	lsrs	r6, r6, #21
    4324:	e7db      	b.n	42de <__aeabi_dsub+0x14a>
    4326:	4663      	mov	r3, ip
    4328:	1af3      	subs	r3, r6, r3
    432a:	2b00      	cmp	r3, #0
    432c:	dc00      	bgt.n	4330 <__aeabi_dsub+0x19c>
    432e:	e094      	b.n	445a <__aeabi_dsub+0x2c6>
    4330:	4660      	mov	r0, ip
    4332:	2800      	cmp	r0, #0
    4334:	d035      	beq.n	43a2 <__aeabi_dsub+0x20e>
    4336:	4868      	ldr	r0, [pc, #416]	; (44d8 <__aeabi_dsub+0x344>)
    4338:	4286      	cmp	r6, r0
    433a:	d0b1      	beq.n	42a0 <__aeabi_dsub+0x10c>
    433c:	2780      	movs	r7, #128	; 0x80
    433e:	043f      	lsls	r7, r7, #16
    4340:	4339      	orrs	r1, r7
    4342:	2b38      	cmp	r3, #56	; 0x38
    4344:	dc00      	bgt.n	4348 <__aeabi_dsub+0x1b4>
    4346:	e0fd      	b.n	4544 <__aeabi_dsub+0x3b0>
    4348:	430a      	orrs	r2, r1
    434a:	0017      	movs	r7, r2
    434c:	2100      	movs	r1, #0
    434e:	1e7a      	subs	r2, r7, #1
    4350:	4197      	sbcs	r7, r2
    4352:	4457      	add	r7, sl
    4354:	4557      	cmp	r7, sl
    4356:	4180      	sbcs	r0, r0
    4358:	1909      	adds	r1, r1, r4
    435a:	4244      	negs	r4, r0
    435c:	190c      	adds	r4, r1, r4
    435e:	0223      	lsls	r3, r4, #8
    4360:	d53a      	bpl.n	43d8 <__aeabi_dsub+0x244>
    4362:	4b5d      	ldr	r3, [pc, #372]	; (44d8 <__aeabi_dsub+0x344>)
    4364:	3601      	adds	r6, #1
    4366:	429e      	cmp	r6, r3
    4368:	d100      	bne.n	436c <__aeabi_dsub+0x1d8>
    436a:	e14b      	b.n	4604 <__aeabi_dsub+0x470>
    436c:	2201      	movs	r2, #1
    436e:	4b5b      	ldr	r3, [pc, #364]	; (44dc <__aeabi_dsub+0x348>)
    4370:	401c      	ands	r4, r3
    4372:	087b      	lsrs	r3, r7, #1
    4374:	4017      	ands	r7, r2
    4376:	431f      	orrs	r7, r3
    4378:	07e2      	lsls	r2, r4, #31
    437a:	4317      	orrs	r7, r2
    437c:	0864      	lsrs	r4, r4, #1
    437e:	e78f      	b.n	42a0 <__aeabi_dsub+0x10c>
    4380:	0008      	movs	r0, r1
    4382:	4310      	orrs	r0, r2
    4384:	d000      	beq.n	4388 <__aeabi_dsub+0x1f4>
    4386:	e724      	b.n	41d2 <__aeabi_dsub+0x3e>
    4388:	e721      	b.n	41ce <__aeabi_dsub+0x3a>
    438a:	0023      	movs	r3, r4
    438c:	433b      	orrs	r3, r7
    438e:	d100      	bne.n	4392 <__aeabi_dsub+0x1fe>
    4390:	e1b9      	b.n	4706 <__aeabi_dsub+0x572>
    4392:	2280      	movs	r2, #128	; 0x80
    4394:	0312      	lsls	r2, r2, #12
    4396:	4314      	orrs	r4, r2
    4398:	0324      	lsls	r4, r4, #12
    439a:	0b24      	lsrs	r4, r4, #12
    439c:	e79f      	b.n	42de <__aeabi_dsub+0x14a>
    439e:	002e      	movs	r6, r5
    43a0:	e77e      	b.n	42a0 <__aeabi_dsub+0x10c>
    43a2:	0008      	movs	r0, r1
    43a4:	4310      	orrs	r0, r2
    43a6:	d100      	bne.n	43aa <__aeabi_dsub+0x216>
    43a8:	e0ca      	b.n	4540 <__aeabi_dsub+0x3ac>
    43aa:	1e58      	subs	r0, r3, #1
    43ac:	4684      	mov	ip, r0
    43ae:	2800      	cmp	r0, #0
    43b0:	d000      	beq.n	43b4 <__aeabi_dsub+0x220>
    43b2:	e0e7      	b.n	4584 <__aeabi_dsub+0x3f0>
    43b4:	4452      	add	r2, sl
    43b6:	4552      	cmp	r2, sl
    43b8:	4180      	sbcs	r0, r0
    43ba:	1864      	adds	r4, r4, r1
    43bc:	4240      	negs	r0, r0
    43be:	1824      	adds	r4, r4, r0
    43c0:	0017      	movs	r7, r2
    43c2:	2601      	movs	r6, #1
    43c4:	0223      	lsls	r3, r4, #8
    43c6:	d507      	bpl.n	43d8 <__aeabi_dsub+0x244>
    43c8:	2602      	movs	r6, #2
    43ca:	e7cf      	b.n	436c <__aeabi_dsub+0x1d8>
    43cc:	4664      	mov	r4, ip
    43ce:	432c      	orrs	r4, r5
    43d0:	d100      	bne.n	43d4 <__aeabi_dsub+0x240>
    43d2:	e1b3      	b.n	473c <__aeabi_dsub+0x5a8>
    43d4:	002c      	movs	r4, r5
    43d6:	4667      	mov	r7, ip
    43d8:	077b      	lsls	r3, r7, #29
    43da:	d000      	beq.n	43de <__aeabi_dsub+0x24a>
    43dc:	e762      	b.n	42a4 <__aeabi_dsub+0x110>
    43de:	0763      	lsls	r3, r4, #29
    43e0:	08ff      	lsrs	r7, r7, #3
    43e2:	431f      	orrs	r7, r3
    43e4:	2501      	movs	r5, #1
    43e6:	4643      	mov	r3, r8
    43e8:	08e4      	lsrs	r4, r4, #3
    43ea:	401d      	ands	r5, r3
    43ec:	e793      	b.n	4316 <__aeabi_dsub+0x182>
    43ee:	2d00      	cmp	r5, #0
    43f0:	d178      	bne.n	44e4 <__aeabi_dsub+0x350>
    43f2:	1c75      	adds	r5, r6, #1
    43f4:	056d      	lsls	r5, r5, #21
    43f6:	0d6d      	lsrs	r5, r5, #21
    43f8:	2d01      	cmp	r5, #1
    43fa:	dc00      	bgt.n	43fe <__aeabi_dsub+0x26a>
    43fc:	e0f2      	b.n	45e4 <__aeabi_dsub+0x450>
    43fe:	4650      	mov	r0, sl
    4400:	1a80      	subs	r0, r0, r2
    4402:	4582      	cmp	sl, r0
    4404:	41bf      	sbcs	r7, r7
    4406:	1a65      	subs	r5, r4, r1
    4408:	427f      	negs	r7, r7
    440a:	1bed      	subs	r5, r5, r7
    440c:	4684      	mov	ip, r0
    440e:	0228      	lsls	r0, r5, #8
    4410:	d400      	bmi.n	4414 <__aeabi_dsub+0x280>
    4412:	e08c      	b.n	452e <__aeabi_dsub+0x39a>
    4414:	4650      	mov	r0, sl
    4416:	1a17      	subs	r7, r2, r0
    4418:	42ba      	cmp	r2, r7
    441a:	4192      	sbcs	r2, r2
    441c:	1b0c      	subs	r4, r1, r4
    441e:	4255      	negs	r5, r2
    4420:	1b65      	subs	r5, r4, r5
    4422:	4698      	mov	r8, r3
    4424:	e714      	b.n	4250 <__aeabi_dsub+0xbc>
    4426:	2501      	movs	r5, #1
    4428:	4643      	mov	r3, r8
    442a:	2400      	movs	r4, #0
    442c:	401d      	ands	r5, r3
    442e:	2700      	movs	r7, #0
    4430:	e755      	b.n	42de <__aeabi_dsub+0x14a>
    4432:	4c2a      	ldr	r4, [pc, #168]	; (44dc <__aeabi_dsub+0x348>)
    4434:	1af6      	subs	r6, r6, r3
    4436:	402c      	ands	r4, r5
    4438:	e732      	b.n	42a0 <__aeabi_dsub+0x10c>
    443a:	003d      	movs	r5, r7
    443c:	3828      	subs	r0, #40	; 0x28
    443e:	4085      	lsls	r5, r0
    4440:	2700      	movs	r7, #0
    4442:	e717      	b.n	4274 <__aeabi_dsub+0xe0>
    4444:	0038      	movs	r0, r7
    4446:	f000 faf3 	bl	4a30 <__clzsi2>
    444a:	3020      	adds	r0, #32
    444c:	e706      	b.n	425c <__aeabi_dsub+0xc8>
    444e:	430a      	orrs	r2, r1
    4450:	0017      	movs	r7, r2
    4452:	2100      	movs	r1, #0
    4454:	1e7a      	subs	r2, r7, #1
    4456:	4197      	sbcs	r7, r2
    4458:	e6ee      	b.n	4238 <__aeabi_dsub+0xa4>
    445a:	2b00      	cmp	r3, #0
    445c:	d000      	beq.n	4460 <__aeabi_dsub+0x2cc>
    445e:	e0e5      	b.n	462c <__aeabi_dsub+0x498>
    4460:	1c73      	adds	r3, r6, #1
    4462:	469c      	mov	ip, r3
    4464:	055b      	lsls	r3, r3, #21
    4466:	0d5b      	lsrs	r3, r3, #21
    4468:	2b01      	cmp	r3, #1
    446a:	dc00      	bgt.n	446e <__aeabi_dsub+0x2da>
    446c:	e09f      	b.n	45ae <__aeabi_dsub+0x41a>
    446e:	4b1a      	ldr	r3, [pc, #104]	; (44d8 <__aeabi_dsub+0x344>)
    4470:	459c      	cmp	ip, r3
    4472:	d100      	bne.n	4476 <__aeabi_dsub+0x2e2>
    4474:	e0c5      	b.n	4602 <__aeabi_dsub+0x46e>
    4476:	4452      	add	r2, sl
    4478:	4552      	cmp	r2, sl
    447a:	4180      	sbcs	r0, r0
    447c:	1864      	adds	r4, r4, r1
    447e:	4240      	negs	r0, r0
    4480:	1824      	adds	r4, r4, r0
    4482:	07e7      	lsls	r7, r4, #31
    4484:	0852      	lsrs	r2, r2, #1
    4486:	4317      	orrs	r7, r2
    4488:	0864      	lsrs	r4, r4, #1
    448a:	4666      	mov	r6, ip
    448c:	e708      	b.n	42a0 <__aeabi_dsub+0x10c>
    448e:	4812      	ldr	r0, [pc, #72]	; (44d8 <__aeabi_dsub+0x344>)
    4490:	4285      	cmp	r5, r0
    4492:	d100      	bne.n	4496 <__aeabi_dsub+0x302>
    4494:	e085      	b.n	45a2 <__aeabi_dsub+0x40e>
    4496:	001d      	movs	r5, r3
    4498:	e6bc      	b.n	4214 <__aeabi_dsub+0x80>
    449a:	0029      	movs	r1, r5
    449c:	3e1f      	subs	r6, #31
    449e:	40f1      	lsrs	r1, r6
    44a0:	2b20      	cmp	r3, #32
    44a2:	d100      	bne.n	44a6 <__aeabi_dsub+0x312>
    44a4:	e07f      	b.n	45a6 <__aeabi_dsub+0x412>
    44a6:	2240      	movs	r2, #64	; 0x40
    44a8:	1ad3      	subs	r3, r2, r3
    44aa:	409d      	lsls	r5, r3
    44ac:	432f      	orrs	r7, r5
    44ae:	1e7d      	subs	r5, r7, #1
    44b0:	41af      	sbcs	r7, r5
    44b2:	2400      	movs	r4, #0
    44b4:	430f      	orrs	r7, r1
    44b6:	2600      	movs	r6, #0
    44b8:	e78e      	b.n	43d8 <__aeabi_dsub+0x244>
    44ba:	002b      	movs	r3, r5
    44bc:	000f      	movs	r7, r1
    44be:	3b20      	subs	r3, #32
    44c0:	40df      	lsrs	r7, r3
    44c2:	2d20      	cmp	r5, #32
    44c4:	d071      	beq.n	45aa <__aeabi_dsub+0x416>
    44c6:	2340      	movs	r3, #64	; 0x40
    44c8:	1b5d      	subs	r5, r3, r5
    44ca:	40a9      	lsls	r1, r5
    44cc:	430a      	orrs	r2, r1
    44ce:	1e51      	subs	r1, r2, #1
    44d0:	418a      	sbcs	r2, r1
    44d2:	2100      	movs	r1, #0
    44d4:	4317      	orrs	r7, r2
    44d6:	e6af      	b.n	4238 <__aeabi_dsub+0xa4>
    44d8:	000007ff 	.word	0x000007ff
    44dc:	ff7fffff 	.word	0xff7fffff
    44e0:	800fffff 	.word	0x800fffff
    44e4:	2e00      	cmp	r6, #0
    44e6:	d03e      	beq.n	4566 <__aeabi_dsub+0x3d2>
    44e8:	4eb3      	ldr	r6, [pc, #716]	; (47b8 <__aeabi_dsub+0x624>)
    44ea:	45b4      	cmp	ip, r6
    44ec:	d045      	beq.n	457a <__aeabi_dsub+0x3e6>
    44ee:	2680      	movs	r6, #128	; 0x80
    44f0:	0436      	lsls	r6, r6, #16
    44f2:	426d      	negs	r5, r5
    44f4:	4334      	orrs	r4, r6
    44f6:	2d38      	cmp	r5, #56	; 0x38
    44f8:	dd00      	ble.n	44fc <__aeabi_dsub+0x368>
    44fa:	e0a8      	b.n	464e <__aeabi_dsub+0x4ba>
    44fc:	2d1f      	cmp	r5, #31
    44fe:	dd00      	ble.n	4502 <__aeabi_dsub+0x36e>
    4500:	e11f      	b.n	4742 <__aeabi_dsub+0x5ae>
    4502:	2620      	movs	r6, #32
    4504:	0027      	movs	r7, r4
    4506:	4650      	mov	r0, sl
    4508:	1b76      	subs	r6, r6, r5
    450a:	40b7      	lsls	r7, r6
    450c:	40e8      	lsrs	r0, r5
    450e:	4307      	orrs	r7, r0
    4510:	4650      	mov	r0, sl
    4512:	40b0      	lsls	r0, r6
    4514:	1e46      	subs	r6, r0, #1
    4516:	41b0      	sbcs	r0, r6
    4518:	40ec      	lsrs	r4, r5
    451a:	4338      	orrs	r0, r7
    451c:	1a17      	subs	r7, r2, r0
    451e:	42ba      	cmp	r2, r7
    4520:	4192      	sbcs	r2, r2
    4522:	1b0c      	subs	r4, r1, r4
    4524:	4252      	negs	r2, r2
    4526:	1aa4      	subs	r4, r4, r2
    4528:	4666      	mov	r6, ip
    452a:	4698      	mov	r8, r3
    452c:	e68b      	b.n	4246 <__aeabi_dsub+0xb2>
    452e:	4664      	mov	r4, ip
    4530:	4667      	mov	r7, ip
    4532:	432c      	orrs	r4, r5
    4534:	d000      	beq.n	4538 <__aeabi_dsub+0x3a4>
    4536:	e68b      	b.n	4250 <__aeabi_dsub+0xbc>
    4538:	2500      	movs	r5, #0
    453a:	2600      	movs	r6, #0
    453c:	2700      	movs	r7, #0
    453e:	e6ea      	b.n	4316 <__aeabi_dsub+0x182>
    4540:	001e      	movs	r6, r3
    4542:	e6ad      	b.n	42a0 <__aeabi_dsub+0x10c>
    4544:	2b1f      	cmp	r3, #31
    4546:	dc60      	bgt.n	460a <__aeabi_dsub+0x476>
    4548:	2720      	movs	r7, #32
    454a:	1af8      	subs	r0, r7, r3
    454c:	000f      	movs	r7, r1
    454e:	4684      	mov	ip, r0
    4550:	4087      	lsls	r7, r0
    4552:	0010      	movs	r0, r2
    4554:	40d8      	lsrs	r0, r3
    4556:	4307      	orrs	r7, r0
    4558:	4660      	mov	r0, ip
    455a:	4082      	lsls	r2, r0
    455c:	1e50      	subs	r0, r2, #1
    455e:	4182      	sbcs	r2, r0
    4560:	40d9      	lsrs	r1, r3
    4562:	4317      	orrs	r7, r2
    4564:	e6f5      	b.n	4352 <__aeabi_dsub+0x1be>
    4566:	0026      	movs	r6, r4
    4568:	4650      	mov	r0, sl
    456a:	4306      	orrs	r6, r0
    456c:	d005      	beq.n	457a <__aeabi_dsub+0x3e6>
    456e:	43ed      	mvns	r5, r5
    4570:	2d00      	cmp	r5, #0
    4572:	d0d3      	beq.n	451c <__aeabi_dsub+0x388>
    4574:	4e90      	ldr	r6, [pc, #576]	; (47b8 <__aeabi_dsub+0x624>)
    4576:	45b4      	cmp	ip, r6
    4578:	d1bd      	bne.n	44f6 <__aeabi_dsub+0x362>
    457a:	000c      	movs	r4, r1
    457c:	0017      	movs	r7, r2
    457e:	4666      	mov	r6, ip
    4580:	4698      	mov	r8, r3
    4582:	e68d      	b.n	42a0 <__aeabi_dsub+0x10c>
    4584:	488c      	ldr	r0, [pc, #560]	; (47b8 <__aeabi_dsub+0x624>)
    4586:	4283      	cmp	r3, r0
    4588:	d00b      	beq.n	45a2 <__aeabi_dsub+0x40e>
    458a:	4663      	mov	r3, ip
    458c:	e6d9      	b.n	4342 <__aeabi_dsub+0x1ae>
    458e:	2d00      	cmp	r5, #0
    4590:	d000      	beq.n	4594 <__aeabi_dsub+0x400>
    4592:	e096      	b.n	46c2 <__aeabi_dsub+0x52e>
    4594:	0008      	movs	r0, r1
    4596:	4310      	orrs	r0, r2
    4598:	d100      	bne.n	459c <__aeabi_dsub+0x408>
    459a:	e0e2      	b.n	4762 <__aeabi_dsub+0x5ce>
    459c:	000c      	movs	r4, r1
    459e:	0017      	movs	r7, r2
    45a0:	4698      	mov	r8, r3
    45a2:	4e85      	ldr	r6, [pc, #532]	; (47b8 <__aeabi_dsub+0x624>)
    45a4:	e67c      	b.n	42a0 <__aeabi_dsub+0x10c>
    45a6:	2500      	movs	r5, #0
    45a8:	e780      	b.n	44ac <__aeabi_dsub+0x318>
    45aa:	2100      	movs	r1, #0
    45ac:	e78e      	b.n	44cc <__aeabi_dsub+0x338>
    45ae:	0023      	movs	r3, r4
    45b0:	4650      	mov	r0, sl
    45b2:	4303      	orrs	r3, r0
    45b4:	2e00      	cmp	r6, #0
    45b6:	d000      	beq.n	45ba <__aeabi_dsub+0x426>
    45b8:	e0a8      	b.n	470c <__aeabi_dsub+0x578>
    45ba:	2b00      	cmp	r3, #0
    45bc:	d100      	bne.n	45c0 <__aeabi_dsub+0x42c>
    45be:	e0de      	b.n	477e <__aeabi_dsub+0x5ea>
    45c0:	000b      	movs	r3, r1
    45c2:	4313      	orrs	r3, r2
    45c4:	d100      	bne.n	45c8 <__aeabi_dsub+0x434>
    45c6:	e66b      	b.n	42a0 <__aeabi_dsub+0x10c>
    45c8:	4452      	add	r2, sl
    45ca:	4552      	cmp	r2, sl
    45cc:	4180      	sbcs	r0, r0
    45ce:	1864      	adds	r4, r4, r1
    45d0:	4240      	negs	r0, r0
    45d2:	1824      	adds	r4, r4, r0
    45d4:	0017      	movs	r7, r2
    45d6:	0223      	lsls	r3, r4, #8
    45d8:	d400      	bmi.n	45dc <__aeabi_dsub+0x448>
    45da:	e6fd      	b.n	43d8 <__aeabi_dsub+0x244>
    45dc:	4b77      	ldr	r3, [pc, #476]	; (47bc <__aeabi_dsub+0x628>)
    45de:	4666      	mov	r6, ip
    45e0:	401c      	ands	r4, r3
    45e2:	e65d      	b.n	42a0 <__aeabi_dsub+0x10c>
    45e4:	0025      	movs	r5, r4
    45e6:	4650      	mov	r0, sl
    45e8:	4305      	orrs	r5, r0
    45ea:	2e00      	cmp	r6, #0
    45ec:	d1cf      	bne.n	458e <__aeabi_dsub+0x3fa>
    45ee:	2d00      	cmp	r5, #0
    45f0:	d14f      	bne.n	4692 <__aeabi_dsub+0x4fe>
    45f2:	000c      	movs	r4, r1
    45f4:	4314      	orrs	r4, r2
    45f6:	d100      	bne.n	45fa <__aeabi_dsub+0x466>
    45f8:	e0a0      	b.n	473c <__aeabi_dsub+0x5a8>
    45fa:	000c      	movs	r4, r1
    45fc:	0017      	movs	r7, r2
    45fe:	4698      	mov	r8, r3
    4600:	e64e      	b.n	42a0 <__aeabi_dsub+0x10c>
    4602:	4666      	mov	r6, ip
    4604:	2400      	movs	r4, #0
    4606:	2700      	movs	r7, #0
    4608:	e685      	b.n	4316 <__aeabi_dsub+0x182>
    460a:	001f      	movs	r7, r3
    460c:	0008      	movs	r0, r1
    460e:	3f20      	subs	r7, #32
    4610:	40f8      	lsrs	r0, r7
    4612:	0007      	movs	r7, r0
    4614:	2b20      	cmp	r3, #32
    4616:	d100      	bne.n	461a <__aeabi_dsub+0x486>
    4618:	e08e      	b.n	4738 <__aeabi_dsub+0x5a4>
    461a:	2040      	movs	r0, #64	; 0x40
    461c:	1ac3      	subs	r3, r0, r3
    461e:	4099      	lsls	r1, r3
    4620:	430a      	orrs	r2, r1
    4622:	1e51      	subs	r1, r2, #1
    4624:	418a      	sbcs	r2, r1
    4626:	2100      	movs	r1, #0
    4628:	4317      	orrs	r7, r2
    462a:	e692      	b.n	4352 <__aeabi_dsub+0x1be>
    462c:	2e00      	cmp	r6, #0
    462e:	d114      	bne.n	465a <__aeabi_dsub+0x4c6>
    4630:	0026      	movs	r6, r4
    4632:	4650      	mov	r0, sl
    4634:	4306      	orrs	r6, r0
    4636:	d062      	beq.n	46fe <__aeabi_dsub+0x56a>
    4638:	43db      	mvns	r3, r3
    463a:	2b00      	cmp	r3, #0
    463c:	d15c      	bne.n	46f8 <__aeabi_dsub+0x564>
    463e:	1887      	adds	r7, r0, r2
    4640:	4297      	cmp	r7, r2
    4642:	4192      	sbcs	r2, r2
    4644:	1864      	adds	r4, r4, r1
    4646:	4252      	negs	r2, r2
    4648:	18a4      	adds	r4, r4, r2
    464a:	4666      	mov	r6, ip
    464c:	e687      	b.n	435e <__aeabi_dsub+0x1ca>
    464e:	4650      	mov	r0, sl
    4650:	4320      	orrs	r0, r4
    4652:	1e44      	subs	r4, r0, #1
    4654:	41a0      	sbcs	r0, r4
    4656:	2400      	movs	r4, #0
    4658:	e760      	b.n	451c <__aeabi_dsub+0x388>
    465a:	4e57      	ldr	r6, [pc, #348]	; (47b8 <__aeabi_dsub+0x624>)
    465c:	45b4      	cmp	ip, r6
    465e:	d04e      	beq.n	46fe <__aeabi_dsub+0x56a>
    4660:	2680      	movs	r6, #128	; 0x80
    4662:	0436      	lsls	r6, r6, #16
    4664:	425b      	negs	r3, r3
    4666:	4334      	orrs	r4, r6
    4668:	2b38      	cmp	r3, #56	; 0x38
    466a:	dd00      	ble.n	466e <__aeabi_dsub+0x4da>
    466c:	e07f      	b.n	476e <__aeabi_dsub+0x5da>
    466e:	2b1f      	cmp	r3, #31
    4670:	dd00      	ble.n	4674 <__aeabi_dsub+0x4e0>
    4672:	e08b      	b.n	478c <__aeabi_dsub+0x5f8>
    4674:	2620      	movs	r6, #32
    4676:	0027      	movs	r7, r4
    4678:	4650      	mov	r0, sl
    467a:	1af6      	subs	r6, r6, r3
    467c:	40b7      	lsls	r7, r6
    467e:	40d8      	lsrs	r0, r3
    4680:	4307      	orrs	r7, r0
    4682:	4650      	mov	r0, sl
    4684:	40b0      	lsls	r0, r6
    4686:	1e46      	subs	r6, r0, #1
    4688:	41b0      	sbcs	r0, r6
    468a:	4307      	orrs	r7, r0
    468c:	40dc      	lsrs	r4, r3
    468e:	18bf      	adds	r7, r7, r2
    4690:	e7d6      	b.n	4640 <__aeabi_dsub+0x4ac>
    4692:	000d      	movs	r5, r1
    4694:	4315      	orrs	r5, r2
    4696:	d100      	bne.n	469a <__aeabi_dsub+0x506>
    4698:	e602      	b.n	42a0 <__aeabi_dsub+0x10c>
    469a:	4650      	mov	r0, sl
    469c:	1a80      	subs	r0, r0, r2
    469e:	4582      	cmp	sl, r0
    46a0:	41bf      	sbcs	r7, r7
    46a2:	1a65      	subs	r5, r4, r1
    46a4:	427f      	negs	r7, r7
    46a6:	1bed      	subs	r5, r5, r7
    46a8:	4684      	mov	ip, r0
    46aa:	0228      	lsls	r0, r5, #8
    46ac:	d400      	bmi.n	46b0 <__aeabi_dsub+0x51c>
    46ae:	e68d      	b.n	43cc <__aeabi_dsub+0x238>
    46b0:	4650      	mov	r0, sl
    46b2:	1a17      	subs	r7, r2, r0
    46b4:	42ba      	cmp	r2, r7
    46b6:	4192      	sbcs	r2, r2
    46b8:	1b0c      	subs	r4, r1, r4
    46ba:	4252      	negs	r2, r2
    46bc:	1aa4      	subs	r4, r4, r2
    46be:	4698      	mov	r8, r3
    46c0:	e5ee      	b.n	42a0 <__aeabi_dsub+0x10c>
    46c2:	000d      	movs	r5, r1
    46c4:	4315      	orrs	r5, r2
    46c6:	d100      	bne.n	46ca <__aeabi_dsub+0x536>
    46c8:	e76b      	b.n	45a2 <__aeabi_dsub+0x40e>
    46ca:	4650      	mov	r0, sl
    46cc:	0767      	lsls	r7, r4, #29
    46ce:	08c0      	lsrs	r0, r0, #3
    46d0:	4307      	orrs	r7, r0
    46d2:	2080      	movs	r0, #128	; 0x80
    46d4:	08e4      	lsrs	r4, r4, #3
    46d6:	0300      	lsls	r0, r0, #12
    46d8:	4204      	tst	r4, r0
    46da:	d007      	beq.n	46ec <__aeabi_dsub+0x558>
    46dc:	08cd      	lsrs	r5, r1, #3
    46de:	4205      	tst	r5, r0
    46e0:	d104      	bne.n	46ec <__aeabi_dsub+0x558>
    46e2:	002c      	movs	r4, r5
    46e4:	4698      	mov	r8, r3
    46e6:	08d7      	lsrs	r7, r2, #3
    46e8:	0749      	lsls	r1, r1, #29
    46ea:	430f      	orrs	r7, r1
    46ec:	0f7b      	lsrs	r3, r7, #29
    46ee:	00e4      	lsls	r4, r4, #3
    46f0:	431c      	orrs	r4, r3
    46f2:	00ff      	lsls	r7, r7, #3
    46f4:	4e30      	ldr	r6, [pc, #192]	; (47b8 <__aeabi_dsub+0x624>)
    46f6:	e5d3      	b.n	42a0 <__aeabi_dsub+0x10c>
    46f8:	4e2f      	ldr	r6, [pc, #188]	; (47b8 <__aeabi_dsub+0x624>)
    46fa:	45b4      	cmp	ip, r6
    46fc:	d1b4      	bne.n	4668 <__aeabi_dsub+0x4d4>
    46fe:	000c      	movs	r4, r1
    4700:	0017      	movs	r7, r2
    4702:	4666      	mov	r6, ip
    4704:	e5cc      	b.n	42a0 <__aeabi_dsub+0x10c>
    4706:	2700      	movs	r7, #0
    4708:	2400      	movs	r4, #0
    470a:	e5e8      	b.n	42de <__aeabi_dsub+0x14a>
    470c:	2b00      	cmp	r3, #0
    470e:	d039      	beq.n	4784 <__aeabi_dsub+0x5f0>
    4710:	000b      	movs	r3, r1
    4712:	4313      	orrs	r3, r2
    4714:	d100      	bne.n	4718 <__aeabi_dsub+0x584>
    4716:	e744      	b.n	45a2 <__aeabi_dsub+0x40e>
    4718:	08c0      	lsrs	r0, r0, #3
    471a:	0767      	lsls	r7, r4, #29
    471c:	4307      	orrs	r7, r0
    471e:	2080      	movs	r0, #128	; 0x80
    4720:	08e4      	lsrs	r4, r4, #3
    4722:	0300      	lsls	r0, r0, #12
    4724:	4204      	tst	r4, r0
    4726:	d0e1      	beq.n	46ec <__aeabi_dsub+0x558>
    4728:	08cb      	lsrs	r3, r1, #3
    472a:	4203      	tst	r3, r0
    472c:	d1de      	bne.n	46ec <__aeabi_dsub+0x558>
    472e:	08d7      	lsrs	r7, r2, #3
    4730:	0749      	lsls	r1, r1, #29
    4732:	430f      	orrs	r7, r1
    4734:	001c      	movs	r4, r3
    4736:	e7d9      	b.n	46ec <__aeabi_dsub+0x558>
    4738:	2100      	movs	r1, #0
    473a:	e771      	b.n	4620 <__aeabi_dsub+0x48c>
    473c:	2500      	movs	r5, #0
    473e:	2700      	movs	r7, #0
    4740:	e5e9      	b.n	4316 <__aeabi_dsub+0x182>
    4742:	002e      	movs	r6, r5
    4744:	0027      	movs	r7, r4
    4746:	3e20      	subs	r6, #32
    4748:	40f7      	lsrs	r7, r6
    474a:	2d20      	cmp	r5, #32
    474c:	d02f      	beq.n	47ae <__aeabi_dsub+0x61a>
    474e:	2640      	movs	r6, #64	; 0x40
    4750:	1b75      	subs	r5, r6, r5
    4752:	40ac      	lsls	r4, r5
    4754:	4650      	mov	r0, sl
    4756:	4320      	orrs	r0, r4
    4758:	1e44      	subs	r4, r0, #1
    475a:	41a0      	sbcs	r0, r4
    475c:	2400      	movs	r4, #0
    475e:	4338      	orrs	r0, r7
    4760:	e6dc      	b.n	451c <__aeabi_dsub+0x388>
    4762:	2480      	movs	r4, #128	; 0x80
    4764:	2500      	movs	r5, #0
    4766:	0324      	lsls	r4, r4, #12
    4768:	4e13      	ldr	r6, [pc, #76]	; (47b8 <__aeabi_dsub+0x624>)
    476a:	2700      	movs	r7, #0
    476c:	e5d3      	b.n	4316 <__aeabi_dsub+0x182>
    476e:	4650      	mov	r0, sl
    4770:	4320      	orrs	r0, r4
    4772:	0007      	movs	r7, r0
    4774:	1e78      	subs	r0, r7, #1
    4776:	4187      	sbcs	r7, r0
    4778:	2400      	movs	r4, #0
    477a:	18bf      	adds	r7, r7, r2
    477c:	e760      	b.n	4640 <__aeabi_dsub+0x4ac>
    477e:	000c      	movs	r4, r1
    4780:	0017      	movs	r7, r2
    4782:	e58d      	b.n	42a0 <__aeabi_dsub+0x10c>
    4784:	000c      	movs	r4, r1
    4786:	0017      	movs	r7, r2
    4788:	4e0b      	ldr	r6, [pc, #44]	; (47b8 <__aeabi_dsub+0x624>)
    478a:	e589      	b.n	42a0 <__aeabi_dsub+0x10c>
    478c:	001e      	movs	r6, r3
    478e:	0027      	movs	r7, r4
    4790:	3e20      	subs	r6, #32
    4792:	40f7      	lsrs	r7, r6
    4794:	2b20      	cmp	r3, #32
    4796:	d00c      	beq.n	47b2 <__aeabi_dsub+0x61e>
    4798:	2640      	movs	r6, #64	; 0x40
    479a:	1af3      	subs	r3, r6, r3
    479c:	409c      	lsls	r4, r3
    479e:	4650      	mov	r0, sl
    47a0:	4320      	orrs	r0, r4
    47a2:	1e44      	subs	r4, r0, #1
    47a4:	41a0      	sbcs	r0, r4
    47a6:	4307      	orrs	r7, r0
    47a8:	2400      	movs	r4, #0
    47aa:	18bf      	adds	r7, r7, r2
    47ac:	e748      	b.n	4640 <__aeabi_dsub+0x4ac>
    47ae:	2400      	movs	r4, #0
    47b0:	e7d0      	b.n	4754 <__aeabi_dsub+0x5c0>
    47b2:	2400      	movs	r4, #0
    47b4:	e7f3      	b.n	479e <__aeabi_dsub+0x60a>
    47b6:	46c0      	nop			; (mov r8, r8)
    47b8:	000007ff 	.word	0x000007ff
    47bc:	ff7fffff 	.word	0xff7fffff

000047c0 <__aeabi_d2iz>:
    47c0:	b530      	push	{r4, r5, lr}
    47c2:	4d13      	ldr	r5, [pc, #76]	; (4810 <__aeabi_d2iz+0x50>)
    47c4:	030a      	lsls	r2, r1, #12
    47c6:	004b      	lsls	r3, r1, #1
    47c8:	0b12      	lsrs	r2, r2, #12
    47ca:	0d5b      	lsrs	r3, r3, #21
    47cc:	0fc9      	lsrs	r1, r1, #31
    47ce:	2400      	movs	r4, #0
    47d0:	42ab      	cmp	r3, r5
    47d2:	dd10      	ble.n	47f6 <__aeabi_d2iz+0x36>
    47d4:	4c0f      	ldr	r4, [pc, #60]	; (4814 <__aeabi_d2iz+0x54>)
    47d6:	42a3      	cmp	r3, r4
    47d8:	dc0f      	bgt.n	47fa <__aeabi_d2iz+0x3a>
    47da:	2480      	movs	r4, #128	; 0x80
    47dc:	4d0e      	ldr	r5, [pc, #56]	; (4818 <__aeabi_d2iz+0x58>)
    47de:	0364      	lsls	r4, r4, #13
    47e0:	4322      	orrs	r2, r4
    47e2:	1aed      	subs	r5, r5, r3
    47e4:	2d1f      	cmp	r5, #31
    47e6:	dd0b      	ble.n	4800 <__aeabi_d2iz+0x40>
    47e8:	480c      	ldr	r0, [pc, #48]	; (481c <__aeabi_d2iz+0x5c>)
    47ea:	1ac3      	subs	r3, r0, r3
    47ec:	40da      	lsrs	r2, r3
    47ee:	4254      	negs	r4, r2
    47f0:	2900      	cmp	r1, #0
    47f2:	d100      	bne.n	47f6 <__aeabi_d2iz+0x36>
    47f4:	0014      	movs	r4, r2
    47f6:	0020      	movs	r0, r4
    47f8:	bd30      	pop	{r4, r5, pc}
    47fa:	4b09      	ldr	r3, [pc, #36]	; (4820 <__aeabi_d2iz+0x60>)
    47fc:	18cc      	adds	r4, r1, r3
    47fe:	e7fa      	b.n	47f6 <__aeabi_d2iz+0x36>
    4800:	4c08      	ldr	r4, [pc, #32]	; (4824 <__aeabi_d2iz+0x64>)
    4802:	40e8      	lsrs	r0, r5
    4804:	46a4      	mov	ip, r4
    4806:	4463      	add	r3, ip
    4808:	409a      	lsls	r2, r3
    480a:	4302      	orrs	r2, r0
    480c:	e7ef      	b.n	47ee <__aeabi_d2iz+0x2e>
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	000003fe 	.word	0x000003fe
    4814:	0000041d 	.word	0x0000041d
    4818:	00000433 	.word	0x00000433
    481c:	00000413 	.word	0x00000413
    4820:	7fffffff 	.word	0x7fffffff
    4824:	fffffbed 	.word	0xfffffbed

00004828 <__aeabi_i2d>:
    4828:	b570      	push	{r4, r5, r6, lr}
    482a:	2800      	cmp	r0, #0
    482c:	d030      	beq.n	4890 <__aeabi_i2d+0x68>
    482e:	17c3      	asrs	r3, r0, #31
    4830:	18c4      	adds	r4, r0, r3
    4832:	405c      	eors	r4, r3
    4834:	0fc5      	lsrs	r5, r0, #31
    4836:	0020      	movs	r0, r4
    4838:	f000 f8fa 	bl	4a30 <__clzsi2>
    483c:	4b17      	ldr	r3, [pc, #92]	; (489c <__aeabi_i2d+0x74>)
    483e:	4a18      	ldr	r2, [pc, #96]	; (48a0 <__aeabi_i2d+0x78>)
    4840:	1a1b      	subs	r3, r3, r0
    4842:	1ad2      	subs	r2, r2, r3
    4844:	2a1f      	cmp	r2, #31
    4846:	dd18      	ble.n	487a <__aeabi_i2d+0x52>
    4848:	4a16      	ldr	r2, [pc, #88]	; (48a4 <__aeabi_i2d+0x7c>)
    484a:	1ad2      	subs	r2, r2, r3
    484c:	4094      	lsls	r4, r2
    484e:	2200      	movs	r2, #0
    4850:	0324      	lsls	r4, r4, #12
    4852:	055b      	lsls	r3, r3, #21
    4854:	0b24      	lsrs	r4, r4, #12
    4856:	0d5b      	lsrs	r3, r3, #21
    4858:	2100      	movs	r1, #0
    485a:	0010      	movs	r0, r2
    485c:	0324      	lsls	r4, r4, #12
    485e:	0d0a      	lsrs	r2, r1, #20
    4860:	0b24      	lsrs	r4, r4, #12
    4862:	0512      	lsls	r2, r2, #20
    4864:	4322      	orrs	r2, r4
    4866:	4c10      	ldr	r4, [pc, #64]	; (48a8 <__aeabi_i2d+0x80>)
    4868:	051b      	lsls	r3, r3, #20
    486a:	4022      	ands	r2, r4
    486c:	4313      	orrs	r3, r2
    486e:	005b      	lsls	r3, r3, #1
    4870:	07ed      	lsls	r5, r5, #31
    4872:	085b      	lsrs	r3, r3, #1
    4874:	432b      	orrs	r3, r5
    4876:	0019      	movs	r1, r3
    4878:	bd70      	pop	{r4, r5, r6, pc}
    487a:	0021      	movs	r1, r4
    487c:	4091      	lsls	r1, r2
    487e:	000a      	movs	r2, r1
    4880:	210b      	movs	r1, #11
    4882:	1a08      	subs	r0, r1, r0
    4884:	40c4      	lsrs	r4, r0
    4886:	055b      	lsls	r3, r3, #21
    4888:	0324      	lsls	r4, r4, #12
    488a:	0b24      	lsrs	r4, r4, #12
    488c:	0d5b      	lsrs	r3, r3, #21
    488e:	e7e3      	b.n	4858 <__aeabi_i2d+0x30>
    4890:	2500      	movs	r5, #0
    4892:	2300      	movs	r3, #0
    4894:	2400      	movs	r4, #0
    4896:	2200      	movs	r2, #0
    4898:	e7de      	b.n	4858 <__aeabi_i2d+0x30>
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	0000041e 	.word	0x0000041e
    48a0:	00000433 	.word	0x00000433
    48a4:	00000413 	.word	0x00000413
    48a8:	800fffff 	.word	0x800fffff

000048ac <__aeabi_ui2d>:
    48ac:	b510      	push	{r4, lr}
    48ae:	1e04      	subs	r4, r0, #0
    48b0:	d028      	beq.n	4904 <__aeabi_ui2d+0x58>
    48b2:	f000 f8bd 	bl	4a30 <__clzsi2>
    48b6:	4b15      	ldr	r3, [pc, #84]	; (490c <__aeabi_ui2d+0x60>)
    48b8:	4a15      	ldr	r2, [pc, #84]	; (4910 <__aeabi_ui2d+0x64>)
    48ba:	1a1b      	subs	r3, r3, r0
    48bc:	1ad2      	subs	r2, r2, r3
    48be:	2a1f      	cmp	r2, #31
    48c0:	dd15      	ble.n	48ee <__aeabi_ui2d+0x42>
    48c2:	4a14      	ldr	r2, [pc, #80]	; (4914 <__aeabi_ui2d+0x68>)
    48c4:	1ad2      	subs	r2, r2, r3
    48c6:	4094      	lsls	r4, r2
    48c8:	2200      	movs	r2, #0
    48ca:	0324      	lsls	r4, r4, #12
    48cc:	055b      	lsls	r3, r3, #21
    48ce:	0b24      	lsrs	r4, r4, #12
    48d0:	0d5b      	lsrs	r3, r3, #21
    48d2:	2100      	movs	r1, #0
    48d4:	0010      	movs	r0, r2
    48d6:	0324      	lsls	r4, r4, #12
    48d8:	0d0a      	lsrs	r2, r1, #20
    48da:	0b24      	lsrs	r4, r4, #12
    48dc:	0512      	lsls	r2, r2, #20
    48de:	4322      	orrs	r2, r4
    48e0:	4c0d      	ldr	r4, [pc, #52]	; (4918 <__aeabi_ui2d+0x6c>)
    48e2:	051b      	lsls	r3, r3, #20
    48e4:	4022      	ands	r2, r4
    48e6:	4313      	orrs	r3, r2
    48e8:	005b      	lsls	r3, r3, #1
    48ea:	0859      	lsrs	r1, r3, #1
    48ec:	bd10      	pop	{r4, pc}
    48ee:	0021      	movs	r1, r4
    48f0:	4091      	lsls	r1, r2
    48f2:	000a      	movs	r2, r1
    48f4:	210b      	movs	r1, #11
    48f6:	1a08      	subs	r0, r1, r0
    48f8:	40c4      	lsrs	r4, r0
    48fa:	055b      	lsls	r3, r3, #21
    48fc:	0324      	lsls	r4, r4, #12
    48fe:	0b24      	lsrs	r4, r4, #12
    4900:	0d5b      	lsrs	r3, r3, #21
    4902:	e7e6      	b.n	48d2 <__aeabi_ui2d+0x26>
    4904:	2300      	movs	r3, #0
    4906:	2400      	movs	r4, #0
    4908:	2200      	movs	r2, #0
    490a:	e7e2      	b.n	48d2 <__aeabi_ui2d+0x26>
    490c:	0000041e 	.word	0x0000041e
    4910:	00000433 	.word	0x00000433
    4914:	00000413 	.word	0x00000413
    4918:	800fffff 	.word	0x800fffff

0000491c <__aeabi_d2f>:
    491c:	b5f0      	push	{r4, r5, r6, r7, lr}
    491e:	004c      	lsls	r4, r1, #1
    4920:	0d64      	lsrs	r4, r4, #21
    4922:	030b      	lsls	r3, r1, #12
    4924:	1c62      	adds	r2, r4, #1
    4926:	0f45      	lsrs	r5, r0, #29
    4928:	0a5b      	lsrs	r3, r3, #9
    492a:	0552      	lsls	r2, r2, #21
    492c:	432b      	orrs	r3, r5
    492e:	0fc9      	lsrs	r1, r1, #31
    4930:	00c5      	lsls	r5, r0, #3
    4932:	0d52      	lsrs	r2, r2, #21
    4934:	2a01      	cmp	r2, #1
    4936:	dd28      	ble.n	498a <__aeabi_d2f+0x6e>
    4938:	4a3a      	ldr	r2, [pc, #232]	; (4a24 <__aeabi_d2f+0x108>)
    493a:	18a6      	adds	r6, r4, r2
    493c:	2efe      	cmp	r6, #254	; 0xfe
    493e:	dc1b      	bgt.n	4978 <__aeabi_d2f+0x5c>
    4940:	2e00      	cmp	r6, #0
    4942:	dd3e      	ble.n	49c2 <__aeabi_d2f+0xa6>
    4944:	0180      	lsls	r0, r0, #6
    4946:	0002      	movs	r2, r0
    4948:	1e50      	subs	r0, r2, #1
    494a:	4182      	sbcs	r2, r0
    494c:	0f6d      	lsrs	r5, r5, #29
    494e:	432a      	orrs	r2, r5
    4950:	00db      	lsls	r3, r3, #3
    4952:	4313      	orrs	r3, r2
    4954:	075a      	lsls	r2, r3, #29
    4956:	d004      	beq.n	4962 <__aeabi_d2f+0x46>
    4958:	220f      	movs	r2, #15
    495a:	401a      	ands	r2, r3
    495c:	2a04      	cmp	r2, #4
    495e:	d000      	beq.n	4962 <__aeabi_d2f+0x46>
    4960:	3304      	adds	r3, #4
    4962:	2280      	movs	r2, #128	; 0x80
    4964:	04d2      	lsls	r2, r2, #19
    4966:	401a      	ands	r2, r3
    4968:	d05a      	beq.n	4a20 <__aeabi_d2f+0x104>
    496a:	3601      	adds	r6, #1
    496c:	2eff      	cmp	r6, #255	; 0xff
    496e:	d003      	beq.n	4978 <__aeabi_d2f+0x5c>
    4970:	019b      	lsls	r3, r3, #6
    4972:	0a5b      	lsrs	r3, r3, #9
    4974:	b2f4      	uxtb	r4, r6
    4976:	e001      	b.n	497c <__aeabi_d2f+0x60>
    4978:	24ff      	movs	r4, #255	; 0xff
    497a:	2300      	movs	r3, #0
    497c:	0258      	lsls	r0, r3, #9
    497e:	05e4      	lsls	r4, r4, #23
    4980:	0a40      	lsrs	r0, r0, #9
    4982:	07c9      	lsls	r1, r1, #31
    4984:	4320      	orrs	r0, r4
    4986:	4308      	orrs	r0, r1
    4988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498a:	2c00      	cmp	r4, #0
    498c:	d007      	beq.n	499e <__aeabi_d2f+0x82>
    498e:	431d      	orrs	r5, r3
    4990:	d0f2      	beq.n	4978 <__aeabi_d2f+0x5c>
    4992:	2080      	movs	r0, #128	; 0x80
    4994:	00db      	lsls	r3, r3, #3
    4996:	0480      	lsls	r0, r0, #18
    4998:	4303      	orrs	r3, r0
    499a:	26ff      	movs	r6, #255	; 0xff
    499c:	e7da      	b.n	4954 <__aeabi_d2f+0x38>
    499e:	432b      	orrs	r3, r5
    49a0:	d003      	beq.n	49aa <__aeabi_d2f+0x8e>
    49a2:	2305      	movs	r3, #5
    49a4:	08db      	lsrs	r3, r3, #3
    49a6:	2cff      	cmp	r4, #255	; 0xff
    49a8:	d003      	beq.n	49b2 <__aeabi_d2f+0x96>
    49aa:	025b      	lsls	r3, r3, #9
    49ac:	0a5b      	lsrs	r3, r3, #9
    49ae:	b2e4      	uxtb	r4, r4
    49b0:	e7e4      	b.n	497c <__aeabi_d2f+0x60>
    49b2:	2b00      	cmp	r3, #0
    49b4:	d032      	beq.n	4a1c <__aeabi_d2f+0x100>
    49b6:	2080      	movs	r0, #128	; 0x80
    49b8:	03c0      	lsls	r0, r0, #15
    49ba:	4303      	orrs	r3, r0
    49bc:	025b      	lsls	r3, r3, #9
    49be:	0a5b      	lsrs	r3, r3, #9
    49c0:	e7dc      	b.n	497c <__aeabi_d2f+0x60>
    49c2:	0032      	movs	r2, r6
    49c4:	3217      	adds	r2, #23
    49c6:	db14      	blt.n	49f2 <__aeabi_d2f+0xd6>
    49c8:	2280      	movs	r2, #128	; 0x80
    49ca:	271e      	movs	r7, #30
    49cc:	0412      	lsls	r2, r2, #16
    49ce:	4313      	orrs	r3, r2
    49d0:	1bbf      	subs	r7, r7, r6
    49d2:	2f1f      	cmp	r7, #31
    49d4:	dc0f      	bgt.n	49f6 <__aeabi_d2f+0xda>
    49d6:	4a14      	ldr	r2, [pc, #80]	; (4a28 <__aeabi_d2f+0x10c>)
    49d8:	4694      	mov	ip, r2
    49da:	4464      	add	r4, ip
    49dc:	002a      	movs	r2, r5
    49de:	40a5      	lsls	r5, r4
    49e0:	002e      	movs	r6, r5
    49e2:	40a3      	lsls	r3, r4
    49e4:	1e75      	subs	r5, r6, #1
    49e6:	41ae      	sbcs	r6, r5
    49e8:	40fa      	lsrs	r2, r7
    49ea:	4333      	orrs	r3, r6
    49ec:	4313      	orrs	r3, r2
    49ee:	2600      	movs	r6, #0
    49f0:	e7b0      	b.n	4954 <__aeabi_d2f+0x38>
    49f2:	2400      	movs	r4, #0
    49f4:	e7d5      	b.n	49a2 <__aeabi_d2f+0x86>
    49f6:	2202      	movs	r2, #2
    49f8:	4252      	negs	r2, r2
    49fa:	1b96      	subs	r6, r2, r6
    49fc:	001a      	movs	r2, r3
    49fe:	40f2      	lsrs	r2, r6
    4a00:	2f20      	cmp	r7, #32
    4a02:	d009      	beq.n	4a18 <__aeabi_d2f+0xfc>
    4a04:	4809      	ldr	r0, [pc, #36]	; (4a2c <__aeabi_d2f+0x110>)
    4a06:	4684      	mov	ip, r0
    4a08:	4464      	add	r4, ip
    4a0a:	40a3      	lsls	r3, r4
    4a0c:	432b      	orrs	r3, r5
    4a0e:	1e5d      	subs	r5, r3, #1
    4a10:	41ab      	sbcs	r3, r5
    4a12:	2600      	movs	r6, #0
    4a14:	4313      	orrs	r3, r2
    4a16:	e79d      	b.n	4954 <__aeabi_d2f+0x38>
    4a18:	2300      	movs	r3, #0
    4a1a:	e7f7      	b.n	4a0c <__aeabi_d2f+0xf0>
    4a1c:	2300      	movs	r3, #0
    4a1e:	e7ad      	b.n	497c <__aeabi_d2f+0x60>
    4a20:	0034      	movs	r4, r6
    4a22:	e7bf      	b.n	49a4 <__aeabi_d2f+0x88>
    4a24:	fffffc80 	.word	0xfffffc80
    4a28:	fffffc82 	.word	0xfffffc82
    4a2c:	fffffca2 	.word	0xfffffca2

00004a30 <__clzsi2>:
    4a30:	211c      	movs	r1, #28
    4a32:	2301      	movs	r3, #1
    4a34:	041b      	lsls	r3, r3, #16
    4a36:	4298      	cmp	r0, r3
    4a38:	d301      	bcc.n	4a3e <__clzsi2+0xe>
    4a3a:	0c00      	lsrs	r0, r0, #16
    4a3c:	3910      	subs	r1, #16
    4a3e:	0a1b      	lsrs	r3, r3, #8
    4a40:	4298      	cmp	r0, r3
    4a42:	d301      	bcc.n	4a48 <__clzsi2+0x18>
    4a44:	0a00      	lsrs	r0, r0, #8
    4a46:	3908      	subs	r1, #8
    4a48:	091b      	lsrs	r3, r3, #4
    4a4a:	4298      	cmp	r0, r3
    4a4c:	d301      	bcc.n	4a52 <__clzsi2+0x22>
    4a4e:	0900      	lsrs	r0, r0, #4
    4a50:	3904      	subs	r1, #4
    4a52:	a202      	add	r2, pc, #8	; (adr r2, 4a5c <__clzsi2+0x2c>)
    4a54:	5c10      	ldrb	r0, [r2, r0]
    4a56:	1840      	adds	r0, r0, r1
    4a58:	4770      	bx	lr
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	02020304 	.word	0x02020304
    4a60:	01010101 	.word	0x01010101
	...

00004a6c <__clzdi2>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	2900      	cmp	r1, #0
    4a70:	d103      	bne.n	4a7a <__clzdi2+0xe>
    4a72:	f7ff ffdd 	bl	4a30 <__clzsi2>
    4a76:	3020      	adds	r0, #32
    4a78:	e002      	b.n	4a80 <__clzdi2+0x14>
    4a7a:	1c08      	adds	r0, r1, #0
    4a7c:	f7ff ffd8 	bl	4a30 <__clzsi2>
    4a80:	bd10      	pop	{r4, pc}
    4a82:	46c0      	nop			; (mov r8, r8)

00004a84 <__divdi3>:
    4a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a86:	464e      	mov	r6, r9
    4a88:	4657      	mov	r7, sl
    4a8a:	46de      	mov	lr, fp
    4a8c:	4645      	mov	r5, r8
    4a8e:	b5e0      	push	{r5, r6, r7, lr}
    4a90:	0006      	movs	r6, r0
    4a92:	2000      	movs	r0, #0
    4a94:	000f      	movs	r7, r1
    4a96:	b083      	sub	sp, #12
    4a98:	0019      	movs	r1, r3
    4a9a:	4681      	mov	r9, r0
    4a9c:	2f00      	cmp	r7, #0
    4a9e:	da00      	bge.n	4aa2 <__divdi3+0x1e>
    4aa0:	e08c      	b.n	4bbc <__divdi3+0x138>
    4aa2:	2900      	cmp	r1, #0
    4aa4:	da00      	bge.n	4aa8 <__divdi3+0x24>
    4aa6:	e080      	b.n	4baa <__divdi3+0x126>
    4aa8:	0034      	movs	r4, r6
    4aaa:	003d      	movs	r5, r7
    4aac:	4692      	mov	sl, r2
    4aae:	4698      	mov	r8, r3
    4ab0:	42bb      	cmp	r3, r7
    4ab2:	d869      	bhi.n	4b88 <__divdi3+0x104>
    4ab4:	d066      	beq.n	4b84 <__divdi3+0x100>
    4ab6:	4641      	mov	r1, r8
    4ab8:	4650      	mov	r0, sl
    4aba:	f7ff ffd7 	bl	4a6c <__clzdi2>
    4abe:	4683      	mov	fp, r0
    4ac0:	0039      	movs	r1, r7
    4ac2:	0030      	movs	r0, r6
    4ac4:	f7ff ffd2 	bl	4a6c <__clzdi2>
    4ac8:	465b      	mov	r3, fp
    4aca:	1a1b      	subs	r3, r3, r0
    4acc:	469c      	mov	ip, r3
    4ace:	3b20      	subs	r3, #32
    4ad0:	469b      	mov	fp, r3
    4ad2:	d500      	bpl.n	4ad6 <__divdi3+0x52>
    4ad4:	e087      	b.n	4be6 <__divdi3+0x162>
    4ad6:	4651      	mov	r1, sl
    4ad8:	4658      	mov	r0, fp
    4ada:	4081      	lsls	r1, r0
    4adc:	000b      	movs	r3, r1
    4ade:	4651      	mov	r1, sl
    4ae0:	4660      	mov	r0, ip
    4ae2:	4081      	lsls	r1, r0
    4ae4:	000a      	movs	r2, r1
    4ae6:	42bb      	cmp	r3, r7
    4ae8:	d900      	bls.n	4aec <__divdi3+0x68>
    4aea:	e072      	b.n	4bd2 <__divdi3+0x14e>
    4aec:	d06e      	beq.n	4bcc <__divdi3+0x148>
    4aee:	0034      	movs	r4, r6
    4af0:	003d      	movs	r5, r7
    4af2:	4659      	mov	r1, fp
    4af4:	1aa4      	subs	r4, r4, r2
    4af6:	419d      	sbcs	r5, r3
    4af8:	2900      	cmp	r1, #0
    4afa:	da00      	bge.n	4afe <__divdi3+0x7a>
    4afc:	e08a      	b.n	4c14 <__divdi3+0x190>
    4afe:	2100      	movs	r1, #0
    4b00:	2000      	movs	r0, #0
    4b02:	2601      	movs	r6, #1
    4b04:	9000      	str	r0, [sp, #0]
    4b06:	9101      	str	r1, [sp, #4]
    4b08:	4659      	mov	r1, fp
    4b0a:	408e      	lsls	r6, r1
    4b0c:	9601      	str	r6, [sp, #4]
    4b0e:	4661      	mov	r1, ip
    4b10:	2601      	movs	r6, #1
    4b12:	408e      	lsls	r6, r1
    4b14:	4661      	mov	r1, ip
    4b16:	9600      	str	r6, [sp, #0]
    4b18:	2900      	cmp	r1, #0
    4b1a:	d061      	beq.n	4be0 <__divdi3+0x15c>
    4b1c:	07d9      	lsls	r1, r3, #31
    4b1e:	0856      	lsrs	r6, r2, #1
    4b20:	430e      	orrs	r6, r1
    4b22:	085f      	lsrs	r7, r3, #1
    4b24:	4661      	mov	r1, ip
    4b26:	2201      	movs	r2, #1
    4b28:	2300      	movs	r3, #0
    4b2a:	e00c      	b.n	4b46 <__divdi3+0xc2>
    4b2c:	42af      	cmp	r7, r5
    4b2e:	d101      	bne.n	4b34 <__divdi3+0xb0>
    4b30:	42a6      	cmp	r6, r4
    4b32:	d80a      	bhi.n	4b4a <__divdi3+0xc6>
    4b34:	1ba4      	subs	r4, r4, r6
    4b36:	41bd      	sbcs	r5, r7
    4b38:	1924      	adds	r4, r4, r4
    4b3a:	416d      	adcs	r5, r5
    4b3c:	3901      	subs	r1, #1
    4b3e:	18a4      	adds	r4, r4, r2
    4b40:	415d      	adcs	r5, r3
    4b42:	2900      	cmp	r1, #0
    4b44:	d006      	beq.n	4b54 <__divdi3+0xd0>
    4b46:	42af      	cmp	r7, r5
    4b48:	d9f0      	bls.n	4b2c <__divdi3+0xa8>
    4b4a:	3901      	subs	r1, #1
    4b4c:	1924      	adds	r4, r4, r4
    4b4e:	416d      	adcs	r5, r5
    4b50:	2900      	cmp	r1, #0
    4b52:	d1f8      	bne.n	4b46 <__divdi3+0xc2>
    4b54:	465b      	mov	r3, fp
    4b56:	9800      	ldr	r0, [sp, #0]
    4b58:	9901      	ldr	r1, [sp, #4]
    4b5a:	1900      	adds	r0, r0, r4
    4b5c:	4169      	adcs	r1, r5
    4b5e:	2b00      	cmp	r3, #0
    4b60:	db4d      	blt.n	4bfe <__divdi3+0x17a>
    4b62:	002e      	movs	r6, r5
    4b64:	40de      	lsrs	r6, r3
    4b66:	4663      	mov	r3, ip
    4b68:	002c      	movs	r4, r5
    4b6a:	40dc      	lsrs	r4, r3
    4b6c:	465b      	mov	r3, fp
    4b6e:	2b00      	cmp	r3, #0
    4b70:	db5b      	blt.n	4c2a <__divdi3+0x1a6>
    4b72:	0034      	movs	r4, r6
    4b74:	409c      	lsls	r4, r3
    4b76:	0023      	movs	r3, r4
    4b78:	4664      	mov	r4, ip
    4b7a:	40a6      	lsls	r6, r4
    4b7c:	0032      	movs	r2, r6
    4b7e:	1a80      	subs	r0, r0, r2
    4b80:	4199      	sbcs	r1, r3
    4b82:	e003      	b.n	4b8c <__divdi3+0x108>
    4b84:	42b2      	cmp	r2, r6
    4b86:	d996      	bls.n	4ab6 <__divdi3+0x32>
    4b88:	2000      	movs	r0, #0
    4b8a:	2100      	movs	r1, #0
    4b8c:	464b      	mov	r3, r9
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d004      	beq.n	4b9c <__divdi3+0x118>
    4b92:	0003      	movs	r3, r0
    4b94:	000c      	movs	r4, r1
    4b96:	2100      	movs	r1, #0
    4b98:	4258      	negs	r0, r3
    4b9a:	41a1      	sbcs	r1, r4
    4b9c:	b003      	add	sp, #12
    4b9e:	bc3c      	pop	{r2, r3, r4, r5}
    4ba0:	4690      	mov	r8, r2
    4ba2:	4699      	mov	r9, r3
    4ba4:	46a2      	mov	sl, r4
    4ba6:	46ab      	mov	fp, r5
    4ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4baa:	4649      	mov	r1, r9
    4bac:	43c9      	mvns	r1, r1
    4bae:	0010      	movs	r0, r2
    4bb0:	4689      	mov	r9, r1
    4bb2:	0019      	movs	r1, r3
    4bb4:	2300      	movs	r3, #0
    4bb6:	4242      	negs	r2, r0
    4bb8:	418b      	sbcs	r3, r1
    4bba:	e775      	b.n	4aa8 <__divdi3+0x24>
    4bbc:	0034      	movs	r4, r6
    4bbe:	003d      	movs	r5, r7
    4bc0:	3801      	subs	r0, #1
    4bc2:	2700      	movs	r7, #0
    4bc4:	4266      	negs	r6, r4
    4bc6:	41af      	sbcs	r7, r5
    4bc8:	4681      	mov	r9, r0
    4bca:	e76a      	b.n	4aa2 <__divdi3+0x1e>
    4bcc:	42b1      	cmp	r1, r6
    4bce:	d800      	bhi.n	4bd2 <__divdi3+0x14e>
    4bd0:	e78d      	b.n	4aee <__divdi3+0x6a>
    4bd2:	2100      	movs	r1, #0
    4bd4:	2000      	movs	r0, #0
    4bd6:	9000      	str	r0, [sp, #0]
    4bd8:	9101      	str	r1, [sp, #4]
    4bda:	4661      	mov	r1, ip
    4bdc:	2900      	cmp	r1, #0
    4bde:	d19d      	bne.n	4b1c <__divdi3+0x98>
    4be0:	9800      	ldr	r0, [sp, #0]
    4be2:	9901      	ldr	r1, [sp, #4]
    4be4:	e7d2      	b.n	4b8c <__divdi3+0x108>
    4be6:	4662      	mov	r2, ip
    4be8:	4640      	mov	r0, r8
    4bea:	2320      	movs	r3, #32
    4bec:	4651      	mov	r1, sl
    4bee:	4090      	lsls	r0, r2
    4bf0:	1a9b      	subs	r3, r3, r2
    4bf2:	40d9      	lsrs	r1, r3
    4bf4:	0003      	movs	r3, r0
    4bf6:	9100      	str	r1, [sp, #0]
    4bf8:	9900      	ldr	r1, [sp, #0]
    4bfa:	430b      	orrs	r3, r1
    4bfc:	e76f      	b.n	4ade <__divdi3+0x5a>
    4bfe:	4662      	mov	r2, ip
    4c00:	2320      	movs	r3, #32
    4c02:	1a9b      	subs	r3, r3, r2
    4c04:	002a      	movs	r2, r5
    4c06:	409a      	lsls	r2, r3
    4c08:	0026      	movs	r6, r4
    4c0a:	0013      	movs	r3, r2
    4c0c:	4662      	mov	r2, ip
    4c0e:	40d6      	lsrs	r6, r2
    4c10:	431e      	orrs	r6, r3
    4c12:	e7a8      	b.n	4b66 <__divdi3+0xe2>
    4c14:	4661      	mov	r1, ip
    4c16:	2620      	movs	r6, #32
    4c18:	2701      	movs	r7, #1
    4c1a:	1a76      	subs	r6, r6, r1
    4c1c:	2000      	movs	r0, #0
    4c1e:	2100      	movs	r1, #0
    4c20:	40f7      	lsrs	r7, r6
    4c22:	9000      	str	r0, [sp, #0]
    4c24:	9101      	str	r1, [sp, #4]
    4c26:	9701      	str	r7, [sp, #4]
    4c28:	e771      	b.n	4b0e <__divdi3+0x8a>
    4c2a:	4662      	mov	r2, ip
    4c2c:	2320      	movs	r3, #32
    4c2e:	0035      	movs	r5, r6
    4c30:	4094      	lsls	r4, r2
    4c32:	1a9b      	subs	r3, r3, r2
    4c34:	40dd      	lsrs	r5, r3
    4c36:	0023      	movs	r3, r4
    4c38:	432b      	orrs	r3, r5
    4c3a:	e79d      	b.n	4b78 <__divdi3+0xf4>

00004c3c <__libc_init_array>:
    4c3c:	b570      	push	{r4, r5, r6, lr}
    4c3e:	2600      	movs	r6, #0
    4c40:	4d0c      	ldr	r5, [pc, #48]	; (4c74 <__libc_init_array+0x38>)
    4c42:	4c0d      	ldr	r4, [pc, #52]	; (4c78 <__libc_init_array+0x3c>)
    4c44:	1b64      	subs	r4, r4, r5
    4c46:	10a4      	asrs	r4, r4, #2
    4c48:	42a6      	cmp	r6, r4
    4c4a:	d109      	bne.n	4c60 <__libc_init_array+0x24>
    4c4c:	2600      	movs	r6, #0
    4c4e:	f000 f89f 	bl	4d90 <_init>
    4c52:	4d0a      	ldr	r5, [pc, #40]	; (4c7c <__libc_init_array+0x40>)
    4c54:	4c0a      	ldr	r4, [pc, #40]	; (4c80 <__libc_init_array+0x44>)
    4c56:	1b64      	subs	r4, r4, r5
    4c58:	10a4      	asrs	r4, r4, #2
    4c5a:	42a6      	cmp	r6, r4
    4c5c:	d105      	bne.n	4c6a <__libc_init_array+0x2e>
    4c5e:	bd70      	pop	{r4, r5, r6, pc}
    4c60:	00b3      	lsls	r3, r6, #2
    4c62:	58eb      	ldr	r3, [r5, r3]
    4c64:	4798      	blx	r3
    4c66:	3601      	adds	r6, #1
    4c68:	e7ee      	b.n	4c48 <__libc_init_array+0xc>
    4c6a:	00b3      	lsls	r3, r6, #2
    4c6c:	58eb      	ldr	r3, [r5, r3]
    4c6e:	4798      	blx	r3
    4c70:	3601      	adds	r6, #1
    4c72:	e7f2      	b.n	4c5a <__libc_init_array+0x1e>
    4c74:	00004d9c 	.word	0x00004d9c
    4c78:	00004d9c 	.word	0x00004d9c
    4c7c:	00004d9c 	.word	0x00004d9c
    4c80:	00004da0 	.word	0x00004da0

00004c84 <memcpy>:
    4c84:	2300      	movs	r3, #0
    4c86:	b510      	push	{r4, lr}
    4c88:	429a      	cmp	r2, r3
    4c8a:	d100      	bne.n	4c8e <memcpy+0xa>
    4c8c:	bd10      	pop	{r4, pc}
    4c8e:	5ccc      	ldrb	r4, [r1, r3]
    4c90:	54c4      	strb	r4, [r0, r3]
    4c92:	3301      	adds	r3, #1
    4c94:	e7f8      	b.n	4c88 <memcpy+0x4>

00004c96 <memset>:
    4c96:	0003      	movs	r3, r0
    4c98:	1882      	adds	r2, r0, r2
    4c9a:	4293      	cmp	r3, r2
    4c9c:	d100      	bne.n	4ca0 <memset+0xa>
    4c9e:	4770      	bx	lr
    4ca0:	7019      	strb	r1, [r3, #0]
    4ca2:	3301      	adds	r3, #1
    4ca4:	e7f9      	b.n	4c9a <memset+0x4>
    4ca6:	0000      	movs	r0, r0
    4ca8:	00000330 	.word	0x00000330
    4cac:	0000033e 	.word	0x0000033e
    4cb0:	0000034c 	.word	0x0000034c
    4cb4:	0000035a 	.word	0x0000035a
    4cb8:	00000368 	.word	0x00000368
    4cbc:	00004905 	.word	0x00004905
    4cc0:	42000000 	.word	0x42000000
    4cc4:	42000400 	.word	0x42000400
    4cc8:	42000800 	.word	0x42000800
    4ccc:	42000c00 	.word	0x42000c00
    4cd0:	42001000 	.word	0x42001000
    4cd4:	43000400 	.word	0x43000400
    4cd8:	0000227a 	.word	0x0000227a
    4cdc:	000022f6 	.word	0x000022f6
    4ce0:	000022f6 	.word	0x000022f6
    4ce4:	0000229a 	.word	0x0000229a
    4ce8:	00002294 	.word	0x00002294
    4cec:	000022a0 	.word	0x000022a0
    4cf0:	00002280 	.word	0x00002280
    4cf4:	000022a6 	.word	0x000022a6
    4cf8:	000022dc 	.word	0x000022dc
    4cfc:	00002414 	.word	0x00002414
    4d00:	00002422 	.word	0x00002422
    4d04:	00002430 	.word	0x00002430
    4d08:	0000243e 	.word	0x0000243e
    4d0c:	0000244c 	.word	0x0000244c
    4d10:	00003824 	.word	0x00003824
    4d14:	00003806 	.word	0x00003806
    4d18:	000037c0 	.word	0x000037c0
    4d1c:	000036de 	.word	0x000036de
    4d20:	000037c0 	.word	0x000037c0
    4d24:	000037f8 	.word	0x000037f8
    4d28:	000037c0 	.word	0x000037c0
    4d2c:	000036de 	.word	0x000036de
    4d30:	00003806 	.word	0x00003806
    4d34:	00003806 	.word	0x00003806
    4d38:	000037f8 	.word	0x000037f8
    4d3c:	000036de 	.word	0x000036de
    4d40:	000036d6 	.word	0x000036d6
    4d44:	000036d6 	.word	0x000036d6
    4d48:	000036d6 	.word	0x000036d6
    4d4c:	00003a3c 	.word	0x00003a3c
    4d50:	00003e84 	.word	0x00003e84
    4d54:	00003d44 	.word	0x00003d44
    4d58:	00003d44 	.word	0x00003d44
    4d5c:	00003d40 	.word	0x00003d40
    4d60:	00003e5c 	.word	0x00003e5c
    4d64:	00003e5c 	.word	0x00003e5c
    4d68:	00003e4e 	.word	0x00003e4e
    4d6c:	00003d40 	.word	0x00003d40
    4d70:	00003e5c 	.word	0x00003e5c
    4d74:	00003e4e 	.word	0x00003e4e
    4d78:	00003e5c 	.word	0x00003e5c
    4d7c:	00003d40 	.word	0x00003d40
    4d80:	00003e64 	.word	0x00003e64
    4d84:	00003e64 	.word	0x00003e64
    4d88:	00003e64 	.word	0x00003e64
    4d8c:	00004068 	.word	0x00004068

00004d90 <_init>:
    4d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d96:	bc08      	pop	{r3}
    4d98:	469e      	mov	lr, r3
    4d9a:	4770      	bx	lr

00004d9c <__init_array_start>:
    4d9c:	000000dd 	.word	0x000000dd

00004da0 <_fini>:
    4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4da2:	46c0      	nop			; (mov r8, r8)
    4da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4da6:	bc08      	pop	{r3}
    4da8:	469e      	mov	lr, r3
    4daa:	4770      	bx	lr

00004dac <__fini_array_start>:
    4dac:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....
