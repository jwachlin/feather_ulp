
Feather_ULP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bc0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005bc0  00005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  00005bc8  00020000  2**1
                  CONTENTS, ALLOC, LOAD, CODE
  3 .lpram        00000000  30000000  30000000  00020010  2**0
                  CONTENTS
  4 .bss          000000e0  20000010  00005bd8  00020010  2**2
                  ALLOC
  5 .stack        00002000  200000f0  00005cb8  00020010  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033da2  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000373f  00000000  00000000  00053e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025b2  00000000  00000000  00057572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000758  00000000  00000000  00059b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0005a27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007f6b  00000000  00000000  0005a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f07a  00000000  00000000  0006280f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a002  00000000  00000000  00071889  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001a48  00000000  00000000  0010b88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 20 00 20 65 34 00 00 f9 34 00 00 f9 34 00 00     . . e4...4...4..
	...
      2c:	f9 34 00 00 00 00 00 00 00 00 00 00 f9 34 00 00     .4...........4..
      3c:	f9 34 00 00 f9 34 00 00 75 25 00 00 05 0b 00 00     .4...4..u%......
      4c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 f9 34 00 00     .4...4...4...4..
      5c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 f9 34 00 00     .4...4...4...4..
      6c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 f9 34 00 00     .4...4...4...4..
      7c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 f9 34 00 00     .4...4...4...4..
      8c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 e5 02 00 00     .4...4...4......
      9c:	f9 34 00 00 f9 34 00 00 f9 34 00 00 f9 34 00 00     .4...4...4...4..
      ac:	f9 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00005bc8 	.word	0x00005bc8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00005bc8 	.word	0x00005bc8
     10c:	00005bc8 	.word	0x00005bc8
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	8c1b      	ldrh	r3, [r3, #32]
     126:	b29b      	uxth	r3, r3
     128:	2b00      	cmp	r3, #0
     12a:	d001      	beq.n	130 <adc_is_syncing+0x1c>
		return true;
     12c:	2301      	movs	r3, #1
     12e:	e000      	b.n	132 <adc_is_syncing+0x1e>
	}

	return false;
     130:	2300      	movs	r3, #0
}
     132:	0018      	movs	r0, r3
     134:	46bd      	mov	sp, r7
     136:	b004      	add	sp, #16
     138:	bd80      	pop	{r7, pc}
	...

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7e1b      	ldrb	r3, [r3, #24]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	711a      	strb	r2, [r3, #4]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b47      	ldr	r3, [pc, #284]	; (2d8 <_adc_interrupt_handler+0x130>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	799b      	ldrb	r3, [r3, #6]
     1c6:	b2da      	uxtb	r2, r3
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	795b      	ldrb	r3, [r3, #5]
     1ce:	b2db      	uxtb	r3, r3
     1d0:	4013      	ands	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1d6:	68bb      	ldr	r3, [r7, #8]
     1d8:	2201      	movs	r2, #1
     1da:	4013      	ands	r3, r2
     1dc:	d045      	beq.n	26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2201      	movs	r2, #1
     1e4:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1e6:	68fb      	ldr	r3, [r7, #12]
     1e8:	695b      	ldr	r3, [r3, #20]
     1ea:	1c99      	adds	r1, r3, #2
     1ec:	68fa      	ldr	r2, [r7, #12]
     1ee:	6151      	str	r1, [r2, #20]
     1f0:	68fa      	ldr	r2, [r7, #12]
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     1f6:	b292      	uxth	r2, r2
     1f8:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     1fa:	68fb      	ldr	r3, [r7, #12]
     1fc:	8b1b      	ldrh	r3, [r3, #24]
     1fe:	b29b      	uxth	r3, r3
     200:	3b01      	subs	r3, #1
     202:	b29b      	uxth	r3, r3
     204:	68fa      	ldr	r2, [r7, #12]
     206:	1c19      	adds	r1, r3, #0
     208:	8311      	strh	r1, [r2, #24]
     20a:	2b00      	cmp	r3, #0
     20c:	d00f      	beq.n	22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     20e:	68fb      	ldr	r3, [r7, #12]
     210:	7f5b      	ldrb	r3, [r3, #29]
     212:	2b00      	cmp	r3, #0
     214:	d029      	beq.n	26a <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     216:	68fb      	ldr	r3, [r7, #12]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	79db      	ldrb	r3, [r3, #7]
     21c:	b2db      	uxtb	r3, r3
     21e:	b25b      	sxtb	r3, r3
     220:	2b00      	cmp	r3, #0
     222:	db22      	blt.n	26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     224:	68fb      	ldr	r3, [r7, #12]
     226:	0018      	movs	r0, r3
     228:	4b2c      	ldr	r3, [pc, #176]	; (2dc <_adc_interrupt_handler+0x134>)
     22a:	4798      	blx	r3
     22c:	e01d      	b.n	26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     22e:	68fb      	ldr	r3, [r7, #12]
     230:	2101      	movs	r1, #1
     232:	0018      	movs	r0, r3
     234:	4b2a      	ldr	r3, [pc, #168]	; (2e0 <_adc_interrupt_handler+0x138>)
     236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	7f1b      	ldrb	r3, [r3, #28]
     23c:	b2db      	uxtb	r3, r3
     23e:	2b05      	cmp	r3, #5
     240:	d113      	bne.n	26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     242:	68fb      	ldr	r3, [r7, #12]
     244:	2200      	movs	r2, #0
     246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	7edb      	ldrb	r3, [r3, #27]
     24c:	001a      	movs	r2, r3
     24e:	2301      	movs	r3, #1
     250:	4013      	ands	r3, r2
     252:	d00a      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     254:	68fb      	ldr	r3, [r7, #12]
     256:	7e9b      	ldrb	r3, [r3, #26]
     258:	001a      	movs	r2, r3
     25a:	2301      	movs	r3, #1
     25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     25e:	d004      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     260:	68fb      	ldr	r3, [r7, #12]
     262:	689b      	ldr	r3, [r3, #8]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	0010      	movs	r0, r2
     268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	2204      	movs	r2, #4
     26e:	4013      	ands	r3, r2
     270:	d014      	beq.n	29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2204      	movs	r2, #4
     278:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7edb      	ldrb	r3, [r3, #27]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
     284:	d00a      	beq.n	29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     286:	68fb      	ldr	r3, [r7, #12]
     288:	7e9b      	ldrb	r3, [r3, #26]
     28a:	001a      	movs	r2, r3
     28c:	2302      	movs	r3, #2
     28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     290:	d004      	beq.n	29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     292:	68fb      	ldr	r3, [r7, #12]
     294:	68db      	ldr	r3, [r3, #12]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	0010      	movs	r0, r2
     29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	2202      	movs	r2, #2
     2a0:	4013      	ands	r3, r2
     2a2:	d014      	beq.n	2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7edb      	ldrb	r3, [r3, #27]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	d00a      	beq.n	2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	7e9b      	ldrb	r3, [r3, #26]
     2bc:	001a      	movs	r2, r3
     2be:	2304      	movs	r3, #4
     2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2c2:	d004      	beq.n	2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2c4:	68fb      	ldr	r3, [r7, #12]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	0010      	movs	r0, r2
     2cc:	4798      	blx	r3
		}
	}
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b004      	add	sp, #16
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200000e4 	.word	0x200000e4
     2dc:	0000013d 	.word	0x0000013d
     2e0:	00000185 	.word	0x00000185

000002e4 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     2e4:	b580      	push	{r7, lr}
     2e6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2e8:	2000      	movs	r0, #0
     2ea:	4b02      	ldr	r3, [pc, #8]	; (2f4 <ADC_Handler+0x10>)
     2ec:	4798      	blx	r3
}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	46bd      	mov	sp, r7
     2f2:	bd80      	pop	{r7, pc}
     2f4:	000001a9 	.word	0x000001a9

000002f8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	0002      	movs	r2, r0
     300:	6039      	str	r1, [r7, #0]
     302:	1dfb      	adds	r3, r7, #7
     304:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     306:	1dfb      	adds	r3, r7, #7
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b04      	cmp	r3, #4
     30c:	d827      	bhi.n	35e <system_apb_clock_set_mask+0x66>
     30e:	009a      	lsls	r2, r3, #2
     310:	4b16      	ldr	r3, [pc, #88]	; (36c <system_apb_clock_set_mask+0x74>)
     312:	18d3      	adds	r3, r2, r3
     314:	681b      	ldr	r3, [r3, #0]
     316:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     318:	4b15      	ldr	r3, [pc, #84]	; (370 <system_apb_clock_set_mask+0x78>)
     31a:	4a15      	ldr	r2, [pc, #84]	; (370 <system_apb_clock_set_mask+0x78>)
     31c:	6951      	ldr	r1, [r2, #20]
     31e:	683a      	ldr	r2, [r7, #0]
     320:	430a      	orrs	r2, r1
     322:	615a      	str	r2, [r3, #20]
			break;
     324:	e01d      	b.n	362 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     326:	4b12      	ldr	r3, [pc, #72]	; (370 <system_apb_clock_set_mask+0x78>)
     328:	4a11      	ldr	r2, [pc, #68]	; (370 <system_apb_clock_set_mask+0x78>)
     32a:	6991      	ldr	r1, [r2, #24]
     32c:	683a      	ldr	r2, [r7, #0]
     32e:	430a      	orrs	r2, r1
     330:	619a      	str	r2, [r3, #24]
			break;
     332:	e016      	b.n	362 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     334:	4b0e      	ldr	r3, [pc, #56]	; (370 <system_apb_clock_set_mask+0x78>)
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <system_apb_clock_set_mask+0x78>)
     338:	69d1      	ldr	r1, [r2, #28]
     33a:	683a      	ldr	r2, [r7, #0]
     33c:	430a      	orrs	r2, r1
     33e:	61da      	str	r2, [r3, #28]
			break;
     340:	e00f      	b.n	362 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     342:	4b0b      	ldr	r3, [pc, #44]	; (370 <system_apb_clock_set_mask+0x78>)
     344:	4a0a      	ldr	r2, [pc, #40]	; (370 <system_apb_clock_set_mask+0x78>)
     346:	6a11      	ldr	r1, [r2, #32]
     348:	683a      	ldr	r2, [r7, #0]
     34a:	430a      	orrs	r2, r1
     34c:	621a      	str	r2, [r3, #32]
			break;
     34e:	e008      	b.n	362 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     350:	4b07      	ldr	r3, [pc, #28]	; (370 <system_apb_clock_set_mask+0x78>)
     352:	4a07      	ldr	r2, [pc, #28]	; (370 <system_apb_clock_set_mask+0x78>)
     354:	6a51      	ldr	r1, [r2, #36]	; 0x24
     356:	683a      	ldr	r2, [r7, #0]
     358:	430a      	orrs	r2, r1
     35a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     35c:	e001      	b.n	362 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     35e:	2317      	movs	r3, #23
     360:	e000      	b.n	364 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     362:	2300      	movs	r3, #0
}
     364:	0018      	movs	r0, r3
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}
     36c:	00005aa4 	.word	0x00005aa4
     370:	40000400 	.word	0x40000400

00000374 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     374:	b580      	push	{r7, lr}
     376:	b082      	sub	sp, #8
     378:	af00      	add	r7, sp, #0
     37a:	0002      	movs	r2, r0
     37c:	1dfb      	adds	r3, r7, #7
     37e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <system_interrupt_enable+0x28>)
     382:	1dfa      	adds	r2, r7, #7
     384:	7812      	ldrb	r2, [r2, #0]
     386:	0011      	movs	r1, r2
     388:	221f      	movs	r2, #31
     38a:	400a      	ands	r2, r1
     38c:	2101      	movs	r1, #1
     38e:	4091      	lsls	r1, r2
     390:	000a      	movs	r2, r1
     392:	601a      	str	r2, [r3, #0]
}
     394:	46c0      	nop			; (mov r8, r8)
     396:	46bd      	mov	sp, r7
     398:	b002      	add	sp, #8
     39a:	bd80      	pop	{r7, pc}
     39c:	e000e100 	.word	0xe000e100

000003a0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b082      	sub	sp, #8
     3a4:	af00      	add	r7, sp, #0
     3a6:	0002      	movs	r2, r0
     3a8:	1dfb      	adds	r3, r7, #7
     3aa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3ac:	4a07      	ldr	r2, [pc, #28]	; (3cc <system_interrupt_disable+0x2c>)
     3ae:	1dfb      	adds	r3, r7, #7
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	0019      	movs	r1, r3
     3b4:	231f      	movs	r3, #31
     3b6:	400b      	ands	r3, r1
     3b8:	2101      	movs	r1, #1
     3ba:	4099      	lsls	r1, r3
     3bc:	000b      	movs	r3, r1
     3be:	0019      	movs	r1, r3
     3c0:	2380      	movs	r3, #128	; 0x80
     3c2:	50d1      	str	r1, [r2, r3]
}
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	46bd      	mov	sp, r7
     3c8:	b002      	add	sp, #8
     3ca:	bd80      	pop	{r7, pc}
     3cc:	e000e100 	.word	0xe000e100

000003d0 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b084      	sub	sp, #16
     3d4:	af00      	add	r7, sp, #0
     3d6:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	691b      	ldr	r3, [r3, #16]
     3e2:	2b00      	cmp	r3, #0
     3e4:	d001      	beq.n	3ea <rtc_count_is_syncing+0x1a>
		return true;
     3e6:	2301      	movs	r3, #1
     3e8:	e000      	b.n	3ec <rtc_count_is_syncing+0x1c>
	}

	return false;
     3ea:	2300      	movs	r3, #0
}
     3ec:	0018      	movs	r0, r3
     3ee:	46bd      	mov	sp, r7
     3f0:	b004      	add	sp, #16
     3f2:	bd80      	pop	{r7, pc}

000003f4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     3f4:	b580      	push	{r7, lr}
     3f6:	b084      	sub	sp, #16
     3f8:	af00      	add	r7, sp, #0
     3fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     402:	2002      	movs	r0, #2
     404:	4b0d      	ldr	r3, [pc, #52]	; (43c <rtc_count_enable+0x48>)
     406:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     408:	46c0      	nop			; (mov r8, r8)
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	0018      	movs	r0, r3
     40e:	4b0c      	ldr	r3, [pc, #48]	; (440 <rtc_count_enable+0x4c>)
     410:	4798      	blx	r3
     412:	1e03      	subs	r3, r0, #0
     414:	d1f9      	bne.n	40a <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     416:	68fb      	ldr	r3, [r7, #12]
     418:	881b      	ldrh	r3, [r3, #0]
     41a:	b29b      	uxth	r3, r3
     41c:	2202      	movs	r2, #2
     41e:	4313      	orrs	r3, r2
     420:	b29a      	uxth	r2, r3
     422:	68fb      	ldr	r3, [r7, #12]
     424:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     426:	46c0      	nop			; (mov r8, r8)
     428:	687b      	ldr	r3, [r7, #4]
     42a:	0018      	movs	r0, r3
     42c:	4b04      	ldr	r3, [pc, #16]	; (440 <rtc_count_enable+0x4c>)
     42e:	4798      	blx	r3
     430:	1e03      	subs	r3, r0, #0
     432:	d1f9      	bne.n	428 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
     434:	46c0      	nop			; (mov r8, r8)
     436:	46bd      	mov	sp, r7
     438:	b004      	add	sp, #16
     43a:	bd80      	pop	{r7, pc}
     43c:	00000375 	.word	0x00000375
     440:	000003d1 	.word	0x000003d1

00000444 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     444:	b580      	push	{r7, lr}
     446:	b084      	sub	sp, #16
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	681b      	ldr	r3, [r3, #0]
     450:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     452:	2002      	movs	r0, #2
     454:	4b10      	ldr	r3, [pc, #64]	; (498 <rtc_count_disable+0x54>)
     456:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     458:	46c0      	nop			; (mov r8, r8)
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	0018      	movs	r0, r3
     45e:	4b0f      	ldr	r3, [pc, #60]	; (49c <rtc_count_disable+0x58>)
     460:	4798      	blx	r3
     462:	1e03      	subs	r3, r0, #0
     464:	d1f9      	bne.n	45a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     466:	68fb      	ldr	r3, [r7, #12]
     468:	4a0d      	ldr	r2, [pc, #52]	; (4a0 <rtc_count_disable+0x5c>)
     46a:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     46c:	68fb      	ldr	r3, [r7, #12]
     46e:	4a0c      	ldr	r2, [pc, #48]	; (4a0 <rtc_count_disable+0x5c>)
     470:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     472:	68fb      	ldr	r3, [r7, #12]
     474:	881b      	ldrh	r3, [r3, #0]
     476:	b29b      	uxth	r3, r3
     478:	2202      	movs	r2, #2
     47a:	4393      	bics	r3, r2
     47c:	b29a      	uxth	r2, r3
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     482:	46c0      	nop			; (mov r8, r8)
     484:	687b      	ldr	r3, [r7, #4]
     486:	0018      	movs	r0, r3
     488:	4b04      	ldr	r3, [pc, #16]	; (49c <rtc_count_disable+0x58>)
     48a:	4798      	blx	r3
     48c:	1e03      	subs	r3, r0, #0
     48e:	d1f9      	bne.n	484 <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
     490:	46c0      	nop			; (mov r8, r8)
     492:	46bd      	mov	sp, r7
     494:	b004      	add	sp, #16
     496:	bd80      	pop	{r7, pc}
     498:	000003a1 	.word	0x000003a1
     49c:	000003d1 	.word	0x000003d1
     4a0:	ffff81ff 	.word	0xffff81ff

000004a4 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b084      	sub	sp, #16
     4a8:	af00      	add	r7, sp, #0
     4aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	0018      	movs	r0, r3
     4b6:	4b11      	ldr	r3, [pc, #68]	; (4fc <rtc_count_reset+0x58>)
     4b8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	2200      	movs	r2, #0
     4be:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2200      	movs	r2, #0
     4c4:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	0018      	movs	r0, r3
     4cc:	4b0c      	ldr	r3, [pc, #48]	; (500 <rtc_count_reset+0x5c>)
     4ce:	4798      	blx	r3
     4d0:	1e03      	subs	r3, r0, #0
     4d2:	d1f9      	bne.n	4c8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     4d4:	68fb      	ldr	r3, [r7, #12]
     4d6:	881b      	ldrh	r3, [r3, #0]
     4d8:	b29b      	uxth	r3, r3
     4da:	2201      	movs	r2, #1
     4dc:	4313      	orrs	r3, r2
     4de:	b29a      	uxth	r2, r3
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     4e4:	46c0      	nop			; (mov r8, r8)
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	0018      	movs	r0, r3
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <rtc_count_reset+0x5c>)
     4ec:	4798      	blx	r3
     4ee:	1e03      	subs	r3, r0, #0
     4f0:	d1f9      	bne.n	4e6 <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b004      	add	sp, #16
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	00000445 	.word	0x00000445
     500:	000003d1 	.word	0x000003d1

00000504 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     504:	b580      	push	{r7, lr}
     506:	b084      	sub	sp, #16
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
     50c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     50e:	687b      	ldr	r3, [r7, #4]
     510:	681b      	ldr	r3, [r3, #0]
     512:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     514:	683b      	ldr	r3, [r7, #0]
     516:	791b      	ldrb	r3, [r3, #4]
     518:	b29b      	uxth	r3, r3
     51a:	03db      	lsls	r3, r3, #15
     51c:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
     51e:	683b      	ldr	r3, [r7, #0]
     520:	881b      	ldrh	r3, [r3, #0]
     522:	4313      	orrs	r3, r2
     524:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     526:	68bb      	ldr	r3, [r7, #8]
     528:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     52a:	683b      	ldr	r3, [r7, #0]
     52c:	789b      	ldrb	r3, [r3, #2]
     52e:	2b00      	cmp	r3, #0
     530:	d032      	beq.n	598 <_rtc_count_set_config+0x94>
     532:	2b01      	cmp	r3, #1
     534:	d15e      	bne.n	5f4 <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     536:	68bb      	ldr	r3, [r7, #8]
     538:	881b      	ldrh	r3, [r3, #0]
     53a:	b29a      	uxth	r2, r3
     53c:	68bb      	ldr	r3, [r7, #8]
     53e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     540:	683b      	ldr	r3, [r7, #0]
     542:	78db      	ldrb	r3, [r3, #3]
     544:	2b00      	cmp	r3, #0
     546:	d007      	beq.n	558 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     548:	68bb      	ldr	r3, [r7, #8]
     54a:	881b      	ldrh	r3, [r3, #0]
     54c:	b29b      	uxth	r3, r3
     54e:	2280      	movs	r2, #128	; 0x80
     550:	4313      	orrs	r3, r2
     552:	b29a      	uxth	r2, r3
     554:	68bb      	ldr	r3, [r7, #8]
     556:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     558:	230f      	movs	r3, #15
     55a:	18fb      	adds	r3, r7, r3
     55c:	2200      	movs	r2, #0
     55e:	701a      	strb	r2, [r3, #0]
     560:	e014      	b.n	58c <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
     562:	230f      	movs	r3, #15
     564:	18fb      	adds	r3, r7, r3
     566:	781a      	ldrb	r2, [r3, #0]
     568:	683b      	ldr	r3, [r7, #0]
     56a:	3202      	adds	r2, #2
     56c:	0092      	lsls	r2, r2, #2
     56e:	58d1      	ldr	r1, [r2, r3]
     570:	230f      	movs	r3, #15
     572:	18fb      	adds	r3, r7, r3
     574:	781a      	ldrb	r2, [r3, #0]
     576:	687b      	ldr	r3, [r7, #4]
     578:	0018      	movs	r0, r3
     57a:	4b22      	ldr	r3, [pc, #136]	; (604 <_rtc_count_set_config+0x100>)
     57c:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     57e:	230f      	movs	r3, #15
     580:	18fb      	adds	r3, r7, r3
     582:	781a      	ldrb	r2, [r3, #0]
     584:	230f      	movs	r3, #15
     586:	18fb      	adds	r3, r7, r3
     588:	3201      	adds	r2, #1
     58a:	701a      	strb	r2, [r3, #0]
     58c:	230f      	movs	r3, #15
     58e:	18fb      	adds	r3, r7, r3
     590:	781b      	ldrb	r3, [r3, #0]
     592:	2b00      	cmp	r3, #0
     594:	d0e5      	beq.n	562 <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
     596:	e02f      	b.n	5f8 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     598:	68bb      	ldr	r3, [r7, #8]
     59a:	881b      	ldrh	r3, [r3, #0]
     59c:	b29b      	uxth	r3, r3
     59e:	2204      	movs	r2, #4
     5a0:	4313      	orrs	r3, r2
     5a2:	b29a      	uxth	r2, r3
     5a4:	68bb      	ldr	r3, [r7, #8]
     5a6:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	78db      	ldrb	r3, [r3, #3]
     5ac:	2b00      	cmp	r3, #0
     5ae:	d001      	beq.n	5b4 <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     5b0:	2317      	movs	r3, #23
     5b2:	e022      	b.n	5fa <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     5b4:	230e      	movs	r3, #14
     5b6:	18fb      	adds	r3, r7, r3
     5b8:	2200      	movs	r2, #0
     5ba:	701a      	strb	r2, [r3, #0]
     5bc:	e014      	b.n	5e8 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
     5be:	230e      	movs	r3, #14
     5c0:	18fb      	adds	r3, r7, r3
     5c2:	781a      	ldrb	r2, [r3, #0]
     5c4:	683b      	ldr	r3, [r7, #0]
     5c6:	3202      	adds	r2, #2
     5c8:	0092      	lsls	r2, r2, #2
     5ca:	58d1      	ldr	r1, [r2, r3]
     5cc:	230e      	movs	r3, #14
     5ce:	18fb      	adds	r3, r7, r3
     5d0:	781a      	ldrb	r2, [r3, #0]
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	0018      	movs	r0, r3
     5d6:	4b0b      	ldr	r3, [pc, #44]	; (604 <_rtc_count_set_config+0x100>)
     5d8:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     5da:	230e      	movs	r3, #14
     5dc:	18fb      	adds	r3, r7, r3
     5de:	781a      	ldrb	r2, [r3, #0]
     5e0:	230e      	movs	r3, #14
     5e2:	18fb      	adds	r3, r7, r3
     5e4:	3201      	adds	r2, #1
     5e6:	701a      	strb	r2, [r3, #0]
     5e8:	230e      	movs	r3, #14
     5ea:	18fb      	adds	r3, r7, r3
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	2b01      	cmp	r3, #1
     5f0:	d9e5      	bls.n	5be <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
     5f2:	e001      	b.n	5f8 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     5f4:	2317      	movs	r3, #23
     5f6:	e000      	b.n	5fa <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     5f8:	2300      	movs	r3, #0
}
     5fa:	0018      	movs	r0, r3
     5fc:	46bd      	mov	sp, r7
     5fe:	b004      	add	sp, #16
     600:	bd80      	pop	{r7, pc}
     602:	46c0      	nop			; (mov r8, r8)
     604:	00000729 	.word	0x00000729

00000608 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     608:	b580      	push	{r7, lr}
     60a:	b084      	sub	sp, #16
     60c:	af00      	add	r7, sp, #0
     60e:	60f8      	str	r0, [r7, #12]
     610:	60b9      	str	r1, [r7, #8]
     612:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     614:	68fb      	ldr	r3, [r7, #12]
     616:	68ba      	ldr	r2, [r7, #8]
     618:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	005b      	lsls	r3, r3, #1
     61e:	0019      	movs	r1, r3
     620:	2000      	movs	r0, #0
     622:	4b0d      	ldr	r3, [pc, #52]	; (658 <rtc_count_init+0x50>)
     624:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     626:	4b0d      	ldr	r3, [pc, #52]	; (65c <rtc_count_init+0x54>)
     628:	2200      	movs	r2, #0
     62a:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     62c:	68fb      	ldr	r3, [r7, #12]
     62e:	0018      	movs	r0, r3
     630:	4b0b      	ldr	r3, [pc, #44]	; (660 <rtc_count_init+0x58>)
     632:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     634:	687b      	ldr	r3, [r7, #4]
     636:	789a      	ldrb	r2, [r3, #2]
     638:	68fb      	ldr	r3, [r7, #12]
     63a:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     63c:	4b09      	ldr	r3, [pc, #36]	; (664 <rtc_count_init+0x5c>)
     63e:	68fa      	ldr	r2, [r7, #12]
     640:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     642:	687a      	ldr	r2, [r7, #4]
     644:	68fb      	ldr	r3, [r7, #12]
     646:	0011      	movs	r1, r2
     648:	0018      	movs	r0, r3
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <rtc_count_init+0x60>)
     64c:	4798      	blx	r3
     64e:	0003      	movs	r3, r0
}
     650:	0018      	movs	r0, r3
     652:	46bd      	mov	sp, r7
     654:	b004      	add	sp, #16
     656:	bd80      	pop	{r7, pc}
     658:	000002f9 	.word	0x000002f9
     65c:	40001000 	.word	0x40001000
     660:	000004a5 	.word	0x000004a5
     664:	200000e8 	.word	0x200000e8
     668:	00000505 	.word	0x00000505

0000066c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     66c:	b580      	push	{r7, lr}
     66e:	b084      	sub	sp, #16
     670:	af00      	add	r7, sp, #0
     672:	6078      	str	r0, [r7, #4]
     674:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     676:	687b      	ldr	r3, [r7, #4]
     678:	681b      	ldr	r3, [r3, #0]
     67a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	687b      	ldr	r3, [r7, #4]
     680:	0018      	movs	r0, r3
     682:	4b13      	ldr	r3, [pc, #76]	; (6d0 <rtc_count_set_count+0x64>)
     684:	4798      	blx	r3
     686:	1e03      	subs	r3, r0, #0
     688:	d1f9      	bne.n	67e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	791b      	ldrb	r3, [r3, #4]
     68e:	2b00      	cmp	r3, #0
     690:	d005      	beq.n	69e <rtc_count_set_count+0x32>
     692:	2b01      	cmp	r3, #1
     694:	d10e      	bne.n	6b4 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     696:	68fb      	ldr	r3, [r7, #12]
     698:	683a      	ldr	r2, [r7, #0]
     69a:	619a      	str	r2, [r3, #24]
			break;
     69c:	e00c      	b.n	6b8 <rtc_count_set_count+0x4c>
		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	4a0c      	ldr	r2, [pc, #48]	; (6d4 <rtc_count_set_count+0x68>)
     6a2:	4293      	cmp	r3, r2
     6a4:	d901      	bls.n	6aa <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     6a6:	2317      	movs	r3, #23
     6a8:	e00e      	b.n	6c8 <rtc_count_set_count+0x5c>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     6aa:	683b      	ldr	r3, [r7, #0]
     6ac:	b29a      	uxth	r2, r3
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	831a      	strh	r2, [r3, #24]

			break;
     6b2:	e001      	b.n	6b8 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     6b4:	2317      	movs	r3, #23
     6b6:	e007      	b.n	6c8 <rtc_count_set_count+0x5c>
	}

	while (rtc_count_is_syncing(module)) {
     6b8:	46c0      	nop			; (mov r8, r8)
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	0018      	movs	r0, r3
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <rtc_count_set_count+0x64>)
     6c0:	4798      	blx	r3
     6c2:	1e03      	subs	r3, r0, #0
     6c4:	d1f9      	bne.n	6ba <rtc_count_set_count+0x4e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     6c6:	2300      	movs	r3, #0
}
     6c8:	0018      	movs	r0, r3
     6ca:	46bd      	mov	sp, r7
     6cc:	b004      	add	sp, #16
     6ce:	bd80      	pop	{r7, pc}
     6d0:	000003d1 	.word	0x000003d1
     6d4:	0000ffff 	.word	0x0000ffff

000006d8 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     6d8:	b580      	push	{r7, lr}
     6da:	b084      	sub	sp, #16
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	681b      	ldr	r3, [r3, #0]
     6e4:	60bb      	str	r3, [r7, #8]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	0018      	movs	r0, r3
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <rtc_count_get_count+0x4c>)
     6ee:	4798      	blx	r3
     6f0:	1e03      	subs	r3, r0, #0
     6f2:	d1f9      	bne.n	6e8 <rtc_count_get_count+0x10>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	791b      	ldrb	r3, [r3, #4]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d005      	beq.n	708 <rtc_count_get_count+0x30>
     6fc:	2b01      	cmp	r3, #1
     6fe:	d108      	bne.n	712 <rtc_count_get_count+0x3a>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     700:	68bb      	ldr	r3, [r7, #8]
     702:	699b      	ldr	r3, [r3, #24]
     704:	60fb      	str	r3, [r7, #12]

			break;
     706:	e007      	b.n	718 <rtc_count_get_count+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     708:	68bb      	ldr	r3, [r7, #8]
     70a:	8b1b      	ldrh	r3, [r3, #24]
     70c:	b29b      	uxth	r3, r3
     70e:	60fb      	str	r3, [r7, #12]

			break;
     710:	e002      	b.n	718 <rtc_count_get_count+0x40>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     712:	2300      	movs	r3, #0
     714:	60fb      	str	r3, [r7, #12]
			break;
     716:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     718:	68fb      	ldr	r3, [r7, #12]
}
     71a:	0018      	movs	r0, r3
     71c:	46bd      	mov	sp, r7
     71e:	b004      	add	sp, #16
     720:	bd80      	pop	{r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	000003d1 	.word	0x000003d1

00000728 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     728:	b580      	push	{r7, lr}
     72a:	b086      	sub	sp, #24
     72c:	af00      	add	r7, sp, #0
     72e:	60f8      	str	r0, [r7, #12]
     730:	60b9      	str	r1, [r7, #8]
     732:	1dfb      	adds	r3, r7, #7
     734:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	681b      	ldr	r3, [r3, #0]
     73a:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     73c:	46c0      	nop			; (mov r8, r8)
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	0018      	movs	r0, r3
     742:	4b1d      	ldr	r3, [pc, #116]	; (7b8 <rtc_count_set_compare+0x90>)
     744:	4798      	blx	r3
     746:	1e03      	subs	r3, r0, #0
     748:	d1f9      	bne.n	73e <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     74a:	68fb      	ldr	r3, [r7, #12]
     74c:	791b      	ldrb	r3, [r3, #4]
     74e:	2b00      	cmp	r3, #0
     750:	d00f      	beq.n	772 <rtc_count_set_compare+0x4a>
     752:	2b01      	cmp	r3, #1
     754:	d122      	bne.n	79c <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     756:	1dfb      	adds	r3, r7, #7
     758:	781b      	ldrb	r3, [r3, #0]
     75a:	2b01      	cmp	r3, #1
     75c:	d901      	bls.n	762 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     75e:	2317      	movs	r3, #23
     760:	e026      	b.n	7b0 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     762:	1dfb      	adds	r3, r7, #7
     764:	781a      	ldrb	r2, [r3, #0]
     766:	697b      	ldr	r3, [r7, #20]
     768:	3208      	adds	r2, #8
     76a:	0092      	lsls	r2, r2, #2
     76c:	68b9      	ldr	r1, [r7, #8]
     76e:	50d1      	str	r1, [r2, r3]

			break;
     770:	e016      	b.n	7a0 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     772:	1dfb      	adds	r3, r7, #7
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b02      	cmp	r3, #2
     778:	d901      	bls.n	77e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     77a:	2317      	movs	r3, #23
     77c:	e018      	b.n	7b0 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     77e:	68bb      	ldr	r3, [r7, #8]
     780:	4a0e      	ldr	r2, [pc, #56]	; (7bc <rtc_count_set_compare+0x94>)
     782:	4293      	cmp	r3, r2
     784:	d901      	bls.n	78a <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     786:	2317      	movs	r3, #23
     788:	e012      	b.n	7b0 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     78a:	1dfb      	adds	r3, r7, #7
     78c:	781a      	ldrb	r2, [r3, #0]
     78e:	68bb      	ldr	r3, [r7, #8]
     790:	b299      	uxth	r1, r3
     792:	697b      	ldr	r3, [r7, #20]
     794:	3210      	adds	r2, #16
     796:	0052      	lsls	r2, r2, #1
     798:	52d1      	strh	r1, [r2, r3]

			break;
     79a:	e001      	b.n	7a0 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     79c:	231a      	movs	r3, #26
     79e:	e007      	b.n	7b0 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
     7a0:	46c0      	nop			; (mov r8, r8)
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	0018      	movs	r0, r3
     7a6:	4b04      	ldr	r3, [pc, #16]	; (7b8 <rtc_count_set_compare+0x90>)
     7a8:	4798      	blx	r3
     7aa:	1e03      	subs	r3, r0, #0
     7ac:	d1f9      	bne.n	7a2 <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     7ae:	2300      	movs	r3, #0
}
     7b0:	0018      	movs	r0, r3
     7b2:	46bd      	mov	sp, r7
     7b4:	b006      	add	sp, #24
     7b6:	bd80      	pop	{r7, pc}
     7b8:	000003d1 	.word	0x000003d1
     7bc:	0000ffff 	.word	0x0000ffff

000007c0 <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b086      	sub	sp, #24
     7c4:	af00      	add	r7, sp, #0
     7c6:	60f8      	str	r0, [r7, #12]
     7c8:	60b9      	str	r1, [r7, #8]
     7ca:	1dfb      	adds	r3, r7, #7
     7cc:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
     7ce:	2317      	movs	r3, #23
     7d0:	18fb      	adds	r3, r7, r3
     7d2:	2200      	movs	r2, #0
     7d4:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
     7d6:	1dfb      	adds	r3, r7, #7
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	2b0a      	cmp	r3, #10
     7dc:	d003      	beq.n	7e6 <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     7de:	1dfb      	adds	r3, r7, #7
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	2b07      	cmp	r3, #7
     7e4:	d804      	bhi.n	7f0 <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
     7e6:	2317      	movs	r3, #23
     7e8:	18fb      	adds	r3, r7, r3
     7ea:	2200      	movs	r2, #0
     7ec:	701a      	strb	r2, [r3, #0]
     7ee:	e01f      	b.n	830 <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	791b      	ldrb	r3, [r3, #4]
     7f4:	2b00      	cmp	r3, #0
     7f6:	d00a      	beq.n	80e <rtc_count_register_callback+0x4e>
     7f8:	2b01      	cmp	r3, #1
     7fa:	d111      	bne.n	820 <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
     7fc:	1dfb      	adds	r3, r7, #7
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	2b09      	cmp	r3, #9
     802:	d912      	bls.n	82a <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
     804:	2317      	movs	r3, #23
     806:	18fb      	adds	r3, r7, r3
     808:	2217      	movs	r2, #23
     80a:	701a      	strb	r2, [r3, #0]
			}

			break;
     80c:	e00d      	b.n	82a <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
     80e:	1dfb      	adds	r3, r7, #7
     810:	781b      	ldrb	r3, [r3, #0]
     812:	2b0a      	cmp	r3, #10
     814:	d90b      	bls.n	82e <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
     816:	2317      	movs	r3, #23
     818:	18fb      	adds	r3, r7, r3
     81a:	2217      	movs	r2, #23
     81c:	701a      	strb	r2, [r3, #0]
			}
			break;
     81e:	e006      	b.n	82e <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
     820:	2317      	movs	r3, #23
     822:	18fb      	adds	r3, r7, r3
     824:	2217      	movs	r2, #23
     826:	701a      	strb	r2, [r3, #0]
     828:	e002      	b.n	830 <rtc_count_register_callback+0x70>
			break;
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	e000      	b.n	830 <rtc_count_register_callback+0x70>
			break;
     82e:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
     830:	2317      	movs	r3, #23
     832:	18fb      	adds	r3, r7, r3
     834:	781b      	ldrb	r3, [r3, #0]
     836:	2b00      	cmp	r3, #0
     838:	d115      	bne.n	866 <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
     83a:	1dfb      	adds	r3, r7, #7
     83c:	781a      	ldrb	r2, [r3, #0]
     83e:	68fb      	ldr	r3, [r7, #12]
     840:	3202      	adds	r2, #2
     842:	0092      	lsls	r2, r2, #2
     844:	68b9      	ldr	r1, [r7, #8]
     846:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     848:	68fb      	ldr	r3, [r7, #12]
     84a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     84c:	b29b      	uxth	r3, r3
     84e:	b21a      	sxth	r2, r3
     850:	1dfb      	adds	r3, r7, #7
     852:	781b      	ldrb	r3, [r3, #0]
     854:	2101      	movs	r1, #1
     856:	4099      	lsls	r1, r3
     858:	000b      	movs	r3, r1
     85a:	b21b      	sxth	r3, r3
     85c:	4313      	orrs	r3, r2
     85e:	b21b      	sxth	r3, r3
     860:	b29a      	uxth	r2, r3
     862:	68fb      	ldr	r3, [r7, #12]
     864:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
     866:	2317      	movs	r3, #23
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
}
     86c:	0018      	movs	r0, r3
     86e:	46bd      	mov	sp, r7
     870:	b006      	add	sp, #24
     872:	bd80      	pop	{r7, pc}

00000874 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	000a      	movs	r2, r1
     87e:	1cfb      	adds	r3, r7, #3
     880:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     882:	687b      	ldr	r3, [r7, #4]
     884:	681b      	ldr	r3, [r3, #0]
     886:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     888:	1cfb      	adds	r3, r7, #3
     88a:	781b      	ldrb	r3, [r3, #0]
     88c:	2b0a      	cmp	r3, #10
     88e:	d103      	bne.n	898 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     890:	68fb      	ldr	r3, [r7, #12]
     892:	4a1a      	ldr	r2, [pc, #104]	; (8fc <rtc_count_enable_callback+0x88>)
     894:	815a      	strh	r2, [r3, #10]
     896:	e01e      	b.n	8d6 <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     898:	1cfb      	adds	r3, r7, #3
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	2b07      	cmp	r3, #7
     89e:	d80b      	bhi.n	8b8 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
     8a0:	1cfb      	adds	r3, r7, #3
     8a2:	781b      	ldrb	r3, [r3, #0]
     8a4:	2201      	movs	r2, #1
     8a6:	409a      	lsls	r2, r3
     8a8:	0013      	movs	r3, r2
     8aa:	b29b      	uxth	r3, r3
     8ac:	22ff      	movs	r2, #255	; 0xff
     8ae:	4013      	ands	r3, r2
     8b0:	b29a      	uxth	r2, r3
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	815a      	strh	r2, [r3, #10]
     8b6:	e00e      	b.n	8d6 <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     8b8:	1cfb      	adds	r3, r7, #3
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	3b08      	subs	r3, #8
     8be:	2201      	movs	r2, #1
     8c0:	409a      	lsls	r2, r3
     8c2:	0013      	movs	r3, r2
     8c4:	b29b      	uxth	r3, r3
     8c6:	021b      	lsls	r3, r3, #8
     8c8:	b29a      	uxth	r2, r3
     8ca:	23c0      	movs	r3, #192	; 0xc0
     8cc:	009b      	lsls	r3, r3, #2
     8ce:	4013      	ands	r3, r2
     8d0:	b29a      	uxth	r2, r3
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
     8da:	b29b      	uxth	r3, r3
     8dc:	b21a      	sxth	r2, r3
     8de:	1cfb      	adds	r3, r7, #3
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2101      	movs	r1, #1
     8e4:	4099      	lsls	r1, r3
     8e6:	000b      	movs	r3, r1
     8e8:	b21b      	sxth	r3, r3
     8ea:	4313      	orrs	r3, r2
     8ec:	b21b      	sxth	r3, r3
     8ee:	b29a      	uxth	r2, r3
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	86da      	strh	r2, [r3, #54]	; 0x36
}
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	46bd      	mov	sp, r7
     8f8:	b004      	add	sp, #16
     8fa:	bd80      	pop	{r7, pc}
     8fc:	ffff8000 	.word	0xffff8000

00000900 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     900:	b580      	push	{r7, lr}
     902:	b084      	sub	sp, #16
     904:	af00      	add	r7, sp, #0
     906:	6078      	str	r0, [r7, #4]
     908:	000a      	movs	r2, r1
     90a:	1cfb      	adds	r3, r7, #3
     90c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     90e:	687b      	ldr	r3, [r7, #4]
     910:	681b      	ldr	r3, [r3, #0]
     912:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     914:	1cfb      	adds	r3, r7, #3
     916:	781b      	ldrb	r3, [r3, #0]
     918:	2b0a      	cmp	r3, #10
     91a:	d103      	bne.n	924 <rtc_count_disable_callback+0x24>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	4a1b      	ldr	r2, [pc, #108]	; (98c <rtc_count_disable_callback+0x8c>)
     920:	811a      	strh	r2, [r3, #8]
     922:	e01e      	b.n	962 <rtc_count_disable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     924:	1cfb      	adds	r3, r7, #3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	2b07      	cmp	r3, #7
     92a:	d80b      	bhi.n	944 <rtc_count_disable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
     92c:	1cfb      	adds	r3, r7, #3
     92e:	781b      	ldrb	r3, [r3, #0]
     930:	2201      	movs	r2, #1
     932:	409a      	lsls	r2, r3
     934:	0013      	movs	r3, r2
     936:	b29b      	uxth	r3, r3
     938:	22ff      	movs	r2, #255	; 0xff
     93a:	4013      	ands	r3, r2
     93c:	b29a      	uxth	r2, r3
     93e:	68fb      	ldr	r3, [r7, #12]
     940:	811a      	strh	r2, [r3, #8]
     942:	e00e      	b.n	962 <rtc_count_disable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     944:	1cfb      	adds	r3, r7, #3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	3b08      	subs	r3, #8
     94a:	2201      	movs	r2, #1
     94c:	409a      	lsls	r2, r3
     94e:	0013      	movs	r3, r2
     950:	b29b      	uxth	r3, r3
     952:	021b      	lsls	r3, r3, #8
     954:	b29a      	uxth	r2, r3
     956:	23c0      	movs	r3, #192	; 0xc0
     958:	009b      	lsls	r3, r3, #2
     95a:	4013      	ands	r3, r2
     95c:	b29a      	uxth	r2, r3
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	811a      	strh	r2, [r3, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
     962:	687b      	ldr	r3, [r7, #4]
     964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
     966:	b29b      	uxth	r3, r3
     968:	b21b      	sxth	r3, r3
     96a:	1cfa      	adds	r2, r7, #3
     96c:	7812      	ldrb	r2, [r2, #0]
     96e:	2101      	movs	r1, #1
     970:	4091      	lsls	r1, r2
     972:	000a      	movs	r2, r1
     974:	b212      	sxth	r2, r2
     976:	43d2      	mvns	r2, r2
     978:	b212      	sxth	r2, r2
     97a:	4013      	ands	r3, r2
     97c:	b21b      	sxth	r3, r3
     97e:	b29a      	uxth	r2, r3
     980:	687b      	ldr	r3, [r7, #4]
     982:	86da      	strh	r2, [r3, #54]	; 0x36
}
     984:	46c0      	nop			; (mov r8, r8)
     986:	46bd      	mov	sp, r7
     988:	b004      	add	sp, #16
     98a:	bd80      	pop	{r7, pc}
     98c:	ffff8000 	.word	0xffff8000

00000990 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     990:	b580      	push	{r7, lr}
     992:	b086      	sub	sp, #24
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     998:	4b58      	ldr	r3, [pc, #352]	; (afc <_rtc_interrupt_handler+0x16c>)
     99a:	687a      	ldr	r2, [r7, #4]
     99c:	0092      	lsls	r2, r2, #2
     99e:	58d3      	ldr	r3, [r2, r3]
     9a0:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
     9a2:	693b      	ldr	r3, [r7, #16]
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     9a8:	230a      	movs	r3, #10
     9aa:	18fb      	adds	r3, r7, r3
     9ac:	693a      	ldr	r2, [r7, #16]
     9ae:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
     9b0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     9b2:	693b      	ldr	r3, [r7, #16]
     9b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     9b6:	b29a      	uxth	r2, r3
     9b8:	230a      	movs	r3, #10
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	210a      	movs	r1, #10
     9be:	1879      	adds	r1, r7, r1
     9c0:	8809      	ldrh	r1, [r1, #0]
     9c2:	400a      	ands	r2, r1
     9c4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     9c6:	2308      	movs	r3, #8
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	68fa      	ldr	r2, [r7, #12]
     9cc:	8992      	ldrh	r2, [r2, #12]
     9ce:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     9d0:	68fb      	ldr	r3, [r7, #12]
     9d2:	895b      	ldrh	r3, [r3, #10]
     9d4:	b29a      	uxth	r2, r3
     9d6:	2308      	movs	r3, #8
     9d8:	18fb      	adds	r3, r7, r3
     9da:	2108      	movs	r1, #8
     9dc:	1879      	adds	r1, r7, r1
     9de:	8809      	ldrh	r1, [r1, #0]
     9e0:	400a      	ands	r2, r1
     9e2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     9e4:	2308      	movs	r3, #8
     9e6:	18fb      	adds	r3, r7, r3
     9e8:	2200      	movs	r2, #0
     9ea:	5e9b      	ldrsh	r3, [r3, r2]
     9ec:	2b00      	cmp	r3, #0
     9ee:	da0d      	bge.n	a0c <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     9f0:	230a      	movs	r3, #10
     9f2:	18fb      	adds	r3, r7, r3
     9f4:	881a      	ldrh	r2, [r3, #0]
     9f6:	2380      	movs	r3, #128	; 0x80
     9f8:	00db      	lsls	r3, r3, #3
     9fa:	4013      	ands	r3, r2
     9fc:	d002      	beq.n	a04 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     9fe:	693b      	ldr	r3, [r7, #16]
     a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     a02:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a04:	68fb      	ldr	r3, [r7, #12]
     a06:	4a3e      	ldr	r2, [pc, #248]	; (b00 <_rtc_interrupt_handler+0x170>)
     a08:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     a0a:	e072      	b.n	af2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     a0c:	2308      	movs	r3, #8
     a0e:	18fb      	adds	r3, r7, r3
     a10:	881b      	ldrh	r3, [r3, #0]
     a12:	22ff      	movs	r2, #255	; 0xff
     a14:	4013      	ands	r3, r2
     a16:	d041      	beq.n	a9c <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
     a18:	2317      	movs	r3, #23
     a1a:	18fb      	adds	r3, r7, r3
     a1c:	2200      	movs	r2, #0
     a1e:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
     a20:	2317      	movs	r3, #23
     a22:	18fb      	adds	r3, r7, r3
     a24:	2200      	movs	r2, #0
     a26:	701a      	strb	r2, [r3, #0]
     a28:	e032      	b.n	a90 <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     a2a:	2308      	movs	r3, #8
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	2217      	movs	r2, #23
     a32:	18ba      	adds	r2, r7, r2
     a34:	7812      	ldrb	r2, [r2, #0]
     a36:	2101      	movs	r1, #1
     a38:	4091      	lsls	r1, r2
     a3a:	000a      	movs	r2, r1
     a3c:	4013      	ands	r3, r2
     a3e:	22ff      	movs	r2, #255	; 0xff
     a40:	4013      	ands	r3, r2
     a42:	d012      	beq.n	a6a <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
     a44:	230a      	movs	r3, #10
     a46:	18fb      	adds	r3, r7, r3
     a48:	881a      	ldrh	r2, [r3, #0]
     a4a:	2317      	movs	r3, #23
     a4c:	18fb      	adds	r3, r7, r3
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	411a      	asrs	r2, r3
     a52:	0013      	movs	r3, r2
     a54:	2201      	movs	r2, #1
     a56:	4013      	ands	r3, r2
     a58:	d007      	beq.n	a6a <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
     a5a:	2317      	movs	r3, #23
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	781a      	ldrb	r2, [r3, #0]
     a60:	693b      	ldr	r3, [r7, #16]
     a62:	3202      	adds	r2, #2
     a64:	0092      	lsls	r2, r2, #2
     a66:	58d3      	ldr	r3, [r2, r3]
     a68:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     a6a:	2317      	movs	r3, #23
     a6c:	18fb      	adds	r3, r7, r3
     a6e:	781b      	ldrb	r3, [r3, #0]
     a70:	2201      	movs	r2, #1
     a72:	409a      	lsls	r2, r3
     a74:	0013      	movs	r3, r2
     a76:	b29b      	uxth	r3, r3
     a78:	22ff      	movs	r2, #255	; 0xff
     a7a:	4013      	ands	r3, r2
     a7c:	b29a      	uxth	r2, r3
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
     a82:	2317      	movs	r3, #23
     a84:	18fb      	adds	r3, r7, r3
     a86:	781a      	ldrb	r2, [r3, #0]
     a88:	2317      	movs	r3, #23
     a8a:	18fb      	adds	r3, r7, r3
     a8c:	3201      	adds	r2, #1
     a8e:	701a      	strb	r2, [r3, #0]
     a90:	2317      	movs	r3, #23
     a92:	18fb      	adds	r3, r7, r3
     a94:	781b      	ldrb	r3, [r3, #0]
     a96:	2b07      	cmp	r3, #7
     a98:	d9c7      	bls.n	a2a <_rtc_interrupt_handler+0x9a>
}
     a9a:	e02a      	b.n	af2 <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a9c:	2308      	movs	r3, #8
     a9e:	18fb      	adds	r3, r7, r3
     aa0:	881a      	ldrh	r2, [r3, #0]
     aa2:	2380      	movs	r3, #128	; 0x80
     aa4:	005b      	lsls	r3, r3, #1
     aa6:	4013      	ands	r3, r2
     aa8:	d00e      	beq.n	ac8 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     aaa:	230a      	movs	r3, #10
     aac:	18fb      	adds	r3, r7, r3
     aae:	881a      	ldrh	r2, [r3, #0]
     ab0:	2380      	movs	r3, #128	; 0x80
     ab2:	005b      	lsls	r3, r3, #1
     ab4:	4013      	ands	r3, r2
     ab6:	d002      	beq.n	abe <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     ab8:	693b      	ldr	r3, [r7, #16]
     aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     abc:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	2280      	movs	r2, #128	; 0x80
     ac2:	0052      	lsls	r2, r2, #1
     ac4:	819a      	strh	r2, [r3, #12]
}
     ac6:	e014      	b.n	af2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     ac8:	2308      	movs	r3, #8
     aca:	18fb      	adds	r3, r7, r3
     acc:	881a      	ldrh	r2, [r3, #0]
     ace:	2380      	movs	r3, #128	; 0x80
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	4013      	ands	r3, r2
     ad4:	d00d      	beq.n	af2 <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     ad6:	230a      	movs	r3, #10
     ad8:	18fb      	adds	r3, r7, r3
     ada:	881a      	ldrh	r2, [r3, #0]
     adc:	2380      	movs	r3, #128	; 0x80
     ade:	009b      	lsls	r3, r3, #2
     ae0:	4013      	ands	r3, r2
     ae2:	d002      	beq.n	aea <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ae4:	693b      	ldr	r3, [r7, #16]
     ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ae8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     aea:	68fb      	ldr	r3, [r7, #12]
     aec:	2280      	movs	r2, #128	; 0x80
     aee:	0092      	lsls	r2, r2, #2
     af0:	819a      	strh	r2, [r3, #12]
}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	46bd      	mov	sp, r7
     af6:	b006      	add	sp, #24
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	200000e8 	.word	0x200000e8
     b00:	ffff8000 	.word	0xffff8000

00000b04 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     b04:	b580      	push	{r7, lr}
     b06:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     b08:	2000      	movs	r0, #0
     b0a:	4b02      	ldr	r3, [pc, #8]	; (b14 <RTC_Handler+0x10>)
     b0c:	4798      	blx	r3
}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	46bd      	mov	sp, r7
     b12:	bd80      	pop	{r7, pc}
     b14:	00000991 	.word	0x00000991

00000b18 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     b18:	b580      	push	{r7, lr}
     b1a:	b082      	sub	sp, #8
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     b20:	687b      	ldr	r3, [r7, #4]
     b22:	2200      	movs	r2, #0
     b24:	701a      	strb	r2, [r3, #0]
}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	46bd      	mov	sp, r7
     b2a:	b002      	add	sp, #8
     b2c:	bd80      	pop	{r7, pc}
	...

00000b30 <system_apb_clock_set_mask>:
{
     b30:	b580      	push	{r7, lr}
     b32:	b082      	sub	sp, #8
     b34:	af00      	add	r7, sp, #0
     b36:	0002      	movs	r2, r0
     b38:	6039      	str	r1, [r7, #0]
     b3a:	1dfb      	adds	r3, r7, #7
     b3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     b3e:	1dfb      	adds	r3, r7, #7
     b40:	781b      	ldrb	r3, [r3, #0]
     b42:	2b04      	cmp	r3, #4
     b44:	d827      	bhi.n	b96 <system_apb_clock_set_mask+0x66>
     b46:	009a      	lsls	r2, r3, #2
     b48:	4b16      	ldr	r3, [pc, #88]	; (ba4 <system_apb_clock_set_mask+0x74>)
     b4a:	18d3      	adds	r3, r2, r3
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     b50:	4b15      	ldr	r3, [pc, #84]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b52:	4a15      	ldr	r2, [pc, #84]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b54:	6951      	ldr	r1, [r2, #20]
     b56:	683a      	ldr	r2, [r7, #0]
     b58:	430a      	orrs	r2, r1
     b5a:	615a      	str	r2, [r3, #20]
			break;
     b5c:	e01d      	b.n	b9a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     b5e:	4b12      	ldr	r3, [pc, #72]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b60:	4a11      	ldr	r2, [pc, #68]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b62:	6991      	ldr	r1, [r2, #24]
     b64:	683a      	ldr	r2, [r7, #0]
     b66:	430a      	orrs	r2, r1
     b68:	619a      	str	r2, [r3, #24]
			break;
     b6a:	e016      	b.n	b9a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     b6c:	4b0e      	ldr	r3, [pc, #56]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b6e:	4a0e      	ldr	r2, [pc, #56]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b70:	69d1      	ldr	r1, [r2, #28]
     b72:	683a      	ldr	r2, [r7, #0]
     b74:	430a      	orrs	r2, r1
     b76:	61da      	str	r2, [r3, #28]
			break;
     b78:	e00f      	b.n	b9a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     b7a:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b7c:	4a0a      	ldr	r2, [pc, #40]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b7e:	6a11      	ldr	r1, [r2, #32]
     b80:	683a      	ldr	r2, [r7, #0]
     b82:	430a      	orrs	r2, r1
     b84:	621a      	str	r2, [r3, #32]
			break;
     b86:	e008      	b.n	b9a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     b88:	4b07      	ldr	r3, [pc, #28]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b8a:	4a07      	ldr	r2, [pc, #28]	; (ba8 <system_apb_clock_set_mask+0x78>)
     b8c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     b8e:	683a      	ldr	r2, [r7, #0]
     b90:	430a      	orrs	r2, r1
     b92:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     b94:	e001      	b.n	b9a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     b96:	2317      	movs	r3, #23
     b98:	e000      	b.n	b9c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     b9a:	2300      	movs	r3, #0
}
     b9c:	0018      	movs	r0, r3
     b9e:	46bd      	mov	sp, r7
     ba0:	b002      	add	sp, #8
     ba2:	bd80      	pop	{r7, pc}
     ba4:	00005ab8 	.word	0x00005ab8
     ba8:	40000400 	.word	0x40000400

00000bac <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     bac:	b580      	push	{r7, lr}
     bae:	b082      	sub	sp, #8
     bb0:	af00      	add	r7, sp, #0
     bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	2280      	movs	r2, #128	; 0x80
     bb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	2200      	movs	r2, #0
     bbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	2201      	movs	r2, #1
     bc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	2200      	movs	r2, #0
     bca:	70da      	strb	r2, [r3, #3]
}
     bcc:	46c0      	nop			; (mov r8, r8)
     bce:	46bd      	mov	sp, r7
     bd0:	b002      	add	sp, #8
     bd2:	bd80      	pop	{r7, pc}

00000bd4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bd8:	4b05      	ldr	r3, [pc, #20]	; (bf0 <system_is_debugger_present+0x1c>)
     bda:	789b      	ldrb	r3, [r3, #2]
     bdc:	b2db      	uxtb	r3, r3
     bde:	001a      	movs	r2, r3
     be0:	2302      	movs	r3, #2
     be2:	4013      	ands	r3, r2
     be4:	1e5a      	subs	r2, r3, #1
     be6:	4193      	sbcs	r3, r2
     be8:	b2db      	uxtb	r3, r3
}
     bea:	0018      	movs	r0, r3
     bec:	46bd      	mov	sp, r7
     bee:	bd80      	pop	{r7, pc}
     bf0:	41002000 	.word	0x41002000

00000bf4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b084      	sub	sp, #16
     bf8:	af00      	add	r7, sp, #0
     bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	69db      	ldr	r3, [r3, #28]
     c06:	2207      	movs	r2, #7
     c08:	4013      	ands	r3, r2
     c0a:	1e5a      	subs	r2, r3, #1
     c0c:	4193      	sbcs	r3, r2
     c0e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     c10:	0018      	movs	r0, r3
     c12:	46bd      	mov	sp, r7
     c14:	b004      	add	sp, #16
     c16:	bd80      	pop	{r7, pc}

00000c18 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     c18:	b580      	push	{r7, lr}
     c1a:	b082      	sub	sp, #8
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	0018      	movs	r0, r3
     c26:	4b04      	ldr	r3, [pc, #16]	; (c38 <_i2c_master_wait_for_sync+0x20>)
     c28:	4798      	blx	r3
     c2a:	1e03      	subs	r3, r0, #0
     c2c:	d1f9      	bne.n	c22 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	46bd      	mov	sp, r7
     c32:	b002      	add	sp, #8
     c34:	bd80      	pop	{r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00000bf5 	.word	0x00000bf5

00000c3c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3e:	b097      	sub	sp, #92	; 0x5c
     c40:	af00      	add	r7, sp, #0
     c42:	6178      	str	r0, [r7, #20]
     c44:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     c46:	2300      	movs	r3, #0
     c48:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     c4a:	2300      	movs	r3, #0
     c4c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     c4e:	2300      	movs	r3, #0
     c50:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     c52:	233b      	movs	r3, #59	; 0x3b
     c54:	2210      	movs	r2, #16
     c56:	4694      	mov	ip, r2
     c58:	44bc      	add	ip, r7
     c5a:	4463      	add	r3, ip
     c5c:	2200      	movs	r2, #0
     c5e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c60:	697b      	ldr	r3, [r7, #20]
     c62:	681b      	ldr	r3, [r3, #0]
     c64:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     c66:	697b      	ldr	r3, [r7, #20]
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     c6c:	2323      	movs	r3, #35	; 0x23
     c6e:	2210      	movs	r2, #16
     c70:	18ba      	adds	r2, r7, r2
     c72:	18d4      	adds	r4, r2, r3
     c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c76:	0018      	movs	r0, r3
     c78:	4bc0      	ldr	r3, [pc, #768]	; (f7c <_i2c_master_set_config+0x340>)
     c7a:	4798      	blx	r3
     c7c:	0003      	movs	r3, r0
     c7e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     c80:	230c      	movs	r3, #12
     c82:	2210      	movs	r2, #16
     c84:	4694      	mov	ip, r2
     c86:	44bc      	add	ip, r7
     c88:	4463      	add	r3, ip
     c8a:	0018      	movs	r0, r3
     c8c:	4bbc      	ldr	r3, [pc, #752]	; (f80 <_i2c_master_set_config+0x344>)
     c8e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     c90:	693b      	ldr	r3, [r7, #16]
     c92:	69db      	ldr	r3, [r3, #28]
     c94:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     c96:	693b      	ldr	r3, [r7, #16]
     c98:	6a1b      	ldr	r3, [r3, #32]
     c9a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c9e:	2b00      	cmp	r3, #0
     ca0:	d106      	bne.n	cb0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ca4:	2100      	movs	r1, #0
     ca6:	0018      	movs	r0, r3
     ca8:	4bb6      	ldr	r3, [pc, #728]	; (f84 <_i2c_master_set_config+0x348>)
     caa:	4798      	blx	r3
     cac:	0003      	movs	r3, r0
     cae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cb2:	b2da      	uxtb	r2, r3
     cb4:	230c      	movs	r3, #12
     cb6:	2110      	movs	r1, #16
     cb8:	468c      	mov	ip, r1
     cba:	44bc      	add	ip, r7
     cbc:	4463      	add	r3, ip
     cbe:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     cc0:	230c      	movs	r3, #12
     cc2:	2210      	movs	r2, #16
     cc4:	4694      	mov	ip, r2
     cc6:	44bc      	add	ip, r7
     cc8:	4463      	add	r3, ip
     cca:	2202      	movs	r2, #2
     ccc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cd0:	0c1b      	lsrs	r3, r3, #16
     cd2:	b2db      	uxtb	r3, r3
     cd4:	220c      	movs	r2, #12
     cd6:	2110      	movs	r1, #16
     cd8:	468c      	mov	ip, r1
     cda:	44bc      	add	ip, r7
     cdc:	4462      	add	r2, ip
     cde:	0011      	movs	r1, r2
     ce0:	0018      	movs	r0, r3
     ce2:	4ba9      	ldr	r3, [pc, #676]	; (f88 <_i2c_master_set_config+0x34c>)
     ce4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ce8:	2b00      	cmp	r3, #0
     cea:	d106      	bne.n	cfa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cee:	2101      	movs	r1, #1
     cf0:	0018      	movs	r0, r3
     cf2:	4ba4      	ldr	r3, [pc, #656]	; (f84 <_i2c_master_set_config+0x348>)
     cf4:	4798      	blx	r3
     cf6:	0003      	movs	r3, r0
     cf8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     cfc:	b2da      	uxtb	r2, r3
     cfe:	230c      	movs	r3, #12
     d00:	2110      	movs	r1, #16
     d02:	468c      	mov	ip, r1
     d04:	44bc      	add	ip, r7
     d06:	4463      	add	r3, ip
     d08:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     d0a:	230c      	movs	r3, #12
     d0c:	2210      	movs	r2, #16
     d0e:	4694      	mov	ip, r2
     d10:	44bc      	add	ip, r7
     d12:	4463      	add	r3, ip
     d14:	2202      	movs	r2, #2
     d16:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d1a:	0c1b      	lsrs	r3, r3, #16
     d1c:	b2db      	uxtb	r3, r3
     d1e:	220c      	movs	r2, #12
     d20:	2110      	movs	r1, #16
     d22:	468c      	mov	ip, r1
     d24:	44bc      	add	ip, r7
     d26:	4462      	add	r2, ip
     d28:	0011      	movs	r1, r2
     d2a:	0018      	movs	r0, r3
     d2c:	4b96      	ldr	r3, [pc, #600]	; (f88 <_i2c_master_set_config+0x34c>)
     d2e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     d30:	693b      	ldr	r3, [r7, #16]
     d32:	8a9a      	ldrh	r2, [r3, #20]
     d34:	697b      	ldr	r3, [r7, #20]
     d36:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     d38:	693b      	ldr	r3, [r7, #16]
     d3a:	8ada      	ldrh	r2, [r3, #22]
     d3c:	697b      	ldr	r3, [r7, #20]
     d3e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     d40:	693b      	ldr	r3, [r7, #16]
     d42:	7e1b      	ldrb	r3, [r3, #24]
     d44:	2b00      	cmp	r3, #0
     d46:	d103      	bne.n	d50 <_i2c_master_set_config+0x114>
     d48:	4b90      	ldr	r3, [pc, #576]	; (f8c <_i2c_master_set_config+0x350>)
     d4a:	4798      	blx	r3
     d4c:	1e03      	subs	r3, r0, #0
     d4e:	d002      	beq.n	d56 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     d50:	2380      	movs	r3, #128	; 0x80
     d52:	657b      	str	r3, [r7, #84]	; 0x54
     d54:	e001      	b.n	d5a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     d56:	2300      	movs	r3, #0
     d58:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     d5a:	693b      	ldr	r3, [r7, #16]
     d5c:	691b      	ldr	r3, [r3, #16]
     d5e:	2b00      	cmp	r3, #0
     d60:	d004      	beq.n	d6c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     d62:	693b      	ldr	r3, [r7, #16]
     d64:	691b      	ldr	r3, [r3, #16]
     d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     d68:	4313      	orrs	r3, r2
     d6a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     d6c:	693b      	ldr	r3, [r7, #16]
     d6e:	689b      	ldr	r3, [r3, #8]
     d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     d72:	4313      	orrs	r3, r2
     d74:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     d76:	693b      	ldr	r3, [r7, #16]
     d78:	2224      	movs	r2, #36	; 0x24
     d7a:	5c9b      	ldrb	r3, [r3, r2]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d004      	beq.n	d8a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	05d2      	lsls	r2, r2, #23
     d86:	4313      	orrs	r3, r2
     d88:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     d8a:	693b      	ldr	r3, [r7, #16]
     d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d8e:	2b00      	cmp	r3, #0
     d90:	d004      	beq.n	d9c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     d92:	693b      	ldr	r3, [r7, #16]
     d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     d98:	4313      	orrs	r3, r2
     d9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     d9c:	693b      	ldr	r3, [r7, #16]
     d9e:	222c      	movs	r2, #44	; 0x2c
     da0:	5c9b      	ldrb	r3, [r3, r2]
     da2:	2b00      	cmp	r3, #0
     da4:	d105      	bne.n	db2 <_i2c_master_set_config+0x176>
     da6:	693b      	ldr	r3, [r7, #16]
     da8:	689a      	ldr	r2, [r3, #8]
     daa:	2380      	movs	r3, #128	; 0x80
     dac:	049b      	lsls	r3, r3, #18
     dae:	429a      	cmp	r2, r3
     db0:	d104      	bne.n	dbc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     db4:	2280      	movs	r2, #128	; 0x80
     db6:	0512      	lsls	r2, r2, #20
     db8:	4313      	orrs	r3, r2
     dba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     dbc:	693b      	ldr	r3, [r7, #16]
     dbe:	222d      	movs	r2, #45	; 0x2d
     dc0:	5c9b      	ldrb	r3, [r3, r2]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d004      	beq.n	dd0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     dc8:	2280      	movs	r2, #128	; 0x80
     dca:	0412      	lsls	r2, r2, #16
     dcc:	4313      	orrs	r3, r2
     dce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     dd0:	693b      	ldr	r3, [r7, #16]
     dd2:	222e      	movs	r2, #46	; 0x2e
     dd4:	5c9b      	ldrb	r3, [r3, r2]
     dd6:	2b00      	cmp	r3, #0
     dd8:	d004      	beq.n	de4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     ddc:	2280      	movs	r2, #128	; 0x80
     dde:	03d2      	lsls	r2, r2, #15
     de0:	4313      	orrs	r3, r2
     de2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     de6:	681a      	ldr	r2, [r3, #0]
     de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     dea:	431a      	orrs	r2, r3
     dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dee:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df2:	2280      	movs	r2, #128	; 0x80
     df4:	0052      	lsls	r2, r2, #1
     df6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     df8:	2323      	movs	r3, #35	; 0x23
     dfa:	2210      	movs	r2, #16
     dfc:	4694      	mov	ip, r2
     dfe:	44bc      	add	ip, r7
     e00:	4463      	add	r3, ip
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	3312      	adds	r3, #18
     e06:	b2db      	uxtb	r3, r3
     e08:	0018      	movs	r0, r3
     e0a:	4b61      	ldr	r3, [pc, #388]	; (f90 <_i2c_master_set_config+0x354>)
     e0c:	4798      	blx	r3
     e0e:	0003      	movs	r3, r0
     e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     e12:	693b      	ldr	r3, [r7, #16]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	22fa      	movs	r2, #250	; 0xfa
     e18:	0092      	lsls	r2, r2, #2
     e1a:	4353      	muls	r3, r2
     e1c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     e1e:	693b      	ldr	r3, [r7, #16]
     e20:	685b      	ldr	r3, [r3, #4]
     e22:	22fa      	movs	r2, #250	; 0xfa
     e24:	0092      	lsls	r2, r2, #2
     e26:	4353      	muls	r3, r2
     e28:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
     e2a:	693b      	ldr	r3, [r7, #16]
     e2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     e2e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
     e30:	4b58      	ldr	r3, [pc, #352]	; (f94 <_i2c_master_set_config+0x358>)
     e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     e34:	4798      	blx	r3
     e36:	0005      	movs	r5, r0
     e38:	000e      	movs	r6, r1
     e3a:	4b56      	ldr	r3, [pc, #344]	; (f94 <_i2c_master_set_config+0x358>)
     e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     e3e:	4798      	blx	r3
     e40:	60b8      	str	r0, [r7, #8]
     e42:	60f9      	str	r1, [r7, #12]
     e44:	4b53      	ldr	r3, [pc, #332]	; (f94 <_i2c_master_set_config+0x358>)
     e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     e48:	4798      	blx	r3
     e4a:	4c53      	ldr	r4, [pc, #332]	; (f98 <_i2c_master_set_config+0x35c>)
     e4c:	4a53      	ldr	r2, [pc, #332]	; (f9c <_i2c_master_set_config+0x360>)
     e4e:	4b54      	ldr	r3, [pc, #336]	; (fa0 <_i2c_master_set_config+0x364>)
     e50:	47a0      	blx	r4
     e52:	0003      	movs	r3, r0
     e54:	000c      	movs	r4, r1
     e56:	603b      	str	r3, [r7, #0]
     e58:	607c      	str	r4, [r7, #4]
     e5a:	4b4e      	ldr	r3, [pc, #312]	; (f94 <_i2c_master_set_config+0x358>)
     e5c:	6a38      	ldr	r0, [r7, #32]
     e5e:	4798      	blx	r3
     e60:	0002      	movs	r2, r0
     e62:	000b      	movs	r3, r1
     e64:	4c4c      	ldr	r4, [pc, #304]	; (f98 <_i2c_master_set_config+0x35c>)
     e66:	6838      	ldr	r0, [r7, #0]
     e68:	6879      	ldr	r1, [r7, #4]
     e6a:	47a0      	blx	r4
     e6c:	0003      	movs	r3, r0
     e6e:	000c      	movs	r4, r1
     e70:	0018      	movs	r0, r3
     e72:	0021      	movs	r1, r4
     e74:	4c4b      	ldr	r4, [pc, #300]	; (fa4 <_i2c_master_set_config+0x368>)
     e76:	2200      	movs	r2, #0
     e78:	4b4b      	ldr	r3, [pc, #300]	; (fa8 <_i2c_master_set_config+0x36c>)
     e7a:	47a0      	blx	r4
     e7c:	0003      	movs	r3, r0
     e7e:	000c      	movs	r4, r1
     e80:	001a      	movs	r2, r3
     e82:	0023      	movs	r3, r4
     e84:	4c44      	ldr	r4, [pc, #272]	; (f98 <_i2c_master_set_config+0x35c>)
     e86:	68b8      	ldr	r0, [r7, #8]
     e88:	68f9      	ldr	r1, [r7, #12]
     e8a:	47a0      	blx	r4
     e8c:	0003      	movs	r3, r0
     e8e:	000c      	movs	r4, r1
     e90:	001a      	movs	r2, r3
     e92:	0023      	movs	r3, r4
     e94:	4c45      	ldr	r4, [pc, #276]	; (fac <_i2c_master_set_config+0x370>)
     e96:	0028      	movs	r0, r5
     e98:	0031      	movs	r1, r6
     e9a:	47a0      	blx	r4
     e9c:	0003      	movs	r3, r0
     e9e:	000c      	movs	r4, r1
     ea0:	001d      	movs	r5, r3
     ea2:	0026      	movs	r6, r4
     ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ea6:	005a      	lsls	r2, r3, #1
     ea8:	4b3a      	ldr	r3, [pc, #232]	; (f94 <_i2c_master_set_config+0x358>)
     eaa:	0010      	movs	r0, r2
     eac:	4798      	blx	r3
     eae:	0002      	movs	r2, r0
     eb0:	000b      	movs	r3, r1
     eb2:	4c3c      	ldr	r4, [pc, #240]	; (fa4 <_i2c_master_set_config+0x368>)
     eb4:	0028      	movs	r0, r5
     eb6:	0031      	movs	r1, r6
     eb8:	47a0      	blx	r4
     eba:	0003      	movs	r3, r0
     ebc:	000c      	movs	r4, r1
     ebe:	0018      	movs	r0, r3
     ec0:	0021      	movs	r1, r4
     ec2:	4c3a      	ldr	r4, [pc, #232]	; (fac <_i2c_master_set_config+0x370>)
     ec4:	2200      	movs	r2, #0
     ec6:	4b3a      	ldr	r3, [pc, #232]	; (fb0 <_i2c_master_set_config+0x374>)
     ec8:	47a0      	blx	r4
     eca:	0003      	movs	r3, r0
     ecc:	000c      	movs	r4, r1
     ece:	001d      	movs	r5, r3
     ed0:	0026      	movs	r6, r4
     ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ed4:	005a      	lsls	r2, r3, #1
     ed6:	4b2f      	ldr	r3, [pc, #188]	; (f94 <_i2c_master_set_config+0x358>)
     ed8:	0010      	movs	r0, r2
     eda:	4798      	blx	r3
     edc:	0002      	movs	r2, r0
     ede:	000b      	movs	r3, r1
     ee0:	4c34      	ldr	r4, [pc, #208]	; (fb4 <_i2c_master_set_config+0x378>)
     ee2:	0028      	movs	r0, r5
     ee4:	0031      	movs	r1, r6
     ee6:	47a0      	blx	r4
     ee8:	0003      	movs	r3, r0
     eea:	000c      	movs	r4, r1
     eec:	0019      	movs	r1, r3
     eee:	0022      	movs	r2, r4
     ef0:	4b31      	ldr	r3, [pc, #196]	; (fb8 <_i2c_master_set_config+0x37c>)
     ef2:	0008      	movs	r0, r1
     ef4:	0011      	movs	r1, r2
     ef6:	4798      	blx	r3
     ef8:	0003      	movs	r3, r0
     efa:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     efc:	693b      	ldr	r3, [r7, #16]
     efe:	689a      	ldr	r2, [r3, #8]
     f00:	2380      	movs	r3, #128	; 0x80
     f02:	049b      	lsls	r3, r3, #18
     f04:	429a      	cmp	r2, r3
     f06:	d16a      	bne.n	fde <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     f08:	4b22      	ldr	r3, [pc, #136]	; (f94 <_i2c_master_set_config+0x358>)
     f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     f0c:	4798      	blx	r3
     f0e:	4c25      	ldr	r4, [pc, #148]	; (fa4 <_i2c_master_set_config+0x368>)
     f10:	0002      	movs	r2, r0
     f12:	000b      	movs	r3, r1
     f14:	47a0      	blx	r4
     f16:	0003      	movs	r3, r0
     f18:	000c      	movs	r4, r1
     f1a:	001d      	movs	r5, r3
     f1c:	0026      	movs	r6, r4
     f1e:	4b1d      	ldr	r3, [pc, #116]	; (f94 <_i2c_master_set_config+0x358>)
     f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
     f22:	4798      	blx	r3
     f24:	4c1c      	ldr	r4, [pc, #112]	; (f98 <_i2c_master_set_config+0x35c>)
     f26:	2200      	movs	r2, #0
     f28:	4b24      	ldr	r3, [pc, #144]	; (fbc <_i2c_master_set_config+0x380>)
     f2a:	47a0      	blx	r4
     f2c:	0003      	movs	r3, r0
     f2e:	000c      	movs	r4, r1
     f30:	001a      	movs	r2, r3
     f32:	0023      	movs	r3, r4
     f34:	4c1f      	ldr	r4, [pc, #124]	; (fb4 <_i2c_master_set_config+0x378>)
     f36:	0028      	movs	r0, r5
     f38:	0031      	movs	r1, r6
     f3a:	47a0      	blx	r4
     f3c:	0003      	movs	r3, r0
     f3e:	000c      	movs	r4, r1
     f40:	0018      	movs	r0, r3
     f42:	0021      	movs	r1, r4
     f44:	4c19      	ldr	r4, [pc, #100]	; (fac <_i2c_master_set_config+0x370>)
     f46:	2200      	movs	r2, #0
     f48:	4b19      	ldr	r3, [pc, #100]	; (fb0 <_i2c_master_set_config+0x374>)
     f4a:	47a0      	blx	r4
     f4c:	0003      	movs	r3, r0
     f4e:	000c      	movs	r4, r1
     f50:	0019      	movs	r1, r3
     f52:	0022      	movs	r2, r4
     f54:	4b18      	ldr	r3, [pc, #96]	; (fb8 <_i2c_master_set_config+0x37c>)
     f56:	0008      	movs	r0, r1
     f58:	0011      	movs	r1, r2
     f5a:	4798      	blx	r3
     f5c:	0003      	movs	r3, r0
     f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
     f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f62:	2b00      	cmp	r3, #0
     f64:	d02e      	beq.n	fc4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     f66:	4b16      	ldr	r3, [pc, #88]	; (fc0 <_i2c_master_set_config+0x384>)
     f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
     f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     f6c:	4798      	blx	r3
     f6e:	0003      	movs	r3, r0
     f70:	1e9a      	subs	r2, r3, #2
     f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f74:	1ad3      	subs	r3, r2, r3
     f76:	653b      	str	r3, [r7, #80]	; 0x50
     f78:	e031      	b.n	fde <_i2c_master_set_config+0x3a2>
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	000027f9 	.word	0x000027f9
     f80:	00000bad 	.word	0x00000bad
     f84:	0000263d 	.word	0x0000263d
     f88:	000033dd 	.word	0x000033dd
     f8c:	00000bd5 	.word	0x00000bd5
     f90:	00003219 	.word	0x00003219
     f94:	000056a9 	.word	0x000056a9
     f98:	00004a91 	.word	0x00004a91
     f9c:	e826d695 	.word	0xe826d695
     fa0:	3e112e0b 	.word	0x3e112e0b
     fa4:	00003e09 	.word	0x00003e09
     fa8:	40240000 	.word	0x40240000
     fac:	00004f91 	.word	0x00004f91
     fb0:	3ff00000 	.word	0x3ff00000
     fb4:	00004429 	.word	0x00004429
     fb8:	000055bd 	.word	0x000055bd
     fbc:	40080000 	.word	0x40080000
     fc0:	00003889 	.word	0x00003889
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fc6:	005a      	lsls	r2, r3, #1
     fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fca:	18d3      	adds	r3, r2, r3
     fcc:	1e5a      	subs	r2, r3, #1
     fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fd0:	0059      	lsls	r1, r3, #1
     fd2:	4b1d      	ldr	r3, [pc, #116]	; (1048 <_i2c_master_set_config+0x40c>)
     fd4:	0010      	movs	r0, r2
     fd6:	4798      	blx	r3
     fd8:	0003      	movs	r3, r0
     fda:	3b01      	subs	r3, #1
     fdc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fe0:	2bff      	cmp	r3, #255	; 0xff
     fe2:	dc08      	bgt.n	ff6 <_i2c_master_set_config+0x3ba>
     fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fe6:	2b00      	cmp	r3, #0
     fe8:	db05      	blt.n	ff6 <_i2c_master_set_config+0x3ba>
     fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     fec:	2bff      	cmp	r3, #255	; 0xff
     fee:	dc02      	bgt.n	ff6 <_i2c_master_set_config+0x3ba>
     ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     ff2:	2b00      	cmp	r3, #0
     ff4:	da06      	bge.n	1004 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ff6:	233b      	movs	r3, #59	; 0x3b
     ff8:	2210      	movs	r2, #16
     ffa:	4694      	mov	ip, r2
     ffc:	44bc      	add	ip, r7
     ffe:	4463      	add	r3, ip
    1000:	2240      	movs	r2, #64	; 0x40
    1002:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1004:	233b      	movs	r3, #59	; 0x3b
    1006:	2210      	movs	r2, #16
    1008:	4694      	mov	ip, r2
    100a:	44bc      	add	ip, r7
    100c:	4463      	add	r3, ip
    100e:	781b      	ldrb	r3, [r3, #0]
    1010:	2b40      	cmp	r3, #64	; 0x40
    1012:	d00e      	beq.n	1032 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1016:	22ff      	movs	r2, #255	; 0xff
    1018:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    101a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    101c:	041b      	lsls	r3, r3, #16
    101e:	0019      	movs	r1, r3
    1020:	23ff      	movs	r3, #255	; 0xff
    1022:	041b      	lsls	r3, r3, #16
    1024:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1026:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    102a:	0612      	lsls	r2, r2, #24
    102c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1030:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1032:	233b      	movs	r3, #59	; 0x3b
    1034:	2210      	movs	r2, #16
    1036:	4694      	mov	ip, r2
    1038:	44bc      	add	ip, r7
    103a:	4463      	add	r3, ip
    103c:	781b      	ldrb	r3, [r3, #0]
}
    103e:	0018      	movs	r0, r3
    1040:	46bd      	mov	sp, r7
    1042:	b017      	add	sp, #92	; 0x5c
    1044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00003889 	.word	0x00003889

0000104c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    104c:	b580      	push	{r7, lr}
    104e:	b08a      	sub	sp, #40	; 0x28
    1050:	af00      	add	r7, sp, #0
    1052:	60f8      	str	r0, [r7, #12]
    1054:	60b9      	str	r1, [r7, #8]
    1056:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1058:	68fb      	ldr	r3, [r7, #12]
    105a:	68ba      	ldr	r2, [r7, #8]
    105c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    105e:	68fb      	ldr	r3, [r7, #12]
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1064:	68fb      	ldr	r3, [r7, #12]
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	0018      	movs	r0, r3
    106a:	4b2f      	ldr	r3, [pc, #188]	; (1128 <i2c_master_init+0xdc>)
    106c:	4798      	blx	r3
    106e:	0003      	movs	r3, r0
    1070:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    1072:	69bb      	ldr	r3, [r7, #24]
    1074:	2b05      	cmp	r3, #5
    1076:	d104      	bne.n	1082 <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1078:	2301      	movs	r3, #1
    107a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    107c:	2318      	movs	r3, #24
    107e:	623b      	str	r3, [r7, #32]
    1080:	e004      	b.n	108c <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1082:	69bb      	ldr	r3, [r7, #24]
    1084:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1086:	69bb      	ldr	r3, [r7, #24]
    1088:	3312      	adds	r3, #18
    108a:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    108c:	69bb      	ldr	r3, [r7, #24]
    108e:	2b05      	cmp	r3, #5
    1090:	d108      	bne.n	10a4 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1092:	2201      	movs	r2, #1
    1094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1096:	409a      	lsls	r2, r3
    1098:	0013      	movs	r3, r2
    109a:	0019      	movs	r1, r3
    109c:	2003      	movs	r0, #3
    109e:	4b23      	ldr	r3, [pc, #140]	; (112c <i2c_master_init+0xe0>)
    10a0:	4798      	blx	r3
    10a2:	e007      	b.n	10b4 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10a4:	2201      	movs	r2, #1
    10a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10a8:	409a      	lsls	r2, r3
    10aa:	0013      	movs	r3, r2
    10ac:	0019      	movs	r1, r3
    10ae:	2002      	movs	r0, #2
    10b0:	4b1e      	ldr	r3, [pc, #120]	; (112c <i2c_master_init+0xe0>)
    10b2:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    10b4:	2314      	movs	r3, #20
    10b6:	18fb      	adds	r3, r7, r3
    10b8:	0018      	movs	r0, r3
    10ba:	4b1d      	ldr	r3, [pc, #116]	; (1130 <i2c_master_init+0xe4>)
    10bc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	7b1a      	ldrb	r2, [r3, #12]
    10c2:	2314      	movs	r3, #20
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10c8:	6a3b      	ldr	r3, [r7, #32]
    10ca:	b2db      	uxtb	r3, r3
    10cc:	2214      	movs	r2, #20
    10ce:	18ba      	adds	r2, r7, r2
    10d0:	0011      	movs	r1, r2
    10d2:	0018      	movs	r0, r3
    10d4:	4b17      	ldr	r3, [pc, #92]	; (1134 <i2c_master_init+0xe8>)
    10d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10d8:	6a3b      	ldr	r3, [r7, #32]
    10da:	b2db      	uxtb	r3, r3
    10dc:	0018      	movs	r0, r3
    10de:	4b16      	ldr	r3, [pc, #88]	; (1138 <i2c_master_init+0xec>)
    10e0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	7b1b      	ldrb	r3, [r3, #12]
    10e6:	2100      	movs	r1, #0
    10e8:	0018      	movs	r0, r3
    10ea:	4b14      	ldr	r3, [pc, #80]	; (113c <i2c_master_init+0xf0>)
    10ec:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    10ee:	69fb      	ldr	r3, [r7, #28]
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	2202      	movs	r2, #2
    10f4:	4013      	ands	r3, r2
    10f6:	d001      	beq.n	10fc <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    10f8:	231c      	movs	r3, #28
    10fa:	e010      	b.n	111e <i2c_master_init+0xd2>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    10fc:	69fb      	ldr	r3, [r7, #28]
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	2201      	movs	r2, #1
    1102:	4013      	ands	r3, r2
    1104:	d001      	beq.n	110a <i2c_master_init+0xbe>
		return STATUS_BUSY;
    1106:	2305      	movs	r3, #5
    1108:	e009      	b.n	111e <i2c_master_init+0xd2>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    110a:	69fb      	ldr	r3, [r7, #28]
    110c:	2214      	movs	r2, #20
    110e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	0011      	movs	r1, r2
    1116:	0018      	movs	r0, r3
    1118:	4b09      	ldr	r3, [pc, #36]	; (1140 <i2c_master_init+0xf4>)
    111a:	4798      	blx	r3
    111c:	0003      	movs	r3, r0
}
    111e:	0018      	movs	r0, r3
    1120:	46bd      	mov	sp, r7
    1122:	b00a      	add	sp, #40	; 0x28
    1124:	bd80      	pop	{r7, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	000027f9 	.word	0x000027f9
    112c:	00000b31 	.word	0x00000b31
    1130:	00000b19 	.word	0x00000b19
    1134:	00003129 	.word	0x00003129
    1138:	00003169 	.word	0x00003169
    113c:	000025b1 	.word	0x000025b1
    1140:	00000c3d 	.word	0x00000c3d

00001144 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1144:	b580      	push	{r7, lr}
    1146:	b084      	sub	sp, #16
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	7e1b      	ldrb	r3, [r3, #24]
    1156:	b2db      	uxtb	r3, r3
    1158:	001a      	movs	r2, r3
    115a:	2302      	movs	r3, #2
    115c:	4013      	ands	r3, r2
    115e:	d00b      	beq.n	1178 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	2202      	movs	r2, #2
    1164:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	8b5b      	ldrh	r3, [r3, #26]
    116a:	b29b      	uxth	r3, r3
    116c:	001a      	movs	r2, r3
    116e:	2302      	movs	r3, #2
    1170:	4013      	ands	r3, r2
    1172:	d011      	beq.n	1198 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1174:	2341      	movs	r3, #65	; 0x41
    1176:	e010      	b.n	119a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	8b5b      	ldrh	r3, [r3, #26]
    117c:	b29b      	uxth	r3, r3
    117e:	001a      	movs	r2, r3
    1180:	2304      	movs	r3, #4
    1182:	4013      	ands	r3, r2
    1184:	d008      	beq.n	1198 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1186:	68fb      	ldr	r3, [r7, #12]
    1188:	685b      	ldr	r3, [r3, #4]
    118a:	22c0      	movs	r2, #192	; 0xc0
    118c:	0292      	lsls	r2, r2, #10
    118e:	431a      	orrs	r2, r3
    1190:	68fb      	ldr	r3, [r7, #12]
    1192:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1194:	2318      	movs	r3, #24
    1196:	e000      	b.n	119a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1198:	2300      	movs	r3, #0
}
    119a:	0018      	movs	r0, r3
    119c:	46bd      	mov	sp, r7
    119e:	b004      	add	sp, #16
    11a0:	bd80      	pop	{r7, pc}

000011a2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    11a2:	b580      	push	{r7, lr}
    11a4:	b084      	sub	sp, #16
    11a6:	af00      	add	r7, sp, #0
    11a8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    11b0:	230e      	movs	r3, #14
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	2200      	movs	r2, #0
    11b6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11b8:	e00f      	b.n	11da <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    11ba:	230e      	movs	r3, #14
    11bc:	18fb      	adds	r3, r7, r3
    11be:	220e      	movs	r2, #14
    11c0:	18ba      	adds	r2, r7, r2
    11c2:	8812      	ldrh	r2, [r2, #0]
    11c4:	3201      	adds	r2, #1
    11c6:	801a      	strh	r2, [r3, #0]
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	891b      	ldrh	r3, [r3, #8]
    11cc:	220e      	movs	r2, #14
    11ce:	18ba      	adds	r2, r7, r2
    11d0:	8812      	ldrh	r2, [r2, #0]
    11d2:	429a      	cmp	r2, r3
    11d4:	d301      	bcc.n	11da <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    11d6:	2312      	movs	r3, #18
    11d8:	e00e      	b.n	11f8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11da:	68bb      	ldr	r3, [r7, #8]
    11dc:	7e1b      	ldrb	r3, [r3, #24]
    11de:	b2db      	uxtb	r3, r3
    11e0:	001a      	movs	r2, r3
    11e2:	2301      	movs	r3, #1
    11e4:	4013      	ands	r3, r2
    11e6:	d106      	bne.n	11f6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	7e1b      	ldrb	r3, [r3, #24]
    11ec:	b2db      	uxtb	r3, r3
    11ee:	001a      	movs	r2, r3
    11f0:	2302      	movs	r3, #2
    11f2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11f4:	d0e1      	beq.n	11ba <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    11f6:	2300      	movs	r3, #0
}
    11f8:	0018      	movs	r0, r3
    11fa:	46bd      	mov	sp, r7
    11fc:	b004      	add	sp, #16
    11fe:	bd80      	pop	{r7, pc}

00001200 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1200:	b590      	push	{r4, r7, lr}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
    1208:	000a      	movs	r2, r1
    120a:	1cfb      	adds	r3, r7, #3
    120c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1214:	68fb      	ldr	r3, [r7, #12]
    1216:	685b      	ldr	r3, [r3, #4]
    1218:	2280      	movs	r2, #128	; 0x80
    121a:	02d2      	lsls	r2, r2, #11
    121c:	431a      	orrs	r2, r3
    121e:	68fb      	ldr	r3, [r7, #12]
    1220:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1222:	1cfb      	adds	r3, r7, #3
    1224:	781a      	ldrb	r2, [r3, #0]
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    122a:	230b      	movs	r3, #11
    122c:	18fc      	adds	r4, r7, r3
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	0018      	movs	r0, r3
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <_i2c_master_send_hs_master_code+0x50>)
    1234:	4798      	blx	r3
    1236:	0003      	movs	r3, r0
    1238:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	2201      	movs	r2, #1
    123e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1240:	230b      	movs	r3, #11
    1242:	18fb      	adds	r3, r7, r3
    1244:	781b      	ldrb	r3, [r3, #0]
}
    1246:	0018      	movs	r0, r3
    1248:	46bd      	mov	sp, r7
    124a:	b005      	add	sp, #20
    124c:	bd90      	pop	{r4, r7, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	000011a3 	.word	0x000011a3

00001254 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1254:	b590      	push	{r4, r7, lr}
    1256:	b087      	sub	sp, #28
    1258:	af00      	add	r7, sp, #0
    125a:	6078      	str	r0, [r7, #4]
    125c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1264:	2314      	movs	r3, #20
    1266:	18fb      	adds	r3, r7, r3
    1268:	683a      	ldr	r2, [r7, #0]
    126a:	8852      	ldrh	r2, [r2, #2]
    126c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    126e:	2312      	movs	r3, #18
    1270:	18fb      	adds	r3, r7, r3
    1272:	2200      	movs	r2, #0
    1274:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	011b      	lsls	r3, r3, #4
    127c:	0fdb      	lsrs	r3, r3, #31
    127e:	b2db      	uxtb	r3, r3
    1280:	001a      	movs	r2, r3
    1282:	230b      	movs	r3, #11
    1284:	18fb      	adds	r3, r7, r3
    1286:	1e51      	subs	r1, r2, #1
    1288:	418a      	sbcs	r2, r1
    128a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    128c:	683b      	ldr	r3, [r7, #0]
    128e:	7a5b      	ldrb	r3, [r3, #9]
    1290:	2b00      	cmp	r3, #0
    1292:	d006      	beq.n	12a2 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1294:	683b      	ldr	r3, [r7, #0]
    1296:	7a9a      	ldrb	r2, [r3, #10]
    1298:	687b      	ldr	r3, [r7, #4]
    129a:	0011      	movs	r1, r2
    129c:	0018      	movs	r0, r3
    129e:	4b85      	ldr	r3, [pc, #532]	; (14b4 <_i2c_master_read_packet+0x260>)
    12a0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	685b      	ldr	r3, [r3, #4]
    12a6:	4a84      	ldr	r2, [pc, #528]	; (14b8 <_i2c_master_read_packet+0x264>)
    12a8:	401a      	ands	r2, r3
    12aa:	68fb      	ldr	r3, [r7, #12]
    12ac:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	7a1b      	ldrb	r3, [r3, #8]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d042      	beq.n	133c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    12b6:	683b      	ldr	r3, [r7, #0]
    12b8:	881b      	ldrh	r3, [r3, #0]
    12ba:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12bc:	683b      	ldr	r3, [r7, #0]
    12be:	7a5b      	ldrb	r3, [r3, #9]
    12c0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    12c2:	4313      	orrs	r3, r2
    12c4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12c6:	2380      	movs	r3, #128	; 0x80
    12c8:	021b      	lsls	r3, r3, #8
    12ca:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    12d0:	2317      	movs	r3, #23
    12d2:	18fc      	adds	r4, r7, r3
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	0018      	movs	r0, r3
    12d8:	4b78      	ldr	r3, [pc, #480]	; (14bc <_i2c_master_read_packet+0x268>)
    12da:	4798      	blx	r3
    12dc:	0003      	movs	r3, r0
    12de:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    12e0:	68fb      	ldr	r3, [r7, #12]
    12e2:	685b      	ldr	r3, [r3, #4]
    12e4:	4a74      	ldr	r2, [pc, #464]	; (14b8 <_i2c_master_read_packet+0x264>)
    12e6:	401a      	ands	r2, r3
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    12ec:	2317      	movs	r3, #23
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	781b      	ldrb	r3, [r3, #0]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d107      	bne.n	1306 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    12f6:	2317      	movs	r3, #23
    12f8:	18fc      	adds	r4, r7, r3
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	0018      	movs	r0, r3
    12fe:	4b70      	ldr	r3, [pc, #448]	; (14c0 <_i2c_master_read_packet+0x26c>)
    1300:	4798      	blx	r3
    1302:	0003      	movs	r3, r0
    1304:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1306:	2317      	movs	r3, #23
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d111      	bne.n	1334 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1310:	683b      	ldr	r3, [r7, #0]
    1312:	881b      	ldrh	r3, [r3, #0]
    1314:	0a1b      	lsrs	r3, r3, #8
    1316:	b29b      	uxth	r3, r3
    1318:	2278      	movs	r2, #120	; 0x78
    131a:	4313      	orrs	r3, r2
    131c:	b29b      	uxth	r3, r3
    131e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1320:	683b      	ldr	r3, [r7, #0]
    1322:	7a5b      	ldrb	r3, [r3, #9]
    1324:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1326:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1328:	2201      	movs	r2, #1
    132a:	4313      	orrs	r3, r2
    132c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	625a      	str	r2, [r3, #36]	; 0x24
    1332:	e00f      	b.n	1354 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1334:	2317      	movs	r3, #23
    1336:	18fb      	adds	r3, r7, r3
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	e0b6      	b.n	14aa <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    133c:	683b      	ldr	r3, [r7, #0]
    133e:	881b      	ldrh	r3, [r3, #0]
    1340:	005b      	lsls	r3, r3, #1
    1342:	2201      	movs	r2, #1
    1344:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1346:	683b      	ldr	r3, [r7, #0]
    1348:	7a5b      	ldrb	r3, [r3, #9]
    134a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    134c:	4313      	orrs	r3, r2
    134e:	001a      	movs	r2, r3
    1350:	68fb      	ldr	r3, [r7, #12]
    1352:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1354:	2317      	movs	r3, #23
    1356:	18fc      	adds	r4, r7, r3
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	0018      	movs	r0, r3
    135c:	4b57      	ldr	r3, [pc, #348]	; (14bc <_i2c_master_read_packet+0x268>)
    135e:	4798      	blx	r3
    1360:	0003      	movs	r3, r0
    1362:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1364:	230b      	movs	r3, #11
    1366:	18fb      	adds	r3, r7, r3
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d00b      	beq.n	1386 <_i2c_master_read_packet+0x132>
    136e:	683b      	ldr	r3, [r7, #0]
    1370:	885b      	ldrh	r3, [r3, #2]
    1372:	2b01      	cmp	r3, #1
    1374:	d107      	bne.n	1386 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1376:	68fb      	ldr	r3, [r7, #12]
    1378:	685b      	ldr	r3, [r3, #4]
    137a:	2280      	movs	r2, #128	; 0x80
    137c:	02d2      	lsls	r2, r2, #11
    137e:	431a      	orrs	r2, r3
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	605a      	str	r2, [r3, #4]
    1384:	e005      	b.n	1392 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	685b      	ldr	r3, [r3, #4]
    138a:	4a4b      	ldr	r2, [pc, #300]	; (14b8 <_i2c_master_read_packet+0x264>)
    138c:	401a      	ands	r2, r3
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1392:	2317      	movs	r3, #23
    1394:	18fb      	adds	r3, r7, r3
    1396:	781b      	ldrb	r3, [r3, #0]
    1398:	2b00      	cmp	r3, #0
    139a:	d107      	bne.n	13ac <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    139c:	2317      	movs	r3, #23
    139e:	18fc      	adds	r4, r7, r3
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	0018      	movs	r0, r3
    13a4:	4b46      	ldr	r3, [pc, #280]	; (14c0 <_i2c_master_read_packet+0x26c>)
    13a6:	4798      	blx	r3
    13a8:	0003      	movs	r3, r0
    13aa:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    13ac:	2317      	movs	r3, #23
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	2b00      	cmp	r3, #0
    13b4:	d000      	beq.n	13b8 <_i2c_master_read_packet+0x164>
    13b6:	e075      	b.n	14a4 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    13b8:	e04b      	b.n	1452 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	8b5b      	ldrh	r3, [r3, #26]
    13be:	b29b      	uxth	r3, r3
    13c0:	001a      	movs	r2, r3
    13c2:	2320      	movs	r3, #32
    13c4:	4013      	ands	r3, r2
    13c6:	d101      	bne.n	13cc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    13c8:	2341      	movs	r3, #65	; 0x41
    13ca:	e06e      	b.n	14aa <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	7adb      	ldrb	r3, [r3, #11]
    13d0:	2b00      	cmp	r3, #0
    13d2:	d01e      	beq.n	1412 <_i2c_master_read_packet+0x1be>
    13d4:	230b      	movs	r3, #11
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	2201      	movs	r2, #1
    13dc:	4053      	eors	r3, r2
    13de:	b2db      	uxtb	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	d004      	beq.n	13ee <_i2c_master_read_packet+0x19a>
    13e4:	2314      	movs	r3, #20
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	881b      	ldrh	r3, [r3, #0]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d009      	beq.n	1402 <_i2c_master_read_packet+0x1ae>
    13ee:	230b      	movs	r3, #11
    13f0:	18fb      	adds	r3, r7, r3
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d00c      	beq.n	1412 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    13f8:	2314      	movs	r3, #20
    13fa:	18fb      	adds	r3, r7, r3
    13fc:	881b      	ldrh	r3, [r3, #0]
    13fe:	2b01      	cmp	r3, #1
    1400:	d107      	bne.n	1412 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	685b      	ldr	r3, [r3, #4]
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	02d2      	lsls	r2, r2, #11
    140a:	431a      	orrs	r2, r3
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	605a      	str	r2, [r3, #4]
    1410:	e01a      	b.n	1448 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	0018      	movs	r0, r3
    1416:	4b2b      	ldr	r3, [pc, #172]	; (14c4 <_i2c_master_read_packet+0x270>)
    1418:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    141a:	683b      	ldr	r3, [r7, #0]
    141c:	685a      	ldr	r2, [r3, #4]
    141e:	2312      	movs	r3, #18
    1420:	18fb      	adds	r3, r7, r3
    1422:	881b      	ldrh	r3, [r3, #0]
    1424:	2112      	movs	r1, #18
    1426:	1879      	adds	r1, r7, r1
    1428:	1c58      	adds	r0, r3, #1
    142a:	8008      	strh	r0, [r1, #0]
    142c:	18d3      	adds	r3, r2, r3
    142e:	68fa      	ldr	r2, [r7, #12]
    1430:	2128      	movs	r1, #40	; 0x28
    1432:	5c52      	ldrb	r2, [r2, r1]
    1434:	b2d2      	uxtb	r2, r2
    1436:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1438:	2317      	movs	r3, #23
    143a:	18fc      	adds	r4, r7, r3
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	0018      	movs	r0, r3
    1440:	4b1e      	ldr	r3, [pc, #120]	; (14bc <_i2c_master_read_packet+0x268>)
    1442:	4798      	blx	r3
    1444:	0003      	movs	r3, r0
    1446:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1448:	2317      	movs	r3, #23
    144a:	18fb      	adds	r3, r7, r3
    144c:	781b      	ldrb	r3, [r3, #0]
    144e:	2b00      	cmp	r3, #0
    1450:	d109      	bne.n	1466 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    1452:	2314      	movs	r3, #20
    1454:	18fb      	adds	r3, r7, r3
    1456:	881b      	ldrh	r3, [r3, #0]
    1458:	2214      	movs	r2, #20
    145a:	18ba      	adds	r2, r7, r2
    145c:	1e59      	subs	r1, r3, #1
    145e:	8011      	strh	r1, [r2, #0]
    1460:	2b00      	cmp	r3, #0
    1462:	d1aa      	bne.n	13ba <_i2c_master_read_packet+0x166>
    1464:	e000      	b.n	1468 <_i2c_master_read_packet+0x214>
				break;
    1466:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	7a9b      	ldrb	r3, [r3, #10]
    146c:	2b00      	cmp	r3, #0
    146e:	d00a      	beq.n	1486 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	0018      	movs	r0, r3
    1474:	4b13      	ldr	r3, [pc, #76]	; (14c4 <_i2c_master_read_packet+0x270>)
    1476:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	685b      	ldr	r3, [r3, #4]
    147c:	22c0      	movs	r2, #192	; 0xc0
    147e:	0292      	lsls	r2, r2, #10
    1480:	431a      	orrs	r2, r3
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	0018      	movs	r0, r3
    148a:	4b0e      	ldr	r3, [pc, #56]	; (14c4 <_i2c_master_read_packet+0x270>)
    148c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    148e:	683b      	ldr	r3, [r7, #0]
    1490:	685a      	ldr	r2, [r3, #4]
    1492:	2312      	movs	r3, #18
    1494:	18fb      	adds	r3, r7, r3
    1496:	881b      	ldrh	r3, [r3, #0]
    1498:	18d3      	adds	r3, r2, r3
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	2128      	movs	r1, #40	; 0x28
    149e:	5c52      	ldrb	r2, [r2, r1]
    14a0:	b2d2      	uxtb	r2, r2
    14a2:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    14a4:	2317      	movs	r3, #23
    14a6:	18fb      	adds	r3, r7, r3
    14a8:	781b      	ldrb	r3, [r3, #0]
}
    14aa:	0018      	movs	r0, r3
    14ac:	46bd      	mov	sp, r7
    14ae:	b007      	add	sp, #28
    14b0:	bd90      	pop	{r4, r7, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001201 	.word	0x00001201
    14b8:	fffbffff 	.word	0xfffbffff
    14bc:	000011a3 	.word	0x000011a3
    14c0:	00001145 	.word	0x00001145
    14c4:	00000c19 	.word	0x00000c19

000014c8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b082      	sub	sp, #8
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	2201      	movs	r2, #1
    14d6:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    14d8:	687b      	ldr	r3, [r7, #4]
    14da:	2201      	movs	r2, #1
    14dc:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    14de:	683a      	ldr	r2, [r7, #0]
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	0011      	movs	r1, r2
    14e4:	0018      	movs	r0, r3
    14e6:	4b03      	ldr	r3, [pc, #12]	; (14f4 <i2c_master_read_packet_wait+0x2c>)
    14e8:	4798      	blx	r3
    14ea:	0003      	movs	r3, r0
}
    14ec:	0018      	movs	r0, r3
    14ee:	46bd      	mov	sp, r7
    14f0:	b002      	add	sp, #8
    14f2:	bd80      	pop	{r7, pc}
    14f4:	00001255 	.word	0x00001255

000014f8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14f8:	b590      	push	{r4, r7, lr}
    14fa:	b087      	sub	sp, #28
    14fc:	af00      	add	r7, sp, #0
    14fe:	6078      	str	r0, [r7, #4]
    1500:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1508:	2314      	movs	r3, #20
    150a:	18fb      	adds	r3, r7, r3
    150c:	683a      	ldr	r2, [r7, #0]
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	0018      	movs	r0, r3
    1516:	4b51      	ldr	r3, [pc, #324]	; (165c <_i2c_master_write_packet+0x164>)
    1518:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    151a:	683b      	ldr	r3, [r7, #0]
    151c:	7a5b      	ldrb	r3, [r3, #9]
    151e:	2b00      	cmp	r3, #0
    1520:	d006      	beq.n	1530 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1522:	683b      	ldr	r3, [r7, #0]
    1524:	7a9a      	ldrb	r2, [r3, #10]
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	0011      	movs	r1, r2
    152a:	0018      	movs	r0, r3
    152c:	4b4c      	ldr	r3, [pc, #304]	; (1660 <_i2c_master_write_packet+0x168>)
    152e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	685b      	ldr	r3, [r3, #4]
    1534:	4a4b      	ldr	r2, [pc, #300]	; (1664 <_i2c_master_write_packet+0x16c>)
    1536:	401a      	ands	r2, r3
    1538:	68fb      	ldr	r3, [r7, #12]
    153a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    153c:	683b      	ldr	r3, [r7, #0]
    153e:	7a1b      	ldrb	r3, [r3, #8]
    1540:	2b00      	cmp	r3, #0
    1542:	d00d      	beq.n	1560 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1544:	683b      	ldr	r3, [r7, #0]
    1546:	881b      	ldrh	r3, [r3, #0]
    1548:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    154a:	683b      	ldr	r3, [r7, #0]
    154c:	7a5b      	ldrb	r3, [r3, #9]
    154e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1550:	4313      	orrs	r3, r2
    1552:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1554:	2380      	movs	r3, #128	; 0x80
    1556:	021b      	lsls	r3, r3, #8
    1558:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    155a:	68fb      	ldr	r3, [r7, #12]
    155c:	625a      	str	r2, [r3, #36]	; 0x24
    155e:	e009      	b.n	1574 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1560:	683b      	ldr	r3, [r7, #0]
    1562:	881b      	ldrh	r3, [r3, #0]
    1564:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1566:	683b      	ldr	r3, [r7, #0]
    1568:	7a5b      	ldrb	r3, [r3, #9]
    156a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    156c:	4313      	orrs	r3, r2
    156e:	001a      	movs	r2, r3
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1574:	2317      	movs	r3, #23
    1576:	18fc      	adds	r4, r7, r3
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	0018      	movs	r0, r3
    157c:	4b3a      	ldr	r3, [pc, #232]	; (1668 <_i2c_master_write_packet+0x170>)
    157e:	4798      	blx	r3
    1580:	0003      	movs	r3, r0
    1582:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1584:	2317      	movs	r3, #23
    1586:	18fb      	adds	r3, r7, r3
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	2b00      	cmp	r3, #0
    158c:	d107      	bne.n	159e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    158e:	2317      	movs	r3, #23
    1590:	18fc      	adds	r4, r7, r3
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	0018      	movs	r0, r3
    1596:	4b35      	ldr	r3, [pc, #212]	; (166c <_i2c_master_write_packet+0x174>)
    1598:	4798      	blx	r3
    159a:	0003      	movs	r3, r0
    159c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    159e:	2317      	movs	r3, #23
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	781b      	ldrb	r3, [r3, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d152      	bne.n	164e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    15a8:	2312      	movs	r3, #18
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	2200      	movs	r2, #0
    15ae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    15b0:	e033      	b.n	161a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	8b5b      	ldrh	r3, [r3, #26]
    15b6:	b29b      	uxth	r3, r3
    15b8:	001a      	movs	r2, r3
    15ba:	2320      	movs	r3, #32
    15bc:	4013      	ands	r3, r2
    15be:	d101      	bne.n	15c4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    15c0:	2341      	movs	r3, #65	; 0x41
    15c2:	e047      	b.n	1654 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	0018      	movs	r0, r3
    15c8:	4b24      	ldr	r3, [pc, #144]	; (165c <_i2c_master_write_packet+0x164>)
    15ca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    15cc:	683b      	ldr	r3, [r7, #0]
    15ce:	685a      	ldr	r2, [r3, #4]
    15d0:	2312      	movs	r3, #18
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	881b      	ldrh	r3, [r3, #0]
    15d6:	2112      	movs	r1, #18
    15d8:	1879      	adds	r1, r7, r1
    15da:	1c58      	adds	r0, r3, #1
    15dc:	8008      	strh	r0, [r1, #0]
    15de:	18d3      	adds	r3, r2, r3
    15e0:	7819      	ldrb	r1, [r3, #0]
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	2228      	movs	r2, #40	; 0x28
    15e6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    15e8:	2317      	movs	r3, #23
    15ea:	18fc      	adds	r4, r7, r3
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	0018      	movs	r0, r3
    15f0:	4b1d      	ldr	r3, [pc, #116]	; (1668 <_i2c_master_write_packet+0x170>)
    15f2:	4798      	blx	r3
    15f4:	0003      	movs	r3, r0
    15f6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    15f8:	2317      	movs	r3, #23
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	781b      	ldrb	r3, [r3, #0]
    15fe:	2b00      	cmp	r3, #0
    1600:	d115      	bne.n	162e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	8b5b      	ldrh	r3, [r3, #26]
    1606:	b29b      	uxth	r3, r3
    1608:	001a      	movs	r2, r3
    160a:	2304      	movs	r3, #4
    160c:	4013      	ands	r3, r2
    160e:	d004      	beq.n	161a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1610:	2317      	movs	r3, #23
    1612:	18fb      	adds	r3, r7, r3
    1614:	221e      	movs	r2, #30
    1616:	701a      	strb	r2, [r3, #0]
				break;
    1618:	e00a      	b.n	1630 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    161a:	2314      	movs	r3, #20
    161c:	18fb      	adds	r3, r7, r3
    161e:	881b      	ldrh	r3, [r3, #0]
    1620:	2214      	movs	r2, #20
    1622:	18ba      	adds	r2, r7, r2
    1624:	1e59      	subs	r1, r3, #1
    1626:	8011      	strh	r1, [r2, #0]
    1628:	2b00      	cmp	r3, #0
    162a:	d1c2      	bne.n	15b2 <_i2c_master_write_packet+0xba>
    162c:	e000      	b.n	1630 <_i2c_master_write_packet+0x138>
				break;
    162e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	7a9b      	ldrb	r3, [r3, #10]
    1634:	2b00      	cmp	r3, #0
    1636:	d00a      	beq.n	164e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	0018      	movs	r0, r3
    163c:	4b07      	ldr	r3, [pc, #28]	; (165c <_i2c_master_write_packet+0x164>)
    163e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	685b      	ldr	r3, [r3, #4]
    1644:	22c0      	movs	r2, #192	; 0xc0
    1646:	0292      	lsls	r2, r2, #10
    1648:	431a      	orrs	r2, r3
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    164e:	2317      	movs	r3, #23
    1650:	18fb      	adds	r3, r7, r3
    1652:	781b      	ldrb	r3, [r3, #0]
}
    1654:	0018      	movs	r0, r3
    1656:	46bd      	mov	sp, r7
    1658:	b007      	add	sp, #28
    165a:	bd90      	pop	{r4, r7, pc}
    165c:	00000c19 	.word	0x00000c19
    1660:	00001201 	.word	0x00001201
    1664:	fffbffff 	.word	0xfffbffff
    1668:	000011a3 	.word	0x000011a3
    166c:	00001145 	.word	0x00001145

00001670 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	6078      	str	r0, [r7, #4]
    1678:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	2201      	movs	r2, #1
    167e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	2201      	movs	r2, #1
    1684:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1686:	683a      	ldr	r2, [r7, #0]
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	0011      	movs	r1, r2
    168c:	0018      	movs	r0, r3
    168e:	4b03      	ldr	r3, [pc, #12]	; (169c <i2c_master_write_packet_wait+0x2c>)
    1690:	4798      	blx	r3
    1692:	0003      	movs	r3, r0
}
    1694:	0018      	movs	r0, r3
    1696:	46bd      	mov	sp, r7
    1698:	b002      	add	sp, #8
    169a:	bd80      	pop	{r7, pc}
    169c:	000014f9 	.word	0x000014f9

000016a0 <system_set_sleepmode>:
 *
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b082      	sub	sp, #8
    16a4:	af00      	add	r7, sp, #0
    16a6:	0002      	movs	r2, r0
    16a8:	1dfb      	adds	r3, r7, #7
    16aa:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
    16ac:	2380      	movs	r3, #128	; 0x80
    16ae:	05db      	lsls	r3, r3, #23
    16b0:	1dfa      	adds	r2, r7, #7
    16b2:	7812      	ldrb	r2, [r2, #0]
    16b4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	2380      	movs	r3, #128	; 0x80
    16ba:	05db      	lsls	r3, r3, #23
    16bc:	785b      	ldrb	r3, [r3, #1]
    16be:	b2db      	uxtb	r3, r3
    16c0:	1dfa      	adds	r2, r7, #7
    16c2:	7812      	ldrb	r2, [r2, #0]
    16c4:	429a      	cmp	r2, r3
    16c6:	d1f7      	bne.n	16b8 <system_set_sleepmode+0x18>
}
    16c8:	46c0      	nop			; (mov r8, r8)
    16ca:	46bd      	mov	sp, r7
    16cc:	b002      	add	sp, #8
    16ce:	bd80      	pop	{r7, pc}

000016d0 <system_sleep>:
 * all ongoing memory accesses have completed. Further, a WFI (Wait For Interrupt)
 * instruction is executed to place the device into the sleep mode specified by
 * \ref system_set_sleepmode.
 */
static inline void system_sleep(void)
{
    16d0:	b580      	push	{r7, lr}
    16d2:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    16d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    16d8:	bf30      	wfi
	__DSB();
	__WFI();
}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	46bd      	mov	sp, r7
    16de:	bd80      	pop	{r7, pc}

000016e0 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	b084      	sub	sp, #16
    16e4:	af00      	add	r7, sp, #0
    16e6:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	22b0      	movs	r2, #176	; 0xb0
    16ec:	0112      	lsls	r2, r2, #4
    16ee:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	2201      	movs	r2, #1
    16f4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	2200      	movs	r2, #0
    16fa:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	2201      	movs	r2, #1
    1700:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1702:	230f      	movs	r3, #15
    1704:	18fb      	adds	r3, r7, r3
    1706:	2200      	movs	r2, #0
    1708:	701a      	strb	r2, [r3, #0]
    170a:	e00e      	b.n	172a <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    170c:	230f      	movs	r3, #15
    170e:	18fb      	adds	r3, r7, r3
    1710:	781a      	ldrb	r2, [r3, #0]
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	3202      	adds	r2, #2
    1716:	0092      	lsls	r2, r2, #2
    1718:	2100      	movs	r1, #0
    171a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    171c:	230f      	movs	r3, #15
    171e:	18fb      	adds	r3, r7, r3
    1720:	781a      	ldrb	r2, [r3, #0]
    1722:	230f      	movs	r3, #15
    1724:	18fb      	adds	r3, r7, r3
    1726:	3201      	adds	r2, #1
    1728:	701a      	strb	r2, [r3, #0]
    172a:	230f      	movs	r3, #15
    172c:	18fb      	adds	r3, r7, r3
    172e:	781b      	ldrb	r3, [r3, #0]
    1730:	2b01      	cmp	r3, #1
    1732:	d9eb      	bls.n	170c <rtc_count_get_config_defaults+0x2c>
	}
}
    1734:	46c0      	nop			; (mov r8, r8)
    1736:	46bd      	mov	sp, r7
    1738:	b004      	add	sp, #16
    173a:	bd80      	pop	{r7, pc}

0000173c <rtc_callback>:
 #include "rtc_interface.h"

 static struct rtc_module module;

 static void rtc_callback(void)
 {
    173c:	b580      	push	{r7, lr}
    173e:	af00      	add	r7, sp, #0
	// TODO do anything else?
	rtc_count_disable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    1740:	4b03      	ldr	r3, [pc, #12]	; (1750 <rtc_callback+0x14>)
    1742:	2108      	movs	r1, #8
    1744:	0018      	movs	r0, r3
    1746:	4b03      	ldr	r3, [pc, #12]	; (1754 <rtc_callback+0x18>)
    1748:	4798      	blx	r3
 }
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	46bd      	mov	sp, r7
    174e:	bd80      	pop	{r7, pc}
    1750:	2000002c 	.word	0x2000002c
    1754:	00000901 	.word	0x00000901

00001758 <rtc_init>:

 void rtc_init(void)
 {
    1758:	b580      	push	{r7, lr}
    175a:	b084      	sub	sp, #16
    175c:	af00      	add	r7, sp, #0
	// Uses 1.024kHz from ULP32K clock
	struct rtc_count_config config;
	rtc_count_get_config_defaults(&config);
    175e:	003b      	movs	r3, r7
    1760:	0018      	movs	r0, r3
    1762:	4b0f      	ldr	r3, [pc, #60]	; (17a0 <rtc_init+0x48>)
    1764:	4798      	blx	r3
	config.prescaler = RTC_COUNT_PRESCALER_OFF; // 1.024kHz clock
    1766:	003b      	movs	r3, r7
    1768:	2200      	movs	r2, #0
    176a:	801a      	strh	r2, [r3, #0]
	
	rtc_count_init(&module, RTC, &config);
    176c:	003a      	movs	r2, r7
    176e:	490d      	ldr	r1, [pc, #52]	; (17a4 <rtc_init+0x4c>)
    1770:	4b0d      	ldr	r3, [pc, #52]	; (17a8 <rtc_init+0x50>)
    1772:	0018      	movs	r0, r3
    1774:	4b0d      	ldr	r3, [pc, #52]	; (17ac <rtc_init+0x54>)
    1776:	4798      	blx	r3
	rtc_count_set_count(&module, 0);
    1778:	4b0b      	ldr	r3, [pc, #44]	; (17a8 <rtc_init+0x50>)
    177a:	2100      	movs	r1, #0
    177c:	0018      	movs	r0, r3
    177e:	4b0c      	ldr	r3, [pc, #48]	; (17b0 <rtc_init+0x58>)
    1780:	4798      	blx	r3
	rtc_count_enable(&module);
    1782:	4b09      	ldr	r3, [pc, #36]	; (17a8 <rtc_init+0x50>)
    1784:	0018      	movs	r0, r3
    1786:	4b0b      	ldr	r3, [pc, #44]	; (17b4 <rtc_init+0x5c>)
    1788:	4798      	blx	r3

	rtc_count_register_callback(&module, rtc_callback, RTC_COUNT_CALLBACK_COMPARE_0);
    178a:	490b      	ldr	r1, [pc, #44]	; (17b8 <rtc_init+0x60>)
    178c:	4b06      	ldr	r3, [pc, #24]	; (17a8 <rtc_init+0x50>)
    178e:	2208      	movs	r2, #8
    1790:	0018      	movs	r0, r3
    1792:	4b0a      	ldr	r3, [pc, #40]	; (17bc <rtc_init+0x64>)
    1794:	4798      	blx	r3
 }
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	46bd      	mov	sp, r7
    179a:	b004      	add	sp, #16
    179c:	bd80      	pop	{r7, pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	000016e1 	.word	0x000016e1
    17a4:	40002000 	.word	0x40002000
    17a8:	2000002c 	.word	0x2000002c
    17ac:	00000609 	.word	0x00000609
    17b0:	0000066d 	.word	0x0000066d
    17b4:	000003f5 	.word	0x000003f5
    17b8:	0000173d 	.word	0x0000173d
    17bc:	000007c1 	.word	0x000007c1

000017c0 <rtc_idle_delay>:

 void rtc_idle_delay(uint32_t sleep_ms)
 {
    17c0:	b580      	push	{r7, lr}
    17c2:	b084      	sub	sp, #16
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    17c8:	4b0e      	ldr	r3, [pc, #56]	; (1804 <rtc_idle_delay+0x44>)
    17ca:	0018      	movs	r0, r3
    17cc:	4b0e      	ldr	r3, [pc, #56]	; (1808 <rtc_idle_delay+0x48>)
    17ce:	4798      	blx	r3
    17d0:	0003      	movs	r3, r0
    17d2:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    17d4:	68fa      	ldr	r2, [r7, #12]
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	18d3      	adds	r3, r2, r3
    17da:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    17dc:	68b9      	ldr	r1, [r7, #8]
    17de:	4b09      	ldr	r3, [pc, #36]	; (1804 <rtc_idle_delay+0x44>)
    17e0:	2200      	movs	r2, #0
    17e2:	0018      	movs	r0, r3
    17e4:	4b09      	ldr	r3, [pc, #36]	; (180c <rtc_idle_delay+0x4c>)
    17e6:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <rtc_idle_delay+0x44>)
    17ea:	2108      	movs	r1, #8
    17ec:	0018      	movs	r0, r3
    17ee:	4b08      	ldr	r3, [pc, #32]	; (1810 <rtc_idle_delay+0x50>)
    17f0:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
    17f2:	2002      	movs	r0, #2
    17f4:	4b07      	ldr	r3, [pc, #28]	; (1814 <rtc_idle_delay+0x54>)
    17f6:	4798      	blx	r3
	system_sleep();
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <rtc_idle_delay+0x58>)
    17fa:	4798      	blx	r3
 }
    17fc:	46c0      	nop			; (mov r8, r8)
    17fe:	46bd      	mov	sp, r7
    1800:	b004      	add	sp, #16
    1802:	bd80      	pop	{r7, pc}
    1804:	2000002c 	.word	0x2000002c
    1808:	000006d9 	.word	0x000006d9
    180c:	00000729 	.word	0x00000729
    1810:	00000875 	.word	0x00000875
    1814:	000016a1 	.word	0x000016a1
    1818:	000016d1 	.word	0x000016d1

0000181c <rtc_standby_delay>:

 void rtc_standby_delay(uint32_t sleep_ms)
 {
    181c:	b580      	push	{r7, lr}
    181e:	b084      	sub	sp, #16
    1820:	af00      	add	r7, sp, #0
    1822:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    1824:	4b0e      	ldr	r3, [pc, #56]	; (1860 <rtc_standby_delay+0x44>)
    1826:	0018      	movs	r0, r3
    1828:	4b0e      	ldr	r3, [pc, #56]	; (1864 <rtc_standby_delay+0x48>)
    182a:	4798      	blx	r3
    182c:	0003      	movs	r3, r0
    182e:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    1830:	68fa      	ldr	r2, [r7, #12]
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	18d3      	adds	r3, r2, r3
    1836:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    1838:	68b9      	ldr	r1, [r7, #8]
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <rtc_standby_delay+0x44>)
    183c:	2200      	movs	r2, #0
    183e:	0018      	movs	r0, r3
    1840:	4b09      	ldr	r3, [pc, #36]	; (1868 <rtc_standby_delay+0x4c>)
    1842:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    1844:	4b06      	ldr	r3, [pc, #24]	; (1860 <rtc_standby_delay+0x44>)
    1846:	2108      	movs	r1, #8
    1848:	0018      	movs	r0, r3
    184a:	4b08      	ldr	r3, [pc, #32]	; (186c <rtc_standby_delay+0x50>)
    184c:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
    184e:	2004      	movs	r0, #4
    1850:	4b07      	ldr	r3, [pc, #28]	; (1870 <rtc_standby_delay+0x54>)
    1852:	4798      	blx	r3
	system_sleep();
    1854:	4b07      	ldr	r3, [pc, #28]	; (1874 <rtc_standby_delay+0x58>)
    1856:	4798      	blx	r3
    1858:	46c0      	nop			; (mov r8, r8)
    185a:	46bd      	mov	sp, r7
    185c:	b004      	add	sp, #16
    185e:	bd80      	pop	{r7, pc}
    1860:	2000002c 	.word	0x2000002c
    1864:	000006d9 	.word	0x000006d9
    1868:	00000729 	.word	0x00000729
    186c:	00000875 	.word	0x00000875
    1870:	000016a1 	.word	0x000016a1
    1874:	000016d1 	.word	0x000016d1

00001878 <bmp280_write_configuration>:
 * \brief Configure Bosch BMP280 registers.
 *
 * \param config Pointer to BMP280 configuration object
 */
static void bmp280_write_configuration(const bmp280_config_t * config)
{
    1878:	b590      	push	{r4, r7, lr}
    187a:	b085      	sub	sp, #20
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
    // Sensor configuration register.
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	781b      	ldrb	r3, [r3, #0]
    1884:	075b      	lsls	r3, r3, #29
    1886:	0f5b      	lsrs	r3, r3, #29
    1888:	b2db      	uxtb	r3, r3
    188a:	015b      	lsls	r3, r3, #5
    188c:	b25a      	sxtb	r2, r3
                   ((config->filter & 0x07) << 2) |
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	069b      	lsls	r3, r3, #26
    1894:	0f5b      	lsrs	r3, r3, #29
    1896:	b2db      	uxtb	r3, r3
    1898:	009b      	lsls	r3, r3, #2
    189a:	b25b      	sxtb	r3, r3
    189c:	211c      	movs	r1, #28
    189e:	400b      	ands	r3, r1
    18a0:	b25b      	sxtb	r3, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    18a2:	4313      	orrs	r3, r2
    18a4:	b25a      	sxtb	r2, r3
                   (config->spi3w_en & 0x01);
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	781b      	ldrb	r3, [r3, #0]
    18aa:	065b      	lsls	r3, r3, #25
    18ac:	0fdb      	lsrs	r3, r3, #31
    18ae:	b2db      	uxtb	r3, r3
    18b0:	b25b      	sxtb	r3, r3
    18b2:	2101      	movs	r1, #1
    18b4:	400b      	ands	r3, r1
    18b6:	b25b      	sxtb	r3, r3
                   ((config->filter & 0x07) << 2) |
    18b8:	4313      	orrs	r3, r2
    18ba:	b25b      	sxtb	r3, r3
    18bc:	b2da      	uxtb	r2, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    18be:	230f      	movs	r3, #15
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CONFIG);
    18c4:	230f      	movs	r3, #15
    18c6:	18f8      	adds	r0, r7, r3
    18c8:	23f5      	movs	r3, #245	; 0xf5
    18ca:	2276      	movs	r2, #118	; 0x76
    18cc:	2101      	movs	r1, #1
    18ce:	4c17      	ldr	r4, [pc, #92]	; (192c <bmp280_write_configuration+0xb4>)
    18d0:	47a0      	blx	r4

    // Measurement control configuration register.
    temp = ((config->osrs_t & 0x07) << 5) |
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	785b      	ldrb	r3, [r3, #1]
    18d6:	075b      	lsls	r3, r3, #29
    18d8:	0f5b      	lsrs	r3, r3, #29
    18da:	b2db      	uxtb	r3, r3
    18dc:	015b      	lsls	r3, r3, #5
    18de:	b25a      	sxtb	r2, r3
           ((config->osrs_p & 0x07) << 2) |
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	785b      	ldrb	r3, [r3, #1]
    18e4:	069b      	lsls	r3, r3, #26
    18e6:	0f5b      	lsrs	r3, r3, #29
    18e8:	b2db      	uxtb	r3, r3
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	b25b      	sxtb	r3, r3
    18ee:	211c      	movs	r1, #28
    18f0:	400b      	ands	r3, r1
    18f2:	b25b      	sxtb	r3, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    18f4:	4313      	orrs	r3, r2
    18f6:	b25a      	sxtb	r2, r3
           (config->mode & 0x03);
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	785b      	ldrb	r3, [r3, #1]
    18fc:	061b      	lsls	r3, r3, #24
    18fe:	0f9b      	lsrs	r3, r3, #30
    1900:	b2db      	uxtb	r3, r3
    1902:	b25b      	sxtb	r3, r3
    1904:	2103      	movs	r1, #3
    1906:	400b      	ands	r3, r1
    1908:	b25b      	sxtb	r3, r3
           ((config->osrs_p & 0x07) << 2) |
    190a:	4313      	orrs	r3, r2
    190c:	b25b      	sxtb	r3, r3
    190e:	b2da      	uxtb	r2, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    1910:	230f      	movs	r3, #15
    1912:	18fb      	adds	r3, r7, r3
    1914:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CTRL_MEAS);
    1916:	230f      	movs	r3, #15
    1918:	18f8      	adds	r0, r7, r3
    191a:	23f4      	movs	r3, #244	; 0xf4
    191c:	2276      	movs	r2, #118	; 0x76
    191e:	2101      	movs	r1, #1
    1920:	4c02      	ldr	r4, [pc, #8]	; (192c <bmp280_write_configuration+0xb4>)
    1922:	47a0      	blx	r4
}
    1924:	46c0      	nop			; (mov r8, r8)
    1926:	46bd      	mov	sp, r7
    1928:	b005      	add	sp, #20
    192a:	bd90      	pop	{r4, r7, pc}
    192c:	000021cd 	.word	0x000021cd

00001930 <unpack_uint16>:

static uint16_t unpack_uint16(uint8_t * data)
{
    1930:	b580      	push	{r7, lr}
    1932:	b084      	sub	sp, #16
    1934:	af00      	add	r7, sp, #0
    1936:	6078      	str	r0, [r7, #4]
	uint16_t val = 0;
    1938:	230e      	movs	r3, #14
    193a:	18fb      	adds	r3, r7, r3
    193c:	2200      	movs	r2, #0
    193e:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	781b      	ldrb	r3, [r3, #0]
    1944:	b21a      	sxth	r2, r3
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	3301      	adds	r3, #1
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	021b      	lsls	r3, r3, #8
    194e:	b21b      	sxth	r3, r3
    1950:	4313      	orrs	r3, r2
    1952:	b21a      	sxth	r2, r3
    1954:	230e      	movs	r3, #14
    1956:	18fb      	adds	r3, r7, r3
    1958:	2100      	movs	r1, #0
    195a:	5e5b      	ldrsh	r3, [r3, r1]
    195c:	4313      	orrs	r3, r2
    195e:	b21a      	sxth	r2, r3
    1960:	230e      	movs	r3, #14
    1962:	18fb      	adds	r3, r7, r3
    1964:	801a      	strh	r2, [r3, #0]
	return val;
    1966:	230e      	movs	r3, #14
    1968:	18fb      	adds	r3, r7, r3
    196a:	881b      	ldrh	r3, [r3, #0]
}
    196c:	0018      	movs	r0, r3
    196e:	46bd      	mov	sp, r7
    1970:	b004      	add	sp, #16
    1972:	bd80      	pop	{r7, pc}

00001974 <unpack_int16>:

static int16_t unpack_int16(uint8_t * data)
{
    1974:	b580      	push	{r7, lr}
    1976:	b084      	sub	sp, #16
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	int16_t val = 0;
    197c:	230e      	movs	r3, #14
    197e:	18fb      	adds	r3, r7, r3
    1980:	2200      	movs	r2, #0
    1982:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	781b      	ldrb	r3, [r3, #0]
    1988:	b21a      	sxth	r2, r3
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	3301      	adds	r3, #1
    198e:	781b      	ldrb	r3, [r3, #0]
    1990:	021b      	lsls	r3, r3, #8
    1992:	b21b      	sxth	r3, r3
    1994:	4313      	orrs	r3, r2
    1996:	b219      	sxth	r1, r3
    1998:	230e      	movs	r3, #14
    199a:	18fb      	adds	r3, r7, r3
    199c:	220e      	movs	r2, #14
    199e:	18ba      	adds	r2, r7, r2
    19a0:	8812      	ldrh	r2, [r2, #0]
    19a2:	430a      	orrs	r2, r1
    19a4:	801a      	strh	r2, [r3, #0]
	return val;
    19a6:	230e      	movs	r3, #14
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	2200      	movs	r2, #0
    19ac:	5e9b      	ldrsh	r3, [r3, r2]
}
    19ae:	0018      	movs	r0, r3
    19b0:	46bd      	mov	sp, r7
    19b2:	b004      	add	sp, #16
    19b4:	bd80      	pop	{r7, pc}
	...

000019b8 <init_bmp280>:

/*!
 * \brief Basic initialization function for Bosch BMP280 pressure/temperature sensor.
 */
void init_bmp280(void)
{
    19b8:	b590      	push	{r4, r7, lr}
    19ba:	b089      	sub	sp, #36	; 0x24
    19bc:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    19be:	231f      	movs	r3, #31
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	2200      	movs	r2, #0
    19c4:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, BMP280_I2C_ADDR, BMP280_REG_ID);
    19c6:	231f      	movs	r3, #31
    19c8:	18f8      	adds	r0, r7, r3
    19ca:	23d0      	movs	r3, #208	; 0xd0
    19cc:	2276      	movs	r2, #118	; 0x76
    19ce:	2101      	movs	r1, #1
    19d0:	4c49      	ldr	r4, [pc, #292]	; (1af8 <init_bmp280+0x140>)
    19d2:	47a0      	blx	r4
	if (me != BMP280_CHIP_ID)
    19d4:	231f      	movs	r3, #31
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	2b58      	cmp	r3, #88	; 0x58
    19dc:	d000      	beq.n	19e0 <init_bmp280+0x28>
    19de:	e086      	b.n	1aee <init_bmp280+0x136>
    {
        return;
    }

    // Read calibration data if not done already.
	if(bmp280_cal_data.dig_T1 == 0)
    19e0:	4b46      	ldr	r3, [pc, #280]	; (1afc <init_bmp280+0x144>)
    19e2:	881b      	ldrh	r3, [r3, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d177      	bne.n	1ad8 <init_bmp280+0x120>
	{
		uint8_t temp[24] = {0};
    19e8:	1d3b      	adds	r3, r7, #4
    19ea:	0018      	movs	r0, r3
    19ec:	2318      	movs	r3, #24
    19ee:	001a      	movs	r2, r3
    19f0:	2100      	movs	r1, #0
    19f2:	4b43      	ldr	r3, [pc, #268]	; (1b00 <init_bmp280+0x148>)
    19f4:	4798      	blx	r3
		i2c_read_bytes(temp, 24, BMP280_I2C_ADDR, 0x88);
    19f6:	1d38      	adds	r0, r7, #4
    19f8:	2388      	movs	r3, #136	; 0x88
    19fa:	2276      	movs	r2, #118	; 0x76
    19fc:	2118      	movs	r1, #24
    19fe:	4c3e      	ldr	r4, [pc, #248]	; (1af8 <init_bmp280+0x140>)
    1a00:	47a0      	blx	r4

		// Parse calibration data.
		bmp280_cal_data.dig_T1 = unpack_uint16(&temp[0]);
    1a02:	1d3b      	adds	r3, r7, #4
    1a04:	0018      	movs	r0, r3
    1a06:	4b3f      	ldr	r3, [pc, #252]	; (1b04 <init_bmp280+0x14c>)
    1a08:	4798      	blx	r3
    1a0a:	0003      	movs	r3, r0
    1a0c:	001a      	movs	r2, r3
    1a0e:	4b3b      	ldr	r3, [pc, #236]	; (1afc <init_bmp280+0x144>)
    1a10:	801a      	strh	r2, [r3, #0]
		bmp280_cal_data.dig_T2 = unpack_int16(&temp[2]);
    1a12:	1d3b      	adds	r3, r7, #4
    1a14:	3302      	adds	r3, #2
    1a16:	0018      	movs	r0, r3
    1a18:	4b3b      	ldr	r3, [pc, #236]	; (1b08 <init_bmp280+0x150>)
    1a1a:	4798      	blx	r3
    1a1c:	0003      	movs	r3, r0
    1a1e:	001a      	movs	r2, r3
    1a20:	4b36      	ldr	r3, [pc, #216]	; (1afc <init_bmp280+0x144>)
    1a22:	805a      	strh	r2, [r3, #2]
		bmp280_cal_data.dig_T3 = unpack_int16(&temp[4]);
    1a24:	1d3b      	adds	r3, r7, #4
    1a26:	3304      	adds	r3, #4
    1a28:	0018      	movs	r0, r3
    1a2a:	4b37      	ldr	r3, [pc, #220]	; (1b08 <init_bmp280+0x150>)
    1a2c:	4798      	blx	r3
    1a2e:	0003      	movs	r3, r0
    1a30:	001a      	movs	r2, r3
    1a32:	4b32      	ldr	r3, [pc, #200]	; (1afc <init_bmp280+0x144>)
    1a34:	809a      	strh	r2, [r3, #4]
		bmp280_cal_data.dig_P1 = unpack_uint16(&temp[6]);
    1a36:	1d3b      	adds	r3, r7, #4
    1a38:	3306      	adds	r3, #6
    1a3a:	0018      	movs	r0, r3
    1a3c:	4b31      	ldr	r3, [pc, #196]	; (1b04 <init_bmp280+0x14c>)
    1a3e:	4798      	blx	r3
    1a40:	0003      	movs	r3, r0
    1a42:	001a      	movs	r2, r3
    1a44:	4b2d      	ldr	r3, [pc, #180]	; (1afc <init_bmp280+0x144>)
    1a46:	80da      	strh	r2, [r3, #6]
		bmp280_cal_data.dig_P2 = unpack_int16(&temp[8]);
    1a48:	1d3b      	adds	r3, r7, #4
    1a4a:	3308      	adds	r3, #8
    1a4c:	0018      	movs	r0, r3
    1a4e:	4b2e      	ldr	r3, [pc, #184]	; (1b08 <init_bmp280+0x150>)
    1a50:	4798      	blx	r3
    1a52:	0003      	movs	r3, r0
    1a54:	001a      	movs	r2, r3
    1a56:	4b29      	ldr	r3, [pc, #164]	; (1afc <init_bmp280+0x144>)
    1a58:	811a      	strh	r2, [r3, #8]
		bmp280_cal_data.dig_P3 = unpack_int16(&temp[10]);
    1a5a:	1d3b      	adds	r3, r7, #4
    1a5c:	330a      	adds	r3, #10
    1a5e:	0018      	movs	r0, r3
    1a60:	4b29      	ldr	r3, [pc, #164]	; (1b08 <init_bmp280+0x150>)
    1a62:	4798      	blx	r3
    1a64:	0003      	movs	r3, r0
    1a66:	001a      	movs	r2, r3
    1a68:	4b24      	ldr	r3, [pc, #144]	; (1afc <init_bmp280+0x144>)
    1a6a:	815a      	strh	r2, [r3, #10]
		bmp280_cal_data.dig_P4 = unpack_int16(&temp[12]);
    1a6c:	1d3b      	adds	r3, r7, #4
    1a6e:	330c      	adds	r3, #12
    1a70:	0018      	movs	r0, r3
    1a72:	4b25      	ldr	r3, [pc, #148]	; (1b08 <init_bmp280+0x150>)
    1a74:	4798      	blx	r3
    1a76:	0003      	movs	r3, r0
    1a78:	001a      	movs	r2, r3
    1a7a:	4b20      	ldr	r3, [pc, #128]	; (1afc <init_bmp280+0x144>)
    1a7c:	819a      	strh	r2, [r3, #12]
		bmp280_cal_data.dig_P5 = unpack_int16(&temp[14]);
    1a7e:	1d3b      	adds	r3, r7, #4
    1a80:	330e      	adds	r3, #14
    1a82:	0018      	movs	r0, r3
    1a84:	4b20      	ldr	r3, [pc, #128]	; (1b08 <init_bmp280+0x150>)
    1a86:	4798      	blx	r3
    1a88:	0003      	movs	r3, r0
    1a8a:	001a      	movs	r2, r3
    1a8c:	4b1b      	ldr	r3, [pc, #108]	; (1afc <init_bmp280+0x144>)
    1a8e:	81da      	strh	r2, [r3, #14]
		bmp280_cal_data.dig_P6 = unpack_int16(&temp[16]);
    1a90:	1d3b      	adds	r3, r7, #4
    1a92:	3310      	adds	r3, #16
    1a94:	0018      	movs	r0, r3
    1a96:	4b1c      	ldr	r3, [pc, #112]	; (1b08 <init_bmp280+0x150>)
    1a98:	4798      	blx	r3
    1a9a:	0003      	movs	r3, r0
    1a9c:	001a      	movs	r2, r3
    1a9e:	4b17      	ldr	r3, [pc, #92]	; (1afc <init_bmp280+0x144>)
    1aa0:	821a      	strh	r2, [r3, #16]
		bmp280_cal_data.dig_P7 = unpack_int16(&temp[18]);
    1aa2:	1d3b      	adds	r3, r7, #4
    1aa4:	3312      	adds	r3, #18
    1aa6:	0018      	movs	r0, r3
    1aa8:	4b17      	ldr	r3, [pc, #92]	; (1b08 <init_bmp280+0x150>)
    1aaa:	4798      	blx	r3
    1aac:	0003      	movs	r3, r0
    1aae:	001a      	movs	r2, r3
    1ab0:	4b12      	ldr	r3, [pc, #72]	; (1afc <init_bmp280+0x144>)
    1ab2:	825a      	strh	r2, [r3, #18]
		bmp280_cal_data.dig_P8 = unpack_int16(&temp[20]);
    1ab4:	1d3b      	adds	r3, r7, #4
    1ab6:	3314      	adds	r3, #20
    1ab8:	0018      	movs	r0, r3
    1aba:	4b13      	ldr	r3, [pc, #76]	; (1b08 <init_bmp280+0x150>)
    1abc:	4798      	blx	r3
    1abe:	0003      	movs	r3, r0
    1ac0:	001a      	movs	r2, r3
    1ac2:	4b0e      	ldr	r3, [pc, #56]	; (1afc <init_bmp280+0x144>)
    1ac4:	829a      	strh	r2, [r3, #20]
		bmp280_cal_data.dig_P9 = unpack_int16(&temp[22]);
    1ac6:	1d3b      	adds	r3, r7, #4
    1ac8:	3316      	adds	r3, #22
    1aca:	0018      	movs	r0, r3
    1acc:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <init_bmp280+0x150>)
    1ace:	4798      	blx	r3
    1ad0:	0003      	movs	r3, r0
    1ad2:	001a      	movs	r2, r3
    1ad4:	4b09      	ldr	r3, [pc, #36]	; (1afc <init_bmp280+0x144>)
    1ad6:	82da      	strh	r2, [r3, #22]
	}

	// Configure barometer in forced mode (1 sample then sleep), 1x oversample on both for <6.4ms measurement time,
	// no filter
    bmp280_config_t config = {
    1ad8:	231c      	movs	r3, #28
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	4a0b      	ldr	r2, [pc, #44]	; (1b0c <init_bmp280+0x154>)
    1ade:	8812      	ldrh	r2, [r2, #0]
    1ae0:	801a      	strh	r2, [r3, #0]
        .spi3w_en   = BMP280_SPI_4_WIRE,
        .osrs_t     = BMP280_TEMP_OSRS_x1,
        .osrs_p     = BMP280_PRES_OSRS_x1,
        .mode       = BMP280_MODE_FORCED,
    };
    bmp280_write_configuration(&config);
    1ae2:	231c      	movs	r3, #28
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b09      	ldr	r3, [pc, #36]	; (1b10 <init_bmp280+0x158>)
    1aea:	4798      	blx	r3
    1aec:	e000      	b.n	1af0 <init_bmp280+0x138>
        return;
    1aee:	46c0      	nop			; (mov r8, r8)
}
    1af0:	46bd      	mov	sp, r7
    1af2:	b009      	add	sp, #36	; 0x24
    1af4:	bd90      	pop	{r4, r7, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	000022fd 	.word	0x000022fd
    1afc:	20000064 	.word	0x20000064
    1b00:	00005a93 	.word	0x00005a93
    1b04:	00001931 	.word	0x00001931
    1b08:	00001975 	.word	0x00001975
    1b0c:	00005acc 	.word	0x00005acc
    1b10:	00001879 	.word	0x00001879

00001b14 <bmp280_compensate_T_int32>:
	
/*!
 * \brief Temperature compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b086      	sub	sp, #24
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	10da      	asrs	r2, r3, #3
    1b20:	4b16      	ldr	r3, [pc, #88]	; (1b7c <bmp280_compensate_T_int32+0x68>)
    1b22:	881b      	ldrh	r3, [r3, #0]
    1b24:	005b      	lsls	r3, r3, #1
    1b26:	1ad3      	subs	r3, r2, r3
            ((int32_t)bmp280_cal_data.dig_T2)) >> 11;
    1b28:	4a14      	ldr	r2, [pc, #80]	; (1b7c <bmp280_compensate_T_int32+0x68>)
    1b2a:	2102      	movs	r1, #2
    1b2c:	5e52      	ldrsh	r2, [r2, r1]
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    1b2e:	4353      	muls	r3, r2
    1b30:	12db      	asrs	r3, r3, #11
    1b32:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	111b      	asrs	r3, r3, #4
    1b38:	4a10      	ldr	r2, [pc, #64]	; (1b7c <bmp280_compensate_T_int32+0x68>)
    1b3a:	8812      	ldrh	r2, [r2, #0]
    1b3c:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    1b3e:	687a      	ldr	r2, [r7, #4]
    1b40:	1112      	asrs	r2, r2, #4
    1b42:	490e      	ldr	r1, [pc, #56]	; (1b7c <bmp280_compensate_T_int32+0x68>)
    1b44:	8809      	ldrh	r1, [r1, #0]
    1b46:	1a52      	subs	r2, r2, r1
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    1b48:	4353      	muls	r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    1b4a:	131b      	asrs	r3, r3, #12
            ((int32_t)bmp280_cal_data.dig_T3)) >> 14;
    1b4c:	4a0b      	ldr	r2, [pc, #44]	; (1b7c <bmp280_compensate_T_int32+0x68>)
    1b4e:	2104      	movs	r1, #4
    1b50:	5e52      	ldrsh	r2, [r2, r1]
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    1b52:	4353      	muls	r3, r2
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    1b54:	139b      	asrs	r3, r3, #14
    1b56:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
    1b58:	697a      	ldr	r2, [r7, #20]
    1b5a:	693b      	ldr	r3, [r7, #16]
    1b5c:	18d2      	adds	r2, r2, r3
    1b5e:	4b08      	ldr	r3, [pc, #32]	; (1b80 <bmp280_compensate_T_int32+0x6c>)
    1b60:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
    1b62:	4b07      	ldr	r3, [pc, #28]	; (1b80 <bmp280_compensate_T_int32+0x6c>)
    1b64:	681a      	ldr	r2, [r3, #0]
    1b66:	0013      	movs	r3, r2
    1b68:	009b      	lsls	r3, r3, #2
    1b6a:	189b      	adds	r3, r3, r2
    1b6c:	3380      	adds	r3, #128	; 0x80
    1b6e:	121b      	asrs	r3, r3, #8
    1b70:	60fb      	str	r3, [r7, #12]
    return T;
    1b72:	68fb      	ldr	r3, [r7, #12]
}
    1b74:	0018      	movs	r0, r3
    1b76:	46bd      	mov	sp, r7
    1b78:	b006      	add	sp, #24
    1b7a:	bd80      	pop	{r7, pc}
    1b7c:	20000064 	.word	0x20000064
    1b80:	2000007c 	.word	0x2000007c

00001b84 <bmp280_compensate_P_int32>:

/*!
 * \brief Pressure compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
    1b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b86:	b0ab      	sub	sp, #172	; 0xac
    1b88:	af00      	add	r7, sp, #0
    1b8a:	238c      	movs	r3, #140	; 0x8c
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	6018      	str	r0, [r3, #0]
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
    1b90:	4bd0      	ldr	r3, [pc, #832]	; (1ed4 <bmp280_compensate_P_int32+0x350>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	0019      	movs	r1, r3
    1b96:	17db      	asrs	r3, r3, #31
    1b98:	001a      	movs	r2, r3
    1b9a:	4bcf      	ldr	r3, [pc, #828]	; (1ed8 <bmp280_compensate_P_int32+0x354>)
    1b9c:	2401      	movs	r4, #1
    1b9e:	4264      	negs	r4, r4
    1ba0:	185b      	adds	r3, r3, r1
    1ba2:	4154      	adcs	r4, r2
    1ba4:	22a0      	movs	r2, #160	; 0xa0
    1ba6:	18ba      	adds	r2, r7, r2
    1ba8:	6013      	str	r3, [r2, #0]
    1baa:	6054      	str	r4, [r2, #4]
    var2 = var1 * var1 * (int64_t)bmp280_cal_data.dig_P6;
    1bac:	4ccb      	ldr	r4, [pc, #812]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1bae:	23a0      	movs	r3, #160	; 0xa0
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	681a      	ldr	r2, [r3, #0]
    1bb4:	685b      	ldr	r3, [r3, #4]
    1bb6:	21a0      	movs	r1, #160	; 0xa0
    1bb8:	1879      	adds	r1, r7, r1
    1bba:	6808      	ldr	r0, [r1, #0]
    1bbc:	6849      	ldr	r1, [r1, #4]
    1bbe:	47a0      	blx	r4
    1bc0:	0003      	movs	r3, r0
    1bc2:	000c      	movs	r4, r1
    1bc4:	0018      	movs	r0, r3
    1bc6:	0021      	movs	r1, r4
    1bc8:	4bc5      	ldr	r3, [pc, #788]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1bca:	2210      	movs	r2, #16
    1bcc:	5e9b      	ldrsh	r3, [r3, r2]
    1bce:	653b      	str	r3, [r7, #80]	; 0x50
    1bd0:	17db      	asrs	r3, r3, #31
    1bd2:	657b      	str	r3, [r7, #84]	; 0x54
    1bd4:	4cc1      	ldr	r4, [pc, #772]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1bd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bda:	47a0      	blx	r4
    1bdc:	0003      	movs	r3, r0
    1bde:	000c      	movs	r4, r1
    1be0:	2298      	movs	r2, #152	; 0x98
    1be2:	18ba      	adds	r2, r7, r2
    1be4:	6013      	str	r3, [r2, #0]
    1be6:	6054      	str	r4, [r2, #4]
    var2 = var2 + ((var1 * (int64_t)bmp280_cal_data.dig_P5) << 17);
    1be8:	4bbd      	ldr	r3, [pc, #756]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1bea:	220e      	movs	r2, #14
    1bec:	5e9b      	ldrsh	r3, [r3, r2]
    1bee:	64bb      	str	r3, [r7, #72]	; 0x48
    1bf0:	17db      	asrs	r3, r3, #31
    1bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    1bf4:	4cb9      	ldr	r4, [pc, #740]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1bf6:	23a0      	movs	r3, #160	; 0xa0
    1bf8:	18fb      	adds	r3, r7, r3
    1bfa:	681a      	ldr	r2, [r3, #0]
    1bfc:	685b      	ldr	r3, [r3, #4]
    1bfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    1c00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1c02:	47a0      	blx	r4
    1c04:	0003      	movs	r3, r0
    1c06:	000c      	movs	r4, r1
    1c08:	0bda      	lsrs	r2, r3, #15
    1c0a:	0466      	lsls	r6, r4, #17
    1c0c:	4316      	orrs	r6, r2
    1c0e:	045d      	lsls	r5, r3, #17
    1c10:	2398      	movs	r3, #152	; 0x98
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	685c      	ldr	r4, [r3, #4]
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	195b      	adds	r3, r3, r5
    1c1a:	4174      	adcs	r4, r6
    1c1c:	2298      	movs	r2, #152	; 0x98
    1c1e:	18ba      	adds	r2, r7, r2
    1c20:	6013      	str	r3, [r2, #0]
    1c22:	6054      	str	r4, [r2, #4]
    var2 = var2 + (((int64_t)bmp280_cal_data.dig_P4) << 35);
    1c24:	4bae      	ldr	r3, [pc, #696]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1c26:	220c      	movs	r2, #12
    1c28:	5e9b      	ldrsh	r3, [r3, r2]
    1c2a:	643b      	str	r3, [r7, #64]	; 0x40
    1c2c:	17db      	asrs	r3, r3, #31
    1c2e:	647b      	str	r3, [r7, #68]	; 0x44
    1c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c32:	00db      	lsls	r3, r3, #3
    1c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    1c36:	2300      	movs	r3, #0
    1c38:	63bb      	str	r3, [r7, #56]	; 0x38
    1c3a:	2398      	movs	r3, #152	; 0x98
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	685c      	ldr	r4, [r3, #4]
    1c40:	681b      	ldr	r3, [r3, #0]
    1c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    1c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1c46:	185b      	adds	r3, r3, r1
    1c48:	4154      	adcs	r4, r2
    1c4a:	2298      	movs	r2, #152	; 0x98
    1c4c:	18ba      	adds	r2, r7, r2
    1c4e:	6013      	str	r3, [r2, #0]
    1c50:	6054      	str	r4, [r2, #4]
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    1c52:	4ca2      	ldr	r4, [pc, #648]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1c54:	23a0      	movs	r3, #160	; 0xa0
    1c56:	18fb      	adds	r3, r7, r3
    1c58:	681a      	ldr	r2, [r3, #0]
    1c5a:	685b      	ldr	r3, [r3, #4]
    1c5c:	21a0      	movs	r1, #160	; 0xa0
    1c5e:	1879      	adds	r1, r7, r1
    1c60:	6808      	ldr	r0, [r1, #0]
    1c62:	6849      	ldr	r1, [r1, #4]
    1c64:	47a0      	blx	r4
    1c66:	0003      	movs	r3, r0
    1c68:	000c      	movs	r4, r1
    1c6a:	0018      	movs	r0, r3
    1c6c:	0021      	movs	r1, r4
    1c6e:	4b9c      	ldr	r3, [pc, #624]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1c70:	220a      	movs	r2, #10
    1c72:	5e9b      	ldrsh	r3, [r3, r2]
    1c74:	633b      	str	r3, [r7, #48]	; 0x30
    1c76:	17db      	asrs	r3, r3, #31
    1c78:	637b      	str	r3, [r7, #52]	; 0x34
    1c7a:	4c98      	ldr	r4, [pc, #608]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c80:	47a0      	blx	r4
    1c82:	0003      	movs	r3, r0
    1c84:	000c      	movs	r4, r1
    1c86:	0622      	lsls	r2, r4, #24
    1c88:	0a19      	lsrs	r1, r3, #8
    1c8a:	2080      	movs	r0, #128	; 0x80
    1c8c:	1838      	adds	r0, r7, r0
    1c8e:	6001      	str	r1, [r0, #0]
    1c90:	2180      	movs	r1, #128	; 0x80
    1c92:	1879      	adds	r1, r7, r1
    1c94:	6809      	ldr	r1, [r1, #0]
    1c96:	4311      	orrs	r1, r2
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	18ba      	adds	r2, r7, r2
    1c9c:	6011      	str	r1, [r2, #0]
    1c9e:	1223      	asrs	r3, r4, #8
    1ca0:	2284      	movs	r2, #132	; 0x84
    1ca2:	18ba      	adds	r2, r7, r2
    1ca4:	6013      	str	r3, [r2, #0]
            ((var1 * (int64_t)bmp280_cal_data.dig_P2) << 12);
    1ca6:	4b8e      	ldr	r3, [pc, #568]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1ca8:	2208      	movs	r2, #8
    1caa:	5e9b      	ldrsh	r3, [r3, r2]
    1cac:	62bb      	str	r3, [r7, #40]	; 0x28
    1cae:	17db      	asrs	r3, r3, #31
    1cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    1cb2:	4c8a      	ldr	r4, [pc, #552]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1cb4:	23a0      	movs	r3, #160	; 0xa0
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	681a      	ldr	r2, [r3, #0]
    1cba:	685b      	ldr	r3, [r3, #4]
    1cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1cc0:	47a0      	blx	r4
    1cc2:	0003      	movs	r3, r0
    1cc4:	000c      	movs	r4, r1
    1cc6:	0d1a      	lsrs	r2, r3, #20
    1cc8:	0321      	lsls	r1, r4, #12
    1cca:	67f9      	str	r1, [r7, #124]	; 0x7c
    1ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1cce:	4311      	orrs	r1, r2
    1cd0:	67f9      	str	r1, [r7, #124]	; 0x7c
    1cd2:	031b      	lsls	r3, r3, #12
    1cd4:	67bb      	str	r3, [r7, #120]	; 0x78
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    1cd6:	2380      	movs	r3, #128	; 0x80
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	685c      	ldr	r4, [r3, #4]
    1cdc:	681b      	ldr	r3, [r3, #0]
    1cde:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    1ce0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1ce2:	185b      	adds	r3, r3, r1
    1ce4:	4154      	adcs	r4, r2
    1ce6:	22a0      	movs	r2, #160	; 0xa0
    1ce8:	18ba      	adds	r2, r7, r2
    1cea:	6013      	str	r3, [r2, #0]
    1cec:	6054      	str	r4, [r2, #4]
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280_cal_data.dig_P1) >> 33;
    1cee:	23a0      	movs	r3, #160	; 0xa0
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	6819      	ldr	r1, [r3, #0]
    1cf4:	685a      	ldr	r2, [r3, #4]
    1cf6:	2300      	movs	r3, #0
    1cf8:	2480      	movs	r4, #128	; 0x80
    1cfa:	0224      	lsls	r4, r4, #8
    1cfc:	18c9      	adds	r1, r1, r3
    1cfe:	4162      	adcs	r2, r4
    1d00:	0008      	movs	r0, r1
    1d02:	0011      	movs	r1, r2
    1d04:	4b76      	ldr	r3, [pc, #472]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1d06:	88db      	ldrh	r3, [r3, #6]
    1d08:	623b      	str	r3, [r7, #32]
    1d0a:	2300      	movs	r3, #0
    1d0c:	627b      	str	r3, [r7, #36]	; 0x24
    1d0e:	4c73      	ldr	r4, [pc, #460]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1d10:	6a3a      	ldr	r2, [r7, #32]
    1d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d14:	47a0      	blx	r4
    1d16:	0003      	movs	r3, r0
    1d18:	000c      	movs	r4, r1
    1d1a:	1062      	asrs	r2, r4, #1
    1d1c:	21a0      	movs	r1, #160	; 0xa0
    1d1e:	1879      	adds	r1, r7, r1
    1d20:	600a      	str	r2, [r1, #0]
    1d22:	17e3      	asrs	r3, r4, #31
    1d24:	22a4      	movs	r2, #164	; 0xa4
    1d26:	18ba      	adds	r2, r7, r2
    1d28:	6013      	str	r3, [r2, #0]
    if (var1 == 0)
    1d2a:	23a0      	movs	r3, #160	; 0xa0
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	23a4      	movs	r3, #164	; 0xa4
    1d32:	18fb      	adds	r3, r7, r3
    1d34:	681b      	ldr	r3, [r3, #0]
    1d36:	431a      	orrs	r2, r3
    1d38:	d101      	bne.n	1d3e <bmp280_compensate_P_int32+0x1ba>
    {
        return 0; // Avoid exception caused by division by zero.
    1d3a:	2300      	movs	r3, #0
    1d3c:	e0c6      	b.n	1ecc <bmp280_compensate_P_int32+0x348>
    }
    p = 1048576 - adc_P;
    1d3e:	238c      	movs	r3, #140	; 0x8c
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	681a      	ldr	r2, [r3, #0]
    1d44:	2380      	movs	r3, #128	; 0x80
    1d46:	035b      	lsls	r3, r3, #13
    1d48:	1a9b      	subs	r3, r3, r2
    1d4a:	2290      	movs	r2, #144	; 0x90
    1d4c:	18ba      	adds	r2, r7, r2
    1d4e:	6013      	str	r3, [r2, #0]
    1d50:	17db      	asrs	r3, r3, #31
    1d52:	2294      	movs	r2, #148	; 0x94
    1d54:	18ba      	adds	r2, r7, r2
    1d56:	6013      	str	r3, [r2, #0]
    p = (((p << 31) - var2) * 3125) / var1;
    1d58:	2390      	movs	r3, #144	; 0x90
    1d5a:	18fb      	adds	r3, r7, r3
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	105b      	asrs	r3, r3, #1
    1d60:	61fb      	str	r3, [r7, #28]
    1d62:	2390      	movs	r3, #144	; 0x90
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	681b      	ldr	r3, [r3, #0]
    1d68:	07db      	lsls	r3, r3, #31
    1d6a:	61bb      	str	r3, [r7, #24]
    1d6c:	2398      	movs	r3, #152	; 0x98
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	685c      	ldr	r4, [r3, #4]
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	69b8      	ldr	r0, [r7, #24]
    1d76:	69f9      	ldr	r1, [r7, #28]
    1d78:	1ac0      	subs	r0, r0, r3
    1d7a:	41a1      	sbcs	r1, r4
    1d7c:	4c57      	ldr	r4, [pc, #348]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1d7e:	4a59      	ldr	r2, [pc, #356]	; (1ee4 <bmp280_compensate_P_int32+0x360>)
    1d80:	2300      	movs	r3, #0
    1d82:	47a0      	blx	r4
    1d84:	0003      	movs	r3, r0
    1d86:	000c      	movs	r4, r1
    1d88:	0018      	movs	r0, r3
    1d8a:	0021      	movs	r1, r4
    1d8c:	4c56      	ldr	r4, [pc, #344]	; (1ee8 <bmp280_compensate_P_int32+0x364>)
    1d8e:	23a0      	movs	r3, #160	; 0xa0
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	681a      	ldr	r2, [r3, #0]
    1d94:	685b      	ldr	r3, [r3, #4]
    1d96:	47a0      	blx	r4
    1d98:	0003      	movs	r3, r0
    1d9a:	000c      	movs	r4, r1
    1d9c:	2290      	movs	r2, #144	; 0x90
    1d9e:	18ba      	adds	r2, r7, r2
    1da0:	6013      	str	r3, [r2, #0]
    1da2:	6054      	str	r4, [r2, #4]
    var1 = (((int64_t)bmp280_cal_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    1da4:	4b4e      	ldr	r3, [pc, #312]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1da6:	2216      	movs	r2, #22
    1da8:	5e9b      	ldrsh	r3, [r3, r2]
    1daa:	613b      	str	r3, [r7, #16]
    1dac:	17db      	asrs	r3, r3, #31
    1dae:	617b      	str	r3, [r7, #20]
    1db0:	2394      	movs	r3, #148	; 0x94
    1db2:	18fb      	adds	r3, r7, r3
    1db4:	681b      	ldr	r3, [r3, #0]
    1db6:	04da      	lsls	r2, r3, #19
    1db8:	2390      	movs	r3, #144	; 0x90
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	0b5b      	lsrs	r3, r3, #13
    1dc0:	673b      	str	r3, [r7, #112]	; 0x70
    1dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1dc4:	4313      	orrs	r3, r2
    1dc6:	673b      	str	r3, [r7, #112]	; 0x70
    1dc8:	2394      	movs	r3, #148	; 0x94
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	135b      	asrs	r3, r3, #13
    1dd0:	677b      	str	r3, [r7, #116]	; 0x74
    1dd2:	4c42      	ldr	r4, [pc, #264]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1dd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1dd8:	6938      	ldr	r0, [r7, #16]
    1dda:	6979      	ldr	r1, [r7, #20]
    1ddc:	47a0      	blx	r4
    1dde:	0003      	movs	r3, r0
    1de0:	000c      	movs	r4, r1
    1de2:	0018      	movs	r0, r3
    1de4:	0021      	movs	r1, r4
    1de6:	2394      	movs	r3, #148	; 0x94
    1de8:	18fb      	adds	r3, r7, r3
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	04da      	lsls	r2, r3, #19
    1dee:	2390      	movs	r3, #144	; 0x90
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	681b      	ldr	r3, [r3, #0]
    1df4:	0b5b      	lsrs	r3, r3, #13
    1df6:	66bb      	str	r3, [r7, #104]	; 0x68
    1df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dfa:	4313      	orrs	r3, r2
    1dfc:	66bb      	str	r3, [r7, #104]	; 0x68
    1dfe:	2394      	movs	r3, #148	; 0x94
    1e00:	18fb      	adds	r3, r7, r3
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	135b      	asrs	r3, r3, #13
    1e06:	66fb      	str	r3, [r7, #108]	; 0x6c
    1e08:	4c34      	ldr	r4, [pc, #208]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1e0e:	47a0      	blx	r4
    1e10:	0003      	movs	r3, r0
    1e12:	000c      	movs	r4, r1
    1e14:	01e2      	lsls	r2, r4, #7
    1e16:	0e59      	lsrs	r1, r3, #25
    1e18:	430a      	orrs	r2, r1
    1e1a:	21a0      	movs	r1, #160	; 0xa0
    1e1c:	1879      	adds	r1, r7, r1
    1e1e:	600a      	str	r2, [r1, #0]
    1e20:	1663      	asrs	r3, r4, #25
    1e22:	22a4      	movs	r2, #164	; 0xa4
    1e24:	18ba      	adds	r2, r7, r2
    1e26:	6013      	str	r3, [r2, #0]
    var2 = (((int64_t)bmp280_cal_data.dig_P8) * p) >> 19;
    1e28:	4b2d      	ldr	r3, [pc, #180]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1e2a:	2214      	movs	r2, #20
    1e2c:	5e9b      	ldrsh	r3, [r3, r2]
    1e2e:	60bb      	str	r3, [r7, #8]
    1e30:	17db      	asrs	r3, r3, #31
    1e32:	60fb      	str	r3, [r7, #12]
    1e34:	4c29      	ldr	r4, [pc, #164]	; (1edc <bmp280_compensate_P_int32+0x358>)
    1e36:	2390      	movs	r3, #144	; 0x90
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	685b      	ldr	r3, [r3, #4]
    1e3e:	68b8      	ldr	r0, [r7, #8]
    1e40:	68f9      	ldr	r1, [r7, #12]
    1e42:	47a0      	blx	r4
    1e44:	0003      	movs	r3, r0
    1e46:	000c      	movs	r4, r1
    1e48:	0362      	lsls	r2, r4, #13
    1e4a:	0cd9      	lsrs	r1, r3, #19
    1e4c:	430a      	orrs	r2, r1
    1e4e:	2198      	movs	r1, #152	; 0x98
    1e50:	1879      	adds	r1, r7, r1
    1e52:	600a      	str	r2, [r1, #0]
    1e54:	14e3      	asrs	r3, r4, #19
    1e56:	229c      	movs	r2, #156	; 0x9c
    1e58:	18ba      	adds	r2, r7, r2
    1e5a:	6013      	str	r3, [r2, #0]
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280_cal_data.dig_P7) << 4);
    1e5c:	2390      	movs	r3, #144	; 0x90
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	6819      	ldr	r1, [r3, #0]
    1e62:	685a      	ldr	r2, [r3, #4]
    1e64:	23a0      	movs	r3, #160	; 0xa0
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	685c      	ldr	r4, [r3, #4]
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	18c9      	adds	r1, r1, r3
    1e6e:	4162      	adcs	r2, r4
    1e70:	2398      	movs	r3, #152	; 0x98
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	685c      	ldr	r4, [r3, #4]
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	185b      	adds	r3, r3, r1
    1e7a:	4154      	adcs	r4, r2
    1e7c:	0622      	lsls	r2, r4, #24
    1e7e:	0a19      	lsrs	r1, r3, #8
    1e80:	6639      	str	r1, [r7, #96]	; 0x60
    1e82:	6e39      	ldr	r1, [r7, #96]	; 0x60
    1e84:	4311      	orrs	r1, r2
    1e86:	6639      	str	r1, [r7, #96]	; 0x60
    1e88:	1223      	asrs	r3, r4, #8
    1e8a:	667b      	str	r3, [r7, #100]	; 0x64
    1e8c:	4b14      	ldr	r3, [pc, #80]	; (1ee0 <bmp280_compensate_P_int32+0x35c>)
    1e8e:	2212      	movs	r2, #18
    1e90:	5e9b      	ldrsh	r3, [r3, r2]
    1e92:	603b      	str	r3, [r7, #0]
    1e94:	17db      	asrs	r3, r3, #31
    1e96:	607b      	str	r3, [r7, #4]
    1e98:	6839      	ldr	r1, [r7, #0]
    1e9a:	687a      	ldr	r2, [r7, #4]
    1e9c:	000b      	movs	r3, r1
    1e9e:	0f1b      	lsrs	r3, r3, #28
    1ea0:	0010      	movs	r0, r2
    1ea2:	0100      	lsls	r0, r0, #4
    1ea4:	65f8      	str	r0, [r7, #92]	; 0x5c
    1ea6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1ea8:	4318      	orrs	r0, r3
    1eaa:	65f8      	str	r0, [r7, #92]	; 0x5c
    1eac:	000b      	movs	r3, r1
    1eae:	011b      	lsls	r3, r3, #4
    1eb0:	65bb      	str	r3, [r7, #88]	; 0x58
    1eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1eb4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    1eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1eb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1eba:	185b      	adds	r3, r3, r1
    1ebc:	4154      	adcs	r4, r2
    1ebe:	2290      	movs	r2, #144	; 0x90
    1ec0:	18ba      	adds	r2, r7, r2
    1ec2:	6013      	str	r3, [r2, #0]
    1ec4:	6054      	str	r4, [r2, #4]
    return (uint32_t)p;
    1ec6:	2390      	movs	r3, #144	; 0x90
    1ec8:	18fb      	adds	r3, r7, r3
    1eca:	681b      	ldr	r3, [r3, #0]
}
    1ecc:	0018      	movs	r0, r3
    1ece:	46bd      	mov	sp, r7
    1ed0:	b02b      	add	sp, #172	; 0xac
    1ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed4:	2000007c 	.word	0x2000007c
    1ed8:	fffe0c00 	.word	0xfffe0c00
    1edc:	00003bfd 	.word	0x00003bfd
    1ee0:	20000064 	.word	0x20000064
    1ee4:	00000c35 	.word	0x00000c35
    1ee8:	00003b75 	.word	0x00003b75

00001eec <read_bmp280>:

/*!
 * \brief Gets BMP280 readings in Pa and deg C
 */
void read_bmp280(bmp280_meas_t * meas)
{
    1eec:	b590      	push	{r4, r7, lr}
    1eee:	b085      	sub	sp, #20
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	bmp280_raw_data_t raw_data;
	read_bmp280_integer(&raw_data);
    1ef4:	2308      	movs	r3, #8
    1ef6:	18fb      	adds	r3, r7, r3
    1ef8:	0018      	movs	r0, r3
    1efa:	4b18      	ldr	r3, [pc, #96]	; (1f5c <read_bmp280+0x70>)
    1efc:	4798      	blx	r3
	
	// Convert to Pascal and degrees C
	meas->pressure = raw_data.P / 256.0;
    1efe:	2308      	movs	r3, #8
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	681a      	ldr	r2, [r3, #0]
    1f04:	4b16      	ldr	r3, [pc, #88]	; (1f60 <read_bmp280+0x74>)
    1f06:	0010      	movs	r0, r2
    1f08:	4798      	blx	r3
    1f0a:	4c16      	ldr	r4, [pc, #88]	; (1f64 <read_bmp280+0x78>)
    1f0c:	2200      	movs	r2, #0
    1f0e:	4b16      	ldr	r3, [pc, #88]	; (1f68 <read_bmp280+0x7c>)
    1f10:	47a0      	blx	r4
    1f12:	0003      	movs	r3, r0
    1f14:	000c      	movs	r4, r1
    1f16:	0019      	movs	r1, r3
    1f18:	0022      	movs	r2, r4
    1f1a:	4b14      	ldr	r3, [pc, #80]	; (1f6c <read_bmp280+0x80>)
    1f1c:	0008      	movs	r0, r1
    1f1e:	0011      	movs	r1, r2
    1f20:	4798      	blx	r3
    1f22:	1c02      	adds	r2, r0, #0
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	601a      	str	r2, [r3, #0]
	meas->temp = raw_data.T * 0.01;
    1f28:	2308      	movs	r3, #8
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	685a      	ldr	r2, [r3, #4]
    1f2e:	4b10      	ldr	r3, [pc, #64]	; (1f70 <read_bmp280+0x84>)
    1f30:	0010      	movs	r0, r2
    1f32:	4798      	blx	r3
    1f34:	4c0f      	ldr	r4, [pc, #60]	; (1f74 <read_bmp280+0x88>)
    1f36:	4a10      	ldr	r2, [pc, #64]	; (1f78 <read_bmp280+0x8c>)
    1f38:	4b10      	ldr	r3, [pc, #64]	; (1f7c <read_bmp280+0x90>)
    1f3a:	47a0      	blx	r4
    1f3c:	0003      	movs	r3, r0
    1f3e:	000c      	movs	r4, r1
    1f40:	0019      	movs	r1, r3
    1f42:	0022      	movs	r2, r4
    1f44:	4b09      	ldr	r3, [pc, #36]	; (1f6c <read_bmp280+0x80>)
    1f46:	0008      	movs	r0, r1
    1f48:	0011      	movs	r1, r2
    1f4a:	4798      	blx	r3
    1f4c:	1c02      	adds	r2, r0, #0
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	605a      	str	r2, [r3, #4]
}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	46bd      	mov	sp, r7
    1f56:	b005      	add	sp, #20
    1f58:	bd90      	pop	{r4, r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	00001f81 	.word	0x00001f81
    1f60:	000056a9 	.word	0x000056a9
    1f64:	00004429 	.word	0x00004429
    1f68:	40700000 	.word	0x40700000
    1f6c:	00005719 	.word	0x00005719
    1f70:	00005625 	.word	0x00005625
    1f74:	00004a91 	.word	0x00004a91
    1f78:	47ae147b 	.word	0x47ae147b
    1f7c:	3f847ae1 	.word	0x3f847ae1

00001f80 <read_bmp280_integer>:

/*!
 * \brief Gets BMP280 readings in integer units for faster speed
 */
void read_bmp280_integer(bmp280_raw_data_t * meas)
{
    1f80:	b590      	push	{r4, r7, lr}
    1f82:	b087      	sub	sp, #28
    1f84:	af00      	add	r7, sp, #0
    1f86:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6] = {0};
    1f88:	2310      	movs	r3, #16
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	0018      	movs	r0, r3
    1f8e:	2306      	movs	r3, #6
    1f90:	001a      	movs	r2, r3
    1f92:	2100      	movs	r1, #0
    1f94:	4b24      	ldr	r3, [pc, #144]	; (2028 <STACK_SIZE+0x28>)
    1f96:	4798      	blx	r3
	i2c_read_bytes(buffer, 6, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB);
    1f98:	2310      	movs	r3, #16
    1f9a:	18f8      	adds	r0, r7, r3
    1f9c:	23f7      	movs	r3, #247	; 0xf7
    1f9e:	2276      	movs	r2, #118	; 0x76
    1fa0:	2106      	movs	r1, #6
    1fa2:	4c22      	ldr	r4, [pc, #136]	; (202c <STACK_SIZE+0x2c>)
    1fa4:	47a0      	blx	r4
		uint32_t i;
		uint8_t b[4];
	} UT, UP;

	// Parse uncompensated pressure measurement.
	UP.b[0] = *(buffer+2);
    1fa6:	2310      	movs	r3, #16
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	789a      	ldrb	r2, [r3, #2]
    1fac:	2308      	movs	r3, #8
    1fae:	18fb      	adds	r3, r7, r3
    1fb0:	701a      	strb	r2, [r3, #0]
	UP.b[1] = *(buffer+1);
    1fb2:	2310      	movs	r3, #16
    1fb4:	18fb      	adds	r3, r7, r3
    1fb6:	785a      	ldrb	r2, [r3, #1]
    1fb8:	2308      	movs	r3, #8
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	705a      	strb	r2, [r3, #1]
	UP.b[2] = *buffer;
    1fbe:	2310      	movs	r3, #16
    1fc0:	18fb      	adds	r3, r7, r3
    1fc2:	781a      	ldrb	r2, [r3, #0]
    1fc4:	2308      	movs	r3, #8
    1fc6:	18fb      	adds	r3, r7, r3
    1fc8:	709a      	strb	r2, [r3, #2]
	UP.i = (UP.i >> 4) & 0xFFFFFul;
    1fca:	68bb      	ldr	r3, [r7, #8]
    1fcc:	091b      	lsrs	r3, r3, #4
    1fce:	031b      	lsls	r3, r3, #12
    1fd0:	0b1b      	lsrs	r3, r3, #12
    1fd2:	60bb      	str	r3, [r7, #8]

	// Parse uncompensated temperature measurement.
	UT.b[0] = *(buffer+5);
    1fd4:	2310      	movs	r3, #16
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	795a      	ldrb	r2, [r3, #5]
    1fda:	230c      	movs	r3, #12
    1fdc:	18fb      	adds	r3, r7, r3
    1fde:	701a      	strb	r2, [r3, #0]
	UT.b[1] = *(buffer+4);
    1fe0:	2310      	movs	r3, #16
    1fe2:	18fb      	adds	r3, r7, r3
    1fe4:	791a      	ldrb	r2, [r3, #4]
    1fe6:	230c      	movs	r3, #12
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	705a      	strb	r2, [r3, #1]
	UT.b[2] = *(buffer+3);
    1fec:	2310      	movs	r3, #16
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	78da      	ldrb	r2, [r3, #3]
    1ff2:	230c      	movs	r3, #12
    1ff4:	18fb      	adds	r3, r7, r3
    1ff6:	709a      	strb	r2, [r3, #2]
	UT.i = (UT.i >> 4) & 0xFFFFFul;
    1ff8:	68fb      	ldr	r3, [r7, #12]
    1ffa:	091b      	lsrs	r3, r3, #4
    1ffc:	031b      	lsls	r3, r3, #12
    1ffe:	0b1b      	lsrs	r3, r3, #12
    2000:	60fb      	str	r3, [r7, #12]

	// Perform pressure/temperature compensation.
	meas->T = bmp280_compensate_T_int32(UT.i);
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	0018      	movs	r0, r3
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	4798      	blx	r3
    200a:	0002      	movs	r2, r0
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	605a      	str	r2, [r3, #4]
	meas->P = (int32_t)bmp280_compensate_P_int32(UP.i);
    2010:	68bb      	ldr	r3, [r7, #8]
    2012:	0018      	movs	r0, r3
    2014:	4b07      	ldr	r3, [pc, #28]	; (2034 <STACK_SIZE+0x34>)
    2016:	4798      	blx	r3
    2018:	0002      	movs	r2, r0
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	601a      	str	r2, [r3, #0]
}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	46bd      	mov	sp, r7
    2022:	b007      	add	sp, #28
    2024:	bd90      	pop	{r4, r7, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	00005a93 	.word	0x00005a93
    202c:	000022fd 	.word	0x000022fd
    2030:	00001b15 	.word	0x00001b15
    2034:	00001b85 	.word	0x00001b85

00002038 <i2c_master_is_syncing>:
{
    2038:	b580      	push	{r7, lr}
    203a:	b084      	sub	sp, #16
    203c:	af00      	add	r7, sp, #0
    203e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2046:	68fb      	ldr	r3, [r7, #12]
    2048:	69db      	ldr	r3, [r3, #28]
    204a:	2207      	movs	r2, #7
    204c:	4013      	ands	r3, r2
    204e:	1e5a      	subs	r2, r3, #1
    2050:	4193      	sbcs	r3, r2
    2052:	b2db      	uxtb	r3, r3
}
    2054:	0018      	movs	r0, r3
    2056:	46bd      	mov	sp, r7
    2058:	b004      	add	sp, #16
    205a:	bd80      	pop	{r7, pc}

0000205c <_i2c_master_wait_for_sync>:
{
    205c:	b580      	push	{r7, lr}
    205e:	b082      	sub	sp, #8
    2060:	af00      	add	r7, sp, #0
    2062:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2064:	46c0      	nop			; (mov r8, r8)
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	0018      	movs	r0, r3
    206a:	4b04      	ldr	r3, [pc, #16]	; (207c <_i2c_master_wait_for_sync+0x20>)
    206c:	4798      	blx	r3
    206e:	1e03      	subs	r3, r0, #0
    2070:	d1f9      	bne.n	2066 <_i2c_master_wait_for_sync+0xa>
}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	46bd      	mov	sp, r7
    2076:	b002      	add	sp, #8
    2078:	bd80      	pop	{r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	00002039 	.word	0x00002039

00002080 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    2080:	b580      	push	{r7, lr}
    2082:	b082      	sub	sp, #8
    2084:	af00      	add	r7, sp, #0
    2086:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	2264      	movs	r2, #100	; 0x64
    208c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	4a1b      	ldr	r2, [pc, #108]	; (2100 <i2c_master_get_config_defaults+0x80>)
    2092:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	2200      	movs	r2, #0
    2098:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	2200      	movs	r2, #0
    209e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	2200      	movs	r2, #0
    20a4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	2280      	movs	r2, #128	; 0x80
    20aa:	0392      	lsls	r2, r2, #14
    20ac:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	2201      	movs	r2, #1
    20b2:	4252      	negs	r2, r2
    20b4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	2201      	movs	r2, #1
    20ba:	4252      	negs	r2, r2
    20bc:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	2200      	movs	r2, #0
    20c2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	2200      	movs	r2, #0
    20c8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	2224      	movs	r2, #36	; 0x24
    20ce:	2100      	movs	r1, #0
    20d0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	2200      	movs	r2, #0
    20d6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	222c      	movs	r2, #44	; 0x2c
    20dc:	2100      	movs	r1, #0
    20de:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	222d      	movs	r2, #45	; 0x2d
    20e4:	2100      	movs	r1, #0
    20e6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	222e      	movs	r2, #46	; 0x2e
    20ec:	2100      	movs	r1, #0
    20ee:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	22d7      	movs	r2, #215	; 0xd7
    20f4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	46bd      	mov	sp, r7
    20fa:	b002      	add	sp, #8
    20fc:	bd80      	pop	{r7, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00000d48 	.word	0x00000d48

00002104 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    2104:	b580      	push	{r7, lr}
    2106:	b084      	sub	sp, #16
    2108:	af00      	add	r7, sp, #0
    210a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	681b      	ldr	r3, [r3, #0]
    2110:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    2112:	2300      	movs	r3, #0
    2114:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	0018      	movs	r0, r3
    211a:	4b10      	ldr	r3, [pc, #64]	; (215c <i2c_master_enable+0x58>)
    211c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	2202      	movs	r2, #2
    2124:	431a      	orrs	r2, r3
    2126:	68bb      	ldr	r3, [r7, #8]
    2128:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    212a:	e00c      	b.n	2146 <i2c_master_enable+0x42>
		timeout_counter++;
    212c:	68fb      	ldr	r3, [r7, #12]
    212e:	3301      	adds	r3, #1
    2130:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	88db      	ldrh	r3, [r3, #6]
    2136:	001a      	movs	r2, r3
    2138:	68fb      	ldr	r3, [r7, #12]
    213a:	429a      	cmp	r2, r3
    213c:	d803      	bhi.n	2146 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    213e:	68bb      	ldr	r3, [r7, #8]
    2140:	2210      	movs	r2, #16
    2142:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    2144:	e006      	b.n	2154 <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2146:	68bb      	ldr	r3, [r7, #8]
    2148:	8b5b      	ldrh	r3, [r3, #26]
    214a:	b29b      	uxth	r3, r3
    214c:	001a      	movs	r2, r3
    214e:	2310      	movs	r3, #16
    2150:	4013      	ands	r3, r2
    2152:	d0eb      	beq.n	212c <i2c_master_enable+0x28>
		}
	}
}
    2154:	46bd      	mov	sp, r7
    2156:	b004      	add	sp, #16
    2158:	bd80      	pop	{r7, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	0000205d 	.word	0x0000205d

00002160 <i2c_interface_init>:

 static struct i2c_master_config config;
 static struct i2c_master_module module;

 void i2c_interface_init(void)
 {
    2160:	b580      	push	{r7, lr}
    2162:	af00      	add	r7, sp, #0
	i2c_master_get_config_defaults(&config);
    2164:	4b10      	ldr	r3, [pc, #64]	; (21a8 <i2c_interface_init+0x48>)
    2166:	0018      	movs	r0, r3
    2168:	4b10      	ldr	r3, [pc, #64]	; (21ac <i2c_interface_init+0x4c>)
    216a:	4798      	blx	r3
	config.start_hold_time = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    216c:	4b0e      	ldr	r3, [pc, #56]	; (21a8 <i2c_interface_init+0x48>)
    216e:	22c0      	movs	r2, #192	; 0xc0
    2170:	0392      	lsls	r2, r2, #14
    2172:	611a      	str	r2, [r3, #16]
	config.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    2174:	4b0c      	ldr	r3, [pc, #48]	; (21a8 <i2c_interface_init+0x48>)
    2176:	2264      	movs	r2, #100	; 0x64
    2178:	601a      	str	r2, [r3, #0]
	config.buffer_timeout = 10000;
    217a:	4b0b      	ldr	r3, [pc, #44]	; (21a8 <i2c_interface_init+0x48>)
    217c:	4a0c      	ldr	r2, [pc, #48]	; (21b0 <i2c_interface_init+0x50>)
    217e:	82da      	strh	r2, [r3, #22]
	config.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    2180:	4b09      	ldr	r3, [pc, #36]	; (21a8 <i2c_interface_init+0x48>)
    2182:	4a0c      	ldr	r2, [pc, #48]	; (21b4 <i2c_interface_init+0x54>)
    2184:	61da      	str	r2, [r3, #28]
	config.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    2186:	4b08      	ldr	r3, [pc, #32]	; (21a8 <i2c_interface_init+0x48>)
    2188:	4a0b      	ldr	r2, [pc, #44]	; (21b8 <i2c_interface_init+0x58>)
    218a:	621a      	str	r2, [r3, #32]

	i2c_master_init(&module, SERCOM3, &config);
    218c:	4a06      	ldr	r2, [pc, #24]	; (21a8 <i2c_interface_init+0x48>)
    218e:	490b      	ldr	r1, [pc, #44]	; (21bc <i2c_interface_init+0x5c>)
    2190:	4b0b      	ldr	r3, [pc, #44]	; (21c0 <i2c_interface_init+0x60>)
    2192:	0018      	movs	r0, r3
    2194:	4b0b      	ldr	r3, [pc, #44]	; (21c4 <i2c_interface_init+0x64>)
    2196:	4798      	blx	r3

	i2c_master_enable(&module);
    2198:	4b09      	ldr	r3, [pc, #36]	; (21c0 <i2c_interface_init+0x60>)
    219a:	0018      	movs	r0, r3
    219c:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <i2c_interface_init+0x68>)
    219e:	4798      	blx	r3
 }
    21a0:	46c0      	nop			; (mov r8, r8)
    21a2:	46bd      	mov	sp, r7
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	20000080 	.word	0x20000080
    21ac:	00002081 	.word	0x00002081
    21b0:	00002710 	.word	0x00002710
    21b4:	00160002 	.word	0x00160002
    21b8:	00170002 	.word	0x00170002
    21bc:	42000c00 	.word	0x42000c00
    21c0:	200000b4 	.word	0x200000b4
    21c4:	0000104d 	.word	0x0000104d
    21c8:	00002105 	.word	0x00002105

000021cc <i2c_write_bytes>:
 {
	i2c_master_disable(&module);
 }

 void i2c_write_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	b091      	sub	sp, #68	; 0x44
    21d0:	af00      	add	r7, sp, #0
    21d2:	6278      	str	r0, [r7, #36]	; 0x24
    21d4:	000e      	movs	r6, r1
    21d6:	0010      	movs	r0, r2
    21d8:	0019      	movs	r1, r3
    21da:	2323      	movs	r3, #35	; 0x23
    21dc:	18fb      	adds	r3, r7, r3
    21de:	1c32      	adds	r2, r6, #0
    21e0:	701a      	strb	r2, [r3, #0]
    21e2:	2322      	movs	r3, #34	; 0x22
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	1c02      	adds	r2, r0, #0
    21e8:	701a      	strb	r2, [r3, #0]
    21ea:	2321      	movs	r3, #33	; 0x21
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	1c0a      	adds	r2, r1, #0
    21f0:	701a      	strb	r2, [r3, #0]
    21f2:	466b      	mov	r3, sp
    21f4:	607b      	str	r3, [r7, #4]
	uint8_t buffer[data_length+2];
    21f6:	2323      	movs	r3, #35	; 0x23
    21f8:	18fb      	adds	r3, r7, r3
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	3302      	adds	r3, #2
    21fe:	1e5a      	subs	r2, r3, #1
    2200:	63fa      	str	r2, [r7, #60]	; 0x3c
    2202:	001a      	movs	r2, r3
    2204:	613a      	str	r2, [r7, #16]
    2206:	2200      	movs	r2, #0
    2208:	617a      	str	r2, [r7, #20]
    220a:	6938      	ldr	r0, [r7, #16]
    220c:	6979      	ldr	r1, [r7, #20]
    220e:	0002      	movs	r2, r0
    2210:	0f52      	lsrs	r2, r2, #29
    2212:	000e      	movs	r6, r1
    2214:	00f6      	lsls	r6, r6, #3
    2216:	61fe      	str	r6, [r7, #28]
    2218:	69fe      	ldr	r6, [r7, #28]
    221a:	4316      	orrs	r6, r2
    221c:	61fe      	str	r6, [r7, #28]
    221e:	0002      	movs	r2, r0
    2220:	00d2      	lsls	r2, r2, #3
    2222:	61ba      	str	r2, [r7, #24]
    2224:	001a      	movs	r2, r3
    2226:	60ba      	str	r2, [r7, #8]
    2228:	2200      	movs	r2, #0
    222a:	60fa      	str	r2, [r7, #12]
    222c:	68b8      	ldr	r0, [r7, #8]
    222e:	68f9      	ldr	r1, [r7, #12]
    2230:	0002      	movs	r2, r0
    2232:	0f52      	lsrs	r2, r2, #29
    2234:	000e      	movs	r6, r1
    2236:	00f5      	lsls	r5, r6, #3
    2238:	4315      	orrs	r5, r2
    223a:	0002      	movs	r2, r0
    223c:	00d4      	lsls	r4, r2, #3
    223e:	3307      	adds	r3, #7
    2240:	08db      	lsrs	r3, r3, #3
    2242:	00db      	lsls	r3, r3, #3
    2244:	466a      	mov	r2, sp
    2246:	1ad3      	subs	r3, r2, r3
    2248:	469d      	mov	sp, r3
    224a:	466b      	mov	r3, sp
    224c:	3300      	adds	r3, #0
    224e:	63bb      	str	r3, [r7, #56]	; 0x38
	buffer[0] = reg;
    2250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2252:	2221      	movs	r2, #33	; 0x21
    2254:	18ba      	adds	r2, r7, r2
    2256:	7812      	ldrb	r2, [r2, #0]
    2258:	701a      	strb	r2, [r3, #0]
	memcpy(buffer+1, data, data_length);
    225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    225c:	1c58      	adds	r0, r3, #1
    225e:	2323      	movs	r3, #35	; 0x23
    2260:	18fb      	adds	r3, r7, r3
    2262:	781a      	ldrb	r2, [r3, #0]
    2264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2266:	0019      	movs	r1, r3
    2268:	4b21      	ldr	r3, [pc, #132]	; (22f0 <i2c_write_bytes+0x124>)
    226a:	4798      	blx	r3
	
	struct i2c_master_packet packet;
	packet.address = i2c_address;
    226c:	2322      	movs	r3, #34	; 0x22
    226e:	18fb      	adds	r3, r7, r3
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	b29a      	uxth	r2, r3
    2274:	230c      	movs	r3, #12
    2276:	2120      	movs	r1, #32
    2278:	468c      	mov	ip, r1
    227a:	44bc      	add	ip, r7
    227c:	4463      	add	r3, ip
    227e:	801a      	strh	r2, [r3, #0]
	packet.data = buffer;
    2280:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2282:	230c      	movs	r3, #12
    2284:	2120      	movs	r1, #32
    2286:	468c      	mov	ip, r1
    2288:	44bc      	add	ip, r7
    228a:	4463      	add	r3, ip
    228c:	605a      	str	r2, [r3, #4]
	packet.data_length = data_length+1;
    228e:	2323      	movs	r3, #35	; 0x23
    2290:	18fb      	adds	r3, r7, r3
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	b29b      	uxth	r3, r3
    2296:	3301      	adds	r3, #1
    2298:	b29a      	uxth	r2, r3
    229a:	230c      	movs	r3, #12
    229c:	2120      	movs	r1, #32
    229e:	468c      	mov	ip, r1
    22a0:	44bc      	add	ip, r7
    22a2:	4463      	add	r3, ip
    22a4:	805a      	strh	r2, [r3, #2]
	packet.high_speed = false;
    22a6:	230c      	movs	r3, #12
    22a8:	2220      	movs	r2, #32
    22aa:	4694      	mov	ip, r2
    22ac:	44bc      	add	ip, r7
    22ae:	4463      	add	r3, ip
    22b0:	2200      	movs	r2, #0
    22b2:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0;
    22b4:	230c      	movs	r3, #12
    22b6:	2220      	movs	r2, #32
    22b8:	4694      	mov	ip, r2
    22ba:	44bc      	add	ip, r7
    22bc:	4463      	add	r3, ip
    22be:	2200      	movs	r2, #0
    22c0:	729a      	strb	r2, [r3, #10]
	packet.ten_bit_address = 0;
    22c2:	230c      	movs	r3, #12
    22c4:	2220      	movs	r2, #32
    22c6:	4694      	mov	ip, r2
    22c8:	44bc      	add	ip, r7
    22ca:	4463      	add	r3, ip
    22cc:	2200      	movs	r2, #0
    22ce:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet);
    22d0:	230c      	movs	r3, #12
    22d2:	2220      	movs	r2, #32
    22d4:	18ba      	adds	r2, r7, r2
    22d6:	18d2      	adds	r2, r2, r3
    22d8:	4b06      	ldr	r3, [pc, #24]	; (22f4 <i2c_write_bytes+0x128>)
    22da:	0011      	movs	r1, r2
    22dc:	0018      	movs	r0, r3
    22de:	4b06      	ldr	r3, [pc, #24]	; (22f8 <i2c_write_bytes+0x12c>)
    22e0:	4798      	blx	r3
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	469d      	mov	sp, r3
 }
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	46bd      	mov	sp, r7
    22ea:	b011      	add	sp, #68	; 0x44
    22ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	00005a81 	.word	0x00005a81
    22f4:	200000b4 	.word	0x200000b4
    22f8:	00001671 	.word	0x00001671

000022fc <i2c_read_bytes>:

 void i2c_read_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    22fc:	b590      	push	{r4, r7, lr}
    22fe:	b089      	sub	sp, #36	; 0x24
    2300:	af00      	add	r7, sp, #0
    2302:	6078      	str	r0, [r7, #4]
    2304:	000c      	movs	r4, r1
    2306:	0010      	movs	r0, r2
    2308:	0019      	movs	r1, r3
    230a:	1cfb      	adds	r3, r7, #3
    230c:	1c22      	adds	r2, r4, #0
    230e:	701a      	strb	r2, [r3, #0]
    2310:	1cbb      	adds	r3, r7, #2
    2312:	1c02      	adds	r2, r0, #0
    2314:	701a      	strb	r2, [r3, #0]
    2316:	1c7b      	adds	r3, r7, #1
    2318:	1c0a      	adds	r2, r1, #0
    231a:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet_setup;
	packet_setup.address = i2c_address;
    231c:	1cbb      	adds	r3, r7, #2
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	b29a      	uxth	r2, r3
    2322:	2314      	movs	r3, #20
    2324:	18fb      	adds	r3, r7, r3
    2326:	801a      	strh	r2, [r3, #0]
	packet_setup.data = &reg;
    2328:	2314      	movs	r3, #20
    232a:	18fb      	adds	r3, r7, r3
    232c:	1c7a      	adds	r2, r7, #1
    232e:	605a      	str	r2, [r3, #4]
	packet_setup.data_length = 1;
    2330:	2314      	movs	r3, #20
    2332:	18fb      	adds	r3, r7, r3
    2334:	2201      	movs	r2, #1
    2336:	805a      	strh	r2, [r3, #2]
	packet_setup.high_speed = false;
    2338:	2314      	movs	r3, #20
    233a:	18fb      	adds	r3, r7, r3
    233c:	2200      	movs	r2, #0
    233e:	725a      	strb	r2, [r3, #9]
	packet_setup.hs_master_code = 0;
    2340:	2314      	movs	r3, #20
    2342:	18fb      	adds	r3, r7, r3
    2344:	2200      	movs	r2, #0
    2346:	729a      	strb	r2, [r3, #10]
	packet_setup.ten_bit_address = 0;
    2348:	2314      	movs	r3, #20
    234a:	18fb      	adds	r3, r7, r3
    234c:	2200      	movs	r2, #0
    234e:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet_setup);
    2350:	2314      	movs	r3, #20
    2352:	18fa      	adds	r2, r7, r3
    2354:	4b15      	ldr	r3, [pc, #84]	; (23ac <i2c_read_bytes+0xb0>)
    2356:	0011      	movs	r1, r2
    2358:	0018      	movs	r0, r3
    235a:	4b15      	ldr	r3, [pc, #84]	; (23b0 <i2c_read_bytes+0xb4>)
    235c:	4798      	blx	r3

	struct i2c_master_packet packet_read;
	packet_read.address = i2c_address;
    235e:	1cbb      	adds	r3, r7, #2
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	b29a      	uxth	r2, r3
    2364:	2308      	movs	r3, #8
    2366:	18fb      	adds	r3, r7, r3
    2368:	801a      	strh	r2, [r3, #0]
	packet_read.data = data;
    236a:	2308      	movs	r3, #8
    236c:	18fb      	adds	r3, r7, r3
    236e:	687a      	ldr	r2, [r7, #4]
    2370:	605a      	str	r2, [r3, #4]
	packet_read.data_length = data_length;
    2372:	1cfb      	adds	r3, r7, #3
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	b29a      	uxth	r2, r3
    2378:	2308      	movs	r3, #8
    237a:	18fb      	adds	r3, r7, r3
    237c:	805a      	strh	r2, [r3, #2]
	packet_read.high_speed = false;
    237e:	2308      	movs	r3, #8
    2380:	18fb      	adds	r3, r7, r3
    2382:	2200      	movs	r2, #0
    2384:	725a      	strb	r2, [r3, #9]
	packet_read.hs_master_code = 0;
    2386:	2308      	movs	r3, #8
    2388:	18fb      	adds	r3, r7, r3
    238a:	2200      	movs	r2, #0
    238c:	729a      	strb	r2, [r3, #10]
	packet_read.ten_bit_address = 0;
    238e:	2308      	movs	r3, #8
    2390:	18fb      	adds	r3, r7, r3
    2392:	2200      	movs	r2, #0
    2394:	721a      	strb	r2, [r3, #8]

	i2c_master_read_packet_wait(&module, &packet_read);
    2396:	2308      	movs	r3, #8
    2398:	18fa      	adds	r2, r7, r3
    239a:	4b04      	ldr	r3, [pc, #16]	; (23ac <i2c_read_bytes+0xb0>)
    239c:	0011      	movs	r1, r2
    239e:	0018      	movs	r0, r3
    23a0:	4b04      	ldr	r3, [pc, #16]	; (23b4 <i2c_read_bytes+0xb8>)
    23a2:	4798      	blx	r3
    23a4:	46c0      	nop			; (mov r8, r8)
    23a6:	46bd      	mov	sp, r7
    23a8:	b009      	add	sp, #36	; 0x24
    23aa:	bd90      	pop	{r4, r7, pc}
    23ac:	200000b4 	.word	0x200000b4
    23b0:	00001671 	.word	0x00001671
    23b4:	000014c9 	.word	0x000014c9

000023b8 <init_lis3dh>:
 #include "i2c_interface.h"

 #include "lis3dh.h"

 void init_lis3dh(void)
 {
    23b8:	b590      	push	{r4, r7, lr}
    23ba:	b083      	sub	sp, #12
    23bc:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    23be:	1dfb      	adds	r3, r7, #7
    23c0:	2200      	movs	r2, #0
    23c2:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, LIS3DH_ADDRESS, REG_WHO_AM_I);
    23c4:	1df8      	adds	r0, r7, #7
    23c6:	230f      	movs	r3, #15
    23c8:	2219      	movs	r2, #25
    23ca:	2101      	movs	r1, #1
    23cc:	4c0e      	ldr	r4, [pc, #56]	; (2408 <init_lis3dh+0x50>)
    23ce:	47a0      	blx	r4
	if(me != WHO_AM_I_VAL)
    23d0:	1dfb      	adds	r3, r7, #7
    23d2:	781b      	ldrb	r3, [r3, #0]
    23d4:	2b33      	cmp	r3, #51	; 0x33
    23d6:	d112      	bne.n	23fe <init_lis3dh+0x46>
		return;
	}

	// Set up sensors
	// 50Hz ODR, low power mode -> 6uA typical
	uint8_t data = (0x04 << 4) | (0x01 << 3) | (0x07 << 0);   // 50Hz, all axes enabled, low power mode
    23d8:	1dbb      	adds	r3, r7, #6
    23da:	224f      	movs	r2, #79	; 0x4f
    23dc:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
    23de:	1db8      	adds	r0, r7, #6
    23e0:	2320      	movs	r3, #32
    23e2:	2219      	movs	r2, #25
    23e4:	2101      	movs	r1, #1
    23e6:	4c09      	ldr	r4, [pc, #36]	; (240c <init_lis3dh+0x54>)
    23e8:	47a0      	blx	r4

	data = (0x01 << 4); // +/-4g range
    23ea:	1dbb      	adds	r3, r7, #6
    23ec:	2210      	movs	r2, #16
    23ee:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG4);
    23f0:	1db8      	adds	r0, r7, #6
    23f2:	2323      	movs	r3, #35	; 0x23
    23f4:	2219      	movs	r2, #25
    23f6:	2101      	movs	r1, #1
    23f8:	4c04      	ldr	r4, [pc, #16]	; (240c <init_lis3dh+0x54>)
    23fa:	47a0      	blx	r4
    23fc:	e000      	b.n	2400 <init_lis3dh+0x48>
		return;
    23fe:	46c0      	nop			; (mov r8, r8)
 }
    2400:	46bd      	mov	sp, r7
    2402:	b003      	add	sp, #12
    2404:	bd90      	pop	{r4, r7, pc}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	000022fd 	.word	0x000022fd
    240c:	000021cd 	.word	0x000021cd

00002410 <read_lis3dh_raw>:

 void read_lis3dh_raw(lis3dh_data_raw_t * data)
 {
    2410:	b590      	push	{r4, r7, lr}
    2412:	b085      	sub	sp, #20
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	i2c_read_bytes(buffer, 6, LIS3DH_ADDRESS, REG_OUT_X_L | 0x80); // 0x80 enables auto increment
    2418:	2308      	movs	r3, #8
    241a:	18f8      	adds	r0, r7, r3
    241c:	23a8      	movs	r3, #168	; 0xa8
    241e:	2219      	movs	r2, #25
    2420:	2106      	movs	r1, #6
    2422:	4c1e      	ldr	r4, [pc, #120]	; (249c <read_lis3dh_raw+0x8c>)
    2424:	47a0      	blx	r4
	data->x = buffer[0];
    2426:	2308      	movs	r3, #8
    2428:	18fb      	adds	r3, r7, r3
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	b21a      	sxth	r2, r3
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	801a      	strh	r2, [r3, #0]
	data->x |= ((uint16_t) buffer[1]) << 8;
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	2200      	movs	r2, #0
    2436:	5e9a      	ldrsh	r2, [r3, r2]
    2438:	2308      	movs	r3, #8
    243a:	18fb      	adds	r3, r7, r3
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	021b      	lsls	r3, r3, #8
    2440:	b21b      	sxth	r3, r3
    2442:	4313      	orrs	r3, r2
    2444:	b21a      	sxth	r2, r3
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	801a      	strh	r2, [r3, #0]
	data->y = buffer[2];
    244a:	2308      	movs	r3, #8
    244c:	18fb      	adds	r3, r7, r3
    244e:	789b      	ldrb	r3, [r3, #2]
    2450:	b21a      	sxth	r2, r3
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	805a      	strh	r2, [r3, #2]
	data->y |= ((uint16_t) buffer[3]) << 8;
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	2202      	movs	r2, #2
    245a:	5e9a      	ldrsh	r2, [r3, r2]
    245c:	2308      	movs	r3, #8
    245e:	18fb      	adds	r3, r7, r3
    2460:	78db      	ldrb	r3, [r3, #3]
    2462:	021b      	lsls	r3, r3, #8
    2464:	b21b      	sxth	r3, r3
    2466:	4313      	orrs	r3, r2
    2468:	b21a      	sxth	r2, r3
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	805a      	strh	r2, [r3, #2]
	data->z = buffer[4];
    246e:	2308      	movs	r3, #8
    2470:	18fb      	adds	r3, r7, r3
    2472:	791b      	ldrb	r3, [r3, #4]
    2474:	b21a      	sxth	r2, r3
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	809a      	strh	r2, [r3, #4]
	data->z |= ((uint16_t) buffer[5]) << 8;
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	2204      	movs	r2, #4
    247e:	5e9a      	ldrsh	r2, [r3, r2]
    2480:	2308      	movs	r3, #8
    2482:	18fb      	adds	r3, r7, r3
    2484:	795b      	ldrb	r3, [r3, #5]
    2486:	021b      	lsls	r3, r3, #8
    2488:	b21b      	sxth	r3, r3
    248a:	4313      	orrs	r3, r2
    248c:	b21a      	sxth	r2, r3
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	809a      	strh	r2, [r3, #4]
 }
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	46bd      	mov	sp, r7
    2496:	b005      	add	sp, #20
    2498:	bd90      	pop	{r4, r7, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	000022fd 	.word	0x000022fd

000024a0 <read_lis3dh_g>:

 void read_lis3dh_g(lis3dh_data_g_t * data)
 {
    24a0:	b590      	push	{r4, r7, lr}
    24a2:	b085      	sub	sp, #20
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
	lis3dh_data_raw_t raw;
	read_lis3dh_raw(&raw);
    24a8:	2308      	movs	r3, #8
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	0018      	movs	r0, r3
    24ae:	4b24      	ldr	r3, [pc, #144]	; (2540 <read_lis3dh_g+0xa0>)
    24b0:	4798      	blx	r3
	// 8 bit mode, +/-4g range
	data->x = raw.x * 0.00012207;
    24b2:	2308      	movs	r3, #8
    24b4:	18fb      	adds	r3, r7, r3
    24b6:	2200      	movs	r2, #0
    24b8:	5e9a      	ldrsh	r2, [r3, r2]
    24ba:	4b22      	ldr	r3, [pc, #136]	; (2544 <read_lis3dh_g+0xa4>)
    24bc:	0010      	movs	r0, r2
    24be:	4798      	blx	r3
    24c0:	4c21      	ldr	r4, [pc, #132]	; (2548 <read_lis3dh_g+0xa8>)
    24c2:	4a22      	ldr	r2, [pc, #136]	; (254c <read_lis3dh_g+0xac>)
    24c4:	4b22      	ldr	r3, [pc, #136]	; (2550 <read_lis3dh_g+0xb0>)
    24c6:	47a0      	blx	r4
    24c8:	0003      	movs	r3, r0
    24ca:	000c      	movs	r4, r1
    24cc:	0019      	movs	r1, r3
    24ce:	0022      	movs	r2, r4
    24d0:	4b20      	ldr	r3, [pc, #128]	; (2554 <read_lis3dh_g+0xb4>)
    24d2:	0008      	movs	r0, r1
    24d4:	0011      	movs	r1, r2
    24d6:	4798      	blx	r3
    24d8:	1c02      	adds	r2, r0, #0
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	601a      	str	r2, [r3, #0]
	data->y = raw.y * 0.00012207;
    24de:	2308      	movs	r3, #8
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	2202      	movs	r2, #2
    24e4:	5e9a      	ldrsh	r2, [r3, r2]
    24e6:	4b17      	ldr	r3, [pc, #92]	; (2544 <read_lis3dh_g+0xa4>)
    24e8:	0010      	movs	r0, r2
    24ea:	4798      	blx	r3
    24ec:	4c16      	ldr	r4, [pc, #88]	; (2548 <read_lis3dh_g+0xa8>)
    24ee:	4a17      	ldr	r2, [pc, #92]	; (254c <read_lis3dh_g+0xac>)
    24f0:	4b17      	ldr	r3, [pc, #92]	; (2550 <read_lis3dh_g+0xb0>)
    24f2:	47a0      	blx	r4
    24f4:	0003      	movs	r3, r0
    24f6:	000c      	movs	r4, r1
    24f8:	0019      	movs	r1, r3
    24fa:	0022      	movs	r2, r4
    24fc:	4b15      	ldr	r3, [pc, #84]	; (2554 <read_lis3dh_g+0xb4>)
    24fe:	0008      	movs	r0, r1
    2500:	0011      	movs	r1, r2
    2502:	4798      	blx	r3
    2504:	1c02      	adds	r2, r0, #0
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	605a      	str	r2, [r3, #4]
	data->z = raw.z * 0.00012207;
    250a:	2308      	movs	r3, #8
    250c:	18fb      	adds	r3, r7, r3
    250e:	2204      	movs	r2, #4
    2510:	5e9a      	ldrsh	r2, [r3, r2]
    2512:	4b0c      	ldr	r3, [pc, #48]	; (2544 <read_lis3dh_g+0xa4>)
    2514:	0010      	movs	r0, r2
    2516:	4798      	blx	r3
    2518:	4c0b      	ldr	r4, [pc, #44]	; (2548 <read_lis3dh_g+0xa8>)
    251a:	4a0c      	ldr	r2, [pc, #48]	; (254c <read_lis3dh_g+0xac>)
    251c:	4b0c      	ldr	r3, [pc, #48]	; (2550 <read_lis3dh_g+0xb0>)
    251e:	47a0      	blx	r4
    2520:	0003      	movs	r3, r0
    2522:	000c      	movs	r4, r1
    2524:	0019      	movs	r1, r3
    2526:	0022      	movs	r2, r4
    2528:	4b0a      	ldr	r3, [pc, #40]	; (2554 <read_lis3dh_g+0xb4>)
    252a:	0008      	movs	r0, r1
    252c:	0011      	movs	r1, r2
    252e:	4798      	blx	r3
    2530:	1c02      	adds	r2, r0, #0
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	609a      	str	r2, [r3, #8]
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	46bd      	mov	sp, r7
    253a:	b005      	add	sp, #20
    253c:	bd90      	pop	{r4, r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	00002411 	.word	0x00002411
    2544:	00005625 	.word	0x00005625
    2548:	00004a91 	.word	0x00004a91
    254c:	a19c4774 	.word	0xa19c4774
    2550:	3f1ffffa 	.word	0x3f1ffffa
    2554:	00005719 	.word	0x00005719

00002558 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    2558:	b580      	push	{r7, lr}
    255a:	b082      	sub	sp, #8
    255c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    255e:	4b04      	ldr	r3, [pc, #16]	; (2570 <wdt_clear_early_warning+0x18>)
    2560:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	2201      	movs	r2, #1
    2566:	719a      	strb	r2, [r3, #6]
}
    2568:	46c0      	nop			; (mov r8, r8)
    256a:	46bd      	mov	sp, r7
    256c:	b002      	add	sp, #8
    256e:	bd80      	pop	{r7, pc}
    2570:	40001c00 	.word	0x40001c00

00002574 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2574:	b580      	push	{r7, lr}
    2576:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    2578:	4b05      	ldr	r3, [pc, #20]	; (2590 <WDT_Handler+0x1c>)
    257a:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    257c:	4b05      	ldr	r3, [pc, #20]	; (2594 <WDT_Handler+0x20>)
    257e:	681b      	ldr	r3, [r3, #0]
    2580:	2b00      	cmp	r3, #0
    2582:	d002      	beq.n	258a <WDT_Handler+0x16>
		wdt_early_warning_callback();
    2584:	4b03      	ldr	r3, [pc, #12]	; (2594 <WDT_Handler+0x20>)
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	4798      	blx	r3
	}
}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	46bd      	mov	sp, r7
    258e:	bd80      	pop	{r7, pc}
    2590:	00002559 	.word	0x00002559
    2594:	200000ec 	.word	0x200000ec

00002598 <system_gclk_chan_get_config_defaults>:
{
    2598:	b580      	push	{r7, lr}
    259a:	b082      	sub	sp, #8
    259c:	af00      	add	r7, sp, #0
    259e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	2200      	movs	r2, #0
    25a4:	701a      	strb	r2, [r3, #0]
}
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	46bd      	mov	sp, r7
    25aa:	b002      	add	sp, #8
    25ac:	bd80      	pop	{r7, pc}
	...

000025b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	b084      	sub	sp, #16
    25b4:	af00      	add	r7, sp, #0
    25b6:	0002      	movs	r2, r0
    25b8:	1dfb      	adds	r3, r7, #7
    25ba:	701a      	strb	r2, [r3, #0]
    25bc:	1dbb      	adds	r3, r7, #6
    25be:	1c0a      	adds	r2, r1, #0
    25c0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    25c2:	4b1a      	ldr	r3, [pc, #104]	; (262c <sercom_set_gclk_generator+0x7c>)
    25c4:	781b      	ldrb	r3, [r3, #0]
    25c6:	2201      	movs	r2, #1
    25c8:	4053      	eors	r3, r2
    25ca:	b2db      	uxtb	r3, r3
    25cc:	2b00      	cmp	r3, #0
    25ce:	d103      	bne.n	25d8 <sercom_set_gclk_generator+0x28>
    25d0:	1dbb      	adds	r3, r7, #6
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d01b      	beq.n	2610 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    25d8:	230c      	movs	r3, #12
    25da:	18fb      	adds	r3, r7, r3
    25dc:	0018      	movs	r0, r3
    25de:	4b14      	ldr	r3, [pc, #80]	; (2630 <sercom_set_gclk_generator+0x80>)
    25e0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    25e2:	230c      	movs	r3, #12
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	1dfa      	adds	r2, r7, #7
    25e8:	7812      	ldrb	r2, [r2, #0]
    25ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    25ec:	230c      	movs	r3, #12
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	0019      	movs	r1, r3
    25f2:	2011      	movs	r0, #17
    25f4:	4b0f      	ldr	r3, [pc, #60]	; (2634 <sercom_set_gclk_generator+0x84>)
    25f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    25f8:	2011      	movs	r0, #17
    25fa:	4b0f      	ldr	r3, [pc, #60]	; (2638 <sercom_set_gclk_generator+0x88>)
    25fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    25fe:	4b0b      	ldr	r3, [pc, #44]	; (262c <sercom_set_gclk_generator+0x7c>)
    2600:	1dfa      	adds	r2, r7, #7
    2602:	7812      	ldrb	r2, [r2, #0]
    2604:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2606:	4b09      	ldr	r3, [pc, #36]	; (262c <sercom_set_gclk_generator+0x7c>)
    2608:	2201      	movs	r2, #1
    260a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    260c:	2300      	movs	r3, #0
    260e:	e008      	b.n	2622 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2610:	4b06      	ldr	r3, [pc, #24]	; (262c <sercom_set_gclk_generator+0x7c>)
    2612:	785b      	ldrb	r3, [r3, #1]
    2614:	1dfa      	adds	r2, r7, #7
    2616:	7812      	ldrb	r2, [r2, #0]
    2618:	429a      	cmp	r2, r3
    261a:	d101      	bne.n	2620 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    261c:	2300      	movs	r3, #0
    261e:	e000      	b.n	2622 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2620:	231d      	movs	r3, #29
}
    2622:	0018      	movs	r0, r3
    2624:	46bd      	mov	sp, r7
    2626:	b004      	add	sp, #16
    2628:	bd80      	pop	{r7, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	200000c0 	.word	0x200000c0
    2630:	00002599 	.word	0x00002599
    2634:	00003129 	.word	0x00003129
    2638:	00003169 	.word	0x00003169

0000263c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    263c:	b580      	push	{r7, lr}
    263e:	b082      	sub	sp, #8
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	000a      	movs	r2, r1
    2646:	1cfb      	adds	r3, r7, #3
    2648:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	4a4e      	ldr	r2, [pc, #312]	; (2788 <_sercom_get_default_pad+0x14c>)
    264e:	4293      	cmp	r3, r2
    2650:	d040      	beq.n	26d4 <_sercom_get_default_pad+0x98>
    2652:	4a4d      	ldr	r2, [pc, #308]	; (2788 <_sercom_get_default_pad+0x14c>)
    2654:	4293      	cmp	r3, r2
    2656:	d807      	bhi.n	2668 <_sercom_get_default_pad+0x2c>
    2658:	2284      	movs	r2, #132	; 0x84
    265a:	05d2      	lsls	r2, r2, #23
    265c:	4293      	cmp	r3, r2
    265e:	d00f      	beq.n	2680 <_sercom_get_default_pad+0x44>
    2660:	4a4a      	ldr	r2, [pc, #296]	; (278c <_sercom_get_default_pad+0x150>)
    2662:	4293      	cmp	r3, r2
    2664:	d021      	beq.n	26aa <_sercom_get_default_pad+0x6e>
    2666:	e089      	b.n	277c <_sercom_get_default_pad+0x140>
    2668:	4a49      	ldr	r2, [pc, #292]	; (2790 <_sercom_get_default_pad+0x154>)
    266a:	4293      	cmp	r3, r2
    266c:	d100      	bne.n	2670 <_sercom_get_default_pad+0x34>
    266e:	e05b      	b.n	2728 <_sercom_get_default_pad+0xec>
    2670:	4a48      	ldr	r2, [pc, #288]	; (2794 <_sercom_get_default_pad+0x158>)
    2672:	4293      	cmp	r3, r2
    2674:	d100      	bne.n	2678 <_sercom_get_default_pad+0x3c>
    2676:	e06c      	b.n	2752 <_sercom_get_default_pad+0x116>
    2678:	4a47      	ldr	r2, [pc, #284]	; (2798 <_sercom_get_default_pad+0x15c>)
    267a:	4293      	cmp	r3, r2
    267c:	d03f      	beq.n	26fe <_sercom_get_default_pad+0xc2>
    267e:	e07d      	b.n	277c <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2680:	1cfb      	adds	r3, r7, #3
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	2b01      	cmp	r3, #1
    2686:	d00a      	beq.n	269e <_sercom_get_default_pad+0x62>
    2688:	dc02      	bgt.n	2690 <_sercom_get_default_pad+0x54>
    268a:	2b00      	cmp	r3, #0
    268c:	d005      	beq.n	269a <_sercom_get_default_pad+0x5e>
    268e:	e075      	b.n	277c <_sercom_get_default_pad+0x140>
    2690:	2b02      	cmp	r3, #2
    2692:	d006      	beq.n	26a2 <_sercom_get_default_pad+0x66>
    2694:	2b03      	cmp	r3, #3
    2696:	d006      	beq.n	26a6 <_sercom_get_default_pad+0x6a>
    2698:	e070      	b.n	277c <_sercom_get_default_pad+0x140>
    269a:	4b40      	ldr	r3, [pc, #256]	; (279c <_sercom_get_default_pad+0x160>)
    269c:	e06f      	b.n	277e <_sercom_get_default_pad+0x142>
    269e:	4b40      	ldr	r3, [pc, #256]	; (27a0 <_sercom_get_default_pad+0x164>)
    26a0:	e06d      	b.n	277e <_sercom_get_default_pad+0x142>
    26a2:	4b40      	ldr	r3, [pc, #256]	; (27a4 <_sercom_get_default_pad+0x168>)
    26a4:	e06b      	b.n	277e <_sercom_get_default_pad+0x142>
    26a6:	4b40      	ldr	r3, [pc, #256]	; (27a8 <_sercom_get_default_pad+0x16c>)
    26a8:	e069      	b.n	277e <_sercom_get_default_pad+0x142>
    26aa:	1cfb      	adds	r3, r7, #3
    26ac:	781b      	ldrb	r3, [r3, #0]
    26ae:	2b01      	cmp	r3, #1
    26b0:	d00a      	beq.n	26c8 <_sercom_get_default_pad+0x8c>
    26b2:	dc02      	bgt.n	26ba <_sercom_get_default_pad+0x7e>
    26b4:	2b00      	cmp	r3, #0
    26b6:	d005      	beq.n	26c4 <_sercom_get_default_pad+0x88>
    26b8:	e060      	b.n	277c <_sercom_get_default_pad+0x140>
    26ba:	2b02      	cmp	r3, #2
    26bc:	d006      	beq.n	26cc <_sercom_get_default_pad+0x90>
    26be:	2b03      	cmp	r3, #3
    26c0:	d006      	beq.n	26d0 <_sercom_get_default_pad+0x94>
    26c2:	e05b      	b.n	277c <_sercom_get_default_pad+0x140>
    26c4:	2303      	movs	r3, #3
    26c6:	e05a      	b.n	277e <_sercom_get_default_pad+0x142>
    26c8:	4b38      	ldr	r3, [pc, #224]	; (27ac <_sercom_get_default_pad+0x170>)
    26ca:	e058      	b.n	277e <_sercom_get_default_pad+0x142>
    26cc:	4b38      	ldr	r3, [pc, #224]	; (27b0 <_sercom_get_default_pad+0x174>)
    26ce:	e056      	b.n	277e <_sercom_get_default_pad+0x142>
    26d0:	4b38      	ldr	r3, [pc, #224]	; (27b4 <_sercom_get_default_pad+0x178>)
    26d2:	e054      	b.n	277e <_sercom_get_default_pad+0x142>
    26d4:	1cfb      	adds	r3, r7, #3
    26d6:	781b      	ldrb	r3, [r3, #0]
    26d8:	2b01      	cmp	r3, #1
    26da:	d00a      	beq.n	26f2 <_sercom_get_default_pad+0xb6>
    26dc:	dc02      	bgt.n	26e4 <_sercom_get_default_pad+0xa8>
    26de:	2b00      	cmp	r3, #0
    26e0:	d005      	beq.n	26ee <_sercom_get_default_pad+0xb2>
    26e2:	e04b      	b.n	277c <_sercom_get_default_pad+0x140>
    26e4:	2b02      	cmp	r3, #2
    26e6:	d006      	beq.n	26f6 <_sercom_get_default_pad+0xba>
    26e8:	2b03      	cmp	r3, #3
    26ea:	d006      	beq.n	26fa <_sercom_get_default_pad+0xbe>
    26ec:	e046      	b.n	277c <_sercom_get_default_pad+0x140>
    26ee:	4b32      	ldr	r3, [pc, #200]	; (27b8 <_sercom_get_default_pad+0x17c>)
    26f0:	e045      	b.n	277e <_sercom_get_default_pad+0x142>
    26f2:	4b32      	ldr	r3, [pc, #200]	; (27bc <_sercom_get_default_pad+0x180>)
    26f4:	e043      	b.n	277e <_sercom_get_default_pad+0x142>
    26f6:	4b32      	ldr	r3, [pc, #200]	; (27c0 <_sercom_get_default_pad+0x184>)
    26f8:	e041      	b.n	277e <_sercom_get_default_pad+0x142>
    26fa:	4b32      	ldr	r3, [pc, #200]	; (27c4 <_sercom_get_default_pad+0x188>)
    26fc:	e03f      	b.n	277e <_sercom_get_default_pad+0x142>
    26fe:	1cfb      	adds	r3, r7, #3
    2700:	781b      	ldrb	r3, [r3, #0]
    2702:	2b01      	cmp	r3, #1
    2704:	d00a      	beq.n	271c <_sercom_get_default_pad+0xe0>
    2706:	dc02      	bgt.n	270e <_sercom_get_default_pad+0xd2>
    2708:	2b00      	cmp	r3, #0
    270a:	d005      	beq.n	2718 <_sercom_get_default_pad+0xdc>
    270c:	e036      	b.n	277c <_sercom_get_default_pad+0x140>
    270e:	2b02      	cmp	r3, #2
    2710:	d006      	beq.n	2720 <_sercom_get_default_pad+0xe4>
    2712:	2b03      	cmp	r3, #3
    2714:	d006      	beq.n	2724 <_sercom_get_default_pad+0xe8>
    2716:	e031      	b.n	277c <_sercom_get_default_pad+0x140>
    2718:	4b2b      	ldr	r3, [pc, #172]	; (27c8 <_sercom_get_default_pad+0x18c>)
    271a:	e030      	b.n	277e <_sercom_get_default_pad+0x142>
    271c:	4b2b      	ldr	r3, [pc, #172]	; (27cc <_sercom_get_default_pad+0x190>)
    271e:	e02e      	b.n	277e <_sercom_get_default_pad+0x142>
    2720:	4b2b      	ldr	r3, [pc, #172]	; (27d0 <_sercom_get_default_pad+0x194>)
    2722:	e02c      	b.n	277e <_sercom_get_default_pad+0x142>
    2724:	4b2b      	ldr	r3, [pc, #172]	; (27d4 <_sercom_get_default_pad+0x198>)
    2726:	e02a      	b.n	277e <_sercom_get_default_pad+0x142>
    2728:	1cfb      	adds	r3, r7, #3
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	2b01      	cmp	r3, #1
    272e:	d00a      	beq.n	2746 <_sercom_get_default_pad+0x10a>
    2730:	dc02      	bgt.n	2738 <_sercom_get_default_pad+0xfc>
    2732:	2b00      	cmp	r3, #0
    2734:	d005      	beq.n	2742 <_sercom_get_default_pad+0x106>
    2736:	e021      	b.n	277c <_sercom_get_default_pad+0x140>
    2738:	2b02      	cmp	r3, #2
    273a:	d006      	beq.n	274a <_sercom_get_default_pad+0x10e>
    273c:	2b03      	cmp	r3, #3
    273e:	d006      	beq.n	274e <_sercom_get_default_pad+0x112>
    2740:	e01c      	b.n	277c <_sercom_get_default_pad+0x140>
    2742:	4b25      	ldr	r3, [pc, #148]	; (27d8 <_sercom_get_default_pad+0x19c>)
    2744:	e01b      	b.n	277e <_sercom_get_default_pad+0x142>
    2746:	4b25      	ldr	r3, [pc, #148]	; (27dc <_sercom_get_default_pad+0x1a0>)
    2748:	e019      	b.n	277e <_sercom_get_default_pad+0x142>
    274a:	4b25      	ldr	r3, [pc, #148]	; (27e0 <_sercom_get_default_pad+0x1a4>)
    274c:	e017      	b.n	277e <_sercom_get_default_pad+0x142>
    274e:	4b25      	ldr	r3, [pc, #148]	; (27e4 <_sercom_get_default_pad+0x1a8>)
    2750:	e015      	b.n	277e <_sercom_get_default_pad+0x142>
    2752:	1cfb      	adds	r3, r7, #3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b01      	cmp	r3, #1
    2758:	d00a      	beq.n	2770 <_sercom_get_default_pad+0x134>
    275a:	dc02      	bgt.n	2762 <_sercom_get_default_pad+0x126>
    275c:	2b00      	cmp	r3, #0
    275e:	d005      	beq.n	276c <_sercom_get_default_pad+0x130>
    2760:	e00c      	b.n	277c <_sercom_get_default_pad+0x140>
    2762:	2b02      	cmp	r3, #2
    2764:	d006      	beq.n	2774 <_sercom_get_default_pad+0x138>
    2766:	2b03      	cmp	r3, #3
    2768:	d006      	beq.n	2778 <_sercom_get_default_pad+0x13c>
    276a:	e007      	b.n	277c <_sercom_get_default_pad+0x140>
    276c:	4b1e      	ldr	r3, [pc, #120]	; (27e8 <_sercom_get_default_pad+0x1ac>)
    276e:	e006      	b.n	277e <_sercom_get_default_pad+0x142>
    2770:	4b1e      	ldr	r3, [pc, #120]	; (27ec <_sercom_get_default_pad+0x1b0>)
    2772:	e004      	b.n	277e <_sercom_get_default_pad+0x142>
    2774:	4b1e      	ldr	r3, [pc, #120]	; (27f0 <_sercom_get_default_pad+0x1b4>)
    2776:	e002      	b.n	277e <_sercom_get_default_pad+0x142>
    2778:	4b1e      	ldr	r3, [pc, #120]	; (27f4 <_sercom_get_default_pad+0x1b8>)
    277a:	e000      	b.n	277e <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    277c:	2300      	movs	r3, #0
}
    277e:	0018      	movs	r0, r3
    2780:	46bd      	mov	sp, r7
    2782:	b002      	add	sp, #8
    2784:	bd80      	pop	{r7, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	42000800 	.word	0x42000800
    278c:	42000400 	.word	0x42000400
    2790:	42001000 	.word	0x42001000
    2794:	43000400 	.word	0x43000400
    2798:	42000c00 	.word	0x42000c00
    279c:	00040003 	.word	0x00040003
    27a0:	00050003 	.word	0x00050003
    27a4:	00060003 	.word	0x00060003
    27a8:	00070003 	.word	0x00070003
    27ac:	00010003 	.word	0x00010003
    27b0:	001e0003 	.word	0x001e0003
    27b4:	001f0003 	.word	0x001f0003
    27b8:	00080003 	.word	0x00080003
    27bc:	00090003 	.word	0x00090003
    27c0:	000a0003 	.word	0x000a0003
    27c4:	000b0003 	.word	0x000b0003
    27c8:	00100003 	.word	0x00100003
    27cc:	00110003 	.word	0x00110003
    27d0:	00120003 	.word	0x00120003
    27d4:	00130003 	.word	0x00130003
    27d8:	000c0003 	.word	0x000c0003
    27dc:	000d0003 	.word	0x000d0003
    27e0:	000e0003 	.word	0x000e0003
    27e4:	000f0003 	.word	0x000f0003
    27e8:	00160003 	.word	0x00160003
    27ec:	00170003 	.word	0x00170003
    27f0:	00180003 	.word	0x00180003
    27f4:	00190003 	.word	0x00190003

000027f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    27f8:	b590      	push	{r4, r7, lr}
    27fa:	b08b      	sub	sp, #44	; 0x2c
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2800:	230c      	movs	r3, #12
    2802:	18fb      	adds	r3, r7, r3
    2804:	4a0f      	ldr	r2, [pc, #60]	; (2844 <_sercom_get_sercom_inst_index+0x4c>)
    2806:	ca13      	ldmia	r2!, {r0, r1, r4}
    2808:	c313      	stmia	r3!, {r0, r1, r4}
    280a:	ca13      	ldmia	r2!, {r0, r1, r4}
    280c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    280e:	2300      	movs	r3, #0
    2810:	627b      	str	r3, [r7, #36]	; 0x24
    2812:	e00e      	b.n	2832 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2814:	230c      	movs	r3, #12
    2816:	18fb      	adds	r3, r7, r3
    2818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    281a:	0092      	lsls	r2, r2, #2
    281c:	58d3      	ldr	r3, [r2, r3]
    281e:	001a      	movs	r2, r3
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	429a      	cmp	r2, r3
    2824:	d102      	bne.n	282c <_sercom_get_sercom_inst_index+0x34>
			return i;
    2826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2828:	b2db      	uxtb	r3, r3
    282a:	e006      	b.n	283a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    282e:	3301      	adds	r3, #1
    2830:	627b      	str	r3, [r7, #36]	; 0x24
    2832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2834:	2b05      	cmp	r3, #5
    2836:	d9ed      	bls.n	2814 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2838:	2300      	movs	r3, #0
}
    283a:	0018      	movs	r0, r3
    283c:	46bd      	mov	sp, r7
    283e:	b00b      	add	sp, #44	; 0x2c
    2840:	bd90      	pop	{r4, r7, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	00005ad0 	.word	0x00005ad0

00002848 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    2848:	b580      	push	{r7, lr}
    284a:	af00      	add	r7, sp, #0
}
    284c:	46c0      	nop			; (mov r8, r8)
    284e:	46bd      	mov	sp, r7
    2850:	bd80      	pop	{r7, pc}

00002852 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    2852:	b580      	push	{r7, lr}
    2854:	b082      	sub	sp, #8
    2856:	af00      	add	r7, sp, #0
    2858:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	095b      	lsrs	r3, r3, #5
}
    285e:	0018      	movs	r0, r3
    2860:	46bd      	mov	sp, r7
    2862:	b002      	add	sp, #8
    2864:	bd80      	pop	{r7, pc}
	...

00002868 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	01db      	lsls	r3, r3, #7
    2874:	4a03      	ldr	r2, [pc, #12]	; (2884 <arch_ioport_port_to_base+0x1c>)
    2876:	4694      	mov	ip, r2
    2878:	4463      	add	r3, ip
}
    287a:	0018      	movs	r0, r3
    287c:	46bd      	mov	sp, r7
    287e:	b002      	add	sp, #8
    2880:	bd80      	pop	{r7, pc}
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	40002800 	.word	0x40002800

00002888 <arch_ioport_pin_to_mask>:
{
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    2888:	b580      	push	{r7, lr}
    288a:	b082      	sub	sp, #8
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	221f      	movs	r2, #31
    2894:	4013      	ands	r3, r2
    2896:	2201      	movs	r2, #1
    2898:	409a      	lsls	r2, r3
    289a:	0013      	movs	r3, r2
}
    289c:	0018      	movs	r0, r3
    289e:	46bd      	mov	sp, r7
    28a0:	b002      	add	sp, #8
    28a2:	bd80      	pop	{r7, pc}

000028a4 <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b08a      	sub	sp, #40	; 0x28
    28a8:	af00      	add	r7, sp, #0
    28aa:	60f8      	str	r0, [r7, #12]
    28ac:	60b9      	str	r1, [r7, #8]
    28ae:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    28b0:	68fb      	ldr	r3, [r7, #12]
    28b2:	0018      	movs	r0, r3
    28b4:	4b2b      	ldr	r3, [pc, #172]	; (2964 <arch_ioport_set_port_mode+0xc0>)
    28b6:	4798      	blx	r3
    28b8:	0003      	movs	r3, r0
    28ba:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
    28bc:	2300      	movs	r3, #0
    28be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    28c0:	2300      	movs	r3, #0
    28c2:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
    28c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28c6:	2280      	movs	r2, #128	; 0x80
    28c8:	0292      	lsls	r2, r2, #10
    28ca:	4313      	orrs	r3, r2
    28cc:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	2220      	movs	r2, #32
    28d2:	4013      	ands	r3, r2
    28d4:	d103      	bne.n	28de <arch_ioport_set_port_mode+0x3a>
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2210      	movs	r2, #16
    28da:	4013      	ands	r3, r2
    28dc:	d004      	beq.n	28e8 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    28de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28e0:	2280      	movs	r2, #128	; 0x80
    28e2:	02d2      	lsls	r2, r2, #11
    28e4:	4313      	orrs	r3, r2
    28e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	2280      	movs	r2, #128	; 0x80
    28ec:	4013      	ands	r3, r2
    28ee:	d004      	beq.n	28fa <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    28f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28f2:	2280      	movs	r2, #128	; 0x80
    28f4:	03d2      	lsls	r2, r2, #15
    28f6:	4313      	orrs	r3, r2
    28f8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	061a      	lsls	r2, r3, #24
    28fe:	23f0      	movs	r3, #240	; 0xf0
    2900:	051b      	lsls	r3, r3, #20
    2902:	4013      	ands	r3, r2
    2904:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
    2906:	68bb      	ldr	r3, [r7, #8]
    2908:	041b      	lsls	r3, r3, #16
    290a:	0c1b      	lsrs	r3, r3, #16
    290c:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    290e:	68bb      	ldr	r3, [r7, #8]
    2910:	0c1b      	lsrs	r3, r3, #16
    2912:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2914:	69ba      	ldr	r2, [r7, #24]
    2916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2918:	431a      	orrs	r2, r3
			config_mask | config_mux |
    291a:	69fb      	ldr	r3, [r7, #28]
    291c:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    291e:	22a0      	movs	r2, #160	; 0xa0
    2920:	05d2      	lsls	r2, r2, #23
    2922:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    2924:	6a3b      	ldr	r3, [r7, #32]
    2926:	629a      	str	r2, [r3, #40]	; 0x28

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2928:	697a      	ldr	r2, [r7, #20]
    292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    292c:	431a      	orrs	r2, r3
			config_mask | config_mux |
    292e:	69fb      	ldr	r3, [r7, #28]
    2930:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2932:	22d0      	movs	r2, #208	; 0xd0
    2934:	0612      	lsls	r2, r2, #24
    2936:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    2938:	6a3b      	ldr	r3, [r7, #32]
    293a:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	2220      	movs	r2, #32
    2940:	4013      	ands	r3, r2
    2942:	d003      	beq.n	294c <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    2944:	6a3b      	ldr	r3, [r7, #32]
    2946:	68ba      	ldr	r2, [r7, #8]
    2948:	615a      	str	r2, [r3, #20]
	}
	else if (mode & IOPORT_MODE_PULLUP) {
		base->OUTSET.reg = mask;
	}
}
    294a:	e006      	b.n	295a <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2210      	movs	r2, #16
    2950:	4013      	ands	r3, r2
    2952:	d002      	beq.n	295a <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    2954:	6a3b      	ldr	r3, [r7, #32]
    2956:	68ba      	ldr	r2, [r7, #8]
    2958:	619a      	str	r2, [r3, #24]
}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	46bd      	mov	sp, r7
    295e:	b00a      	add	sp, #40	; 0x28
    2960:	bd80      	pop	{r7, pc}
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	00002869 	.word	0x00002869

00002968 <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
    2968:	b590      	push	{r4, r7, lr}
    296a:	b083      	sub	sp, #12
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
    2970:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	0018      	movs	r0, r3
    2976:	4b08      	ldr	r3, [pc, #32]	; (2998 <arch_ioport_set_pin_mode+0x30>)
    2978:	4798      	blx	r3
    297a:	0004      	movs	r4, r0
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	0018      	movs	r0, r3
    2980:	4b06      	ldr	r3, [pc, #24]	; (299c <arch_ioport_set_pin_mode+0x34>)
    2982:	4798      	blx	r3
    2984:	0001      	movs	r1, r0
    2986:	683b      	ldr	r3, [r7, #0]
    2988:	001a      	movs	r2, r3
    298a:	0020      	movs	r0, r4
    298c:	4b04      	ldr	r3, [pc, #16]	; (29a0 <arch_ioport_set_pin_mode+0x38>)
    298e:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
    2990:	46c0      	nop			; (mov r8, r8)
    2992:	46bd      	mov	sp, r7
    2994:	b003      	add	sp, #12
    2996:	bd90      	pop	{r4, r7, pc}
    2998:	00002853 	.word	0x00002853
    299c:	00002889 	.word	0x00002889
    29a0:	000028a5 	.word	0x000028a5

000029a4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b082      	sub	sp, #8
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
    29ac:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    29ae:	683a      	ldr	r2, [r7, #0]
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	0011      	movs	r1, r2
    29b4:	0018      	movs	r0, r3
    29b6:	4b03      	ldr	r3, [pc, #12]	; (29c4 <ioport_set_pin_mode+0x20>)
    29b8:	4798      	blx	r3
}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	46bd      	mov	sp, r7
    29be:	b002      	add	sp, #8
    29c0:	bd80      	pop	{r7, pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00002969 	.word	0x00002969

000029c8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    29c8:	b580      	push	{r7, lr}
    29ca:	af00      	add	r7, sp, #0
	ioport_set_pin_mode(SDA_PIN, SDA_PIN_MUX);
    29cc:	2102      	movs	r1, #2
    29ce:	2016      	movs	r0, #22
    29d0:	4b14      	ldr	r3, [pc, #80]	; (2a24 <system_board_init+0x5c>)
    29d2:	4798      	blx	r3
	ioport_set_pin_mode(SCL_PIN, SCL_PIN_MUX);
    29d4:	2102      	movs	r1, #2
    29d6:	2017      	movs	r0, #23
    29d8:	4b12      	ldr	r3, [pc, #72]	; (2a24 <system_board_init+0x5c>)
    29da:	4798      	blx	r3

	ioport_set_pin_mode(A0_PIN, A0_PIN_MUX);
    29dc:	2101      	movs	r1, #1
    29de:	2002      	movs	r0, #2
    29e0:	4b10      	ldr	r3, [pc, #64]	; (2a24 <system_board_init+0x5c>)
    29e2:	4798      	blx	r3
	ioport_set_pin_mode(A1_PIN, A1_PIN_MUX);
    29e4:	2101      	movs	r1, #1
    29e6:	2028      	movs	r0, #40	; 0x28
    29e8:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <system_board_init+0x5c>)
    29ea:	4798      	blx	r3
	ioport_set_pin_mode(A2_PIN, A2_PIN_MUX);
    29ec:	2101      	movs	r1, #1
    29ee:	2029      	movs	r0, #41	; 0x29
    29f0:	4b0c      	ldr	r3, [pc, #48]	; (2a24 <system_board_init+0x5c>)
    29f2:	4798      	blx	r3
	ioport_set_pin_mode(A3_PIN, A3_PIN_MUX);
    29f4:	2101      	movs	r1, #1
    29f6:	2004      	movs	r0, #4
    29f8:	4b0a      	ldr	r3, [pc, #40]	; (2a24 <system_board_init+0x5c>)
    29fa:	4798      	blx	r3
	ioport_set_pin_mode(A4_PIN, A4_PIN_MUX);
    29fc:	2101      	movs	r1, #1
    29fe:	2005      	movs	r0, #5
    2a00:	4b08      	ldr	r3, [pc, #32]	; (2a24 <system_board_init+0x5c>)
    2a02:	4798      	blx	r3
	ioport_set_pin_mode(A5_PIN, A5_PIN_MUX);
    2a04:	2101      	movs	r1, #1
    2a06:	2022      	movs	r0, #34	; 0x22
    2a08:	4b06      	ldr	r3, [pc, #24]	; (2a24 <system_board_init+0x5c>)
    2a0a:	4798      	blx	r3

	ioport_set_pin_mode(TX_PIN, TX_PIN_MUX);
    2a0c:	2103      	movs	r1, #3
    2a0e:	2036      	movs	r0, #54	; 0x36
    2a10:	4b04      	ldr	r3, [pc, #16]	; (2a24 <system_board_init+0x5c>)
    2a12:	4798      	blx	r3
	ioport_set_pin_mode(RX_PIN, RX_PIN_MUX);
    2a14:	2103      	movs	r1, #3
    2a16:	2037      	movs	r0, #55	; 0x37
    2a18:	4b02      	ldr	r3, [pc, #8]	; (2a24 <system_board_init+0x5c>)
    2a1a:	4798      	blx	r3
    2a1c:	46c0      	nop			; (mov r8, r8)
    2a1e:	46bd      	mov	sp, r7
    2a20:	bd80      	pop	{r7, pc}
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	000029a5 	.word	0x000029a5

00002a28 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2a28:	b580      	push	{r7, lr}
    2a2a:	b082      	sub	sp, #8
    2a2c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2a2e:	4b10      	ldr	r3, [pc, #64]	; (2a70 <cpu_irq_enter_critical+0x48>)
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d112      	bne.n	2a5c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a36:	f3ef 8310 	mrs	r3, PRIMASK
    2a3a:	607b      	str	r3, [r7, #4]
  return(result);
    2a3c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d109      	bne.n	2a56 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2a42:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2a44:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a48:	4b0a      	ldr	r3, [pc, #40]	; (2a74 <cpu_irq_enter_critical+0x4c>)
    2a4a:	2200      	movs	r2, #0
    2a4c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a4e:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <cpu_irq_enter_critical+0x50>)
    2a50:	2201      	movs	r2, #1
    2a52:	701a      	strb	r2, [r3, #0]
    2a54:	e002      	b.n	2a5c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a56:	4b08      	ldr	r3, [pc, #32]	; (2a78 <cpu_irq_enter_critical+0x50>)
    2a58:	2200      	movs	r2, #0
    2a5a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a5c:	4b04      	ldr	r3, [pc, #16]	; (2a70 <cpu_irq_enter_critical+0x48>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	1c5a      	adds	r2, r3, #1
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <cpu_irq_enter_critical+0x48>)
    2a64:	601a      	str	r2, [r3, #0]
}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	46bd      	mov	sp, r7
    2a6a:	b002      	add	sp, #8
    2a6c:	bd80      	pop	{r7, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	200000c4 	.word	0x200000c4
    2a74:	2000000c 	.word	0x2000000c
    2a78:	200000c8 	.word	0x200000c8

00002a7c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a80:	4b0b      	ldr	r3, [pc, #44]	; (2ab0 <cpu_irq_leave_critical+0x34>)
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	1e5a      	subs	r2, r3, #1
    2a86:	4b0a      	ldr	r3, [pc, #40]	; (2ab0 <cpu_irq_leave_critical+0x34>)
    2a88:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a8a:	4b09      	ldr	r3, [pc, #36]	; (2ab0 <cpu_irq_leave_critical+0x34>)
    2a8c:	681b      	ldr	r3, [r3, #0]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d10a      	bne.n	2aa8 <cpu_irq_leave_critical+0x2c>
    2a92:	4b08      	ldr	r3, [pc, #32]	; (2ab4 <cpu_irq_leave_critical+0x38>)
    2a94:	781b      	ldrb	r3, [r3, #0]
    2a96:	b2db      	uxtb	r3, r3
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d005      	beq.n	2aa8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2a9c:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <cpu_irq_leave_critical+0x3c>)
    2a9e:	2201      	movs	r2, #1
    2aa0:	701a      	strb	r2, [r3, #0]
    2aa2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2aa6:	b662      	cpsie	i
	}
}
    2aa8:	46c0      	nop			; (mov r8, r8)
    2aaa:	46bd      	mov	sp, r7
    2aac:	bd80      	pop	{r7, pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	200000c4 	.word	0x200000c4
    2ab4:	200000c8 	.word	0x200000c8
    2ab8:	2000000c 	.word	0x2000000c

00002abc <system_gclk_gen_get_config_defaults>:
{
    2abc:	b580      	push	{r7, lr}
    2abe:	b082      	sub	sp, #8
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	2201      	movs	r2, #1
    2ac8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	2200      	movs	r2, #0
    2ace:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	2206      	movs	r2, #6
    2ad4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	2200      	movs	r2, #0
    2ada:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	2200      	movs	r2, #0
    2ae0:	725a      	strb	r2, [r3, #9]
}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	46bd      	mov	sp, r7
    2ae6:	b002      	add	sp, #8
    2ae8:	bd80      	pop	{r7, pc}

00002aea <system_main_clock_set_failure_detect>:
{
    2aea:	b580      	push	{r7, lr}
    2aec:	b082      	sub	sp, #8
    2aee:	af00      	add	r7, sp, #0
    2af0:	0002      	movs	r2, r0
    2af2:	1dfb      	adds	r3, r7, #7
    2af4:	701a      	strb	r2, [r3, #0]
}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	46bd      	mov	sp, r7
    2afa:	b002      	add	sp, #8
    2afc:	bd80      	pop	{r7, pc}
	...

00002b00 <system_cpu_clock_set_divider>:
{
    2b00:	b580      	push	{r7, lr}
    2b02:	b082      	sub	sp, #8
    2b04:	af00      	add	r7, sp, #0
    2b06:	0002      	movs	r2, r0
    2b08:	1dfb      	adds	r3, r7, #7
    2b0a:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2b0c:	4a05      	ldr	r2, [pc, #20]	; (2b24 <system_cpu_clock_set_divider+0x24>)
    2b0e:	1dfb      	adds	r3, r7, #7
    2b10:	781b      	ldrb	r3, [r3, #0]
    2b12:	2101      	movs	r1, #1
    2b14:	4099      	lsls	r1, r3
    2b16:	000b      	movs	r3, r1
    2b18:	b2db      	uxtb	r3, r3
    2b1a:	7113      	strb	r3, [r2, #4]
}
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46bd      	mov	sp, r7
    2b20:	b002      	add	sp, #8
    2b22:	bd80      	pop	{r7, pc}
    2b24:	40000400 	.word	0x40000400

00002b28 <system_low_power_clock_set_divider>:
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b082      	sub	sp, #8
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	0002      	movs	r2, r0
    2b30:	1dfb      	adds	r3, r7, #7
    2b32:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2b34:	4a05      	ldr	r2, [pc, #20]	; (2b4c <system_low_power_clock_set_divider+0x24>)
    2b36:	1dfb      	adds	r3, r7, #7
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	2101      	movs	r1, #1
    2b3c:	4099      	lsls	r1, r3
    2b3e:	000b      	movs	r3, r1
    2b40:	b2db      	uxtb	r3, r3
    2b42:	7153      	strb	r3, [r2, #5]
}
    2b44:	46c0      	nop			; (mov r8, r8)
    2b46:	46bd      	mov	sp, r7
    2b48:	b002      	add	sp, #8
    2b4a:	bd80      	pop	{r7, pc}
    2b4c:	40000400 	.word	0x40000400

00002b50 <system_backup_clock_set_divider>:
{
    2b50:	b580      	push	{r7, lr}
    2b52:	b082      	sub	sp, #8
    2b54:	af00      	add	r7, sp, #0
    2b56:	0002      	movs	r2, r0
    2b58:	1dfb      	adds	r3, r7, #7
    2b5a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2b5c:	4a05      	ldr	r2, [pc, #20]	; (2b74 <system_backup_clock_set_divider+0x24>)
    2b5e:	1dfb      	adds	r3, r7, #7
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	2101      	movs	r1, #1
    2b64:	4099      	lsls	r1, r3
    2b66:	000b      	movs	r3, r1
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	7193      	strb	r3, [r2, #6]
}
    2b6c:	46c0      	nop			; (mov r8, r8)
    2b6e:	46bd      	mov	sp, r7
    2b70:	b002      	add	sp, #8
    2b72:	bd80      	pop	{r7, pc}
    2b74:	40000400 	.word	0x40000400

00002b78 <system_cpu_clock_get_hz>:
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2b7c:	2000      	movs	r0, #0
    2b7e:	4b07      	ldr	r3, [pc, #28]	; (2b9c <system_cpu_clock_get_hz+0x24>)
    2b80:	4798      	blx	r3
    2b82:	0002      	movs	r2, r0
    2b84:	4b06      	ldr	r3, [pc, #24]	; (2ba0 <system_cpu_clock_get_hz+0x28>)
    2b86:	791b      	ldrb	r3, [r3, #4]
    2b88:	b2db      	uxtb	r3, r3
    2b8a:	0019      	movs	r1, r3
    2b8c:	4b05      	ldr	r3, [pc, #20]	; (2ba4 <system_cpu_clock_get_hz+0x2c>)
    2b8e:	0010      	movs	r0, r2
    2b90:	4798      	blx	r3
    2b92:	0003      	movs	r3, r0
}
    2b94:	0018      	movs	r0, r3
    2b96:	46bd      	mov	sp, r7
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00003069 	.word	0x00003069
    2ba0:	40000400 	.word	0x40000400
    2ba4:	00003889 	.word	0x00003889

00002ba8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2ba8:	b580      	push	{r7, lr}
    2baa:	b082      	sub	sp, #8
    2bac:	af00      	add	r7, sp, #0
    2bae:	0002      	movs	r2, r0
    2bb0:	1dfb      	adds	r3, r7, #7
    2bb2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2bb4:	4a08      	ldr	r2, [pc, #32]	; (2bd8 <system_flash_set_waitstates+0x30>)
    2bb6:	1dfb      	adds	r3, r7, #7
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	210f      	movs	r1, #15
    2bbc:	400b      	ands	r3, r1
    2bbe:	b2d9      	uxtb	r1, r3
    2bc0:	6853      	ldr	r3, [r2, #4]
    2bc2:	200f      	movs	r0, #15
    2bc4:	4001      	ands	r1, r0
    2bc6:	0049      	lsls	r1, r1, #1
    2bc8:	201e      	movs	r0, #30
    2bca:	4383      	bics	r3, r0
    2bcc:	430b      	orrs	r3, r1
    2bce:	6053      	str	r3, [r2, #4]
}
    2bd0:	46c0      	nop			; (mov r8, r8)
    2bd2:	46bd      	mov	sp, r7
    2bd4:	b002      	add	sp, #8
    2bd6:	bd80      	pop	{r7, pc}
    2bd8:	41004000 	.word	0x41004000

00002bdc <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	b082      	sub	sp, #8
    2be0:	af00      	add	r7, sp, #0
    2be2:	0002      	movs	r2, r0
    2be4:	1dfb      	adds	r3, r7, #7
    2be6:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2be8:	2380      	movs	r3, #128	; 0x80
    2bea:	05db      	lsls	r3, r3, #23
    2bec:	789b      	ldrb	r3, [r3, #2]
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	1dfa      	adds	r2, r7, #7
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	429a      	cmp	r2, r3
    2bf6:	d101      	bne.n	2bfc <system_switch_performance_level+0x20>
		return STATUS_OK;
    2bf8:	2300      	movs	r3, #0
    2bfa:	e019      	b.n	2c30 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2bfc:	2380      	movs	r3, #128	; 0x80
    2bfe:	05db      	lsls	r3, r3, #23
    2c00:	789b      	ldrb	r3, [r3, #2]
    2c02:	b2db      	uxtb	r3, r3
    2c04:	b25b      	sxtb	r3, r3
    2c06:	2b00      	cmp	r3, #0
    2c08:	da01      	bge.n	2c0e <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    2c0a:	2317      	movs	r3, #23
    2c0c:	e010      	b.n	2c30 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2c0e:	2380      	movs	r3, #128	; 0x80
    2c10:	05db      	lsls	r3, r3, #23
    2c12:	2201      	movs	r2, #1
    2c14:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2c16:	2380      	movs	r3, #128	; 0x80
    2c18:	05db      	lsls	r3, r3, #23
    2c1a:	1dfa      	adds	r2, r7, #7
    2c1c:	7812      	ldrb	r2, [r2, #0]
    2c1e:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2c20:	46c0      	nop			; (mov r8, r8)
    2c22:	2380      	movs	r3, #128	; 0x80
    2c24:	05db      	lsls	r3, r3, #23
    2c26:	799b      	ldrb	r3, [r3, #6]
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d0f9      	beq.n	2c22 <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    2c2e:	2300      	movs	r3, #0
}
    2c30:	0018      	movs	r0, r3
    2c32:	46bd      	mov	sp, r7
    2c34:	b002      	add	sp, #8
    2c36:	bd80      	pop	{r7, pc}

00002c38 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	4b04      	ldr	r3, [pc, #16]	; (2c50 <_system_dfll_wait_for_sync+0x18>)
    2c40:	68da      	ldr	r2, [r3, #12]
    2c42:	2380      	movs	r3, #128	; 0x80
    2c44:	005b      	lsls	r3, r3, #1
    2c46:	4013      	ands	r3, r2
    2c48:	d0f9      	beq.n	2c3e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	40000c00 	.word	0x40000c00

00002c54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b082      	sub	sp, #8
    2c58:	af00      	add	r7, sp, #0
    2c5a:	0002      	movs	r2, r0
    2c5c:	1dfb      	adds	r3, r7, #7
    2c5e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2c60:	1dfb      	adds	r3, r7, #7
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	2b08      	cmp	r3, #8
    2c66:	d842      	bhi.n	2cee <system_clock_source_get_hz+0x9a>
    2c68:	009a      	lsls	r2, r3, #2
    2c6a:	4b23      	ldr	r3, [pc, #140]	; (2cf8 <system_clock_source_get_hz+0xa4>)
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	681b      	ldr	r3, [r3, #0]
    2c70:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2c72:	4b22      	ldr	r3, [pc, #136]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2c74:	691b      	ldr	r3, [r3, #16]
    2c76:	e03b      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2c78:	4b21      	ldr	r3, [pc, #132]	; (2d00 <system_clock_source_get_hz+0xac>)
    2c7a:	7d1b      	ldrb	r3, [r3, #20]
    2c7c:	071b      	lsls	r3, r3, #28
    2c7e:	0f9b      	lsrs	r3, r3, #30
    2c80:	b2db      	uxtb	r3, r3
    2c82:	3301      	adds	r3, #1
    2c84:	001a      	movs	r2, r3
    2c86:	4b1f      	ldr	r3, [pc, #124]	; (2d04 <system_clock_source_get_hz+0xb0>)
    2c88:	4353      	muls	r3, r2
    2c8a:	e031      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2c8c:	2380      	movs	r3, #128	; 0x80
    2c8e:	021b      	lsls	r3, r3, #8
    2c90:	e02e      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2c92:	2380      	movs	r3, #128	; 0x80
    2c94:	021b      	lsls	r3, r3, #8
    2c96:	e02b      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2c98:	4b18      	ldr	r3, [pc, #96]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2c9a:	695b      	ldr	r3, [r3, #20]
    2c9c:	e028      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2c9e:	4b17      	ldr	r3, [pc, #92]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2202      	movs	r2, #2
    2ca4:	4013      	ands	r3, r2
    2ca6:	d101      	bne.n	2cac <system_clock_source_get_hz+0x58>
			return 0;
    2ca8:	2300      	movs	r3, #0
    2caa:	e021      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2cac:	4b16      	ldr	r3, [pc, #88]	; (2d08 <system_clock_source_get_hz+0xb4>)
    2cae:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    2cb0:	4b12      	ldr	r3, [pc, #72]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	2224      	movs	r2, #36	; 0x24
    2cb6:	4013      	ands	r3, r2
    2cb8:	2b04      	cmp	r3, #4
    2cba:	d109      	bne.n	2cd0 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2cbc:	2000      	movs	r0, #0
    2cbe:	4b13      	ldr	r3, [pc, #76]	; (2d0c <system_clock_source_get_hz+0xb8>)
    2cc0:	4798      	blx	r3
    2cc2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    2cc4:	4b0d      	ldr	r3, [pc, #52]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2cc6:	689b      	ldr	r3, [r3, #8]
    2cc8:	041b      	lsls	r3, r3, #16
    2cca:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2ccc:	4353      	muls	r3, r2
    2cce:	e00f      	b.n	2cf0 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    2cd0:	4b0f      	ldr	r3, [pc, #60]	; (2d10 <system_clock_source_get_hz+0xbc>)
    2cd2:	e00d      	b.n	2cf0 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2cd4:	4a0a      	ldr	r2, [pc, #40]	; (2d00 <system_clock_source_get_hz+0xac>)
    2cd6:	2328      	movs	r3, #40	; 0x28
    2cd8:	5cd3      	ldrb	r3, [r2, r3]
    2cda:	b2db      	uxtb	r3, r3
    2cdc:	001a      	movs	r2, r3
    2cde:	2302      	movs	r3, #2
    2ce0:	4013      	ands	r3, r2
    2ce2:	d101      	bne.n	2ce8 <system_clock_source_get_hz+0x94>
			return 0;
    2ce4:	2300      	movs	r3, #0
    2ce6:	e003      	b.n	2cf0 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    2ce8:	4b04      	ldr	r3, [pc, #16]	; (2cfc <system_clock_source_get_hz+0xa8>)
    2cea:	68db      	ldr	r3, [r3, #12]
    2cec:	e000      	b.n	2cf0 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    2cee:	2300      	movs	r3, #0
	}
}
    2cf0:	0018      	movs	r0, r3
    2cf2:	46bd      	mov	sp, r7
    2cf4:	b002      	add	sp, #8
    2cf6:	bd80      	pop	{r7, pc}
    2cf8:	00005ae8 	.word	0x00005ae8
    2cfc:	200000cc 	.word	0x200000cc
    2d00:	40000c00 	.word	0x40000c00
    2d04:	003d0900 	.word	0x003d0900
    2d08:	00002c39 	.word	0x00002c39
    2d0c:	00003219 	.word	0x00003219
    2d10:	02dc6c00 	.word	0x02dc6c00

00002d14 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b0a0      	sub	sp, #128	; 0x80
    2d18:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2d1a:	4b26      	ldr	r3, [pc, #152]	; (2db4 <system_clock_init+0xa0>)
    2d1c:	2280      	movs	r2, #128	; 0x80
    2d1e:	0052      	lsls	r2, r2, #1
    2d20:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2d22:	4b25      	ldr	r3, [pc, #148]	; (2db8 <system_clock_init+0xa4>)
    2d24:	2203      	movs	r2, #3
    2d26:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2d28:	2000      	movs	r0, #0
    2d2a:	4b24      	ldr	r3, [pc, #144]	; (2dbc <system_clock_init+0xa8>)
    2d2c:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    2d2e:	2002      	movs	r0, #2
    2d30:	4b23      	ldr	r3, [pc, #140]	; (2dc0 <system_clock_init+0xac>)
    2d32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    2d34:	4a1f      	ldr	r2, [pc, #124]	; (2db4 <system_clock_init+0xa0>)
    2d36:	7d13      	ldrb	r3, [r2, #20]
    2d38:	2180      	movs	r1, #128	; 0x80
    2d3a:	4249      	negs	r1, r1
    2d3c:	430b      	orrs	r3, r1
    2d3e:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    2d40:	4a1c      	ldr	r2, [pc, #112]	; (2db4 <system_clock_init+0xa0>)
    2d42:	7d13      	ldrb	r3, [r2, #20]
    2d44:	2140      	movs	r1, #64	; 0x40
    2d46:	438b      	bics	r3, r1
    2d48:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2d4a:	4b1e      	ldr	r3, [pc, #120]	; (2dc4 <system_clock_init+0xb0>)
    2d4c:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    2d4e:	2000      	movs	r0, #0
    2d50:	4b1d      	ldr	r3, [pc, #116]	; (2dc8 <system_clock_init+0xb4>)
    2d52:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    2d54:	2000      	movs	r0, #0
    2d56:	4b1d      	ldr	r3, [pc, #116]	; (2dcc <system_clock_init+0xb8>)
    2d58:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2d5a:	2000      	movs	r0, #0
    2d5c:	4b1c      	ldr	r3, [pc, #112]	; (2dd0 <system_clock_init+0xbc>)
    2d5e:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    2d60:	2000      	movs	r0, #0
    2d62:	4b1c      	ldr	r3, [pc, #112]	; (2dd4 <system_clock_init+0xc0>)
    2d64:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2d66:	1d3b      	adds	r3, r7, #4
    2d68:	0018      	movs	r0, r3
    2d6a:	4b1b      	ldr	r3, [pc, #108]	; (2dd8 <system_clock_init+0xc4>)
    2d6c:	4798      	blx	r3
    2d6e:	1d3b      	adds	r3, r7, #4
    2d70:	2206      	movs	r2, #6
    2d72:	701a      	strb	r2, [r3, #0]
    2d74:	1d3b      	adds	r3, r7, #4
    2d76:	2201      	movs	r2, #1
    2d78:	605a      	str	r2, [r3, #4]
    2d7a:	1d3b      	adds	r3, r7, #4
    2d7c:	2200      	movs	r2, #0
    2d7e:	721a      	strb	r2, [r3, #8]
    2d80:	1d3b      	adds	r3, r7, #4
    2d82:	2200      	movs	r2, #0
    2d84:	725a      	strb	r2, [r3, #9]
    2d86:	1d3b      	adds	r3, r7, #4
    2d88:	0019      	movs	r1, r3
    2d8a:	2000      	movs	r0, #0
    2d8c:	4b13      	ldr	r3, [pc, #76]	; (2ddc <system_clock_init+0xc8>)
    2d8e:	4798      	blx	r3
    2d90:	2000      	movs	r0, #0
    2d92:	4b13      	ldr	r3, [pc, #76]	; (2de0 <system_clock_init+0xcc>)
    2d94:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    2d96:	4b13      	ldr	r3, [pc, #76]	; (2de4 <system_clock_init+0xd0>)
    2d98:	4798      	blx	r3
    2d9a:	0003      	movs	r3, r0
    2d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
    2d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2da0:	4a11      	ldr	r2, [pc, #68]	; (2de8 <system_clock_init+0xd4>)
    2da2:	4293      	cmp	r3, r2
    2da4:	d802      	bhi.n	2dac <system_clock_init+0x98>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    2da6:	2000      	movs	r0, #0
    2da8:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <system_clock_init+0xac>)
    2daa:	4798      	blx	r3
	}
}
    2dac:	46c0      	nop			; (mov r8, r8)
    2dae:	46bd      	mov	sp, r7
    2db0:	b020      	add	sp, #128	; 0x80
    2db2:	bd80      	pop	{r7, pc}
    2db4:	40000c00 	.word	0x40000c00
    2db8:	40001400 	.word	0x40001400
    2dbc:	00002ba9 	.word	0x00002ba9
    2dc0:	00002bdd 	.word	0x00002bdd
    2dc4:	00002ecd 	.word	0x00002ecd
    2dc8:	00002b51 	.word	0x00002b51
    2dcc:	00002b29 	.word	0x00002b29
    2dd0:	00002b01 	.word	0x00002b01
    2dd4:	00002aeb 	.word	0x00002aeb
    2dd8:	00002abd 	.word	0x00002abd
    2ddc:	00002efd 	.word	0x00002efd
    2de0:	0000300d 	.word	0x0000300d
    2de4:	00002b79 	.word	0x00002b79
    2de8:	00b71b00 	.word	0x00b71b00

00002dec <system_apb_clock_set_mask>:
{
    2dec:	b580      	push	{r7, lr}
    2dee:	b082      	sub	sp, #8
    2df0:	af00      	add	r7, sp, #0
    2df2:	0002      	movs	r2, r0
    2df4:	6039      	str	r1, [r7, #0]
    2df6:	1dfb      	adds	r3, r7, #7
    2df8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2dfa:	1dfb      	adds	r3, r7, #7
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	2b04      	cmp	r3, #4
    2e00:	d827      	bhi.n	2e52 <system_apb_clock_set_mask+0x66>
    2e02:	009a      	lsls	r2, r3, #2
    2e04:	4b16      	ldr	r3, [pc, #88]	; (2e60 <system_apb_clock_set_mask+0x74>)
    2e06:	18d3      	adds	r3, r2, r3
    2e08:	681b      	ldr	r3, [r3, #0]
    2e0a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    2e0c:	4b15      	ldr	r3, [pc, #84]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e0e:	4a15      	ldr	r2, [pc, #84]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e10:	6951      	ldr	r1, [r2, #20]
    2e12:	683a      	ldr	r2, [r7, #0]
    2e14:	430a      	orrs	r2, r1
    2e16:	615a      	str	r2, [r3, #20]
			break;
    2e18:	e01d      	b.n	2e56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    2e1a:	4b12      	ldr	r3, [pc, #72]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e1c:	4a11      	ldr	r2, [pc, #68]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e1e:	6991      	ldr	r1, [r2, #24]
    2e20:	683a      	ldr	r2, [r7, #0]
    2e22:	430a      	orrs	r2, r1
    2e24:	619a      	str	r2, [r3, #24]
			break;
    2e26:	e016      	b.n	2e56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    2e28:	4b0e      	ldr	r3, [pc, #56]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e2a:	4a0e      	ldr	r2, [pc, #56]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e2c:	69d1      	ldr	r1, [r2, #28]
    2e2e:	683a      	ldr	r2, [r7, #0]
    2e30:	430a      	orrs	r2, r1
    2e32:	61da      	str	r2, [r3, #28]
			break;
    2e34:	e00f      	b.n	2e56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    2e36:	4b0b      	ldr	r3, [pc, #44]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e38:	4a0a      	ldr	r2, [pc, #40]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e3a:	6a11      	ldr	r1, [r2, #32]
    2e3c:	683a      	ldr	r2, [r7, #0]
    2e3e:	430a      	orrs	r2, r1
    2e40:	621a      	str	r2, [r3, #32]
			break;
    2e42:	e008      	b.n	2e56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    2e44:	4b07      	ldr	r3, [pc, #28]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e46:	4a07      	ldr	r2, [pc, #28]	; (2e64 <system_apb_clock_set_mask+0x78>)
    2e48:	6a51      	ldr	r1, [r2, #36]	; 0x24
    2e4a:	683a      	ldr	r2, [r7, #0]
    2e4c:	430a      	orrs	r2, r1
    2e4e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    2e50:	e001      	b.n	2e56 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e000      	b.n	2e58 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    2e56:	2300      	movs	r3, #0
}
    2e58:	0018      	movs	r0, r3
    2e5a:	46bd      	mov	sp, r7
    2e5c:	b002      	add	sp, #8
    2e5e:	bd80      	pop	{r7, pc}
    2e60:	00005b0c 	.word	0x00005b0c
    2e64:	40000400 	.word	0x40000400

00002e68 <system_interrupt_enter_critical_section>:
{
    2e68:	b580      	push	{r7, lr}
    2e6a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2e6c:	4b02      	ldr	r3, [pc, #8]	; (2e78 <system_interrupt_enter_critical_section+0x10>)
    2e6e:	4798      	blx	r3
}
    2e70:	46c0      	nop			; (mov r8, r8)
    2e72:	46bd      	mov	sp, r7
    2e74:	bd80      	pop	{r7, pc}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	00002a29 	.word	0x00002a29

00002e7c <system_interrupt_leave_critical_section>:
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2e80:	4b02      	ldr	r3, [pc, #8]	; (2e8c <system_interrupt_leave_critical_section+0x10>)
    2e82:	4798      	blx	r3
}
    2e84:	46c0      	nop			; (mov r8, r8)
    2e86:	46bd      	mov	sp, r7
    2e88:	bd80      	pop	{r7, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00002a7d 	.word	0x00002a7d

00002e90 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	af00      	add	r7, sp, #0
    2e96:	0002      	movs	r2, r0
    2e98:	1dfb      	adds	r3, r7, #7
    2e9a:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2e9c:	4b09      	ldr	r3, [pc, #36]	; (2ec4 <system_gclk_is_syncing+0x34>)
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	1dfa      	adds	r2, r7, #7
    2ea2:	7812      	ldrb	r2, [r2, #0]
    2ea4:	2101      	movs	r1, #1
    2ea6:	4091      	lsls	r1, r2
    2ea8:	000a      	movs	r2, r1
    2eaa:	0092      	lsls	r2, r2, #2
    2eac:	4013      	ands	r3, r2
    2eae:	4a06      	ldr	r2, [pc, #24]	; (2ec8 <system_gclk_is_syncing+0x38>)
    2eb0:	4013      	ands	r3, r2
    2eb2:	d001      	beq.n	2eb8 <system_gclk_is_syncing+0x28>
		 return true;
    2eb4:	2301      	movs	r3, #1
    2eb6:	e000      	b.n	2eba <system_gclk_is_syncing+0x2a>
	}

	 return false;
    2eb8:	2300      	movs	r3, #0
}
    2eba:	0018      	movs	r0, r3
    2ebc:	46bd      	mov	sp, r7
    2ebe:	b002      	add	sp, #8
    2ec0:	bd80      	pop	{r7, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	40001800 	.word	0x40001800
    2ec8:	000007fc 	.word	0x000007fc

00002ecc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    2ed0:	2140      	movs	r1, #64	; 0x40
    2ed2:	2000      	movs	r0, #0
    2ed4:	4b07      	ldr	r3, [pc, #28]	; (2ef4 <system_gclk_init+0x28>)
    2ed6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2ed8:	4b07      	ldr	r3, [pc, #28]	; (2ef8 <system_gclk_init+0x2c>)
    2eda:	2201      	movs	r2, #1
    2edc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	4b05      	ldr	r3, [pc, #20]	; (2ef8 <system_gclk_init+0x2c>)
    2ee2:	781b      	ldrb	r3, [r3, #0]
    2ee4:	b2db      	uxtb	r3, r3
    2ee6:	001a      	movs	r2, r3
    2ee8:	2301      	movs	r3, #1
    2eea:	4013      	ands	r3, r2
    2eec:	d1f8      	bne.n	2ee0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	46bd      	mov	sp, r7
    2ef2:	bd80      	pop	{r7, pc}
    2ef4:	00002ded 	.word	0x00002ded
    2ef8:	40001800 	.word	0x40001800

00002efc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2efc:	b580      	push	{r7, lr}
    2efe:	b086      	sub	sp, #24
    2f00:	af00      	add	r7, sp, #0
    2f02:	0002      	movs	r2, r0
    2f04:	6039      	str	r1, [r7, #0]
    2f06:	1dfb      	adds	r3, r7, #7
    2f08:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f0a:	683b      	ldr	r3, [r7, #0]
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	785b      	ldrb	r3, [r3, #1]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d004      	beq.n	2f22 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f18:	697b      	ldr	r3, [r7, #20]
    2f1a:	2280      	movs	r2, #128	; 0x80
    2f1c:	00d2      	lsls	r2, r2, #3
    2f1e:	4313      	orrs	r3, r2
    2f20:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f22:	683b      	ldr	r3, [r7, #0]
    2f24:	7a5b      	ldrb	r3, [r3, #9]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d004      	beq.n	2f34 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f2a:	697b      	ldr	r3, [r7, #20]
    2f2c:	2280      	movs	r2, #128	; 0x80
    2f2e:	0112      	lsls	r2, r2, #4
    2f30:	4313      	orrs	r3, r2
    2f32:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f34:	683b      	ldr	r3, [r7, #0]
    2f36:	685b      	ldr	r3, [r3, #4]
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d92c      	bls.n	2f96 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f3c:	683b      	ldr	r3, [r7, #0]
    2f3e:	685a      	ldr	r2, [r3, #4]
    2f40:	683b      	ldr	r3, [r7, #0]
    2f42:	685b      	ldr	r3, [r3, #4]
    2f44:	3b01      	subs	r3, #1
    2f46:	4013      	ands	r3, r2
    2f48:	d11a      	bne.n	2f80 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2f4a:	2300      	movs	r3, #0
    2f4c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f4e:	2302      	movs	r3, #2
    2f50:	60fb      	str	r3, [r7, #12]
    2f52:	e005      	b.n	2f60 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    2f54:	693b      	ldr	r3, [r7, #16]
    2f56:	3301      	adds	r3, #1
    2f58:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    2f5a:	68fb      	ldr	r3, [r7, #12]
    2f5c:	005b      	lsls	r3, r3, #1
    2f5e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    2f60:	683b      	ldr	r3, [r7, #0]
    2f62:	685a      	ldr	r2, [r3, #4]
    2f64:	68fb      	ldr	r3, [r7, #12]
    2f66:	429a      	cmp	r2, r3
    2f68:	d8f4      	bhi.n	2f54 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2f6a:	693b      	ldr	r3, [r7, #16]
    2f6c:	041b      	lsls	r3, r3, #16
    2f6e:	697a      	ldr	r2, [r7, #20]
    2f70:	4313      	orrs	r3, r2
    2f72:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f74:	697b      	ldr	r3, [r7, #20]
    2f76:	2280      	movs	r2, #128	; 0x80
    2f78:	0152      	lsls	r2, r2, #5
    2f7a:	4313      	orrs	r3, r2
    2f7c:	617b      	str	r3, [r7, #20]
    2f7e:	e00a      	b.n	2f96 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2f80:	683b      	ldr	r3, [r7, #0]
    2f82:	685b      	ldr	r3, [r3, #4]
    2f84:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    2f86:	697a      	ldr	r2, [r7, #20]
    2f88:	4313      	orrs	r3, r2
    2f8a:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2f8c:	697b      	ldr	r3, [r7, #20]
    2f8e:	2280      	movs	r2, #128	; 0x80
    2f90:	0092      	lsls	r2, r2, #2
    2f92:	4313      	orrs	r3, r2
    2f94:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2f96:	683b      	ldr	r3, [r7, #0]
    2f98:	7a1b      	ldrb	r3, [r3, #8]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d004      	beq.n	2fa8 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2f9e:	697b      	ldr	r3, [r7, #20]
    2fa0:	2280      	movs	r2, #128	; 0x80
    2fa2:	0192      	lsls	r2, r2, #6
    2fa4:	4313      	orrs	r3, r2
    2fa6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    2fa8:	46c0      	nop			; (mov r8, r8)
    2faa:	1dfb      	adds	r3, r7, #7
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	0018      	movs	r0, r3
    2fb0:	4b12      	ldr	r3, [pc, #72]	; (2ffc <system_gclk_gen_set_config+0x100>)
    2fb2:	4798      	blx	r3
    2fb4:	1e03      	subs	r3, r0, #0
    2fb6:	d1f8      	bne.n	2faa <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2fb8:	4b11      	ldr	r3, [pc, #68]	; (3000 <system_gclk_gen_set_config+0x104>)
    2fba:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2fbc:	4811      	ldr	r0, [pc, #68]	; (3004 <system_gclk_gen_set_config+0x108>)
    2fbe:	1dfb      	adds	r3, r7, #7
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	4910      	ldr	r1, [pc, #64]	; (3004 <system_gclk_gen_set_config+0x108>)
    2fc4:	1dfa      	adds	r2, r7, #7
    2fc6:	7812      	ldrb	r2, [r2, #0]
    2fc8:	3208      	adds	r2, #8
    2fca:	0092      	lsls	r2, r2, #2
    2fcc:	5851      	ldr	r1, [r2, r1]
    2fce:	2280      	movs	r2, #128	; 0x80
    2fd0:	0052      	lsls	r2, r2, #1
    2fd2:	4011      	ands	r1, r2
    2fd4:	697a      	ldr	r2, [r7, #20]
    2fd6:	430a      	orrs	r2, r1
    2fd8:	3308      	adds	r3, #8
    2fda:	009b      	lsls	r3, r3, #2
    2fdc:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	1dfb      	adds	r3, r7, #7
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	0018      	movs	r0, r3
    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <system_gclk_gen_set_config+0x100>)
    2fe8:	4798      	blx	r3
    2fea:	1e03      	subs	r3, r0, #0
    2fec:	d1f8      	bne.n	2fe0 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    2fee:	4b06      	ldr	r3, [pc, #24]	; (3008 <system_gclk_gen_set_config+0x10c>)
    2ff0:	4798      	blx	r3
}
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	46bd      	mov	sp, r7
    2ff6:	b006      	add	sp, #24
    2ff8:	bd80      	pop	{r7, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	00002e91 	.word	0x00002e91
    3000:	00002e69 	.word	0x00002e69
    3004:	40001800 	.word	0x40001800
    3008:	00002e7d 	.word	0x00002e7d

0000300c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    300c:	b580      	push	{r7, lr}
    300e:	b082      	sub	sp, #8
    3010:	af00      	add	r7, sp, #0
    3012:	0002      	movs	r2, r0
    3014:	1dfb      	adds	r3, r7, #7
    3016:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    3018:	46c0      	nop			; (mov r8, r8)
    301a:	1dfb      	adds	r3, r7, #7
    301c:	781b      	ldrb	r3, [r3, #0]
    301e:	0018      	movs	r0, r3
    3020:	4b0d      	ldr	r3, [pc, #52]	; (3058 <system_gclk_gen_enable+0x4c>)
    3022:	4798      	blx	r3
    3024:	1e03      	subs	r3, r0, #0
    3026:	d1f8      	bne.n	301a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3028:	4b0c      	ldr	r3, [pc, #48]	; (305c <system_gclk_gen_enable+0x50>)
    302a:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    302c:	480c      	ldr	r0, [pc, #48]	; (3060 <system_gclk_gen_enable+0x54>)
    302e:	1dfb      	adds	r3, r7, #7
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	490b      	ldr	r1, [pc, #44]	; (3060 <system_gclk_gen_enable+0x54>)
    3034:	1dfa      	adds	r2, r7, #7
    3036:	7812      	ldrb	r2, [r2, #0]
    3038:	3208      	adds	r2, #8
    303a:	0092      	lsls	r2, r2, #2
    303c:	5852      	ldr	r2, [r2, r1]
    303e:	2180      	movs	r1, #128	; 0x80
    3040:	0049      	lsls	r1, r1, #1
    3042:	430a      	orrs	r2, r1
    3044:	3308      	adds	r3, #8
    3046:	009b      	lsls	r3, r3, #2
    3048:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    304a:	4b06      	ldr	r3, [pc, #24]	; (3064 <system_gclk_gen_enable+0x58>)
    304c:	4798      	blx	r3
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b002      	add	sp, #8
    3054:	bd80      	pop	{r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	00002e91 	.word	0x00002e91
    305c:	00002e69 	.word	0x00002e69
    3060:	40001800 	.word	0x40001800
    3064:	00002e7d 	.word	0x00002e7d

00003068 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3068:	b580      	push	{r7, lr}
    306a:	b086      	sub	sp, #24
    306c:	af00      	add	r7, sp, #0
    306e:	0002      	movs	r2, r0
    3070:	1dfb      	adds	r3, r7, #7
    3072:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    3074:	46c0      	nop			; (mov r8, r8)
    3076:	1dfb      	adds	r3, r7, #7
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	0018      	movs	r0, r3
    307c:	4b24      	ldr	r3, [pc, #144]	; (3110 <system_gclk_gen_get_hz+0xa8>)
    307e:	4798      	blx	r3
    3080:	1e03      	subs	r3, r0, #0
    3082:	d1f8      	bne.n	3076 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3084:	4b23      	ldr	r3, [pc, #140]	; (3114 <system_gclk_gen_get_hz+0xac>)
    3086:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3088:	4a23      	ldr	r2, [pc, #140]	; (3118 <system_gclk_gen_get_hz+0xb0>)
    308a:	1dfb      	adds	r3, r7, #7
    308c:	781b      	ldrb	r3, [r3, #0]
    308e:	3308      	adds	r3, #8
    3090:	009b      	lsls	r3, r3, #2
    3092:	589b      	ldr	r3, [r3, r2]
    3094:	071b      	lsls	r3, r3, #28
    3096:	0f1b      	lsrs	r3, r3, #28
    3098:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    309a:	0018      	movs	r0, r3
    309c:	4b1f      	ldr	r3, [pc, #124]	; (311c <system_gclk_gen_get_hz+0xb4>)
    309e:	4798      	blx	r3
    30a0:	0003      	movs	r3, r0
    30a2:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    30a4:	4a1c      	ldr	r2, [pc, #112]	; (3118 <system_gclk_gen_get_hz+0xb0>)
    30a6:	1dfb      	adds	r3, r7, #7
    30a8:	781b      	ldrb	r3, [r3, #0]
    30aa:	3308      	adds	r3, #8
    30ac:	009b      	lsls	r3, r3, #2
    30ae:	589b      	ldr	r3, [r3, r2]
    30b0:	04db      	lsls	r3, r3, #19
    30b2:	0fdb      	lsrs	r3, r3, #31
    30b4:	b2da      	uxtb	r2, r3
    30b6:	2313      	movs	r3, #19
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    30bc:	4a16      	ldr	r2, [pc, #88]	; (3118 <system_gclk_gen_get_hz+0xb0>)
    30be:	1dfb      	adds	r3, r7, #7
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	3308      	adds	r3, #8
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	589b      	ldr	r3, [r3, r2]
    30c8:	0c1b      	lsrs	r3, r3, #16
    30ca:	b29b      	uxth	r3, r3
    30cc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    30ce:	4b14      	ldr	r3, [pc, #80]	; (3120 <system_gclk_gen_get_hz+0xb8>)
    30d0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    30d2:	2313      	movs	r3, #19
    30d4:	18fb      	adds	r3, r7, r3
    30d6:	781b      	ldrb	r3, [r3, #0]
    30d8:	2b00      	cmp	r3, #0
    30da:	d109      	bne.n	30f0 <system_gclk_gen_get_hz+0x88>
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	2b01      	cmp	r3, #1
    30e0:	d906      	bls.n	30f0 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    30e2:	4b10      	ldr	r3, [pc, #64]	; (3124 <system_gclk_gen_get_hz+0xbc>)
    30e4:	68f9      	ldr	r1, [r7, #12]
    30e6:	6978      	ldr	r0, [r7, #20]
    30e8:	4798      	blx	r3
    30ea:	0003      	movs	r3, r0
    30ec:	617b      	str	r3, [r7, #20]
    30ee:	e00a      	b.n	3106 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    30f0:	2313      	movs	r3, #19
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d005      	beq.n	3106 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	3301      	adds	r3, #1
    30fe:	697a      	ldr	r2, [r7, #20]
    3100:	40da      	lsrs	r2, r3
    3102:	0013      	movs	r3, r2
    3104:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3106:	697b      	ldr	r3, [r7, #20]
}
    3108:	0018      	movs	r0, r3
    310a:	46bd      	mov	sp, r7
    310c:	b006      	add	sp, #24
    310e:	bd80      	pop	{r7, pc}
    3110:	00002e91 	.word	0x00002e91
    3114:	00002e69 	.word	0x00002e69
    3118:	40001800 	.word	0x40001800
    311c:	00002c55 	.word	0x00002c55
    3120:	00002e7d 	.word	0x00002e7d
    3124:	00003889 	.word	0x00003889

00003128 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3128:	b580      	push	{r7, lr}
    312a:	b082      	sub	sp, #8
    312c:	af00      	add	r7, sp, #0
    312e:	0002      	movs	r2, r0
    3130:	6039      	str	r1, [r7, #0]
    3132:	1dfb      	adds	r3, r7, #7
    3134:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3136:	1dfb      	adds	r3, r7, #7
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	0018      	movs	r0, r3
    313c:	4b08      	ldr	r3, [pc, #32]	; (3160 <system_gclk_chan_set_config+0x38>)
    313e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3140:	4908      	ldr	r1, [pc, #32]	; (3164 <system_gclk_chan_set_config+0x3c>)
    3142:	1dfb      	adds	r3, r7, #7
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	683a      	ldr	r2, [r7, #0]
    3148:	7812      	ldrb	r2, [r2, #0]
    314a:	0010      	movs	r0, r2
    314c:	220f      	movs	r2, #15
    314e:	4002      	ands	r2, r0
    3150:	3320      	adds	r3, #32
    3152:	009b      	lsls	r3, r3, #2
    3154:	505a      	str	r2, [r3, r1]


}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	46bd      	mov	sp, r7
    315a:	b002      	add	sp, #8
    315c:	bd80      	pop	{r7, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	000031c1 	.word	0x000031c1
    3164:	40001800 	.word	0x40001800

00003168 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3168:	b580      	push	{r7, lr}
    316a:	b082      	sub	sp, #8
    316c:	af00      	add	r7, sp, #0
    316e:	0002      	movs	r2, r0
    3170:	1dfb      	adds	r3, r7, #7
    3172:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3174:	4b0f      	ldr	r3, [pc, #60]	; (31b4 <system_gclk_chan_enable+0x4c>)
    3176:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3178:	490f      	ldr	r1, [pc, #60]	; (31b8 <system_gclk_chan_enable+0x50>)
    317a:	1dfb      	adds	r3, r7, #7
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	480e      	ldr	r0, [pc, #56]	; (31b8 <system_gclk_chan_enable+0x50>)
    3180:	1dfa      	adds	r2, r7, #7
    3182:	7812      	ldrb	r2, [r2, #0]
    3184:	3220      	adds	r2, #32
    3186:	0092      	lsls	r2, r2, #2
    3188:	5812      	ldr	r2, [r2, r0]
    318a:	2040      	movs	r0, #64	; 0x40
    318c:	4302      	orrs	r2, r0
    318e:	3320      	adds	r3, #32
    3190:	009b      	lsls	r3, r3, #2
    3192:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3194:	46c0      	nop			; (mov r8, r8)
    3196:	4a08      	ldr	r2, [pc, #32]	; (31b8 <system_gclk_chan_enable+0x50>)
    3198:	1dfb      	adds	r3, r7, #7
    319a:	781b      	ldrb	r3, [r3, #0]
    319c:	3320      	adds	r3, #32
    319e:	009b      	lsls	r3, r3, #2
    31a0:	589b      	ldr	r3, [r3, r2]
    31a2:	2240      	movs	r2, #64	; 0x40
    31a4:	4013      	ands	r3, r2
    31a6:	d0f6      	beq.n	3196 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    31a8:	4b04      	ldr	r3, [pc, #16]	; (31bc <system_gclk_chan_enable+0x54>)
    31aa:	4798      	blx	r3
}
    31ac:	46c0      	nop			; (mov r8, r8)
    31ae:	46bd      	mov	sp, r7
    31b0:	b002      	add	sp, #8
    31b2:	bd80      	pop	{r7, pc}
    31b4:	00002e69 	.word	0x00002e69
    31b8:	40001800 	.word	0x40001800
    31bc:	00002e7d 	.word	0x00002e7d

000031c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b082      	sub	sp, #8
    31c4:	af00      	add	r7, sp, #0
    31c6:	0002      	movs	r2, r0
    31c8:	1dfb      	adds	r3, r7, #7
    31ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    31cc:	4b0f      	ldr	r3, [pc, #60]	; (320c <system_gclk_chan_disable+0x4c>)
    31ce:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    31d0:	490f      	ldr	r1, [pc, #60]	; (3210 <system_gclk_chan_disable+0x50>)
    31d2:	1dfb      	adds	r3, r7, #7
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	480e      	ldr	r0, [pc, #56]	; (3210 <system_gclk_chan_disable+0x50>)
    31d8:	1dfa      	adds	r2, r7, #7
    31da:	7812      	ldrb	r2, [r2, #0]
    31dc:	3220      	adds	r2, #32
    31de:	0092      	lsls	r2, r2, #2
    31e0:	5812      	ldr	r2, [r2, r0]
    31e2:	2040      	movs	r0, #64	; 0x40
    31e4:	4382      	bics	r2, r0
    31e6:	3320      	adds	r3, #32
    31e8:	009b      	lsls	r3, r3, #2
    31ea:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    31ec:	46c0      	nop			; (mov r8, r8)
    31ee:	4a08      	ldr	r2, [pc, #32]	; (3210 <system_gclk_chan_disable+0x50>)
    31f0:	1dfb      	adds	r3, r7, #7
    31f2:	781b      	ldrb	r3, [r3, #0]
    31f4:	3320      	adds	r3, #32
    31f6:	009b      	lsls	r3, r3, #2
    31f8:	589b      	ldr	r3, [r3, r2]
    31fa:	2240      	movs	r2, #64	; 0x40
    31fc:	4013      	ands	r3, r2
    31fe:	d1f6      	bne.n	31ee <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    3200:	4b04      	ldr	r3, [pc, #16]	; (3214 <system_gclk_chan_disable+0x54>)
    3202:	4798      	blx	r3
}
    3204:	46c0      	nop			; (mov r8, r8)
    3206:	46bd      	mov	sp, r7
    3208:	b002      	add	sp, #8
    320a:	bd80      	pop	{r7, pc}
    320c:	00002e69 	.word	0x00002e69
    3210:	40001800 	.word	0x40001800
    3214:	00002e7d 	.word	0x00002e7d

00003218 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3218:	b580      	push	{r7, lr}
    321a:	b084      	sub	sp, #16
    321c:	af00      	add	r7, sp, #0
    321e:	0002      	movs	r2, r0
    3220:	1dfb      	adds	r3, r7, #7
    3222:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3224:	4b0d      	ldr	r3, [pc, #52]	; (325c <system_gclk_chan_get_hz+0x44>)
    3226:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3228:	4a0d      	ldr	r2, [pc, #52]	; (3260 <system_gclk_chan_get_hz+0x48>)
    322a:	1dfb      	adds	r3, r7, #7
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	3320      	adds	r3, #32
    3230:	009b      	lsls	r3, r3, #2
    3232:	589b      	ldr	r3, [r3, r2]
    3234:	071b      	lsls	r3, r3, #28
    3236:	0f1b      	lsrs	r3, r3, #28
    3238:	b2da      	uxtb	r2, r3
    323a:	230f      	movs	r3, #15
    323c:	18fb      	adds	r3, r7, r3
    323e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    3240:	4b08      	ldr	r3, [pc, #32]	; (3264 <system_gclk_chan_get_hz+0x4c>)
    3242:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3244:	230f      	movs	r3, #15
    3246:	18fb      	adds	r3, r7, r3
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	0018      	movs	r0, r3
    324c:	4b06      	ldr	r3, [pc, #24]	; (3268 <system_gclk_chan_get_hz+0x50>)
    324e:	4798      	blx	r3
    3250:	0003      	movs	r3, r0
}
    3252:	0018      	movs	r0, r3
    3254:	46bd      	mov	sp, r7
    3256:	b004      	add	sp, #16
    3258:	bd80      	pop	{r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	00002e69 	.word	0x00002e69
    3260:	40001800 	.word	0x40001800
    3264:	00002e7d 	.word	0x00002e7d
    3268:	00003069 	.word	0x00003069

0000326c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    326c:	b580      	push	{r7, lr}
    326e:	b084      	sub	sp, #16
    3270:	af00      	add	r7, sp, #0
    3272:	0002      	movs	r2, r0
    3274:	1dfb      	adds	r3, r7, #7
    3276:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3278:	230f      	movs	r3, #15
    327a:	18fb      	adds	r3, r7, r3
    327c:	1dfa      	adds	r2, r7, #7
    327e:	7812      	ldrb	r2, [r2, #0]
    3280:	09d2      	lsrs	r2, r2, #7
    3282:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3284:	230e      	movs	r3, #14
    3286:	18fb      	adds	r3, r7, r3
    3288:	1dfa      	adds	r2, r7, #7
    328a:	7812      	ldrb	r2, [r2, #0]
    328c:	0952      	lsrs	r2, r2, #5
    328e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3290:	4b0d      	ldr	r3, [pc, #52]	; (32c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3292:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3294:	230f      	movs	r3, #15
    3296:	18fb      	adds	r3, r7, r3
    3298:	781b      	ldrb	r3, [r3, #0]
    329a:	2b00      	cmp	r3, #0
    329c:	d10f      	bne.n	32be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    329e:	230f      	movs	r3, #15
    32a0:	18fb      	adds	r3, r7, r3
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	009b      	lsls	r3, r3, #2
    32a6:	2210      	movs	r2, #16
    32a8:	4694      	mov	ip, r2
    32aa:	44bc      	add	ip, r7
    32ac:	4463      	add	r3, ip
    32ae:	3b08      	subs	r3, #8
    32b0:	681a      	ldr	r2, [r3, #0]
    32b2:	230e      	movs	r3, #14
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	781b      	ldrb	r3, [r3, #0]
    32b8:	01db      	lsls	r3, r3, #7
    32ba:	18d3      	adds	r3, r2, r3
    32bc:	e000      	b.n	32c0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    32be:	2300      	movs	r3, #0
	}
}
    32c0:	0018      	movs	r0, r3
    32c2:	46bd      	mov	sp, r7
    32c4:	b004      	add	sp, #16
    32c6:	bd80      	pop	{r7, pc}
    32c8:	40002800 	.word	0x40002800

000032cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b088      	sub	sp, #32
    32d0:	af00      	add	r7, sp, #0
    32d2:	60f8      	str	r0, [r7, #12]
    32d4:	60b9      	str	r1, [r7, #8]
    32d6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    32d8:	2300      	movs	r3, #0
    32da:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	78db      	ldrb	r3, [r3, #3]
    32e0:	2201      	movs	r2, #1
    32e2:	4053      	eors	r3, r2
    32e4:	b2db      	uxtb	r3, r3
    32e6:	2b00      	cmp	r3, #0
    32e8:	d035      	beq.n	3356 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b80      	cmp	r3, #128	; 0x80
    32f0:	d00b      	beq.n	330a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    32f2:	69fb      	ldr	r3, [r7, #28]
    32f4:	2280      	movs	r2, #128	; 0x80
    32f6:	0252      	lsls	r2, r2, #9
    32f8:	4313      	orrs	r3, r2
    32fa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	061b      	lsls	r3, r3, #24
    3302:	001a      	movs	r2, r3
    3304:	69fb      	ldr	r3, [r7, #28]
    3306:	4313      	orrs	r3, r2
    3308:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	785b      	ldrb	r3, [r3, #1]
    330e:	2b00      	cmp	r3, #0
    3310:	d003      	beq.n	331a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3316:	2b02      	cmp	r3, #2
    3318:	d110      	bne.n	333c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    331a:	69fb      	ldr	r3, [r7, #28]
    331c:	2280      	movs	r2, #128	; 0x80
    331e:	0292      	lsls	r2, r2, #10
    3320:	4313      	orrs	r3, r2
    3322:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	789b      	ldrb	r3, [r3, #2]
    3328:	2b00      	cmp	r3, #0
    332a:	d004      	beq.n	3336 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    332c:	69fb      	ldr	r3, [r7, #28]
    332e:	2280      	movs	r2, #128	; 0x80
    3330:	02d2      	lsls	r2, r2, #11
    3332:	4313      	orrs	r3, r2
    3334:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	68ba      	ldr	r2, [r7, #8]
    333a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	785b      	ldrb	r3, [r3, #1]
    3340:	2b01      	cmp	r3, #1
    3342:	d003      	beq.n	334c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3348:	2b02      	cmp	r3, #2
    334a:	d107      	bne.n	335c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    334c:	69fb      	ldr	r3, [r7, #28]
    334e:	4a22      	ldr	r2, [pc, #136]	; (33d8 <_system_pinmux_config+0x10c>)
    3350:	4013      	ands	r3, r2
    3352:	61fb      	str	r3, [r7, #28]
    3354:	e002      	b.n	335c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3356:	68fb      	ldr	r3, [r7, #12]
    3358:	68ba      	ldr	r2, [r7, #8]
    335a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    335c:	68bb      	ldr	r3, [r7, #8]
    335e:	041b      	lsls	r3, r3, #16
    3360:	0c1b      	lsrs	r3, r3, #16
    3362:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3364:	68bb      	ldr	r3, [r7, #8]
    3366:	0c1b      	lsrs	r3, r3, #16
    3368:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    336a:	69ba      	ldr	r2, [r7, #24]
    336c:	69fb      	ldr	r3, [r7, #28]
    336e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3370:	22a0      	movs	r2, #160	; 0xa0
    3372:	05d2      	lsls	r2, r2, #23
    3374:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3376:	68fb      	ldr	r3, [r7, #12]
    3378:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    337a:	697a      	ldr	r2, [r7, #20]
    337c:	69fb      	ldr	r3, [r7, #28]
    337e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3380:	22d0      	movs	r2, #208	; 0xd0
    3382:	0612      	lsls	r2, r2, #24
    3384:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3386:	68fb      	ldr	r3, [r7, #12]
    3388:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	78db      	ldrb	r3, [r3, #3]
    338e:	2201      	movs	r2, #1
    3390:	4053      	eors	r3, r2
    3392:	b2db      	uxtb	r3, r3
    3394:	2b00      	cmp	r3, #0
    3396:	d01a      	beq.n	33ce <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3398:	69fa      	ldr	r2, [r7, #28]
    339a:	2380      	movs	r3, #128	; 0x80
    339c:	02db      	lsls	r3, r3, #11
    339e:	4013      	ands	r3, r2
    33a0:	d00a      	beq.n	33b8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	789b      	ldrb	r3, [r3, #2]
    33a6:	2b01      	cmp	r3, #1
    33a8:	d103      	bne.n	33b2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    33aa:	68fb      	ldr	r3, [r7, #12]
    33ac:	68ba      	ldr	r2, [r7, #8]
    33ae:	619a      	str	r2, [r3, #24]
    33b0:	e002      	b.n	33b8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    33b2:	68fb      	ldr	r3, [r7, #12]
    33b4:	68ba      	ldr	r2, [r7, #8]
    33b6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	785b      	ldrb	r3, [r3, #1]
    33bc:	2b01      	cmp	r3, #1
    33be:	d003      	beq.n	33c8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33c4:	2b02      	cmp	r3, #2
    33c6:	d102      	bne.n	33ce <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    33c8:	68fb      	ldr	r3, [r7, #12]
    33ca:	68ba      	ldr	r2, [r7, #8]
    33cc:	609a      	str	r2, [r3, #8]
		}
	}
}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	46bd      	mov	sp, r7
    33d2:	b008      	add	sp, #32
    33d4:	bd80      	pop	{r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	fffbffff 	.word	0xfffbffff

000033dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    33dc:	b580      	push	{r7, lr}
    33de:	b084      	sub	sp, #16
    33e0:	af00      	add	r7, sp, #0
    33e2:	0002      	movs	r2, r0
    33e4:	6039      	str	r1, [r7, #0]
    33e6:	1dfb      	adds	r3, r7, #7
    33e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    33ea:	1dfb      	adds	r3, r7, #7
    33ec:	781b      	ldrb	r3, [r3, #0]
    33ee:	0018      	movs	r0, r3
    33f0:	4b0a      	ldr	r3, [pc, #40]	; (341c <system_pinmux_pin_set_config+0x40>)
    33f2:	4798      	blx	r3
    33f4:	0003      	movs	r3, r0
    33f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    33f8:	1dfb      	adds	r3, r7, #7
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	221f      	movs	r2, #31
    33fe:	4013      	ands	r3, r2
    3400:	2201      	movs	r2, #1
    3402:	409a      	lsls	r2, r3
    3404:	0013      	movs	r3, r2
    3406:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3408:	683a      	ldr	r2, [r7, #0]
    340a:	68b9      	ldr	r1, [r7, #8]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	0018      	movs	r0, r3
    3410:	4b03      	ldr	r3, [pc, #12]	; (3420 <system_pinmux_pin_set_config+0x44>)
    3412:	4798      	blx	r3
}
    3414:	46c0      	nop			; (mov r8, r8)
    3416:	46bd      	mov	sp, r7
    3418:	b004      	add	sp, #16
    341a:	bd80      	pop	{r7, pc}
    341c:	0000326d 	.word	0x0000326d
    3420:	000032cd 	.word	0x000032cd

00003424 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3424:	b580      	push	{r7, lr}
    3426:	af00      	add	r7, sp, #0
	return;
    3428:	46c0      	nop			; (mov r8, r8)
}
    342a:	46bd      	mov	sp, r7
    342c:	bd80      	pop	{r7, pc}
	...

00003430 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3430:	b580      	push	{r7, lr}
    3432:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3434:	4b06      	ldr	r3, [pc, #24]	; (3450 <system_init+0x20>)
    3436:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <system_init+0x24>)
    343a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    343c:	4b06      	ldr	r3, [pc, #24]	; (3458 <system_init+0x28>)
    343e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3440:	4b06      	ldr	r3, [pc, #24]	; (345c <system_init+0x2c>)
    3442:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3444:	4b06      	ldr	r3, [pc, #24]	; (3460 <system_init+0x30>)
    3446:	4798      	blx	r3
}
    3448:	46c0      	nop			; (mov r8, r8)
    344a:	46bd      	mov	sp, r7
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	00002d15 	.word	0x00002d15
    3454:	000029c9 	.word	0x000029c9
    3458:	00003425 	.word	0x00003425
    345c:	00003425 	.word	0x00003425
    3460:	00003425 	.word	0x00003425

00003464 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    346a:	4b19      	ldr	r3, [pc, #100]	; (34d0 <Reset_Handler+0x6c>)
    346c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    346e:	4b19      	ldr	r3, [pc, #100]	; (34d4 <Reset_Handler+0x70>)
    3470:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3472:	687a      	ldr	r2, [r7, #4]
    3474:	683b      	ldr	r3, [r7, #0]
    3476:	429a      	cmp	r2, r3
    3478:	d00c      	beq.n	3494 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    347a:	e007      	b.n	348c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    347c:	683b      	ldr	r3, [r7, #0]
    347e:	1d1a      	adds	r2, r3, #4
    3480:	603a      	str	r2, [r7, #0]
    3482:	687a      	ldr	r2, [r7, #4]
    3484:	1d11      	adds	r1, r2, #4
    3486:	6079      	str	r1, [r7, #4]
    3488:	6812      	ldr	r2, [r2, #0]
    348a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    348c:	683a      	ldr	r2, [r7, #0]
    348e:	4b12      	ldr	r3, [pc, #72]	; (34d8 <Reset_Handler+0x74>)
    3490:	429a      	cmp	r2, r3
    3492:	d3f3      	bcc.n	347c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3494:	4b11      	ldr	r3, [pc, #68]	; (34dc <Reset_Handler+0x78>)
    3496:	603b      	str	r3, [r7, #0]
    3498:	e004      	b.n	34a4 <Reset_Handler+0x40>
                *pDest++ = 0;
    349a:	683b      	ldr	r3, [r7, #0]
    349c:	1d1a      	adds	r2, r3, #4
    349e:	603a      	str	r2, [r7, #0]
    34a0:	2200      	movs	r2, #0
    34a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    34a4:	683a      	ldr	r2, [r7, #0]
    34a6:	4b0e      	ldr	r3, [pc, #56]	; (34e0 <Reset_Handler+0x7c>)
    34a8:	429a      	cmp	r2, r3
    34aa:	d3f6      	bcc.n	349a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    34ac:	4b0d      	ldr	r3, [pc, #52]	; (34e4 <Reset_Handler+0x80>)
    34ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34b0:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <Reset_Handler+0x84>)
    34b2:	687a      	ldr	r2, [r7, #4]
    34b4:	21ff      	movs	r1, #255	; 0xff
    34b6:	438a      	bics	r2, r1
    34b8:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    34ba:	4a0c      	ldr	r2, [pc, #48]	; (34ec <Reset_Handler+0x88>)
    34bc:	6853      	ldr	r3, [r2, #4]
    34be:	2180      	movs	r1, #128	; 0x80
    34c0:	430b      	orrs	r3, r1
    34c2:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    34c4:	4b0a      	ldr	r3, [pc, #40]	; (34f0 <Reset_Handler+0x8c>)
    34c6:	4798      	blx	r3

        /* Branch to main function */
        main();
    34c8:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <Reset_Handler+0x90>)
    34ca:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    34cc:	e7fe      	b.n	34cc <Reset_Handler+0x68>
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	00005bc8 	.word	0x00005bc8
    34d4:	20000000 	.word	0x20000000
    34d8:	20000010 	.word	0x20000010
    34dc:	20000010 	.word	0x20000010
    34e0:	200000f0 	.word	0x200000f0
    34e4:	00000000 	.word	0x00000000
    34e8:	e000ed00 	.word	0xe000ed00
    34ec:	41004000 	.word	0x41004000
    34f0:	00005a39 	.word	0x00005a39
    34f4:	00003699 	.word	0x00003699

000034f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	af00      	add	r7, sp, #0
        while (1) {
    34fc:	e7fe      	b.n	34fc <Dummy_Handler+0x4>

000034fe <system_voltage_regulator_get_config_defaults>:
{
    34fe:	b580      	push	{r7, lr}
    3500:	b082      	sub	sp, #8
    3502:	af00      	add	r7, sp, #0
    3504:	6078      	str	r0, [r7, #4]
	config->voltage_scale_period = 0;
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	2200      	movs	r2, #0
    350a:	701a      	strb	r2, [r3, #0]
	config->voltage_scale_step   = 0;
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	2200      	movs	r2, #0
    3510:	705a      	strb	r2, [r3, #1]
	config->run_in_standby       = false;
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	2200      	movs	r2, #0
    3516:	709a      	strb	r2, [r3, #2]
	config->regulator_sel        = SYSTEM_VOLTAGE_REGULATOR_LDO;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	2200      	movs	r2, #0
    351c:	70da      	strb	r2, [r3, #3]
	config->low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_DEFAULT;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	2200      	movs	r2, #0
    3522:	711a      	strb	r2, [r3, #4]
	config->run_in_standby_pl0   = false;
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	2200      	movs	r2, #0
    3528:	715a      	strb	r2, [r3, #5]
}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	46bd      	mov	sp, r7
    352e:	b002      	add	sp, #8
    3530:	bd80      	pop	{r7, pc}
	...

00003534 <system_voltage_regulator_set_config>:
{
    3534:	b580      	push	{r7, lr}
    3536:	b082      	sub	sp, #8
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
	SUPC->VREG.bit.VSPER    = config->voltage_scale_period;
    353c:	4a2b      	ldr	r2, [pc, #172]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	7819      	ldrb	r1, [r3, #0]
    3542:	6993      	ldr	r3, [r2, #24]
    3544:	0609      	lsls	r1, r1, #24
    3546:	021b      	lsls	r3, r3, #8
    3548:	0a1b      	lsrs	r3, r3, #8
    354a:	430b      	orrs	r3, r1
    354c:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.VSVSTEP  = config->voltage_scale_step;
    354e:	4a27      	ldr	r2, [pc, #156]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	785b      	ldrb	r3, [r3, #1]
    3554:	1c19      	adds	r1, r3, #0
    3556:	230f      	movs	r3, #15
    3558:	400b      	ands	r3, r1
    355a:	b2d9      	uxtb	r1, r3
    355c:	6993      	ldr	r3, [r2, #24]
    355e:	200f      	movs	r0, #15
    3560:	4001      	ands	r1, r0
    3562:	0409      	lsls	r1, r1, #16
    3564:	4822      	ldr	r0, [pc, #136]	; (35f0 <system_voltage_regulator_set_config+0xbc>)
    3566:	4003      	ands	r3, r0
    3568:	430b      	orrs	r3, r1
    356a:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.RUNSTDBY = config->run_in_standby;
    356c:	4a1f      	ldr	r2, [pc, #124]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	7899      	ldrb	r1, [r3, #2]
    3572:	6993      	ldr	r3, [r2, #24]
    3574:	2001      	movs	r0, #1
    3576:	4001      	ands	r1, r0
    3578:	0189      	lsls	r1, r1, #6
    357a:	2040      	movs	r0, #64	; 0x40
    357c:	4383      	bics	r3, r0
    357e:	430b      	orrs	r3, r1
    3580:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.SEL      = config->regulator_sel;
    3582:	4a1a      	ldr	r2, [pc, #104]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	78db      	ldrb	r3, [r3, #3]
    3588:	1c19      	adds	r1, r3, #0
    358a:	2303      	movs	r3, #3
    358c:	400b      	ands	r3, r1
    358e:	b2d9      	uxtb	r1, r3
    3590:	6993      	ldr	r3, [r2, #24]
    3592:	2003      	movs	r0, #3
    3594:	4001      	ands	r1, r0
    3596:	0089      	lsls	r1, r1, #2
    3598:	200c      	movs	r0, #12
    359a:	4383      	bics	r3, r0
    359c:	430b      	orrs	r3, r1
    359e:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.LPEFF    = config->low_power_efficiency;
    35a0:	4a12      	ldr	r2, [pc, #72]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	791b      	ldrb	r3, [r3, #4]
    35a6:	1c19      	adds	r1, r3, #0
    35a8:	2301      	movs	r3, #1
    35aa:	400b      	ands	r3, r1
    35ac:	b2d9      	uxtb	r1, r3
    35ae:	6993      	ldr	r3, [r2, #24]
    35b0:	2001      	movs	r0, #1
    35b2:	4001      	ands	r1, r0
    35b4:	0209      	lsls	r1, r1, #8
    35b6:	480f      	ldr	r0, [pc, #60]	; (35f4 <system_voltage_regulator_set_config+0xc0>)
    35b8:	4003      	ands	r3, r0
    35ba:	430b      	orrs	r3, r1
    35bc:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.STDBYPL0 = config->run_in_standby_pl0;
    35be:	4a0b      	ldr	r2, [pc, #44]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	7959      	ldrb	r1, [r3, #5]
    35c4:	6993      	ldr	r3, [r2, #24]
    35c6:	2001      	movs	r0, #1
    35c8:	4001      	ands	r1, r0
    35ca:	0149      	lsls	r1, r1, #5
    35cc:	2020      	movs	r0, #32
    35ce:	4383      	bics	r3, r0
    35d0:	430b      	orrs	r3, r1
    35d2:	6193      	str	r3, [r2, #24]
	while(!(SUPC->STATUS.reg & SUPC_STATUS_VREGRDY)) {
    35d4:	46c0      	nop			; (mov r8, r8)
    35d6:	4b05      	ldr	r3, [pc, #20]	; (35ec <system_voltage_regulator_set_config+0xb8>)
    35d8:	68da      	ldr	r2, [r3, #12]
    35da:	2380      	movs	r3, #128	; 0x80
    35dc:	005b      	lsls	r3, r3, #1
    35de:	4013      	ands	r3, r2
    35e0:	d0f9      	beq.n	35d6 <system_voltage_regulator_set_config+0xa2>
}
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	46bd      	mov	sp, r7
    35e6:	b002      	add	sp, #8
    35e8:	bd80      	pop	{r7, pc}
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	40001400 	.word	0x40001400
    35f0:	fff0ffff 	.word	0xfff0ffff
    35f4:	fffffeff 	.word	0xfffffeff

000035f8 <system_switch_performance_level>:
{
    35f8:	b580      	push	{r7, lr}
    35fa:	b082      	sub	sp, #8
    35fc:	af00      	add	r7, sp, #0
    35fe:	0002      	movs	r2, r0
    3600:	1dfb      	adds	r3, r7, #7
    3602:	701a      	strb	r2, [r3, #0]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3604:	2380      	movs	r3, #128	; 0x80
    3606:	05db      	lsls	r3, r3, #23
    3608:	789b      	ldrb	r3, [r3, #2]
    360a:	b2db      	uxtb	r3, r3
    360c:	1dfa      	adds	r2, r7, #7
    360e:	7812      	ldrb	r2, [r2, #0]
    3610:	429a      	cmp	r2, r3
    3612:	d101      	bne.n	3618 <system_switch_performance_level+0x20>
		return STATUS_OK;
    3614:	2300      	movs	r3, #0
    3616:	e019      	b.n	364c <system_switch_performance_level+0x54>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3618:	2380      	movs	r3, #128	; 0x80
    361a:	05db      	lsls	r3, r3, #23
    361c:	789b      	ldrb	r3, [r3, #2]
    361e:	b2db      	uxtb	r3, r3
    3620:	b25b      	sxtb	r3, r3
    3622:	2b00      	cmp	r3, #0
    3624:	da01      	bge.n	362a <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    3626:	2317      	movs	r3, #23
    3628:	e010      	b.n	364c <system_switch_performance_level+0x54>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    362a:	2380      	movs	r3, #128	; 0x80
    362c:	05db      	lsls	r3, r3, #23
    362e:	2201      	movs	r2, #1
    3630:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    3632:	2380      	movs	r3, #128	; 0x80
    3634:	05db      	lsls	r3, r3, #23
    3636:	1dfa      	adds	r2, r7, #7
    3638:	7812      	ldrb	r2, [r2, #0]
    363a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	2380      	movs	r3, #128	; 0x80
    3640:	05db      	lsls	r3, r3, #23
    3642:	799b      	ldrb	r3, [r3, #6]
    3644:	b2db      	uxtb	r3, r3
    3646:	2b00      	cmp	r3, #0
    3648:	d0f9      	beq.n	363e <system_switch_performance_level+0x46>
	return STATUS_OK;
    364a:	2300      	movs	r3, #0
}
    364c:	0018      	movs	r0, r3
    364e:	46bd      	mov	sp, r7
    3650:	b002      	add	sp, #8
    3652:	bd80      	pop	{r7, pc}

00003654 <system_interrupt_enable_global>:
{
    3654:	b580      	push	{r7, lr}
    3656:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3658:	4b04      	ldr	r3, [pc, #16]	; (366c <system_interrupt_enable_global+0x18>)
    365a:	2201      	movs	r2, #1
    365c:	701a      	strb	r2, [r3, #0]
    365e:	f3bf 8f5f 	dmb	sy
    3662:	b662      	cpsie	i
}
    3664:	46c0      	nop			; (mov r8, r8)
    3666:	46bd      	mov	sp, r7
    3668:	bd80      	pop	{r7, pc}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	2000000c 	.word	0x2000000c

00003670 <bod33_disable>:
 * \return Error code indicating the status of the disable operation.
 *
 * \retval STATUS_OK               If the BOD33 was successfully disabled
 */
static inline enum status_code bod33_disable(void)
{
    3670:	b580      	push	{r7, lr}
    3672:	af00      	add	r7, sp, #0
	SUPC->INTENCLR.reg = SUPC_INTENCLR_BOD33RDY | SUPC_INTENCLR_BOD33DET | SUPC_INTENCLR_B33SRDY;
    3674:	4b07      	ldr	r3, [pc, #28]	; (3694 <bod33_disable+0x24>)
    3676:	2207      	movs	r2, #7
    3678:	601a      	str	r2, [r3, #0]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET | SUPC_INTFLAG_B33SRDY;
    367a:	4b06      	ldr	r3, [pc, #24]	; (3694 <bod33_disable+0x24>)
    367c:	2207      	movs	r2, #7
    367e:	609a      	str	r2, [r3, #8]
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    3680:	4b04      	ldr	r3, [pc, #16]	; (3694 <bod33_disable+0x24>)
    3682:	4a04      	ldr	r2, [pc, #16]	; (3694 <bod33_disable+0x24>)
    3684:	6912      	ldr	r2, [r2, #16]
    3686:	2102      	movs	r1, #2
    3688:	438a      	bics	r2, r1
    368a:	611a      	str	r2, [r3, #16]
	return STATUS_OK;
    368c:	2300      	movs	r3, #0
}
    368e:	0018      	movs	r0, r3
    3690:	46bd      	mov	sp, r7
    3692:	bd80      	pop	{r7, pc}
    3694:	40001400 	.word	0x40001400

00003698 <main>:
#include "sensor/lis3dh.h"
#include "sensor/bmp280.h"
#include "lib/rtc_interface.h"

int main (void)
{
    3698:	b5f0      	push	{r4, r5, r6, r7, lr}
    369a:	b091      	sub	sp, #68	; 0x44
    369c:	af00      	add	r7, sp, #0
	system_init();
    369e:	4b62      	ldr	r3, [pc, #392]	; (3828 <main+0x190>)
    36a0:	4798      	blx	r3
	delay_init();
    36a2:	4b62      	ldr	r3, [pc, #392]	; (382c <main+0x194>)
    36a4:	4798      	blx	r3
	system_interrupt_enable_global();
    36a6:	4b62      	ldr	r3, [pc, #392]	; (3830 <main+0x198>)
    36a8:	4798      	blx	r3

	delay_ms(50);
    36aa:	2000      	movs	r0, #0
    36ac:	4b61      	ldr	r3, [pc, #388]	; (3834 <main+0x19c>)
    36ae:	4798      	blx	r3
    36b0:	0003      	movs	r3, r0
    36b2:	613b      	str	r3, [r7, #16]
    36b4:	2300      	movs	r3, #0
    36b6:	617b      	str	r3, [r7, #20]
    36b8:	4c5f      	ldr	r4, [pc, #380]	; (3838 <main+0x1a0>)
    36ba:	2232      	movs	r2, #50	; 0x32
    36bc:	2300      	movs	r3, #0
    36be:	6938      	ldr	r0, [r7, #16]
    36c0:	6979      	ldr	r1, [r7, #20]
    36c2:	47a0      	blx	r4
    36c4:	0003      	movs	r3, r0
    36c6:	000c      	movs	r4, r1
    36c8:	0019      	movs	r1, r3
    36ca:	0022      	movs	r2, r4
    36cc:	4b5b      	ldr	r3, [pc, #364]	; (383c <main+0x1a4>)
    36ce:	2400      	movs	r4, #0
    36d0:	18c9      	adds	r1, r1, r3
    36d2:	4162      	adcs	r2, r4
    36d4:	0008      	movs	r0, r1
    36d6:	0011      	movs	r1, r2
    36d8:	4c59      	ldr	r4, [pc, #356]	; (3840 <main+0x1a8>)
    36da:	4a5a      	ldr	r2, [pc, #360]	; (3844 <main+0x1ac>)
    36dc:	2300      	movs	r3, #0
    36de:	47a0      	blx	r4
    36e0:	0003      	movs	r3, r0
    36e2:	000c      	movs	r4, r1
    36e4:	0018      	movs	r0, r3
    36e6:	4b58      	ldr	r3, [pc, #352]	; (3848 <main+0x1b0>)
    36e8:	4798      	blx	r3

	// Set up to performance level 0, buck converter
	// Clock must be <12MHz, other clocks must meet specs in datasheet
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0); 
    36ea:	2000      	movs	r0, #0
    36ec:	4b57      	ldr	r3, [pc, #348]	; (384c <main+0x1b4>)
    36ee:	4798      	blx	r3

	struct system_voltage_regulator_config vreg_config;
	system_voltage_regulator_get_config_defaults(&vreg_config);
    36f0:	2318      	movs	r3, #24
    36f2:	2218      	movs	r2, #24
    36f4:	4694      	mov	ip, r2
    36f6:	44bc      	add	ip, r7
    36f8:	4463      	add	r3, ip
    36fa:	0018      	movs	r0, r3
    36fc:	4b54      	ldr	r3, [pc, #336]	; (3850 <main+0x1b8>)
    36fe:	4798      	blx	r3
	vreg_config.regulator_sel = SYSTEM_VOLTAGE_REGULATOR_BUCK;
    3700:	2318      	movs	r3, #24
    3702:	2218      	movs	r2, #24
    3704:	4694      	mov	ip, r2
    3706:	44bc      	add	ip, r7
    3708:	4463      	add	r3, ip
    370a:	2201      	movs	r2, #1
    370c:	70da      	strb	r2, [r3, #3]
	vreg_config.low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_HIGHTEST; // Higher efficiency, runs 2.5-3.6V only
    370e:	2318      	movs	r3, #24
    3710:	2218      	movs	r2, #24
    3712:	4694      	mov	ip, r2
    3714:	44bc      	add	ip, r7
    3716:	4463      	add	r3, ip
    3718:	2201      	movs	r2, #1
    371a:	711a      	strb	r2, [r3, #4]
	vreg_config.run_in_standby_pl0 = true;
    371c:	2318      	movs	r3, #24
    371e:	2218      	movs	r2, #24
    3720:	4694      	mov	ip, r2
    3722:	44bc      	add	ip, r7
    3724:	4463      	add	r3, ip
    3726:	2201      	movs	r2, #1
    3728:	715a      	strb	r2, [r3, #5]
	system_voltage_regulator_set_config(&vreg_config);
    372a:	2318      	movs	r3, #24
    372c:	2218      	movs	r2, #24
    372e:	4694      	mov	ip, r2
    3730:	44bc      	add	ip, r7
    3732:	4463      	add	r3, ip
    3734:	0018      	movs	r0, r3
    3736:	4b47      	ldr	r3, [pc, #284]	; (3854 <main+0x1bc>)
    3738:	4798      	blx	r3

	bod33_disable();
    373a:	4b47      	ldr	r3, [pc, #284]	; (3858 <main+0x1c0>)
    373c:	4798      	blx	r3
	rtc_init();
    373e:	4b47      	ldr	r3, [pc, #284]	; (385c <main+0x1c4>)
    3740:	4798      	blx	r3

	i2c_interface_init();
    3742:	4b47      	ldr	r3, [pc, #284]	; (3860 <main+0x1c8>)
    3744:	4798      	blx	r3
	init_lis3dh();
    3746:	4b47      	ldr	r3, [pc, #284]	; (3864 <main+0x1cc>)
    3748:	4798      	blx	r3
	init_bmp280();
    374a:	4b47      	ldr	r3, [pc, #284]	; (3868 <main+0x1d0>)
    374c:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	int32_t i;
	for(;;)
	{	
		uint32_t delay_time = 2000;
    374e:	23fa      	movs	r3, #250	; 0xfa
    3750:	00db      	lsls	r3, r3, #3
    3752:	63bb      	str	r3, [r7, #56]	; 0x38
		if((i+1) % 3 == 0)
    3754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3756:	1c5a      	adds	r2, r3, #1
    3758:	4b44      	ldr	r3, [pc, #272]	; (386c <main+0x1d4>)
    375a:	2103      	movs	r1, #3
    375c:	0010      	movs	r0, r2
    375e:	4798      	blx	r3
    3760:	1e0b      	subs	r3, r1, #0
    3762:	d104      	bne.n	376e <main+0xd6>
		{
			rtc_standby_delay(delay_time);
    3764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3766:	0018      	movs	r0, r3
    3768:	4b41      	ldr	r3, [pc, #260]	; (3870 <main+0x1d8>)
    376a:	4798      	blx	r3
    376c:	e04a      	b.n	3804 <main+0x16c>
		}
		else if((i+2) % 3 == 0)
    376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3770:	1c9a      	adds	r2, r3, #2
    3772:	4b3e      	ldr	r3, [pc, #248]	; (386c <main+0x1d4>)
    3774:	2103      	movs	r1, #3
    3776:	0010      	movs	r0, r2
    3778:	4798      	blx	r3
    377a:	1e0b      	subs	r3, r1, #0
    377c:	d104      	bne.n	3788 <main+0xf0>
		{
			rtc_idle_delay(delay_time);
    377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3780:	0018      	movs	r0, r3
    3782:	4b3c      	ldr	r3, [pc, #240]	; (3874 <main+0x1dc>)
    3784:	4798      	blx	r3
    3786:	e03d      	b.n	3804 <main+0x16c>
		}
		else
		{
			delay_ms(delay_time);
    3788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    378a:	2b00      	cmp	r3, #0
    378c:	d024      	beq.n	37d8 <main+0x140>
    378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3790:	60bb      	str	r3, [r7, #8]
    3792:	2300      	movs	r3, #0
    3794:	60fb      	str	r3, [r7, #12]
    3796:	2000      	movs	r0, #0
    3798:	4b26      	ldr	r3, [pc, #152]	; (3834 <main+0x19c>)
    379a:	4798      	blx	r3
    379c:	0003      	movs	r3, r0
    379e:	603b      	str	r3, [r7, #0]
    37a0:	2300      	movs	r3, #0
    37a2:	607b      	str	r3, [r7, #4]
    37a4:	4c24      	ldr	r4, [pc, #144]	; (3838 <main+0x1a0>)
    37a6:	683a      	ldr	r2, [r7, #0]
    37a8:	687b      	ldr	r3, [r7, #4]
    37aa:	68b8      	ldr	r0, [r7, #8]
    37ac:	68f9      	ldr	r1, [r7, #12]
    37ae:	47a0      	blx	r4
    37b0:	0003      	movs	r3, r0
    37b2:	000c      	movs	r4, r1
    37b4:	0019      	movs	r1, r3
    37b6:	0022      	movs	r2, r4
    37b8:	4b20      	ldr	r3, [pc, #128]	; (383c <main+0x1a4>)
    37ba:	2400      	movs	r4, #0
    37bc:	18c9      	adds	r1, r1, r3
    37be:	4162      	adcs	r2, r4
    37c0:	0008      	movs	r0, r1
    37c2:	0011      	movs	r1, r2
    37c4:	4c1e      	ldr	r4, [pc, #120]	; (3840 <main+0x1a8>)
    37c6:	4a1f      	ldr	r2, [pc, #124]	; (3844 <main+0x1ac>)
    37c8:	2300      	movs	r3, #0
    37ca:	47a0      	blx	r4
    37cc:	0003      	movs	r3, r0
    37ce:	000c      	movs	r4, r1
    37d0:	0018      	movs	r0, r3
    37d2:	4b1d      	ldr	r3, [pc, #116]	; (3848 <main+0x1b0>)
    37d4:	4798      	blx	r3
    37d6:	e015      	b.n	3804 <main+0x16c>
    37d8:	2000      	movs	r0, #0
    37da:	4b16      	ldr	r3, [pc, #88]	; (3834 <main+0x19c>)
    37dc:	4798      	blx	r3
    37de:	0003      	movs	r3, r0
    37e0:	001d      	movs	r5, r3
    37e2:	2300      	movs	r3, #0
    37e4:	001e      	movs	r6, r3
    37e6:	4b24      	ldr	r3, [pc, #144]	; (3878 <main+0x1e0>)
    37e8:	2400      	movs	r4, #0
    37ea:	195b      	adds	r3, r3, r5
    37ec:	4174      	adcs	r4, r6
    37ee:	0018      	movs	r0, r3
    37f0:	0021      	movs	r1, r4
    37f2:	4c13      	ldr	r4, [pc, #76]	; (3840 <main+0x1a8>)
    37f4:	4a21      	ldr	r2, [pc, #132]	; (387c <main+0x1e4>)
    37f6:	2300      	movs	r3, #0
    37f8:	47a0      	blx	r4
    37fa:	0003      	movs	r3, r0
    37fc:	000c      	movs	r4, r1
    37fe:	0018      	movs	r0, r3
    3800:	4b11      	ldr	r3, [pc, #68]	; (3848 <main+0x1b0>)
    3802:	4798      	blx	r3
		}
		lis3dh_data_g_t accel_data;
		read_lis3dh_g(&accel_data);
    3804:	230c      	movs	r3, #12
    3806:	2218      	movs	r2, #24
    3808:	4694      	mov	ip, r2
    380a:	44bc      	add	ip, r7
    380c:	4463      	add	r3, ip
    380e:	0018      	movs	r0, r3
    3810:	4b1b      	ldr	r3, [pc, #108]	; (3880 <main+0x1e8>)
    3812:	4798      	blx	r3

		bmp280_meas_t baro_data;
		read_bmp280(&baro_data);
    3814:	231c      	movs	r3, #28
    3816:	18fb      	adds	r3, r7, r3
    3818:	0018      	movs	r0, r3
    381a:	4b1a      	ldr	r3, [pc, #104]	; (3884 <main+0x1ec>)
    381c:	4798      	blx	r3

		i++;
    381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3820:	3301      	adds	r3, #1
    3822:	63fb      	str	r3, [r7, #60]	; 0x3c
	{	
    3824:	e793      	b.n	374e <main+0xb6>
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	00003431 	.word	0x00003431
    382c:	00002849 	.word	0x00002849
    3830:	00003655 	.word	0x00003655
    3834:	00003069 	.word	0x00003069
    3838:	00003bfd 	.word	0x00003bfd
    383c:	00001b57 	.word	0x00001b57
    3840:	00003bbd 	.word	0x00003bbd
    3844:	00001b58 	.word	0x00001b58
    3848:	20000001 	.word	0x20000001
    384c:	000035f9 	.word	0x000035f9
    3850:	000034ff 	.word	0x000034ff
    3854:	00003535 	.word	0x00003535
    3858:	00003671 	.word	0x00003671
    385c:	00001759 	.word	0x00001759
    3860:	00002161 	.word	0x00002161
    3864:	000023b9 	.word	0x000023b9
    3868:	000019b9 	.word	0x000019b9
    386c:	00003b69 	.word	0x00003b69
    3870:	0000181d 	.word	0x0000181d
    3874:	000017c1 	.word	0x000017c1
    3878:	006acfbf 	.word	0x006acfbf
    387c:	006acfc0 	.word	0x006acfc0
    3880:	000024a1 	.word	0x000024a1
    3884:	00001eed 	.word	0x00001eed

00003888 <__udivsi3>:
    3888:	2200      	movs	r2, #0
    388a:	0843      	lsrs	r3, r0, #1
    388c:	428b      	cmp	r3, r1
    388e:	d374      	bcc.n	397a <__udivsi3+0xf2>
    3890:	0903      	lsrs	r3, r0, #4
    3892:	428b      	cmp	r3, r1
    3894:	d35f      	bcc.n	3956 <__udivsi3+0xce>
    3896:	0a03      	lsrs	r3, r0, #8
    3898:	428b      	cmp	r3, r1
    389a:	d344      	bcc.n	3926 <__udivsi3+0x9e>
    389c:	0b03      	lsrs	r3, r0, #12
    389e:	428b      	cmp	r3, r1
    38a0:	d328      	bcc.n	38f4 <__udivsi3+0x6c>
    38a2:	0c03      	lsrs	r3, r0, #16
    38a4:	428b      	cmp	r3, r1
    38a6:	d30d      	bcc.n	38c4 <__udivsi3+0x3c>
    38a8:	22ff      	movs	r2, #255	; 0xff
    38aa:	0209      	lsls	r1, r1, #8
    38ac:	ba12      	rev	r2, r2
    38ae:	0c03      	lsrs	r3, r0, #16
    38b0:	428b      	cmp	r3, r1
    38b2:	d302      	bcc.n	38ba <__udivsi3+0x32>
    38b4:	1212      	asrs	r2, r2, #8
    38b6:	0209      	lsls	r1, r1, #8
    38b8:	d065      	beq.n	3986 <__udivsi3+0xfe>
    38ba:	0b03      	lsrs	r3, r0, #12
    38bc:	428b      	cmp	r3, r1
    38be:	d319      	bcc.n	38f4 <__udivsi3+0x6c>
    38c0:	e000      	b.n	38c4 <__udivsi3+0x3c>
    38c2:	0a09      	lsrs	r1, r1, #8
    38c4:	0bc3      	lsrs	r3, r0, #15
    38c6:	428b      	cmp	r3, r1
    38c8:	d301      	bcc.n	38ce <__udivsi3+0x46>
    38ca:	03cb      	lsls	r3, r1, #15
    38cc:	1ac0      	subs	r0, r0, r3
    38ce:	4152      	adcs	r2, r2
    38d0:	0b83      	lsrs	r3, r0, #14
    38d2:	428b      	cmp	r3, r1
    38d4:	d301      	bcc.n	38da <__udivsi3+0x52>
    38d6:	038b      	lsls	r3, r1, #14
    38d8:	1ac0      	subs	r0, r0, r3
    38da:	4152      	adcs	r2, r2
    38dc:	0b43      	lsrs	r3, r0, #13
    38de:	428b      	cmp	r3, r1
    38e0:	d301      	bcc.n	38e6 <__udivsi3+0x5e>
    38e2:	034b      	lsls	r3, r1, #13
    38e4:	1ac0      	subs	r0, r0, r3
    38e6:	4152      	adcs	r2, r2
    38e8:	0b03      	lsrs	r3, r0, #12
    38ea:	428b      	cmp	r3, r1
    38ec:	d301      	bcc.n	38f2 <__udivsi3+0x6a>
    38ee:	030b      	lsls	r3, r1, #12
    38f0:	1ac0      	subs	r0, r0, r3
    38f2:	4152      	adcs	r2, r2
    38f4:	0ac3      	lsrs	r3, r0, #11
    38f6:	428b      	cmp	r3, r1
    38f8:	d301      	bcc.n	38fe <__udivsi3+0x76>
    38fa:	02cb      	lsls	r3, r1, #11
    38fc:	1ac0      	subs	r0, r0, r3
    38fe:	4152      	adcs	r2, r2
    3900:	0a83      	lsrs	r3, r0, #10
    3902:	428b      	cmp	r3, r1
    3904:	d301      	bcc.n	390a <__udivsi3+0x82>
    3906:	028b      	lsls	r3, r1, #10
    3908:	1ac0      	subs	r0, r0, r3
    390a:	4152      	adcs	r2, r2
    390c:	0a43      	lsrs	r3, r0, #9
    390e:	428b      	cmp	r3, r1
    3910:	d301      	bcc.n	3916 <__udivsi3+0x8e>
    3912:	024b      	lsls	r3, r1, #9
    3914:	1ac0      	subs	r0, r0, r3
    3916:	4152      	adcs	r2, r2
    3918:	0a03      	lsrs	r3, r0, #8
    391a:	428b      	cmp	r3, r1
    391c:	d301      	bcc.n	3922 <__udivsi3+0x9a>
    391e:	020b      	lsls	r3, r1, #8
    3920:	1ac0      	subs	r0, r0, r3
    3922:	4152      	adcs	r2, r2
    3924:	d2cd      	bcs.n	38c2 <__udivsi3+0x3a>
    3926:	09c3      	lsrs	r3, r0, #7
    3928:	428b      	cmp	r3, r1
    392a:	d301      	bcc.n	3930 <__udivsi3+0xa8>
    392c:	01cb      	lsls	r3, r1, #7
    392e:	1ac0      	subs	r0, r0, r3
    3930:	4152      	adcs	r2, r2
    3932:	0983      	lsrs	r3, r0, #6
    3934:	428b      	cmp	r3, r1
    3936:	d301      	bcc.n	393c <__udivsi3+0xb4>
    3938:	018b      	lsls	r3, r1, #6
    393a:	1ac0      	subs	r0, r0, r3
    393c:	4152      	adcs	r2, r2
    393e:	0943      	lsrs	r3, r0, #5
    3940:	428b      	cmp	r3, r1
    3942:	d301      	bcc.n	3948 <__udivsi3+0xc0>
    3944:	014b      	lsls	r3, r1, #5
    3946:	1ac0      	subs	r0, r0, r3
    3948:	4152      	adcs	r2, r2
    394a:	0903      	lsrs	r3, r0, #4
    394c:	428b      	cmp	r3, r1
    394e:	d301      	bcc.n	3954 <__udivsi3+0xcc>
    3950:	010b      	lsls	r3, r1, #4
    3952:	1ac0      	subs	r0, r0, r3
    3954:	4152      	adcs	r2, r2
    3956:	08c3      	lsrs	r3, r0, #3
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__udivsi3+0xd8>
    395c:	00cb      	lsls	r3, r1, #3
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	0883      	lsrs	r3, r0, #2
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__udivsi3+0xe4>
    3968:	008b      	lsls	r3, r1, #2
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	0843      	lsrs	r3, r0, #1
    3970:	428b      	cmp	r3, r1
    3972:	d301      	bcc.n	3978 <__udivsi3+0xf0>
    3974:	004b      	lsls	r3, r1, #1
    3976:	1ac0      	subs	r0, r0, r3
    3978:	4152      	adcs	r2, r2
    397a:	1a41      	subs	r1, r0, r1
    397c:	d200      	bcs.n	3980 <__udivsi3+0xf8>
    397e:	4601      	mov	r1, r0
    3980:	4152      	adcs	r2, r2
    3982:	4610      	mov	r0, r2
    3984:	4770      	bx	lr
    3986:	e7ff      	b.n	3988 <__udivsi3+0x100>
    3988:	b501      	push	{r0, lr}
    398a:	2000      	movs	r0, #0
    398c:	f000 f8f0 	bl	3b70 <__aeabi_idiv0>
    3990:	bd02      	pop	{r1, pc}
    3992:	46c0      	nop			; (mov r8, r8)

00003994 <__aeabi_uidivmod>:
    3994:	2900      	cmp	r1, #0
    3996:	d0f7      	beq.n	3988 <__udivsi3+0x100>
    3998:	e776      	b.n	3888 <__udivsi3>
    399a:	4770      	bx	lr

0000399c <__divsi3>:
    399c:	4603      	mov	r3, r0
    399e:	430b      	orrs	r3, r1
    39a0:	d47f      	bmi.n	3aa2 <__divsi3+0x106>
    39a2:	2200      	movs	r2, #0
    39a4:	0843      	lsrs	r3, r0, #1
    39a6:	428b      	cmp	r3, r1
    39a8:	d374      	bcc.n	3a94 <__divsi3+0xf8>
    39aa:	0903      	lsrs	r3, r0, #4
    39ac:	428b      	cmp	r3, r1
    39ae:	d35f      	bcc.n	3a70 <__divsi3+0xd4>
    39b0:	0a03      	lsrs	r3, r0, #8
    39b2:	428b      	cmp	r3, r1
    39b4:	d344      	bcc.n	3a40 <__divsi3+0xa4>
    39b6:	0b03      	lsrs	r3, r0, #12
    39b8:	428b      	cmp	r3, r1
    39ba:	d328      	bcc.n	3a0e <__divsi3+0x72>
    39bc:	0c03      	lsrs	r3, r0, #16
    39be:	428b      	cmp	r3, r1
    39c0:	d30d      	bcc.n	39de <__divsi3+0x42>
    39c2:	22ff      	movs	r2, #255	; 0xff
    39c4:	0209      	lsls	r1, r1, #8
    39c6:	ba12      	rev	r2, r2
    39c8:	0c03      	lsrs	r3, r0, #16
    39ca:	428b      	cmp	r3, r1
    39cc:	d302      	bcc.n	39d4 <__divsi3+0x38>
    39ce:	1212      	asrs	r2, r2, #8
    39d0:	0209      	lsls	r1, r1, #8
    39d2:	d065      	beq.n	3aa0 <__divsi3+0x104>
    39d4:	0b03      	lsrs	r3, r0, #12
    39d6:	428b      	cmp	r3, r1
    39d8:	d319      	bcc.n	3a0e <__divsi3+0x72>
    39da:	e000      	b.n	39de <__divsi3+0x42>
    39dc:	0a09      	lsrs	r1, r1, #8
    39de:	0bc3      	lsrs	r3, r0, #15
    39e0:	428b      	cmp	r3, r1
    39e2:	d301      	bcc.n	39e8 <__divsi3+0x4c>
    39e4:	03cb      	lsls	r3, r1, #15
    39e6:	1ac0      	subs	r0, r0, r3
    39e8:	4152      	adcs	r2, r2
    39ea:	0b83      	lsrs	r3, r0, #14
    39ec:	428b      	cmp	r3, r1
    39ee:	d301      	bcc.n	39f4 <__divsi3+0x58>
    39f0:	038b      	lsls	r3, r1, #14
    39f2:	1ac0      	subs	r0, r0, r3
    39f4:	4152      	adcs	r2, r2
    39f6:	0b43      	lsrs	r3, r0, #13
    39f8:	428b      	cmp	r3, r1
    39fa:	d301      	bcc.n	3a00 <__divsi3+0x64>
    39fc:	034b      	lsls	r3, r1, #13
    39fe:	1ac0      	subs	r0, r0, r3
    3a00:	4152      	adcs	r2, r2
    3a02:	0b03      	lsrs	r3, r0, #12
    3a04:	428b      	cmp	r3, r1
    3a06:	d301      	bcc.n	3a0c <__divsi3+0x70>
    3a08:	030b      	lsls	r3, r1, #12
    3a0a:	1ac0      	subs	r0, r0, r3
    3a0c:	4152      	adcs	r2, r2
    3a0e:	0ac3      	lsrs	r3, r0, #11
    3a10:	428b      	cmp	r3, r1
    3a12:	d301      	bcc.n	3a18 <__divsi3+0x7c>
    3a14:	02cb      	lsls	r3, r1, #11
    3a16:	1ac0      	subs	r0, r0, r3
    3a18:	4152      	adcs	r2, r2
    3a1a:	0a83      	lsrs	r3, r0, #10
    3a1c:	428b      	cmp	r3, r1
    3a1e:	d301      	bcc.n	3a24 <__divsi3+0x88>
    3a20:	028b      	lsls	r3, r1, #10
    3a22:	1ac0      	subs	r0, r0, r3
    3a24:	4152      	adcs	r2, r2
    3a26:	0a43      	lsrs	r3, r0, #9
    3a28:	428b      	cmp	r3, r1
    3a2a:	d301      	bcc.n	3a30 <__divsi3+0x94>
    3a2c:	024b      	lsls	r3, r1, #9
    3a2e:	1ac0      	subs	r0, r0, r3
    3a30:	4152      	adcs	r2, r2
    3a32:	0a03      	lsrs	r3, r0, #8
    3a34:	428b      	cmp	r3, r1
    3a36:	d301      	bcc.n	3a3c <__divsi3+0xa0>
    3a38:	020b      	lsls	r3, r1, #8
    3a3a:	1ac0      	subs	r0, r0, r3
    3a3c:	4152      	adcs	r2, r2
    3a3e:	d2cd      	bcs.n	39dc <__divsi3+0x40>
    3a40:	09c3      	lsrs	r3, r0, #7
    3a42:	428b      	cmp	r3, r1
    3a44:	d301      	bcc.n	3a4a <__divsi3+0xae>
    3a46:	01cb      	lsls	r3, r1, #7
    3a48:	1ac0      	subs	r0, r0, r3
    3a4a:	4152      	adcs	r2, r2
    3a4c:	0983      	lsrs	r3, r0, #6
    3a4e:	428b      	cmp	r3, r1
    3a50:	d301      	bcc.n	3a56 <__divsi3+0xba>
    3a52:	018b      	lsls	r3, r1, #6
    3a54:	1ac0      	subs	r0, r0, r3
    3a56:	4152      	adcs	r2, r2
    3a58:	0943      	lsrs	r3, r0, #5
    3a5a:	428b      	cmp	r3, r1
    3a5c:	d301      	bcc.n	3a62 <__divsi3+0xc6>
    3a5e:	014b      	lsls	r3, r1, #5
    3a60:	1ac0      	subs	r0, r0, r3
    3a62:	4152      	adcs	r2, r2
    3a64:	0903      	lsrs	r3, r0, #4
    3a66:	428b      	cmp	r3, r1
    3a68:	d301      	bcc.n	3a6e <__divsi3+0xd2>
    3a6a:	010b      	lsls	r3, r1, #4
    3a6c:	1ac0      	subs	r0, r0, r3
    3a6e:	4152      	adcs	r2, r2
    3a70:	08c3      	lsrs	r3, r0, #3
    3a72:	428b      	cmp	r3, r1
    3a74:	d301      	bcc.n	3a7a <__divsi3+0xde>
    3a76:	00cb      	lsls	r3, r1, #3
    3a78:	1ac0      	subs	r0, r0, r3
    3a7a:	4152      	adcs	r2, r2
    3a7c:	0883      	lsrs	r3, r0, #2
    3a7e:	428b      	cmp	r3, r1
    3a80:	d301      	bcc.n	3a86 <__divsi3+0xea>
    3a82:	008b      	lsls	r3, r1, #2
    3a84:	1ac0      	subs	r0, r0, r3
    3a86:	4152      	adcs	r2, r2
    3a88:	0843      	lsrs	r3, r0, #1
    3a8a:	428b      	cmp	r3, r1
    3a8c:	d301      	bcc.n	3a92 <__divsi3+0xf6>
    3a8e:	004b      	lsls	r3, r1, #1
    3a90:	1ac0      	subs	r0, r0, r3
    3a92:	4152      	adcs	r2, r2
    3a94:	1a41      	subs	r1, r0, r1
    3a96:	d200      	bcs.n	3a9a <__divsi3+0xfe>
    3a98:	4601      	mov	r1, r0
    3a9a:	4152      	adcs	r2, r2
    3a9c:	4610      	mov	r0, r2
    3a9e:	4770      	bx	lr
    3aa0:	e05d      	b.n	3b5e <__divsi3+0x1c2>
    3aa2:	0fca      	lsrs	r2, r1, #31
    3aa4:	d000      	beq.n	3aa8 <__divsi3+0x10c>
    3aa6:	4249      	negs	r1, r1
    3aa8:	1003      	asrs	r3, r0, #32
    3aaa:	d300      	bcc.n	3aae <__divsi3+0x112>
    3aac:	4240      	negs	r0, r0
    3aae:	4053      	eors	r3, r2
    3ab0:	2200      	movs	r2, #0
    3ab2:	469c      	mov	ip, r3
    3ab4:	0903      	lsrs	r3, r0, #4
    3ab6:	428b      	cmp	r3, r1
    3ab8:	d32d      	bcc.n	3b16 <__divsi3+0x17a>
    3aba:	0a03      	lsrs	r3, r0, #8
    3abc:	428b      	cmp	r3, r1
    3abe:	d312      	bcc.n	3ae6 <__divsi3+0x14a>
    3ac0:	22fc      	movs	r2, #252	; 0xfc
    3ac2:	0189      	lsls	r1, r1, #6
    3ac4:	ba12      	rev	r2, r2
    3ac6:	0a03      	lsrs	r3, r0, #8
    3ac8:	428b      	cmp	r3, r1
    3aca:	d30c      	bcc.n	3ae6 <__divsi3+0x14a>
    3acc:	0189      	lsls	r1, r1, #6
    3ace:	1192      	asrs	r2, r2, #6
    3ad0:	428b      	cmp	r3, r1
    3ad2:	d308      	bcc.n	3ae6 <__divsi3+0x14a>
    3ad4:	0189      	lsls	r1, r1, #6
    3ad6:	1192      	asrs	r2, r2, #6
    3ad8:	428b      	cmp	r3, r1
    3ada:	d304      	bcc.n	3ae6 <__divsi3+0x14a>
    3adc:	0189      	lsls	r1, r1, #6
    3ade:	d03a      	beq.n	3b56 <__divsi3+0x1ba>
    3ae0:	1192      	asrs	r2, r2, #6
    3ae2:	e000      	b.n	3ae6 <__divsi3+0x14a>
    3ae4:	0989      	lsrs	r1, r1, #6
    3ae6:	09c3      	lsrs	r3, r0, #7
    3ae8:	428b      	cmp	r3, r1
    3aea:	d301      	bcc.n	3af0 <__divsi3+0x154>
    3aec:	01cb      	lsls	r3, r1, #7
    3aee:	1ac0      	subs	r0, r0, r3
    3af0:	4152      	adcs	r2, r2
    3af2:	0983      	lsrs	r3, r0, #6
    3af4:	428b      	cmp	r3, r1
    3af6:	d301      	bcc.n	3afc <__divsi3+0x160>
    3af8:	018b      	lsls	r3, r1, #6
    3afa:	1ac0      	subs	r0, r0, r3
    3afc:	4152      	adcs	r2, r2
    3afe:	0943      	lsrs	r3, r0, #5
    3b00:	428b      	cmp	r3, r1
    3b02:	d301      	bcc.n	3b08 <__divsi3+0x16c>
    3b04:	014b      	lsls	r3, r1, #5
    3b06:	1ac0      	subs	r0, r0, r3
    3b08:	4152      	adcs	r2, r2
    3b0a:	0903      	lsrs	r3, r0, #4
    3b0c:	428b      	cmp	r3, r1
    3b0e:	d301      	bcc.n	3b14 <__divsi3+0x178>
    3b10:	010b      	lsls	r3, r1, #4
    3b12:	1ac0      	subs	r0, r0, r3
    3b14:	4152      	adcs	r2, r2
    3b16:	08c3      	lsrs	r3, r0, #3
    3b18:	428b      	cmp	r3, r1
    3b1a:	d301      	bcc.n	3b20 <__divsi3+0x184>
    3b1c:	00cb      	lsls	r3, r1, #3
    3b1e:	1ac0      	subs	r0, r0, r3
    3b20:	4152      	adcs	r2, r2
    3b22:	0883      	lsrs	r3, r0, #2
    3b24:	428b      	cmp	r3, r1
    3b26:	d301      	bcc.n	3b2c <__divsi3+0x190>
    3b28:	008b      	lsls	r3, r1, #2
    3b2a:	1ac0      	subs	r0, r0, r3
    3b2c:	4152      	adcs	r2, r2
    3b2e:	d2d9      	bcs.n	3ae4 <__divsi3+0x148>
    3b30:	0843      	lsrs	r3, r0, #1
    3b32:	428b      	cmp	r3, r1
    3b34:	d301      	bcc.n	3b3a <__divsi3+0x19e>
    3b36:	004b      	lsls	r3, r1, #1
    3b38:	1ac0      	subs	r0, r0, r3
    3b3a:	4152      	adcs	r2, r2
    3b3c:	1a41      	subs	r1, r0, r1
    3b3e:	d200      	bcs.n	3b42 <__divsi3+0x1a6>
    3b40:	4601      	mov	r1, r0
    3b42:	4663      	mov	r3, ip
    3b44:	4152      	adcs	r2, r2
    3b46:	105b      	asrs	r3, r3, #1
    3b48:	4610      	mov	r0, r2
    3b4a:	d301      	bcc.n	3b50 <__divsi3+0x1b4>
    3b4c:	4240      	negs	r0, r0
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d500      	bpl.n	3b54 <__divsi3+0x1b8>
    3b52:	4249      	negs	r1, r1
    3b54:	4770      	bx	lr
    3b56:	4663      	mov	r3, ip
    3b58:	105b      	asrs	r3, r3, #1
    3b5a:	d300      	bcc.n	3b5e <__divsi3+0x1c2>
    3b5c:	4240      	negs	r0, r0
    3b5e:	b501      	push	{r0, lr}
    3b60:	2000      	movs	r0, #0
    3b62:	f000 f805 	bl	3b70 <__aeabi_idiv0>
    3b66:	bd02      	pop	{r1, pc}

00003b68 <__aeabi_idivmod>:
    3b68:	2900      	cmp	r1, #0
    3b6a:	d0f8      	beq.n	3b5e <__divsi3+0x1c2>
    3b6c:	e716      	b.n	399c <__divsi3>
    3b6e:	4770      	bx	lr

00003b70 <__aeabi_idiv0>:
    3b70:	4770      	bx	lr
    3b72:	46c0      	nop			; (mov r8, r8)

00003b74 <__aeabi_ldivmod>:
    3b74:	2b00      	cmp	r3, #0
    3b76:	d115      	bne.n	3ba4 <__aeabi_ldivmod+0x30>
    3b78:	2a00      	cmp	r2, #0
    3b7a:	d113      	bne.n	3ba4 <__aeabi_ldivmod+0x30>
    3b7c:	2900      	cmp	r1, #0
    3b7e:	db06      	blt.n	3b8e <__aeabi_ldivmod+0x1a>
    3b80:	dc01      	bgt.n	3b86 <__aeabi_ldivmod+0x12>
    3b82:	2800      	cmp	r0, #0
    3b84:	d006      	beq.n	3b94 <__aeabi_ldivmod+0x20>
    3b86:	2000      	movs	r0, #0
    3b88:	43c0      	mvns	r0, r0
    3b8a:	0841      	lsrs	r1, r0, #1
    3b8c:	e002      	b.n	3b94 <__aeabi_ldivmod+0x20>
    3b8e:	2180      	movs	r1, #128	; 0x80
    3b90:	0609      	lsls	r1, r1, #24
    3b92:	2000      	movs	r0, #0
    3b94:	b407      	push	{r0, r1, r2}
    3b96:	4802      	ldr	r0, [pc, #8]	; (3ba0 <__aeabi_ldivmod+0x2c>)
    3b98:	a101      	add	r1, pc, #4	; (adr r1, 3ba0 <__aeabi_ldivmod+0x2c>)
    3b9a:	1840      	adds	r0, r0, r1
    3b9c:	9002      	str	r0, [sp, #8]
    3b9e:	bd03      	pop	{r0, r1, pc}
    3ba0:	ffffffd1 	.word	0xffffffd1
    3ba4:	b403      	push	{r0, r1}
    3ba6:	4668      	mov	r0, sp
    3ba8:	b501      	push	{r0, lr}
    3baa:	9802      	ldr	r0, [sp, #8]
    3bac:	f000 f910 	bl	3dd0 <__gnu_ldivmod_helper>
    3bb0:	9b01      	ldr	r3, [sp, #4]
    3bb2:	469e      	mov	lr, r3
    3bb4:	b002      	add	sp, #8
    3bb6:	bc0c      	pop	{r2, r3}
    3bb8:	4770      	bx	lr
    3bba:	46c0      	nop			; (mov r8, r8)

00003bbc <__aeabi_uldivmod>:
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d111      	bne.n	3be4 <__aeabi_uldivmod+0x28>
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d10f      	bne.n	3be4 <__aeabi_uldivmod+0x28>
    3bc4:	2900      	cmp	r1, #0
    3bc6:	d100      	bne.n	3bca <__aeabi_uldivmod+0xe>
    3bc8:	2800      	cmp	r0, #0
    3bca:	d002      	beq.n	3bd2 <__aeabi_uldivmod+0x16>
    3bcc:	2100      	movs	r1, #0
    3bce:	43c9      	mvns	r1, r1
    3bd0:	1c08      	adds	r0, r1, #0
    3bd2:	b407      	push	{r0, r1, r2}
    3bd4:	4802      	ldr	r0, [pc, #8]	; (3be0 <__aeabi_uldivmod+0x24>)
    3bd6:	a102      	add	r1, pc, #8	; (adr r1, 3be0 <__aeabi_uldivmod+0x24>)
    3bd8:	1840      	adds	r0, r0, r1
    3bda:	9002      	str	r0, [sp, #8]
    3bdc:	bd03      	pop	{r0, r1, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	ffffff91 	.word	0xffffff91
    3be4:	b403      	push	{r0, r1}
    3be6:	4668      	mov	r0, sp
    3be8:	b501      	push	{r0, lr}
    3bea:	9802      	ldr	r0, [sp, #8]
    3bec:	f000 f830 	bl	3c50 <__udivmoddi4>
    3bf0:	9b01      	ldr	r3, [sp, #4]
    3bf2:	469e      	mov	lr, r3
    3bf4:	b002      	add	sp, #8
    3bf6:	bc0c      	pop	{r2, r3}
    3bf8:	4770      	bx	lr
    3bfa:	46c0      	nop			; (mov r8, r8)

00003bfc <__aeabi_lmul>:
    3bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bfe:	46ce      	mov	lr, r9
    3c00:	4647      	mov	r7, r8
    3c02:	0415      	lsls	r5, r2, #16
    3c04:	0c2d      	lsrs	r5, r5, #16
    3c06:	002e      	movs	r6, r5
    3c08:	b580      	push	{r7, lr}
    3c0a:	0407      	lsls	r7, r0, #16
    3c0c:	0c14      	lsrs	r4, r2, #16
    3c0e:	0c3f      	lsrs	r7, r7, #16
    3c10:	4699      	mov	r9, r3
    3c12:	0c03      	lsrs	r3, r0, #16
    3c14:	437e      	muls	r6, r7
    3c16:	435d      	muls	r5, r3
    3c18:	4367      	muls	r7, r4
    3c1a:	4363      	muls	r3, r4
    3c1c:	197f      	adds	r7, r7, r5
    3c1e:	0c34      	lsrs	r4, r6, #16
    3c20:	19e4      	adds	r4, r4, r7
    3c22:	469c      	mov	ip, r3
    3c24:	42a5      	cmp	r5, r4
    3c26:	d903      	bls.n	3c30 <__aeabi_lmul+0x34>
    3c28:	2380      	movs	r3, #128	; 0x80
    3c2a:	025b      	lsls	r3, r3, #9
    3c2c:	4698      	mov	r8, r3
    3c2e:	44c4      	add	ip, r8
    3c30:	464b      	mov	r3, r9
    3c32:	4351      	muls	r1, r2
    3c34:	4343      	muls	r3, r0
    3c36:	0436      	lsls	r6, r6, #16
    3c38:	0c36      	lsrs	r6, r6, #16
    3c3a:	0c25      	lsrs	r5, r4, #16
    3c3c:	0424      	lsls	r4, r4, #16
    3c3e:	4465      	add	r5, ip
    3c40:	19a4      	adds	r4, r4, r6
    3c42:	1859      	adds	r1, r3, r1
    3c44:	1949      	adds	r1, r1, r5
    3c46:	0020      	movs	r0, r4
    3c48:	bc0c      	pop	{r2, r3}
    3c4a:	4690      	mov	r8, r2
    3c4c:	4699      	mov	r9, r3
    3c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c50 <__udivmoddi4>:
    3c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c52:	4657      	mov	r7, sl
    3c54:	464e      	mov	r6, r9
    3c56:	4645      	mov	r5, r8
    3c58:	46de      	mov	lr, fp
    3c5a:	b5e0      	push	{r5, r6, r7, lr}
    3c5c:	0004      	movs	r4, r0
    3c5e:	b083      	sub	sp, #12
    3c60:	000d      	movs	r5, r1
    3c62:	4692      	mov	sl, r2
    3c64:	4699      	mov	r9, r3
    3c66:	428b      	cmp	r3, r1
    3c68:	d82f      	bhi.n	3cca <__udivmoddi4+0x7a>
    3c6a:	d02c      	beq.n	3cc6 <__udivmoddi4+0x76>
    3c6c:	4649      	mov	r1, r9
    3c6e:	4650      	mov	r0, sl
    3c70:	f001 fdfa 	bl	5868 <__clzdi2>
    3c74:	0029      	movs	r1, r5
    3c76:	0006      	movs	r6, r0
    3c78:	0020      	movs	r0, r4
    3c7a:	f001 fdf5 	bl	5868 <__clzdi2>
    3c7e:	1a33      	subs	r3, r6, r0
    3c80:	4698      	mov	r8, r3
    3c82:	3b20      	subs	r3, #32
    3c84:	469b      	mov	fp, r3
    3c86:	d500      	bpl.n	3c8a <__udivmoddi4+0x3a>
    3c88:	e074      	b.n	3d74 <__udivmoddi4+0x124>
    3c8a:	4653      	mov	r3, sl
    3c8c:	465a      	mov	r2, fp
    3c8e:	4093      	lsls	r3, r2
    3c90:	001f      	movs	r7, r3
    3c92:	4653      	mov	r3, sl
    3c94:	4642      	mov	r2, r8
    3c96:	4093      	lsls	r3, r2
    3c98:	001e      	movs	r6, r3
    3c9a:	42af      	cmp	r7, r5
    3c9c:	d829      	bhi.n	3cf2 <__udivmoddi4+0xa2>
    3c9e:	d026      	beq.n	3cee <__udivmoddi4+0x9e>
    3ca0:	465b      	mov	r3, fp
    3ca2:	1ba4      	subs	r4, r4, r6
    3ca4:	41bd      	sbcs	r5, r7
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	da00      	bge.n	3cac <__udivmoddi4+0x5c>
    3caa:	e079      	b.n	3da0 <__udivmoddi4+0x150>
    3cac:	2200      	movs	r2, #0
    3cae:	2300      	movs	r3, #0
    3cb0:	9200      	str	r2, [sp, #0]
    3cb2:	9301      	str	r3, [sp, #4]
    3cb4:	2301      	movs	r3, #1
    3cb6:	465a      	mov	r2, fp
    3cb8:	4093      	lsls	r3, r2
    3cba:	9301      	str	r3, [sp, #4]
    3cbc:	2301      	movs	r3, #1
    3cbe:	4642      	mov	r2, r8
    3cc0:	4093      	lsls	r3, r2
    3cc2:	9300      	str	r3, [sp, #0]
    3cc4:	e019      	b.n	3cfa <__udivmoddi4+0xaa>
    3cc6:	4282      	cmp	r2, r0
    3cc8:	d9d0      	bls.n	3c6c <__udivmoddi4+0x1c>
    3cca:	2200      	movs	r2, #0
    3ccc:	2300      	movs	r3, #0
    3cce:	9200      	str	r2, [sp, #0]
    3cd0:	9301      	str	r3, [sp, #4]
    3cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d001      	beq.n	3cdc <__udivmoddi4+0x8c>
    3cd8:	601c      	str	r4, [r3, #0]
    3cda:	605d      	str	r5, [r3, #4]
    3cdc:	9800      	ldr	r0, [sp, #0]
    3cde:	9901      	ldr	r1, [sp, #4]
    3ce0:	b003      	add	sp, #12
    3ce2:	bc3c      	pop	{r2, r3, r4, r5}
    3ce4:	4690      	mov	r8, r2
    3ce6:	4699      	mov	r9, r3
    3ce8:	46a2      	mov	sl, r4
    3cea:	46ab      	mov	fp, r5
    3cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cee:	42a3      	cmp	r3, r4
    3cf0:	d9d6      	bls.n	3ca0 <__udivmoddi4+0x50>
    3cf2:	2200      	movs	r2, #0
    3cf4:	2300      	movs	r3, #0
    3cf6:	9200      	str	r2, [sp, #0]
    3cf8:	9301      	str	r3, [sp, #4]
    3cfa:	4643      	mov	r3, r8
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	d0e8      	beq.n	3cd2 <__udivmoddi4+0x82>
    3d00:	07fb      	lsls	r3, r7, #31
    3d02:	0872      	lsrs	r2, r6, #1
    3d04:	431a      	orrs	r2, r3
    3d06:	4646      	mov	r6, r8
    3d08:	087b      	lsrs	r3, r7, #1
    3d0a:	e00e      	b.n	3d2a <__udivmoddi4+0xda>
    3d0c:	42ab      	cmp	r3, r5
    3d0e:	d101      	bne.n	3d14 <__udivmoddi4+0xc4>
    3d10:	42a2      	cmp	r2, r4
    3d12:	d80c      	bhi.n	3d2e <__udivmoddi4+0xde>
    3d14:	1aa4      	subs	r4, r4, r2
    3d16:	419d      	sbcs	r5, r3
    3d18:	2001      	movs	r0, #1
    3d1a:	1924      	adds	r4, r4, r4
    3d1c:	416d      	adcs	r5, r5
    3d1e:	2100      	movs	r1, #0
    3d20:	3e01      	subs	r6, #1
    3d22:	1824      	adds	r4, r4, r0
    3d24:	414d      	adcs	r5, r1
    3d26:	2e00      	cmp	r6, #0
    3d28:	d006      	beq.n	3d38 <__udivmoddi4+0xe8>
    3d2a:	42ab      	cmp	r3, r5
    3d2c:	d9ee      	bls.n	3d0c <__udivmoddi4+0xbc>
    3d2e:	3e01      	subs	r6, #1
    3d30:	1924      	adds	r4, r4, r4
    3d32:	416d      	adcs	r5, r5
    3d34:	2e00      	cmp	r6, #0
    3d36:	d1f8      	bne.n	3d2a <__udivmoddi4+0xda>
    3d38:	465b      	mov	r3, fp
    3d3a:	9800      	ldr	r0, [sp, #0]
    3d3c:	9901      	ldr	r1, [sp, #4]
    3d3e:	1900      	adds	r0, r0, r4
    3d40:	4169      	adcs	r1, r5
    3d42:	2b00      	cmp	r3, #0
    3d44:	db22      	blt.n	3d8c <__udivmoddi4+0x13c>
    3d46:	002b      	movs	r3, r5
    3d48:	465a      	mov	r2, fp
    3d4a:	40d3      	lsrs	r3, r2
    3d4c:	002a      	movs	r2, r5
    3d4e:	4644      	mov	r4, r8
    3d50:	40e2      	lsrs	r2, r4
    3d52:	001c      	movs	r4, r3
    3d54:	465b      	mov	r3, fp
    3d56:	0015      	movs	r5, r2
    3d58:	2b00      	cmp	r3, #0
    3d5a:	db2c      	blt.n	3db6 <__udivmoddi4+0x166>
    3d5c:	0026      	movs	r6, r4
    3d5e:	409e      	lsls	r6, r3
    3d60:	0033      	movs	r3, r6
    3d62:	0026      	movs	r6, r4
    3d64:	4647      	mov	r7, r8
    3d66:	40be      	lsls	r6, r7
    3d68:	0032      	movs	r2, r6
    3d6a:	1a80      	subs	r0, r0, r2
    3d6c:	4199      	sbcs	r1, r3
    3d6e:	9000      	str	r0, [sp, #0]
    3d70:	9101      	str	r1, [sp, #4]
    3d72:	e7ae      	b.n	3cd2 <__udivmoddi4+0x82>
    3d74:	4642      	mov	r2, r8
    3d76:	2320      	movs	r3, #32
    3d78:	1a9b      	subs	r3, r3, r2
    3d7a:	4652      	mov	r2, sl
    3d7c:	40da      	lsrs	r2, r3
    3d7e:	4641      	mov	r1, r8
    3d80:	0013      	movs	r3, r2
    3d82:	464a      	mov	r2, r9
    3d84:	408a      	lsls	r2, r1
    3d86:	0017      	movs	r7, r2
    3d88:	431f      	orrs	r7, r3
    3d8a:	e782      	b.n	3c92 <__udivmoddi4+0x42>
    3d8c:	4642      	mov	r2, r8
    3d8e:	2320      	movs	r3, #32
    3d90:	1a9b      	subs	r3, r3, r2
    3d92:	002a      	movs	r2, r5
    3d94:	4646      	mov	r6, r8
    3d96:	409a      	lsls	r2, r3
    3d98:	0023      	movs	r3, r4
    3d9a:	40f3      	lsrs	r3, r6
    3d9c:	4313      	orrs	r3, r2
    3d9e:	e7d5      	b.n	3d4c <__udivmoddi4+0xfc>
    3da0:	4642      	mov	r2, r8
    3da2:	2320      	movs	r3, #32
    3da4:	2100      	movs	r1, #0
    3da6:	1a9b      	subs	r3, r3, r2
    3da8:	2200      	movs	r2, #0
    3daa:	9100      	str	r1, [sp, #0]
    3dac:	9201      	str	r2, [sp, #4]
    3dae:	2201      	movs	r2, #1
    3db0:	40da      	lsrs	r2, r3
    3db2:	9201      	str	r2, [sp, #4]
    3db4:	e782      	b.n	3cbc <__udivmoddi4+0x6c>
    3db6:	4642      	mov	r2, r8
    3db8:	2320      	movs	r3, #32
    3dba:	0026      	movs	r6, r4
    3dbc:	1a9b      	subs	r3, r3, r2
    3dbe:	40de      	lsrs	r6, r3
    3dc0:	002f      	movs	r7, r5
    3dc2:	46b4      	mov	ip, r6
    3dc4:	4097      	lsls	r7, r2
    3dc6:	4666      	mov	r6, ip
    3dc8:	003b      	movs	r3, r7
    3dca:	4333      	orrs	r3, r6
    3dcc:	e7c9      	b.n	3d62 <__udivmoddi4+0x112>
    3dce:	46c0      	nop			; (mov r8, r8)

00003dd0 <__gnu_ldivmod_helper>:
    3dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd2:	b083      	sub	sp, #12
    3dd4:	0016      	movs	r6, r2
    3dd6:	001f      	movs	r7, r3
    3dd8:	9000      	str	r0, [sp, #0]
    3dda:	9101      	str	r1, [sp, #4]
    3ddc:	f001 fd50 	bl	5880 <__divdi3>
    3de0:	0004      	movs	r4, r0
    3de2:	000d      	movs	r5, r1
    3de4:	0002      	movs	r2, r0
    3de6:	000b      	movs	r3, r1
    3de8:	0030      	movs	r0, r6
    3dea:	0039      	movs	r1, r7
    3dec:	f7ff ff06 	bl	3bfc <__aeabi_lmul>
    3df0:	9a00      	ldr	r2, [sp, #0]
    3df2:	9b01      	ldr	r3, [sp, #4]
    3df4:	1a12      	subs	r2, r2, r0
    3df6:	418b      	sbcs	r3, r1
    3df8:	9908      	ldr	r1, [sp, #32]
    3dfa:	0020      	movs	r0, r4
    3dfc:	600a      	str	r2, [r1, #0]
    3dfe:	604b      	str	r3, [r1, #4]
    3e00:	0029      	movs	r1, r5
    3e02:	b003      	add	sp, #12
    3e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e06:	46c0      	nop			; (mov r8, r8)

00003e08 <__aeabi_dadd>:
    3e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e0a:	4645      	mov	r5, r8
    3e0c:	46de      	mov	lr, fp
    3e0e:	4657      	mov	r7, sl
    3e10:	464e      	mov	r6, r9
    3e12:	030c      	lsls	r4, r1, #12
    3e14:	b5e0      	push	{r5, r6, r7, lr}
    3e16:	004e      	lsls	r6, r1, #1
    3e18:	0fc9      	lsrs	r1, r1, #31
    3e1a:	4688      	mov	r8, r1
    3e1c:	000d      	movs	r5, r1
    3e1e:	0a61      	lsrs	r1, r4, #9
    3e20:	0f44      	lsrs	r4, r0, #29
    3e22:	430c      	orrs	r4, r1
    3e24:	00c7      	lsls	r7, r0, #3
    3e26:	0319      	lsls	r1, r3, #12
    3e28:	0058      	lsls	r0, r3, #1
    3e2a:	0fdb      	lsrs	r3, r3, #31
    3e2c:	469b      	mov	fp, r3
    3e2e:	0a4b      	lsrs	r3, r1, #9
    3e30:	0f51      	lsrs	r1, r2, #29
    3e32:	430b      	orrs	r3, r1
    3e34:	0d76      	lsrs	r6, r6, #21
    3e36:	0d40      	lsrs	r0, r0, #21
    3e38:	0019      	movs	r1, r3
    3e3a:	00d2      	lsls	r2, r2, #3
    3e3c:	45d8      	cmp	r8, fp
    3e3e:	d100      	bne.n	3e42 <__aeabi_dadd+0x3a>
    3e40:	e0ae      	b.n	3fa0 <__aeabi_dadd+0x198>
    3e42:	1a35      	subs	r5, r6, r0
    3e44:	2d00      	cmp	r5, #0
    3e46:	dc00      	bgt.n	3e4a <__aeabi_dadd+0x42>
    3e48:	e0f6      	b.n	4038 <__aeabi_dadd+0x230>
    3e4a:	2800      	cmp	r0, #0
    3e4c:	d10f      	bne.n	3e6e <__aeabi_dadd+0x66>
    3e4e:	4313      	orrs	r3, r2
    3e50:	d100      	bne.n	3e54 <__aeabi_dadd+0x4c>
    3e52:	e0db      	b.n	400c <__aeabi_dadd+0x204>
    3e54:	1e6b      	subs	r3, r5, #1
    3e56:	2b00      	cmp	r3, #0
    3e58:	d000      	beq.n	3e5c <__aeabi_dadd+0x54>
    3e5a:	e137      	b.n	40cc <__aeabi_dadd+0x2c4>
    3e5c:	1aba      	subs	r2, r7, r2
    3e5e:	4297      	cmp	r7, r2
    3e60:	41bf      	sbcs	r7, r7
    3e62:	1a64      	subs	r4, r4, r1
    3e64:	427f      	negs	r7, r7
    3e66:	1be4      	subs	r4, r4, r7
    3e68:	2601      	movs	r6, #1
    3e6a:	0017      	movs	r7, r2
    3e6c:	e024      	b.n	3eb8 <__aeabi_dadd+0xb0>
    3e6e:	4bc6      	ldr	r3, [pc, #792]	; (4188 <__aeabi_dadd+0x380>)
    3e70:	429e      	cmp	r6, r3
    3e72:	d04d      	beq.n	3f10 <__aeabi_dadd+0x108>
    3e74:	2380      	movs	r3, #128	; 0x80
    3e76:	041b      	lsls	r3, r3, #16
    3e78:	4319      	orrs	r1, r3
    3e7a:	2d38      	cmp	r5, #56	; 0x38
    3e7c:	dd00      	ble.n	3e80 <__aeabi_dadd+0x78>
    3e7e:	e107      	b.n	4090 <__aeabi_dadd+0x288>
    3e80:	2d1f      	cmp	r5, #31
    3e82:	dd00      	ble.n	3e86 <__aeabi_dadd+0x7e>
    3e84:	e138      	b.n	40f8 <__aeabi_dadd+0x2f0>
    3e86:	2020      	movs	r0, #32
    3e88:	1b43      	subs	r3, r0, r5
    3e8a:	469a      	mov	sl, r3
    3e8c:	000b      	movs	r3, r1
    3e8e:	4650      	mov	r0, sl
    3e90:	4083      	lsls	r3, r0
    3e92:	4699      	mov	r9, r3
    3e94:	0013      	movs	r3, r2
    3e96:	4648      	mov	r0, r9
    3e98:	40eb      	lsrs	r3, r5
    3e9a:	4318      	orrs	r0, r3
    3e9c:	0003      	movs	r3, r0
    3e9e:	4650      	mov	r0, sl
    3ea0:	4082      	lsls	r2, r0
    3ea2:	1e50      	subs	r0, r2, #1
    3ea4:	4182      	sbcs	r2, r0
    3ea6:	40e9      	lsrs	r1, r5
    3ea8:	431a      	orrs	r2, r3
    3eaa:	1aba      	subs	r2, r7, r2
    3eac:	1a61      	subs	r1, r4, r1
    3eae:	4297      	cmp	r7, r2
    3eb0:	41a4      	sbcs	r4, r4
    3eb2:	0017      	movs	r7, r2
    3eb4:	4264      	negs	r4, r4
    3eb6:	1b0c      	subs	r4, r1, r4
    3eb8:	0223      	lsls	r3, r4, #8
    3eba:	d562      	bpl.n	3f82 <__aeabi_dadd+0x17a>
    3ebc:	0264      	lsls	r4, r4, #9
    3ebe:	0a65      	lsrs	r5, r4, #9
    3ec0:	2d00      	cmp	r5, #0
    3ec2:	d100      	bne.n	3ec6 <__aeabi_dadd+0xbe>
    3ec4:	e0df      	b.n	4086 <__aeabi_dadd+0x27e>
    3ec6:	0028      	movs	r0, r5
    3ec8:	f001 fcb0 	bl	582c <__clzsi2>
    3ecc:	0003      	movs	r3, r0
    3ece:	3b08      	subs	r3, #8
    3ed0:	2b1f      	cmp	r3, #31
    3ed2:	dd00      	ble.n	3ed6 <__aeabi_dadd+0xce>
    3ed4:	e0d2      	b.n	407c <__aeabi_dadd+0x274>
    3ed6:	2220      	movs	r2, #32
    3ed8:	003c      	movs	r4, r7
    3eda:	1ad2      	subs	r2, r2, r3
    3edc:	409d      	lsls	r5, r3
    3ede:	40d4      	lsrs	r4, r2
    3ee0:	409f      	lsls	r7, r3
    3ee2:	4325      	orrs	r5, r4
    3ee4:	429e      	cmp	r6, r3
    3ee6:	dd00      	ble.n	3eea <__aeabi_dadd+0xe2>
    3ee8:	e0c4      	b.n	4074 <__aeabi_dadd+0x26c>
    3eea:	1b9e      	subs	r6, r3, r6
    3eec:	1c73      	adds	r3, r6, #1
    3eee:	2b1f      	cmp	r3, #31
    3ef0:	dd00      	ble.n	3ef4 <__aeabi_dadd+0xec>
    3ef2:	e0f1      	b.n	40d8 <__aeabi_dadd+0x2d0>
    3ef4:	2220      	movs	r2, #32
    3ef6:	0038      	movs	r0, r7
    3ef8:	0029      	movs	r1, r5
    3efa:	1ad2      	subs	r2, r2, r3
    3efc:	40d8      	lsrs	r0, r3
    3efe:	4091      	lsls	r1, r2
    3f00:	4097      	lsls	r7, r2
    3f02:	002c      	movs	r4, r5
    3f04:	4301      	orrs	r1, r0
    3f06:	1e78      	subs	r0, r7, #1
    3f08:	4187      	sbcs	r7, r0
    3f0a:	40dc      	lsrs	r4, r3
    3f0c:	2600      	movs	r6, #0
    3f0e:	430f      	orrs	r7, r1
    3f10:	077b      	lsls	r3, r7, #29
    3f12:	d009      	beq.n	3f28 <__aeabi_dadd+0x120>
    3f14:	230f      	movs	r3, #15
    3f16:	403b      	ands	r3, r7
    3f18:	2b04      	cmp	r3, #4
    3f1a:	d005      	beq.n	3f28 <__aeabi_dadd+0x120>
    3f1c:	1d3b      	adds	r3, r7, #4
    3f1e:	42bb      	cmp	r3, r7
    3f20:	41bf      	sbcs	r7, r7
    3f22:	427f      	negs	r7, r7
    3f24:	19e4      	adds	r4, r4, r7
    3f26:	001f      	movs	r7, r3
    3f28:	0223      	lsls	r3, r4, #8
    3f2a:	d52c      	bpl.n	3f86 <__aeabi_dadd+0x17e>
    3f2c:	4b96      	ldr	r3, [pc, #600]	; (4188 <__aeabi_dadd+0x380>)
    3f2e:	3601      	adds	r6, #1
    3f30:	429e      	cmp	r6, r3
    3f32:	d100      	bne.n	3f36 <__aeabi_dadd+0x12e>
    3f34:	e09a      	b.n	406c <__aeabi_dadd+0x264>
    3f36:	4645      	mov	r5, r8
    3f38:	4b94      	ldr	r3, [pc, #592]	; (418c <__aeabi_dadd+0x384>)
    3f3a:	08ff      	lsrs	r7, r7, #3
    3f3c:	401c      	ands	r4, r3
    3f3e:	0760      	lsls	r0, r4, #29
    3f40:	0576      	lsls	r6, r6, #21
    3f42:	0264      	lsls	r4, r4, #9
    3f44:	4307      	orrs	r7, r0
    3f46:	0b24      	lsrs	r4, r4, #12
    3f48:	0d76      	lsrs	r6, r6, #21
    3f4a:	2100      	movs	r1, #0
    3f4c:	0324      	lsls	r4, r4, #12
    3f4e:	0b23      	lsrs	r3, r4, #12
    3f50:	0d0c      	lsrs	r4, r1, #20
    3f52:	4a8f      	ldr	r2, [pc, #572]	; (4190 <__aeabi_dadd+0x388>)
    3f54:	0524      	lsls	r4, r4, #20
    3f56:	431c      	orrs	r4, r3
    3f58:	4014      	ands	r4, r2
    3f5a:	0533      	lsls	r3, r6, #20
    3f5c:	4323      	orrs	r3, r4
    3f5e:	005b      	lsls	r3, r3, #1
    3f60:	07ed      	lsls	r5, r5, #31
    3f62:	085b      	lsrs	r3, r3, #1
    3f64:	432b      	orrs	r3, r5
    3f66:	0038      	movs	r0, r7
    3f68:	0019      	movs	r1, r3
    3f6a:	bc3c      	pop	{r2, r3, r4, r5}
    3f6c:	4690      	mov	r8, r2
    3f6e:	4699      	mov	r9, r3
    3f70:	46a2      	mov	sl, r4
    3f72:	46ab      	mov	fp, r5
    3f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f76:	4664      	mov	r4, ip
    3f78:	4304      	orrs	r4, r0
    3f7a:	d100      	bne.n	3f7e <__aeabi_dadd+0x176>
    3f7c:	e211      	b.n	43a2 <__aeabi_dadd+0x59a>
    3f7e:	0004      	movs	r4, r0
    3f80:	4667      	mov	r7, ip
    3f82:	077b      	lsls	r3, r7, #29
    3f84:	d1c6      	bne.n	3f14 <__aeabi_dadd+0x10c>
    3f86:	4645      	mov	r5, r8
    3f88:	0760      	lsls	r0, r4, #29
    3f8a:	08ff      	lsrs	r7, r7, #3
    3f8c:	4307      	orrs	r7, r0
    3f8e:	08e4      	lsrs	r4, r4, #3
    3f90:	4b7d      	ldr	r3, [pc, #500]	; (4188 <__aeabi_dadd+0x380>)
    3f92:	429e      	cmp	r6, r3
    3f94:	d030      	beq.n	3ff8 <__aeabi_dadd+0x1f0>
    3f96:	0324      	lsls	r4, r4, #12
    3f98:	0576      	lsls	r6, r6, #21
    3f9a:	0b24      	lsrs	r4, r4, #12
    3f9c:	0d76      	lsrs	r6, r6, #21
    3f9e:	e7d4      	b.n	3f4a <__aeabi_dadd+0x142>
    3fa0:	1a33      	subs	r3, r6, r0
    3fa2:	469a      	mov	sl, r3
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	dd78      	ble.n	409a <__aeabi_dadd+0x292>
    3fa8:	2800      	cmp	r0, #0
    3faa:	d031      	beq.n	4010 <__aeabi_dadd+0x208>
    3fac:	4876      	ldr	r0, [pc, #472]	; (4188 <__aeabi_dadd+0x380>)
    3fae:	4286      	cmp	r6, r0
    3fb0:	d0ae      	beq.n	3f10 <__aeabi_dadd+0x108>
    3fb2:	2080      	movs	r0, #128	; 0x80
    3fb4:	0400      	lsls	r0, r0, #16
    3fb6:	4301      	orrs	r1, r0
    3fb8:	4653      	mov	r3, sl
    3fba:	2b38      	cmp	r3, #56	; 0x38
    3fbc:	dc00      	bgt.n	3fc0 <__aeabi_dadd+0x1b8>
    3fbe:	e0e9      	b.n	4194 <__aeabi_dadd+0x38c>
    3fc0:	430a      	orrs	r2, r1
    3fc2:	1e51      	subs	r1, r2, #1
    3fc4:	418a      	sbcs	r2, r1
    3fc6:	2100      	movs	r1, #0
    3fc8:	19d2      	adds	r2, r2, r7
    3fca:	42ba      	cmp	r2, r7
    3fcc:	41bf      	sbcs	r7, r7
    3fce:	1909      	adds	r1, r1, r4
    3fd0:	427c      	negs	r4, r7
    3fd2:	0017      	movs	r7, r2
    3fd4:	190c      	adds	r4, r1, r4
    3fd6:	0223      	lsls	r3, r4, #8
    3fd8:	d5d3      	bpl.n	3f82 <__aeabi_dadd+0x17a>
    3fda:	4b6b      	ldr	r3, [pc, #428]	; (4188 <__aeabi_dadd+0x380>)
    3fdc:	3601      	adds	r6, #1
    3fde:	429e      	cmp	r6, r3
    3fe0:	d100      	bne.n	3fe4 <__aeabi_dadd+0x1dc>
    3fe2:	e13a      	b.n	425a <__aeabi_dadd+0x452>
    3fe4:	2001      	movs	r0, #1
    3fe6:	4b69      	ldr	r3, [pc, #420]	; (418c <__aeabi_dadd+0x384>)
    3fe8:	401c      	ands	r4, r3
    3fea:	087b      	lsrs	r3, r7, #1
    3fec:	4007      	ands	r7, r0
    3fee:	431f      	orrs	r7, r3
    3ff0:	07e0      	lsls	r0, r4, #31
    3ff2:	4307      	orrs	r7, r0
    3ff4:	0864      	lsrs	r4, r4, #1
    3ff6:	e78b      	b.n	3f10 <__aeabi_dadd+0x108>
    3ff8:	0023      	movs	r3, r4
    3ffa:	433b      	orrs	r3, r7
    3ffc:	d100      	bne.n	4000 <__aeabi_dadd+0x1f8>
    3ffe:	e1cb      	b.n	4398 <__aeabi_dadd+0x590>
    4000:	2280      	movs	r2, #128	; 0x80
    4002:	0312      	lsls	r2, r2, #12
    4004:	4314      	orrs	r4, r2
    4006:	0324      	lsls	r4, r4, #12
    4008:	0b24      	lsrs	r4, r4, #12
    400a:	e79e      	b.n	3f4a <__aeabi_dadd+0x142>
    400c:	002e      	movs	r6, r5
    400e:	e77f      	b.n	3f10 <__aeabi_dadd+0x108>
    4010:	0008      	movs	r0, r1
    4012:	4310      	orrs	r0, r2
    4014:	d100      	bne.n	4018 <__aeabi_dadd+0x210>
    4016:	e0b4      	b.n	4182 <__aeabi_dadd+0x37a>
    4018:	1e58      	subs	r0, r3, #1
    401a:	2800      	cmp	r0, #0
    401c:	d000      	beq.n	4020 <__aeabi_dadd+0x218>
    401e:	e0de      	b.n	41de <__aeabi_dadd+0x3d6>
    4020:	18ba      	adds	r2, r7, r2
    4022:	42ba      	cmp	r2, r7
    4024:	419b      	sbcs	r3, r3
    4026:	1864      	adds	r4, r4, r1
    4028:	425b      	negs	r3, r3
    402a:	18e4      	adds	r4, r4, r3
    402c:	0017      	movs	r7, r2
    402e:	2601      	movs	r6, #1
    4030:	0223      	lsls	r3, r4, #8
    4032:	d5a6      	bpl.n	3f82 <__aeabi_dadd+0x17a>
    4034:	2602      	movs	r6, #2
    4036:	e7d5      	b.n	3fe4 <__aeabi_dadd+0x1dc>
    4038:	2d00      	cmp	r5, #0
    403a:	d16e      	bne.n	411a <__aeabi_dadd+0x312>
    403c:	1c70      	adds	r0, r6, #1
    403e:	0540      	lsls	r0, r0, #21
    4040:	0d40      	lsrs	r0, r0, #21
    4042:	2801      	cmp	r0, #1
    4044:	dc00      	bgt.n	4048 <__aeabi_dadd+0x240>
    4046:	e0f9      	b.n	423c <__aeabi_dadd+0x434>
    4048:	1ab8      	subs	r0, r7, r2
    404a:	4684      	mov	ip, r0
    404c:	4287      	cmp	r7, r0
    404e:	4180      	sbcs	r0, r0
    4050:	1ae5      	subs	r5, r4, r3
    4052:	4240      	negs	r0, r0
    4054:	1a2d      	subs	r5, r5, r0
    4056:	0228      	lsls	r0, r5, #8
    4058:	d400      	bmi.n	405c <__aeabi_dadd+0x254>
    405a:	e089      	b.n	4170 <__aeabi_dadd+0x368>
    405c:	1bd7      	subs	r7, r2, r7
    405e:	42ba      	cmp	r2, r7
    4060:	4192      	sbcs	r2, r2
    4062:	1b1c      	subs	r4, r3, r4
    4064:	4252      	negs	r2, r2
    4066:	1aa5      	subs	r5, r4, r2
    4068:	46d8      	mov	r8, fp
    406a:	e729      	b.n	3ec0 <__aeabi_dadd+0xb8>
    406c:	4645      	mov	r5, r8
    406e:	2400      	movs	r4, #0
    4070:	2700      	movs	r7, #0
    4072:	e76a      	b.n	3f4a <__aeabi_dadd+0x142>
    4074:	4c45      	ldr	r4, [pc, #276]	; (418c <__aeabi_dadd+0x384>)
    4076:	1af6      	subs	r6, r6, r3
    4078:	402c      	ands	r4, r5
    407a:	e749      	b.n	3f10 <__aeabi_dadd+0x108>
    407c:	003d      	movs	r5, r7
    407e:	3828      	subs	r0, #40	; 0x28
    4080:	4085      	lsls	r5, r0
    4082:	2700      	movs	r7, #0
    4084:	e72e      	b.n	3ee4 <__aeabi_dadd+0xdc>
    4086:	0038      	movs	r0, r7
    4088:	f001 fbd0 	bl	582c <__clzsi2>
    408c:	3020      	adds	r0, #32
    408e:	e71d      	b.n	3ecc <__aeabi_dadd+0xc4>
    4090:	430a      	orrs	r2, r1
    4092:	1e51      	subs	r1, r2, #1
    4094:	418a      	sbcs	r2, r1
    4096:	2100      	movs	r1, #0
    4098:	e707      	b.n	3eaa <__aeabi_dadd+0xa2>
    409a:	2b00      	cmp	r3, #0
    409c:	d000      	beq.n	40a0 <__aeabi_dadd+0x298>
    409e:	e0f3      	b.n	4288 <__aeabi_dadd+0x480>
    40a0:	1c70      	adds	r0, r6, #1
    40a2:	0543      	lsls	r3, r0, #21
    40a4:	0d5b      	lsrs	r3, r3, #21
    40a6:	2b01      	cmp	r3, #1
    40a8:	dc00      	bgt.n	40ac <__aeabi_dadd+0x2a4>
    40aa:	e0ad      	b.n	4208 <__aeabi_dadd+0x400>
    40ac:	4b36      	ldr	r3, [pc, #216]	; (4188 <__aeabi_dadd+0x380>)
    40ae:	4298      	cmp	r0, r3
    40b0:	d100      	bne.n	40b4 <__aeabi_dadd+0x2ac>
    40b2:	e0d1      	b.n	4258 <__aeabi_dadd+0x450>
    40b4:	18ba      	adds	r2, r7, r2
    40b6:	42ba      	cmp	r2, r7
    40b8:	41bf      	sbcs	r7, r7
    40ba:	1864      	adds	r4, r4, r1
    40bc:	427f      	negs	r7, r7
    40be:	19e4      	adds	r4, r4, r7
    40c0:	07e7      	lsls	r7, r4, #31
    40c2:	0852      	lsrs	r2, r2, #1
    40c4:	4317      	orrs	r7, r2
    40c6:	0864      	lsrs	r4, r4, #1
    40c8:	0006      	movs	r6, r0
    40ca:	e721      	b.n	3f10 <__aeabi_dadd+0x108>
    40cc:	482e      	ldr	r0, [pc, #184]	; (4188 <__aeabi_dadd+0x380>)
    40ce:	4285      	cmp	r5, r0
    40d0:	d100      	bne.n	40d4 <__aeabi_dadd+0x2cc>
    40d2:	e093      	b.n	41fc <__aeabi_dadd+0x3f4>
    40d4:	001d      	movs	r5, r3
    40d6:	e6d0      	b.n	3e7a <__aeabi_dadd+0x72>
    40d8:	0029      	movs	r1, r5
    40da:	3e1f      	subs	r6, #31
    40dc:	40f1      	lsrs	r1, r6
    40de:	2b20      	cmp	r3, #32
    40e0:	d100      	bne.n	40e4 <__aeabi_dadd+0x2dc>
    40e2:	e08d      	b.n	4200 <__aeabi_dadd+0x3f8>
    40e4:	2240      	movs	r2, #64	; 0x40
    40e6:	1ad3      	subs	r3, r2, r3
    40e8:	409d      	lsls	r5, r3
    40ea:	432f      	orrs	r7, r5
    40ec:	1e7d      	subs	r5, r7, #1
    40ee:	41af      	sbcs	r7, r5
    40f0:	2400      	movs	r4, #0
    40f2:	430f      	orrs	r7, r1
    40f4:	2600      	movs	r6, #0
    40f6:	e744      	b.n	3f82 <__aeabi_dadd+0x17a>
    40f8:	002b      	movs	r3, r5
    40fa:	0008      	movs	r0, r1
    40fc:	3b20      	subs	r3, #32
    40fe:	40d8      	lsrs	r0, r3
    4100:	0003      	movs	r3, r0
    4102:	2d20      	cmp	r5, #32
    4104:	d100      	bne.n	4108 <__aeabi_dadd+0x300>
    4106:	e07d      	b.n	4204 <__aeabi_dadd+0x3fc>
    4108:	2040      	movs	r0, #64	; 0x40
    410a:	1b45      	subs	r5, r0, r5
    410c:	40a9      	lsls	r1, r5
    410e:	430a      	orrs	r2, r1
    4110:	1e51      	subs	r1, r2, #1
    4112:	418a      	sbcs	r2, r1
    4114:	2100      	movs	r1, #0
    4116:	431a      	orrs	r2, r3
    4118:	e6c7      	b.n	3eaa <__aeabi_dadd+0xa2>
    411a:	2e00      	cmp	r6, #0
    411c:	d050      	beq.n	41c0 <__aeabi_dadd+0x3b8>
    411e:	4e1a      	ldr	r6, [pc, #104]	; (4188 <__aeabi_dadd+0x380>)
    4120:	42b0      	cmp	r0, r6
    4122:	d057      	beq.n	41d4 <__aeabi_dadd+0x3cc>
    4124:	2680      	movs	r6, #128	; 0x80
    4126:	426b      	negs	r3, r5
    4128:	4699      	mov	r9, r3
    412a:	0436      	lsls	r6, r6, #16
    412c:	4334      	orrs	r4, r6
    412e:	464b      	mov	r3, r9
    4130:	2b38      	cmp	r3, #56	; 0x38
    4132:	dd00      	ble.n	4136 <__aeabi_dadd+0x32e>
    4134:	e0d6      	b.n	42e4 <__aeabi_dadd+0x4dc>
    4136:	2b1f      	cmp	r3, #31
    4138:	dd00      	ble.n	413c <__aeabi_dadd+0x334>
    413a:	e135      	b.n	43a8 <__aeabi_dadd+0x5a0>
    413c:	2620      	movs	r6, #32
    413e:	1af5      	subs	r5, r6, r3
    4140:	0026      	movs	r6, r4
    4142:	40ae      	lsls	r6, r5
    4144:	46b2      	mov	sl, r6
    4146:	003e      	movs	r6, r7
    4148:	40de      	lsrs	r6, r3
    414a:	46ac      	mov	ip, r5
    414c:	0035      	movs	r5, r6
    414e:	4656      	mov	r6, sl
    4150:	432e      	orrs	r6, r5
    4152:	4665      	mov	r5, ip
    4154:	40af      	lsls	r7, r5
    4156:	1e7d      	subs	r5, r7, #1
    4158:	41af      	sbcs	r7, r5
    415a:	40dc      	lsrs	r4, r3
    415c:	4337      	orrs	r7, r6
    415e:	1bd7      	subs	r7, r2, r7
    4160:	42ba      	cmp	r2, r7
    4162:	4192      	sbcs	r2, r2
    4164:	1b0c      	subs	r4, r1, r4
    4166:	4252      	negs	r2, r2
    4168:	1aa4      	subs	r4, r4, r2
    416a:	0006      	movs	r6, r0
    416c:	46d8      	mov	r8, fp
    416e:	e6a3      	b.n	3eb8 <__aeabi_dadd+0xb0>
    4170:	4664      	mov	r4, ip
    4172:	4667      	mov	r7, ip
    4174:	432c      	orrs	r4, r5
    4176:	d000      	beq.n	417a <__aeabi_dadd+0x372>
    4178:	e6a2      	b.n	3ec0 <__aeabi_dadd+0xb8>
    417a:	2500      	movs	r5, #0
    417c:	2600      	movs	r6, #0
    417e:	2700      	movs	r7, #0
    4180:	e706      	b.n	3f90 <__aeabi_dadd+0x188>
    4182:	001e      	movs	r6, r3
    4184:	e6c4      	b.n	3f10 <__aeabi_dadd+0x108>
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	000007ff 	.word	0x000007ff
    418c:	ff7fffff 	.word	0xff7fffff
    4190:	800fffff 	.word	0x800fffff
    4194:	2b1f      	cmp	r3, #31
    4196:	dc63      	bgt.n	4260 <__aeabi_dadd+0x458>
    4198:	2020      	movs	r0, #32
    419a:	1ac3      	subs	r3, r0, r3
    419c:	0008      	movs	r0, r1
    419e:	4098      	lsls	r0, r3
    41a0:	469c      	mov	ip, r3
    41a2:	4683      	mov	fp, r0
    41a4:	4653      	mov	r3, sl
    41a6:	0010      	movs	r0, r2
    41a8:	40d8      	lsrs	r0, r3
    41aa:	0003      	movs	r3, r0
    41ac:	4658      	mov	r0, fp
    41ae:	4318      	orrs	r0, r3
    41b0:	4663      	mov	r3, ip
    41b2:	409a      	lsls	r2, r3
    41b4:	1e53      	subs	r3, r2, #1
    41b6:	419a      	sbcs	r2, r3
    41b8:	4653      	mov	r3, sl
    41ba:	4302      	orrs	r2, r0
    41bc:	40d9      	lsrs	r1, r3
    41be:	e703      	b.n	3fc8 <__aeabi_dadd+0x1c0>
    41c0:	0026      	movs	r6, r4
    41c2:	433e      	orrs	r6, r7
    41c4:	d006      	beq.n	41d4 <__aeabi_dadd+0x3cc>
    41c6:	43eb      	mvns	r3, r5
    41c8:	4699      	mov	r9, r3
    41ca:	2b00      	cmp	r3, #0
    41cc:	d0c7      	beq.n	415e <__aeabi_dadd+0x356>
    41ce:	4e94      	ldr	r6, [pc, #592]	; (4420 <__aeabi_dadd+0x618>)
    41d0:	42b0      	cmp	r0, r6
    41d2:	d1ac      	bne.n	412e <__aeabi_dadd+0x326>
    41d4:	000c      	movs	r4, r1
    41d6:	0017      	movs	r7, r2
    41d8:	0006      	movs	r6, r0
    41da:	46d8      	mov	r8, fp
    41dc:	e698      	b.n	3f10 <__aeabi_dadd+0x108>
    41de:	4b90      	ldr	r3, [pc, #576]	; (4420 <__aeabi_dadd+0x618>)
    41e0:	459a      	cmp	sl, r3
    41e2:	d00b      	beq.n	41fc <__aeabi_dadd+0x3f4>
    41e4:	4682      	mov	sl, r0
    41e6:	e6e7      	b.n	3fb8 <__aeabi_dadd+0x1b0>
    41e8:	2800      	cmp	r0, #0
    41ea:	d000      	beq.n	41ee <__aeabi_dadd+0x3e6>
    41ec:	e09e      	b.n	432c <__aeabi_dadd+0x524>
    41ee:	0018      	movs	r0, r3
    41f0:	4310      	orrs	r0, r2
    41f2:	d100      	bne.n	41f6 <__aeabi_dadd+0x3ee>
    41f4:	e0e9      	b.n	43ca <__aeabi_dadd+0x5c2>
    41f6:	001c      	movs	r4, r3
    41f8:	0017      	movs	r7, r2
    41fa:	46d8      	mov	r8, fp
    41fc:	4e88      	ldr	r6, [pc, #544]	; (4420 <__aeabi_dadd+0x618>)
    41fe:	e687      	b.n	3f10 <__aeabi_dadd+0x108>
    4200:	2500      	movs	r5, #0
    4202:	e772      	b.n	40ea <__aeabi_dadd+0x2e2>
    4204:	2100      	movs	r1, #0
    4206:	e782      	b.n	410e <__aeabi_dadd+0x306>
    4208:	0023      	movs	r3, r4
    420a:	433b      	orrs	r3, r7
    420c:	2e00      	cmp	r6, #0
    420e:	d000      	beq.n	4212 <__aeabi_dadd+0x40a>
    4210:	e0ab      	b.n	436a <__aeabi_dadd+0x562>
    4212:	2b00      	cmp	r3, #0
    4214:	d100      	bne.n	4218 <__aeabi_dadd+0x410>
    4216:	e0e7      	b.n	43e8 <__aeabi_dadd+0x5e0>
    4218:	000b      	movs	r3, r1
    421a:	4313      	orrs	r3, r2
    421c:	d100      	bne.n	4220 <__aeabi_dadd+0x418>
    421e:	e677      	b.n	3f10 <__aeabi_dadd+0x108>
    4220:	18ba      	adds	r2, r7, r2
    4222:	42ba      	cmp	r2, r7
    4224:	41bf      	sbcs	r7, r7
    4226:	1864      	adds	r4, r4, r1
    4228:	427f      	negs	r7, r7
    422a:	19e4      	adds	r4, r4, r7
    422c:	0223      	lsls	r3, r4, #8
    422e:	d400      	bmi.n	4232 <__aeabi_dadd+0x42a>
    4230:	e0f2      	b.n	4418 <__aeabi_dadd+0x610>
    4232:	4b7c      	ldr	r3, [pc, #496]	; (4424 <__aeabi_dadd+0x61c>)
    4234:	0017      	movs	r7, r2
    4236:	401c      	ands	r4, r3
    4238:	0006      	movs	r6, r0
    423a:	e669      	b.n	3f10 <__aeabi_dadd+0x108>
    423c:	0020      	movs	r0, r4
    423e:	4338      	orrs	r0, r7
    4240:	2e00      	cmp	r6, #0
    4242:	d1d1      	bne.n	41e8 <__aeabi_dadd+0x3e0>
    4244:	2800      	cmp	r0, #0
    4246:	d15b      	bne.n	4300 <__aeabi_dadd+0x4f8>
    4248:	001c      	movs	r4, r3
    424a:	4314      	orrs	r4, r2
    424c:	d100      	bne.n	4250 <__aeabi_dadd+0x448>
    424e:	e0a8      	b.n	43a2 <__aeabi_dadd+0x59a>
    4250:	001c      	movs	r4, r3
    4252:	0017      	movs	r7, r2
    4254:	46d8      	mov	r8, fp
    4256:	e65b      	b.n	3f10 <__aeabi_dadd+0x108>
    4258:	0006      	movs	r6, r0
    425a:	2400      	movs	r4, #0
    425c:	2700      	movs	r7, #0
    425e:	e697      	b.n	3f90 <__aeabi_dadd+0x188>
    4260:	4650      	mov	r0, sl
    4262:	000b      	movs	r3, r1
    4264:	3820      	subs	r0, #32
    4266:	40c3      	lsrs	r3, r0
    4268:	4699      	mov	r9, r3
    426a:	4653      	mov	r3, sl
    426c:	2b20      	cmp	r3, #32
    426e:	d100      	bne.n	4272 <__aeabi_dadd+0x46a>
    4270:	e095      	b.n	439e <__aeabi_dadd+0x596>
    4272:	2340      	movs	r3, #64	; 0x40
    4274:	4650      	mov	r0, sl
    4276:	1a1b      	subs	r3, r3, r0
    4278:	4099      	lsls	r1, r3
    427a:	430a      	orrs	r2, r1
    427c:	1e51      	subs	r1, r2, #1
    427e:	418a      	sbcs	r2, r1
    4280:	464b      	mov	r3, r9
    4282:	2100      	movs	r1, #0
    4284:	431a      	orrs	r2, r3
    4286:	e69f      	b.n	3fc8 <__aeabi_dadd+0x1c0>
    4288:	2e00      	cmp	r6, #0
    428a:	d130      	bne.n	42ee <__aeabi_dadd+0x4e6>
    428c:	0026      	movs	r6, r4
    428e:	433e      	orrs	r6, r7
    4290:	d067      	beq.n	4362 <__aeabi_dadd+0x55a>
    4292:	43db      	mvns	r3, r3
    4294:	469a      	mov	sl, r3
    4296:	2b00      	cmp	r3, #0
    4298:	d01c      	beq.n	42d4 <__aeabi_dadd+0x4cc>
    429a:	4e61      	ldr	r6, [pc, #388]	; (4420 <__aeabi_dadd+0x618>)
    429c:	42b0      	cmp	r0, r6
    429e:	d060      	beq.n	4362 <__aeabi_dadd+0x55a>
    42a0:	4653      	mov	r3, sl
    42a2:	2b38      	cmp	r3, #56	; 0x38
    42a4:	dd00      	ble.n	42a8 <__aeabi_dadd+0x4a0>
    42a6:	e096      	b.n	43d6 <__aeabi_dadd+0x5ce>
    42a8:	2b1f      	cmp	r3, #31
    42aa:	dd00      	ble.n	42ae <__aeabi_dadd+0x4a6>
    42ac:	e09f      	b.n	43ee <__aeabi_dadd+0x5e6>
    42ae:	2620      	movs	r6, #32
    42b0:	1af3      	subs	r3, r6, r3
    42b2:	0026      	movs	r6, r4
    42b4:	409e      	lsls	r6, r3
    42b6:	469c      	mov	ip, r3
    42b8:	46b3      	mov	fp, r6
    42ba:	4653      	mov	r3, sl
    42bc:	003e      	movs	r6, r7
    42be:	40de      	lsrs	r6, r3
    42c0:	0033      	movs	r3, r6
    42c2:	465e      	mov	r6, fp
    42c4:	431e      	orrs	r6, r3
    42c6:	4663      	mov	r3, ip
    42c8:	409f      	lsls	r7, r3
    42ca:	1e7b      	subs	r3, r7, #1
    42cc:	419f      	sbcs	r7, r3
    42ce:	4653      	mov	r3, sl
    42d0:	40dc      	lsrs	r4, r3
    42d2:	4337      	orrs	r7, r6
    42d4:	18bf      	adds	r7, r7, r2
    42d6:	4297      	cmp	r7, r2
    42d8:	4192      	sbcs	r2, r2
    42da:	1864      	adds	r4, r4, r1
    42dc:	4252      	negs	r2, r2
    42de:	18a4      	adds	r4, r4, r2
    42e0:	0006      	movs	r6, r0
    42e2:	e678      	b.n	3fd6 <__aeabi_dadd+0x1ce>
    42e4:	4327      	orrs	r7, r4
    42e6:	1e7c      	subs	r4, r7, #1
    42e8:	41a7      	sbcs	r7, r4
    42ea:	2400      	movs	r4, #0
    42ec:	e737      	b.n	415e <__aeabi_dadd+0x356>
    42ee:	4e4c      	ldr	r6, [pc, #304]	; (4420 <__aeabi_dadd+0x618>)
    42f0:	42b0      	cmp	r0, r6
    42f2:	d036      	beq.n	4362 <__aeabi_dadd+0x55a>
    42f4:	2680      	movs	r6, #128	; 0x80
    42f6:	425b      	negs	r3, r3
    42f8:	0436      	lsls	r6, r6, #16
    42fa:	469a      	mov	sl, r3
    42fc:	4334      	orrs	r4, r6
    42fe:	e7cf      	b.n	42a0 <__aeabi_dadd+0x498>
    4300:	0018      	movs	r0, r3
    4302:	4310      	orrs	r0, r2
    4304:	d100      	bne.n	4308 <__aeabi_dadd+0x500>
    4306:	e603      	b.n	3f10 <__aeabi_dadd+0x108>
    4308:	1ab8      	subs	r0, r7, r2
    430a:	4684      	mov	ip, r0
    430c:	4567      	cmp	r7, ip
    430e:	41ad      	sbcs	r5, r5
    4310:	1ae0      	subs	r0, r4, r3
    4312:	426d      	negs	r5, r5
    4314:	1b40      	subs	r0, r0, r5
    4316:	0205      	lsls	r5, r0, #8
    4318:	d400      	bmi.n	431c <__aeabi_dadd+0x514>
    431a:	e62c      	b.n	3f76 <__aeabi_dadd+0x16e>
    431c:	1bd7      	subs	r7, r2, r7
    431e:	42ba      	cmp	r2, r7
    4320:	4192      	sbcs	r2, r2
    4322:	1b1c      	subs	r4, r3, r4
    4324:	4252      	negs	r2, r2
    4326:	1aa4      	subs	r4, r4, r2
    4328:	46d8      	mov	r8, fp
    432a:	e5f1      	b.n	3f10 <__aeabi_dadd+0x108>
    432c:	0018      	movs	r0, r3
    432e:	4310      	orrs	r0, r2
    4330:	d100      	bne.n	4334 <__aeabi_dadd+0x52c>
    4332:	e763      	b.n	41fc <__aeabi_dadd+0x3f4>
    4334:	08f8      	lsrs	r0, r7, #3
    4336:	0767      	lsls	r7, r4, #29
    4338:	4307      	orrs	r7, r0
    433a:	2080      	movs	r0, #128	; 0x80
    433c:	08e4      	lsrs	r4, r4, #3
    433e:	0300      	lsls	r0, r0, #12
    4340:	4204      	tst	r4, r0
    4342:	d008      	beq.n	4356 <__aeabi_dadd+0x54e>
    4344:	08dd      	lsrs	r5, r3, #3
    4346:	4205      	tst	r5, r0
    4348:	d105      	bne.n	4356 <__aeabi_dadd+0x54e>
    434a:	08d2      	lsrs	r2, r2, #3
    434c:	0759      	lsls	r1, r3, #29
    434e:	4311      	orrs	r1, r2
    4350:	000f      	movs	r7, r1
    4352:	002c      	movs	r4, r5
    4354:	46d8      	mov	r8, fp
    4356:	0f7b      	lsrs	r3, r7, #29
    4358:	00e4      	lsls	r4, r4, #3
    435a:	431c      	orrs	r4, r3
    435c:	00ff      	lsls	r7, r7, #3
    435e:	4e30      	ldr	r6, [pc, #192]	; (4420 <__aeabi_dadd+0x618>)
    4360:	e5d6      	b.n	3f10 <__aeabi_dadd+0x108>
    4362:	000c      	movs	r4, r1
    4364:	0017      	movs	r7, r2
    4366:	0006      	movs	r6, r0
    4368:	e5d2      	b.n	3f10 <__aeabi_dadd+0x108>
    436a:	2b00      	cmp	r3, #0
    436c:	d038      	beq.n	43e0 <__aeabi_dadd+0x5d8>
    436e:	000b      	movs	r3, r1
    4370:	4313      	orrs	r3, r2
    4372:	d100      	bne.n	4376 <__aeabi_dadd+0x56e>
    4374:	e742      	b.n	41fc <__aeabi_dadd+0x3f4>
    4376:	08f8      	lsrs	r0, r7, #3
    4378:	0767      	lsls	r7, r4, #29
    437a:	4307      	orrs	r7, r0
    437c:	2080      	movs	r0, #128	; 0x80
    437e:	08e4      	lsrs	r4, r4, #3
    4380:	0300      	lsls	r0, r0, #12
    4382:	4204      	tst	r4, r0
    4384:	d0e7      	beq.n	4356 <__aeabi_dadd+0x54e>
    4386:	08cb      	lsrs	r3, r1, #3
    4388:	4203      	tst	r3, r0
    438a:	d1e4      	bne.n	4356 <__aeabi_dadd+0x54e>
    438c:	08d2      	lsrs	r2, r2, #3
    438e:	0749      	lsls	r1, r1, #29
    4390:	4311      	orrs	r1, r2
    4392:	000f      	movs	r7, r1
    4394:	001c      	movs	r4, r3
    4396:	e7de      	b.n	4356 <__aeabi_dadd+0x54e>
    4398:	2700      	movs	r7, #0
    439a:	2400      	movs	r4, #0
    439c:	e5d5      	b.n	3f4a <__aeabi_dadd+0x142>
    439e:	2100      	movs	r1, #0
    43a0:	e76b      	b.n	427a <__aeabi_dadd+0x472>
    43a2:	2500      	movs	r5, #0
    43a4:	2700      	movs	r7, #0
    43a6:	e5f3      	b.n	3f90 <__aeabi_dadd+0x188>
    43a8:	464e      	mov	r6, r9
    43aa:	0025      	movs	r5, r4
    43ac:	3e20      	subs	r6, #32
    43ae:	40f5      	lsrs	r5, r6
    43b0:	464b      	mov	r3, r9
    43b2:	002e      	movs	r6, r5
    43b4:	2b20      	cmp	r3, #32
    43b6:	d02d      	beq.n	4414 <__aeabi_dadd+0x60c>
    43b8:	2540      	movs	r5, #64	; 0x40
    43ba:	1aed      	subs	r5, r5, r3
    43bc:	40ac      	lsls	r4, r5
    43be:	4327      	orrs	r7, r4
    43c0:	1e7c      	subs	r4, r7, #1
    43c2:	41a7      	sbcs	r7, r4
    43c4:	2400      	movs	r4, #0
    43c6:	4337      	orrs	r7, r6
    43c8:	e6c9      	b.n	415e <__aeabi_dadd+0x356>
    43ca:	2480      	movs	r4, #128	; 0x80
    43cc:	2500      	movs	r5, #0
    43ce:	0324      	lsls	r4, r4, #12
    43d0:	4e13      	ldr	r6, [pc, #76]	; (4420 <__aeabi_dadd+0x618>)
    43d2:	2700      	movs	r7, #0
    43d4:	e5dc      	b.n	3f90 <__aeabi_dadd+0x188>
    43d6:	4327      	orrs	r7, r4
    43d8:	1e7c      	subs	r4, r7, #1
    43da:	41a7      	sbcs	r7, r4
    43dc:	2400      	movs	r4, #0
    43de:	e779      	b.n	42d4 <__aeabi_dadd+0x4cc>
    43e0:	000c      	movs	r4, r1
    43e2:	0017      	movs	r7, r2
    43e4:	4e0e      	ldr	r6, [pc, #56]	; (4420 <__aeabi_dadd+0x618>)
    43e6:	e593      	b.n	3f10 <__aeabi_dadd+0x108>
    43e8:	000c      	movs	r4, r1
    43ea:	0017      	movs	r7, r2
    43ec:	e590      	b.n	3f10 <__aeabi_dadd+0x108>
    43ee:	4656      	mov	r6, sl
    43f0:	0023      	movs	r3, r4
    43f2:	3e20      	subs	r6, #32
    43f4:	40f3      	lsrs	r3, r6
    43f6:	4699      	mov	r9, r3
    43f8:	4653      	mov	r3, sl
    43fa:	2b20      	cmp	r3, #32
    43fc:	d00e      	beq.n	441c <__aeabi_dadd+0x614>
    43fe:	2340      	movs	r3, #64	; 0x40
    4400:	4656      	mov	r6, sl
    4402:	1b9b      	subs	r3, r3, r6
    4404:	409c      	lsls	r4, r3
    4406:	4327      	orrs	r7, r4
    4408:	1e7c      	subs	r4, r7, #1
    440a:	41a7      	sbcs	r7, r4
    440c:	464b      	mov	r3, r9
    440e:	2400      	movs	r4, #0
    4410:	431f      	orrs	r7, r3
    4412:	e75f      	b.n	42d4 <__aeabi_dadd+0x4cc>
    4414:	2400      	movs	r4, #0
    4416:	e7d2      	b.n	43be <__aeabi_dadd+0x5b6>
    4418:	0017      	movs	r7, r2
    441a:	e5b2      	b.n	3f82 <__aeabi_dadd+0x17a>
    441c:	2400      	movs	r4, #0
    441e:	e7f2      	b.n	4406 <__aeabi_dadd+0x5fe>
    4420:	000007ff 	.word	0x000007ff
    4424:	ff7fffff 	.word	0xff7fffff

00004428 <__aeabi_ddiv>:
    4428:	b5f0      	push	{r4, r5, r6, r7, lr}
    442a:	4657      	mov	r7, sl
    442c:	4645      	mov	r5, r8
    442e:	46de      	mov	lr, fp
    4430:	464e      	mov	r6, r9
    4432:	b5e0      	push	{r5, r6, r7, lr}
    4434:	004c      	lsls	r4, r1, #1
    4436:	030e      	lsls	r6, r1, #12
    4438:	b087      	sub	sp, #28
    443a:	4683      	mov	fp, r0
    443c:	4692      	mov	sl, r2
    443e:	001d      	movs	r5, r3
    4440:	4680      	mov	r8, r0
    4442:	0b36      	lsrs	r6, r6, #12
    4444:	0d64      	lsrs	r4, r4, #21
    4446:	0fcf      	lsrs	r7, r1, #31
    4448:	2c00      	cmp	r4, #0
    444a:	d04f      	beq.n	44ec <__aeabi_ddiv+0xc4>
    444c:	4b6f      	ldr	r3, [pc, #444]	; (460c <__aeabi_ddiv+0x1e4>)
    444e:	429c      	cmp	r4, r3
    4450:	d035      	beq.n	44be <__aeabi_ddiv+0x96>
    4452:	2380      	movs	r3, #128	; 0x80
    4454:	0f42      	lsrs	r2, r0, #29
    4456:	041b      	lsls	r3, r3, #16
    4458:	00f6      	lsls	r6, r6, #3
    445a:	4313      	orrs	r3, r2
    445c:	4333      	orrs	r3, r6
    445e:	4699      	mov	r9, r3
    4460:	00c3      	lsls	r3, r0, #3
    4462:	4698      	mov	r8, r3
    4464:	4b6a      	ldr	r3, [pc, #424]	; (4610 <__aeabi_ddiv+0x1e8>)
    4466:	2600      	movs	r6, #0
    4468:	469c      	mov	ip, r3
    446a:	2300      	movs	r3, #0
    446c:	4464      	add	r4, ip
    446e:	9303      	str	r3, [sp, #12]
    4470:	032b      	lsls	r3, r5, #12
    4472:	0b1b      	lsrs	r3, r3, #12
    4474:	469b      	mov	fp, r3
    4476:	006b      	lsls	r3, r5, #1
    4478:	0fed      	lsrs	r5, r5, #31
    447a:	4650      	mov	r0, sl
    447c:	0d5b      	lsrs	r3, r3, #21
    447e:	9501      	str	r5, [sp, #4]
    4480:	d05e      	beq.n	4540 <__aeabi_ddiv+0x118>
    4482:	4a62      	ldr	r2, [pc, #392]	; (460c <__aeabi_ddiv+0x1e4>)
    4484:	4293      	cmp	r3, r2
    4486:	d053      	beq.n	4530 <__aeabi_ddiv+0x108>
    4488:	465a      	mov	r2, fp
    448a:	00d1      	lsls	r1, r2, #3
    448c:	2280      	movs	r2, #128	; 0x80
    448e:	0f40      	lsrs	r0, r0, #29
    4490:	0412      	lsls	r2, r2, #16
    4492:	4302      	orrs	r2, r0
    4494:	430a      	orrs	r2, r1
    4496:	4693      	mov	fp, r2
    4498:	4652      	mov	r2, sl
    449a:	00d1      	lsls	r1, r2, #3
    449c:	4a5c      	ldr	r2, [pc, #368]	; (4610 <__aeabi_ddiv+0x1e8>)
    449e:	4694      	mov	ip, r2
    44a0:	2200      	movs	r2, #0
    44a2:	4463      	add	r3, ip
    44a4:	0038      	movs	r0, r7
    44a6:	4068      	eors	r0, r5
    44a8:	4684      	mov	ip, r0
    44aa:	9002      	str	r0, [sp, #8]
    44ac:	1ae4      	subs	r4, r4, r3
    44ae:	4316      	orrs	r6, r2
    44b0:	2e0f      	cmp	r6, #15
    44b2:	d900      	bls.n	44b6 <__aeabi_ddiv+0x8e>
    44b4:	e0b4      	b.n	4620 <__aeabi_ddiv+0x1f8>
    44b6:	4b57      	ldr	r3, [pc, #348]	; (4614 <__aeabi_ddiv+0x1ec>)
    44b8:	00b6      	lsls	r6, r6, #2
    44ba:	599b      	ldr	r3, [r3, r6]
    44bc:	469f      	mov	pc, r3
    44be:	0003      	movs	r3, r0
    44c0:	4333      	orrs	r3, r6
    44c2:	4699      	mov	r9, r3
    44c4:	d16c      	bne.n	45a0 <__aeabi_ddiv+0x178>
    44c6:	2300      	movs	r3, #0
    44c8:	4698      	mov	r8, r3
    44ca:	3302      	adds	r3, #2
    44cc:	2608      	movs	r6, #8
    44ce:	9303      	str	r3, [sp, #12]
    44d0:	e7ce      	b.n	4470 <__aeabi_ddiv+0x48>
    44d2:	46cb      	mov	fp, r9
    44d4:	4641      	mov	r1, r8
    44d6:	9a03      	ldr	r2, [sp, #12]
    44d8:	9701      	str	r7, [sp, #4]
    44da:	2a02      	cmp	r2, #2
    44dc:	d165      	bne.n	45aa <__aeabi_ddiv+0x182>
    44de:	9b01      	ldr	r3, [sp, #4]
    44e0:	4c4a      	ldr	r4, [pc, #296]	; (460c <__aeabi_ddiv+0x1e4>)
    44e2:	469c      	mov	ip, r3
    44e4:	2300      	movs	r3, #0
    44e6:	2200      	movs	r2, #0
    44e8:	4698      	mov	r8, r3
    44ea:	e06b      	b.n	45c4 <__aeabi_ddiv+0x19c>
    44ec:	0003      	movs	r3, r0
    44ee:	4333      	orrs	r3, r6
    44f0:	4699      	mov	r9, r3
    44f2:	d04e      	beq.n	4592 <__aeabi_ddiv+0x16a>
    44f4:	2e00      	cmp	r6, #0
    44f6:	d100      	bne.n	44fa <__aeabi_ddiv+0xd2>
    44f8:	e1bc      	b.n	4874 <__aeabi_ddiv+0x44c>
    44fa:	0030      	movs	r0, r6
    44fc:	f001 f996 	bl	582c <__clzsi2>
    4500:	0003      	movs	r3, r0
    4502:	3b0b      	subs	r3, #11
    4504:	2b1c      	cmp	r3, #28
    4506:	dd00      	ble.n	450a <__aeabi_ddiv+0xe2>
    4508:	e1ac      	b.n	4864 <__aeabi_ddiv+0x43c>
    450a:	221d      	movs	r2, #29
    450c:	1ad3      	subs	r3, r2, r3
    450e:	465a      	mov	r2, fp
    4510:	0001      	movs	r1, r0
    4512:	40da      	lsrs	r2, r3
    4514:	3908      	subs	r1, #8
    4516:	408e      	lsls	r6, r1
    4518:	0013      	movs	r3, r2
    451a:	4333      	orrs	r3, r6
    451c:	4699      	mov	r9, r3
    451e:	465b      	mov	r3, fp
    4520:	408b      	lsls	r3, r1
    4522:	4698      	mov	r8, r3
    4524:	2300      	movs	r3, #0
    4526:	4c3c      	ldr	r4, [pc, #240]	; (4618 <__aeabi_ddiv+0x1f0>)
    4528:	2600      	movs	r6, #0
    452a:	1a24      	subs	r4, r4, r0
    452c:	9303      	str	r3, [sp, #12]
    452e:	e79f      	b.n	4470 <__aeabi_ddiv+0x48>
    4530:	4651      	mov	r1, sl
    4532:	465a      	mov	r2, fp
    4534:	4311      	orrs	r1, r2
    4536:	d129      	bne.n	458c <__aeabi_ddiv+0x164>
    4538:	2200      	movs	r2, #0
    453a:	4693      	mov	fp, r2
    453c:	3202      	adds	r2, #2
    453e:	e7b1      	b.n	44a4 <__aeabi_ddiv+0x7c>
    4540:	4659      	mov	r1, fp
    4542:	4301      	orrs	r1, r0
    4544:	d01e      	beq.n	4584 <__aeabi_ddiv+0x15c>
    4546:	465b      	mov	r3, fp
    4548:	2b00      	cmp	r3, #0
    454a:	d100      	bne.n	454e <__aeabi_ddiv+0x126>
    454c:	e19e      	b.n	488c <__aeabi_ddiv+0x464>
    454e:	4658      	mov	r0, fp
    4550:	f001 f96c 	bl	582c <__clzsi2>
    4554:	0003      	movs	r3, r0
    4556:	3b0b      	subs	r3, #11
    4558:	2b1c      	cmp	r3, #28
    455a:	dd00      	ble.n	455e <__aeabi_ddiv+0x136>
    455c:	e18f      	b.n	487e <__aeabi_ddiv+0x456>
    455e:	0002      	movs	r2, r0
    4560:	4659      	mov	r1, fp
    4562:	3a08      	subs	r2, #8
    4564:	4091      	lsls	r1, r2
    4566:	468b      	mov	fp, r1
    4568:	211d      	movs	r1, #29
    456a:	1acb      	subs	r3, r1, r3
    456c:	4651      	mov	r1, sl
    456e:	40d9      	lsrs	r1, r3
    4570:	000b      	movs	r3, r1
    4572:	4659      	mov	r1, fp
    4574:	430b      	orrs	r3, r1
    4576:	4651      	mov	r1, sl
    4578:	469b      	mov	fp, r3
    457a:	4091      	lsls	r1, r2
    457c:	4b26      	ldr	r3, [pc, #152]	; (4618 <__aeabi_ddiv+0x1f0>)
    457e:	2200      	movs	r2, #0
    4580:	1a1b      	subs	r3, r3, r0
    4582:	e78f      	b.n	44a4 <__aeabi_ddiv+0x7c>
    4584:	2300      	movs	r3, #0
    4586:	2201      	movs	r2, #1
    4588:	469b      	mov	fp, r3
    458a:	e78b      	b.n	44a4 <__aeabi_ddiv+0x7c>
    458c:	4651      	mov	r1, sl
    458e:	2203      	movs	r2, #3
    4590:	e788      	b.n	44a4 <__aeabi_ddiv+0x7c>
    4592:	2300      	movs	r3, #0
    4594:	4698      	mov	r8, r3
    4596:	3301      	adds	r3, #1
    4598:	2604      	movs	r6, #4
    459a:	2400      	movs	r4, #0
    459c:	9303      	str	r3, [sp, #12]
    459e:	e767      	b.n	4470 <__aeabi_ddiv+0x48>
    45a0:	2303      	movs	r3, #3
    45a2:	46b1      	mov	r9, r6
    45a4:	9303      	str	r3, [sp, #12]
    45a6:	260c      	movs	r6, #12
    45a8:	e762      	b.n	4470 <__aeabi_ddiv+0x48>
    45aa:	2a03      	cmp	r2, #3
    45ac:	d100      	bne.n	45b0 <__aeabi_ddiv+0x188>
    45ae:	e25c      	b.n	4a6a <__aeabi_ddiv+0x642>
    45b0:	9b01      	ldr	r3, [sp, #4]
    45b2:	2a01      	cmp	r2, #1
    45b4:	d000      	beq.n	45b8 <__aeabi_ddiv+0x190>
    45b6:	e1e4      	b.n	4982 <__aeabi_ddiv+0x55a>
    45b8:	4013      	ands	r3, r2
    45ba:	469c      	mov	ip, r3
    45bc:	2300      	movs	r3, #0
    45be:	2400      	movs	r4, #0
    45c0:	2200      	movs	r2, #0
    45c2:	4698      	mov	r8, r3
    45c4:	2100      	movs	r1, #0
    45c6:	0312      	lsls	r2, r2, #12
    45c8:	0b13      	lsrs	r3, r2, #12
    45ca:	0d0a      	lsrs	r2, r1, #20
    45cc:	0512      	lsls	r2, r2, #20
    45ce:	431a      	orrs	r2, r3
    45d0:	0523      	lsls	r3, r4, #20
    45d2:	4c12      	ldr	r4, [pc, #72]	; (461c <__aeabi_ddiv+0x1f4>)
    45d4:	4640      	mov	r0, r8
    45d6:	4022      	ands	r2, r4
    45d8:	4313      	orrs	r3, r2
    45da:	4662      	mov	r2, ip
    45dc:	005b      	lsls	r3, r3, #1
    45de:	07d2      	lsls	r2, r2, #31
    45e0:	085b      	lsrs	r3, r3, #1
    45e2:	4313      	orrs	r3, r2
    45e4:	0019      	movs	r1, r3
    45e6:	b007      	add	sp, #28
    45e8:	bc3c      	pop	{r2, r3, r4, r5}
    45ea:	4690      	mov	r8, r2
    45ec:	4699      	mov	r9, r3
    45ee:	46a2      	mov	sl, r4
    45f0:	46ab      	mov	fp, r5
    45f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f4:	2300      	movs	r3, #0
    45f6:	2280      	movs	r2, #128	; 0x80
    45f8:	469c      	mov	ip, r3
    45fa:	0312      	lsls	r2, r2, #12
    45fc:	4698      	mov	r8, r3
    45fe:	4c03      	ldr	r4, [pc, #12]	; (460c <__aeabi_ddiv+0x1e4>)
    4600:	e7e0      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4602:	2300      	movs	r3, #0
    4604:	4c01      	ldr	r4, [pc, #4]	; (460c <__aeabi_ddiv+0x1e4>)
    4606:	2200      	movs	r2, #0
    4608:	4698      	mov	r8, r3
    460a:	e7db      	b.n	45c4 <__aeabi_ddiv+0x19c>
    460c:	000007ff 	.word	0x000007ff
    4610:	fffffc01 	.word	0xfffffc01
    4614:	00005b20 	.word	0x00005b20
    4618:	fffffc0d 	.word	0xfffffc0d
    461c:	800fffff 	.word	0x800fffff
    4620:	45d9      	cmp	r9, fp
    4622:	d900      	bls.n	4626 <__aeabi_ddiv+0x1fe>
    4624:	e139      	b.n	489a <__aeabi_ddiv+0x472>
    4626:	d100      	bne.n	462a <__aeabi_ddiv+0x202>
    4628:	e134      	b.n	4894 <__aeabi_ddiv+0x46c>
    462a:	2300      	movs	r3, #0
    462c:	4646      	mov	r6, r8
    462e:	464d      	mov	r5, r9
    4630:	469a      	mov	sl, r3
    4632:	3c01      	subs	r4, #1
    4634:	465b      	mov	r3, fp
    4636:	0e0a      	lsrs	r2, r1, #24
    4638:	021b      	lsls	r3, r3, #8
    463a:	431a      	orrs	r2, r3
    463c:	020b      	lsls	r3, r1, #8
    463e:	0c17      	lsrs	r7, r2, #16
    4640:	9303      	str	r3, [sp, #12]
    4642:	0413      	lsls	r3, r2, #16
    4644:	0c1b      	lsrs	r3, r3, #16
    4646:	0039      	movs	r1, r7
    4648:	0028      	movs	r0, r5
    464a:	4690      	mov	r8, r2
    464c:	9301      	str	r3, [sp, #4]
    464e:	f7ff f91b 	bl	3888 <__udivsi3>
    4652:	0002      	movs	r2, r0
    4654:	9b01      	ldr	r3, [sp, #4]
    4656:	4683      	mov	fp, r0
    4658:	435a      	muls	r2, r3
    465a:	0028      	movs	r0, r5
    465c:	0039      	movs	r1, r7
    465e:	4691      	mov	r9, r2
    4660:	f7ff f998 	bl	3994 <__aeabi_uidivmod>
    4664:	0c35      	lsrs	r5, r6, #16
    4666:	0409      	lsls	r1, r1, #16
    4668:	430d      	orrs	r5, r1
    466a:	45a9      	cmp	r9, r5
    466c:	d90d      	bls.n	468a <__aeabi_ddiv+0x262>
    466e:	465b      	mov	r3, fp
    4670:	4445      	add	r5, r8
    4672:	3b01      	subs	r3, #1
    4674:	45a8      	cmp	r8, r5
    4676:	d900      	bls.n	467a <__aeabi_ddiv+0x252>
    4678:	e13a      	b.n	48f0 <__aeabi_ddiv+0x4c8>
    467a:	45a9      	cmp	r9, r5
    467c:	d800      	bhi.n	4680 <__aeabi_ddiv+0x258>
    467e:	e137      	b.n	48f0 <__aeabi_ddiv+0x4c8>
    4680:	2302      	movs	r3, #2
    4682:	425b      	negs	r3, r3
    4684:	469c      	mov	ip, r3
    4686:	4445      	add	r5, r8
    4688:	44e3      	add	fp, ip
    468a:	464b      	mov	r3, r9
    468c:	1aeb      	subs	r3, r5, r3
    468e:	0039      	movs	r1, r7
    4690:	0018      	movs	r0, r3
    4692:	9304      	str	r3, [sp, #16]
    4694:	f7ff f8f8 	bl	3888 <__udivsi3>
    4698:	9b01      	ldr	r3, [sp, #4]
    469a:	0005      	movs	r5, r0
    469c:	4343      	muls	r3, r0
    469e:	0039      	movs	r1, r7
    46a0:	9804      	ldr	r0, [sp, #16]
    46a2:	4699      	mov	r9, r3
    46a4:	f7ff f976 	bl	3994 <__aeabi_uidivmod>
    46a8:	0433      	lsls	r3, r6, #16
    46aa:	0409      	lsls	r1, r1, #16
    46ac:	0c1b      	lsrs	r3, r3, #16
    46ae:	430b      	orrs	r3, r1
    46b0:	4599      	cmp	r9, r3
    46b2:	d909      	bls.n	46c8 <__aeabi_ddiv+0x2a0>
    46b4:	4443      	add	r3, r8
    46b6:	1e6a      	subs	r2, r5, #1
    46b8:	4598      	cmp	r8, r3
    46ba:	d900      	bls.n	46be <__aeabi_ddiv+0x296>
    46bc:	e11a      	b.n	48f4 <__aeabi_ddiv+0x4cc>
    46be:	4599      	cmp	r9, r3
    46c0:	d800      	bhi.n	46c4 <__aeabi_ddiv+0x29c>
    46c2:	e117      	b.n	48f4 <__aeabi_ddiv+0x4cc>
    46c4:	3d02      	subs	r5, #2
    46c6:	4443      	add	r3, r8
    46c8:	464a      	mov	r2, r9
    46ca:	1a9b      	subs	r3, r3, r2
    46cc:	465a      	mov	r2, fp
    46ce:	0412      	lsls	r2, r2, #16
    46d0:	432a      	orrs	r2, r5
    46d2:	9903      	ldr	r1, [sp, #12]
    46d4:	4693      	mov	fp, r2
    46d6:	0c10      	lsrs	r0, r2, #16
    46d8:	0c0a      	lsrs	r2, r1, #16
    46da:	4691      	mov	r9, r2
    46dc:	0409      	lsls	r1, r1, #16
    46de:	465a      	mov	r2, fp
    46e0:	0c09      	lsrs	r1, r1, #16
    46e2:	464e      	mov	r6, r9
    46e4:	000d      	movs	r5, r1
    46e6:	0412      	lsls	r2, r2, #16
    46e8:	0c12      	lsrs	r2, r2, #16
    46ea:	4345      	muls	r5, r0
    46ec:	9105      	str	r1, [sp, #20]
    46ee:	4351      	muls	r1, r2
    46f0:	4372      	muls	r2, r6
    46f2:	4370      	muls	r0, r6
    46f4:	1952      	adds	r2, r2, r5
    46f6:	0c0e      	lsrs	r6, r1, #16
    46f8:	18b2      	adds	r2, r6, r2
    46fa:	4295      	cmp	r5, r2
    46fc:	d903      	bls.n	4706 <__aeabi_ddiv+0x2de>
    46fe:	2580      	movs	r5, #128	; 0x80
    4700:	026d      	lsls	r5, r5, #9
    4702:	46ac      	mov	ip, r5
    4704:	4460      	add	r0, ip
    4706:	0c15      	lsrs	r5, r2, #16
    4708:	0409      	lsls	r1, r1, #16
    470a:	0412      	lsls	r2, r2, #16
    470c:	0c09      	lsrs	r1, r1, #16
    470e:	1828      	adds	r0, r5, r0
    4710:	1852      	adds	r2, r2, r1
    4712:	4283      	cmp	r3, r0
    4714:	d200      	bcs.n	4718 <__aeabi_ddiv+0x2f0>
    4716:	e0ce      	b.n	48b6 <__aeabi_ddiv+0x48e>
    4718:	d100      	bne.n	471c <__aeabi_ddiv+0x2f4>
    471a:	e0c8      	b.n	48ae <__aeabi_ddiv+0x486>
    471c:	1a1d      	subs	r5, r3, r0
    471e:	4653      	mov	r3, sl
    4720:	1a9e      	subs	r6, r3, r2
    4722:	45b2      	cmp	sl, r6
    4724:	4192      	sbcs	r2, r2
    4726:	4252      	negs	r2, r2
    4728:	1aab      	subs	r3, r5, r2
    472a:	469a      	mov	sl, r3
    472c:	4598      	cmp	r8, r3
    472e:	d100      	bne.n	4732 <__aeabi_ddiv+0x30a>
    4730:	e117      	b.n	4962 <__aeabi_ddiv+0x53a>
    4732:	0039      	movs	r1, r7
    4734:	0018      	movs	r0, r3
    4736:	f7ff f8a7 	bl	3888 <__udivsi3>
    473a:	9b01      	ldr	r3, [sp, #4]
    473c:	0005      	movs	r5, r0
    473e:	4343      	muls	r3, r0
    4740:	0039      	movs	r1, r7
    4742:	4650      	mov	r0, sl
    4744:	9304      	str	r3, [sp, #16]
    4746:	f7ff f925 	bl	3994 <__aeabi_uidivmod>
    474a:	9804      	ldr	r0, [sp, #16]
    474c:	040b      	lsls	r3, r1, #16
    474e:	0c31      	lsrs	r1, r6, #16
    4750:	4319      	orrs	r1, r3
    4752:	4288      	cmp	r0, r1
    4754:	d909      	bls.n	476a <__aeabi_ddiv+0x342>
    4756:	4441      	add	r1, r8
    4758:	1e6b      	subs	r3, r5, #1
    475a:	4588      	cmp	r8, r1
    475c:	d900      	bls.n	4760 <__aeabi_ddiv+0x338>
    475e:	e107      	b.n	4970 <__aeabi_ddiv+0x548>
    4760:	4288      	cmp	r0, r1
    4762:	d800      	bhi.n	4766 <__aeabi_ddiv+0x33e>
    4764:	e104      	b.n	4970 <__aeabi_ddiv+0x548>
    4766:	3d02      	subs	r5, #2
    4768:	4441      	add	r1, r8
    476a:	9b04      	ldr	r3, [sp, #16]
    476c:	1acb      	subs	r3, r1, r3
    476e:	0018      	movs	r0, r3
    4770:	0039      	movs	r1, r7
    4772:	9304      	str	r3, [sp, #16]
    4774:	f7ff f888 	bl	3888 <__udivsi3>
    4778:	9b01      	ldr	r3, [sp, #4]
    477a:	4682      	mov	sl, r0
    477c:	4343      	muls	r3, r0
    477e:	0039      	movs	r1, r7
    4780:	9804      	ldr	r0, [sp, #16]
    4782:	9301      	str	r3, [sp, #4]
    4784:	f7ff f906 	bl	3994 <__aeabi_uidivmod>
    4788:	9801      	ldr	r0, [sp, #4]
    478a:	040b      	lsls	r3, r1, #16
    478c:	0431      	lsls	r1, r6, #16
    478e:	0c09      	lsrs	r1, r1, #16
    4790:	4319      	orrs	r1, r3
    4792:	4288      	cmp	r0, r1
    4794:	d90d      	bls.n	47b2 <__aeabi_ddiv+0x38a>
    4796:	4653      	mov	r3, sl
    4798:	4441      	add	r1, r8
    479a:	3b01      	subs	r3, #1
    479c:	4588      	cmp	r8, r1
    479e:	d900      	bls.n	47a2 <__aeabi_ddiv+0x37a>
    47a0:	e0e8      	b.n	4974 <__aeabi_ddiv+0x54c>
    47a2:	4288      	cmp	r0, r1
    47a4:	d800      	bhi.n	47a8 <__aeabi_ddiv+0x380>
    47a6:	e0e5      	b.n	4974 <__aeabi_ddiv+0x54c>
    47a8:	2302      	movs	r3, #2
    47aa:	425b      	negs	r3, r3
    47ac:	469c      	mov	ip, r3
    47ae:	4441      	add	r1, r8
    47b0:	44e2      	add	sl, ip
    47b2:	9b01      	ldr	r3, [sp, #4]
    47b4:	042d      	lsls	r5, r5, #16
    47b6:	1ace      	subs	r6, r1, r3
    47b8:	4651      	mov	r1, sl
    47ba:	4329      	orrs	r1, r5
    47bc:	9d05      	ldr	r5, [sp, #20]
    47be:	464f      	mov	r7, r9
    47c0:	002a      	movs	r2, r5
    47c2:	040b      	lsls	r3, r1, #16
    47c4:	0c08      	lsrs	r0, r1, #16
    47c6:	0c1b      	lsrs	r3, r3, #16
    47c8:	435a      	muls	r2, r3
    47ca:	4345      	muls	r5, r0
    47cc:	437b      	muls	r3, r7
    47ce:	4378      	muls	r0, r7
    47d0:	195b      	adds	r3, r3, r5
    47d2:	0c17      	lsrs	r7, r2, #16
    47d4:	18fb      	adds	r3, r7, r3
    47d6:	429d      	cmp	r5, r3
    47d8:	d903      	bls.n	47e2 <__aeabi_ddiv+0x3ba>
    47da:	2580      	movs	r5, #128	; 0x80
    47dc:	026d      	lsls	r5, r5, #9
    47de:	46ac      	mov	ip, r5
    47e0:	4460      	add	r0, ip
    47e2:	0c1d      	lsrs	r5, r3, #16
    47e4:	0412      	lsls	r2, r2, #16
    47e6:	041b      	lsls	r3, r3, #16
    47e8:	0c12      	lsrs	r2, r2, #16
    47ea:	1828      	adds	r0, r5, r0
    47ec:	189b      	adds	r3, r3, r2
    47ee:	4286      	cmp	r6, r0
    47f0:	d200      	bcs.n	47f4 <__aeabi_ddiv+0x3cc>
    47f2:	e093      	b.n	491c <__aeabi_ddiv+0x4f4>
    47f4:	d100      	bne.n	47f8 <__aeabi_ddiv+0x3d0>
    47f6:	e08e      	b.n	4916 <__aeabi_ddiv+0x4ee>
    47f8:	2301      	movs	r3, #1
    47fa:	4319      	orrs	r1, r3
    47fc:	4ba0      	ldr	r3, [pc, #640]	; (4a80 <__aeabi_ddiv+0x658>)
    47fe:	18e3      	adds	r3, r4, r3
    4800:	2b00      	cmp	r3, #0
    4802:	dc00      	bgt.n	4806 <__aeabi_ddiv+0x3de>
    4804:	e099      	b.n	493a <__aeabi_ddiv+0x512>
    4806:	074a      	lsls	r2, r1, #29
    4808:	d000      	beq.n	480c <__aeabi_ddiv+0x3e4>
    480a:	e09e      	b.n	494a <__aeabi_ddiv+0x522>
    480c:	465a      	mov	r2, fp
    480e:	01d2      	lsls	r2, r2, #7
    4810:	d506      	bpl.n	4820 <__aeabi_ddiv+0x3f8>
    4812:	465a      	mov	r2, fp
    4814:	4b9b      	ldr	r3, [pc, #620]	; (4a84 <__aeabi_ddiv+0x65c>)
    4816:	401a      	ands	r2, r3
    4818:	2380      	movs	r3, #128	; 0x80
    481a:	4693      	mov	fp, r2
    481c:	00db      	lsls	r3, r3, #3
    481e:	18e3      	adds	r3, r4, r3
    4820:	4a99      	ldr	r2, [pc, #612]	; (4a88 <__aeabi_ddiv+0x660>)
    4822:	4293      	cmp	r3, r2
    4824:	dd68      	ble.n	48f8 <__aeabi_ddiv+0x4d0>
    4826:	2301      	movs	r3, #1
    4828:	9a02      	ldr	r2, [sp, #8]
    482a:	4c98      	ldr	r4, [pc, #608]	; (4a8c <__aeabi_ddiv+0x664>)
    482c:	401a      	ands	r2, r3
    482e:	2300      	movs	r3, #0
    4830:	4694      	mov	ip, r2
    4832:	4698      	mov	r8, r3
    4834:	2200      	movs	r2, #0
    4836:	e6c5      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4838:	2280      	movs	r2, #128	; 0x80
    483a:	464b      	mov	r3, r9
    483c:	0312      	lsls	r2, r2, #12
    483e:	4213      	tst	r3, r2
    4840:	d00a      	beq.n	4858 <__aeabi_ddiv+0x430>
    4842:	465b      	mov	r3, fp
    4844:	4213      	tst	r3, r2
    4846:	d106      	bne.n	4856 <__aeabi_ddiv+0x42e>
    4848:	431a      	orrs	r2, r3
    484a:	0312      	lsls	r2, r2, #12
    484c:	0b12      	lsrs	r2, r2, #12
    484e:	46ac      	mov	ip, r5
    4850:	4688      	mov	r8, r1
    4852:	4c8e      	ldr	r4, [pc, #568]	; (4a8c <__aeabi_ddiv+0x664>)
    4854:	e6b6      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4856:	464b      	mov	r3, r9
    4858:	431a      	orrs	r2, r3
    485a:	0312      	lsls	r2, r2, #12
    485c:	0b12      	lsrs	r2, r2, #12
    485e:	46bc      	mov	ip, r7
    4860:	4c8a      	ldr	r4, [pc, #552]	; (4a8c <__aeabi_ddiv+0x664>)
    4862:	e6af      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4864:	0003      	movs	r3, r0
    4866:	465a      	mov	r2, fp
    4868:	3b28      	subs	r3, #40	; 0x28
    486a:	409a      	lsls	r2, r3
    486c:	2300      	movs	r3, #0
    486e:	4691      	mov	r9, r2
    4870:	4698      	mov	r8, r3
    4872:	e657      	b.n	4524 <__aeabi_ddiv+0xfc>
    4874:	4658      	mov	r0, fp
    4876:	f000 ffd9 	bl	582c <__clzsi2>
    487a:	3020      	adds	r0, #32
    487c:	e640      	b.n	4500 <__aeabi_ddiv+0xd8>
    487e:	0003      	movs	r3, r0
    4880:	4652      	mov	r2, sl
    4882:	3b28      	subs	r3, #40	; 0x28
    4884:	409a      	lsls	r2, r3
    4886:	2100      	movs	r1, #0
    4888:	4693      	mov	fp, r2
    488a:	e677      	b.n	457c <__aeabi_ddiv+0x154>
    488c:	f000 ffce 	bl	582c <__clzsi2>
    4890:	3020      	adds	r0, #32
    4892:	e65f      	b.n	4554 <__aeabi_ddiv+0x12c>
    4894:	4588      	cmp	r8, r1
    4896:	d200      	bcs.n	489a <__aeabi_ddiv+0x472>
    4898:	e6c7      	b.n	462a <__aeabi_ddiv+0x202>
    489a:	464b      	mov	r3, r9
    489c:	07de      	lsls	r6, r3, #31
    489e:	085d      	lsrs	r5, r3, #1
    48a0:	4643      	mov	r3, r8
    48a2:	085b      	lsrs	r3, r3, #1
    48a4:	431e      	orrs	r6, r3
    48a6:	4643      	mov	r3, r8
    48a8:	07db      	lsls	r3, r3, #31
    48aa:	469a      	mov	sl, r3
    48ac:	e6c2      	b.n	4634 <__aeabi_ddiv+0x20c>
    48ae:	2500      	movs	r5, #0
    48b0:	4592      	cmp	sl, r2
    48b2:	d300      	bcc.n	48b6 <__aeabi_ddiv+0x48e>
    48b4:	e733      	b.n	471e <__aeabi_ddiv+0x2f6>
    48b6:	9e03      	ldr	r6, [sp, #12]
    48b8:	4659      	mov	r1, fp
    48ba:	46b4      	mov	ip, r6
    48bc:	44e2      	add	sl, ip
    48be:	45b2      	cmp	sl, r6
    48c0:	41ad      	sbcs	r5, r5
    48c2:	426d      	negs	r5, r5
    48c4:	4445      	add	r5, r8
    48c6:	18eb      	adds	r3, r5, r3
    48c8:	3901      	subs	r1, #1
    48ca:	4598      	cmp	r8, r3
    48cc:	d207      	bcs.n	48de <__aeabi_ddiv+0x4b6>
    48ce:	4298      	cmp	r0, r3
    48d0:	d900      	bls.n	48d4 <__aeabi_ddiv+0x4ac>
    48d2:	e07f      	b.n	49d4 <__aeabi_ddiv+0x5ac>
    48d4:	d100      	bne.n	48d8 <__aeabi_ddiv+0x4b0>
    48d6:	e0bc      	b.n	4a52 <__aeabi_ddiv+0x62a>
    48d8:	1a1d      	subs	r5, r3, r0
    48da:	468b      	mov	fp, r1
    48dc:	e71f      	b.n	471e <__aeabi_ddiv+0x2f6>
    48de:	4598      	cmp	r8, r3
    48e0:	d1fa      	bne.n	48d8 <__aeabi_ddiv+0x4b0>
    48e2:	9d03      	ldr	r5, [sp, #12]
    48e4:	4555      	cmp	r5, sl
    48e6:	d9f2      	bls.n	48ce <__aeabi_ddiv+0x4a6>
    48e8:	4643      	mov	r3, r8
    48ea:	468b      	mov	fp, r1
    48ec:	1a1d      	subs	r5, r3, r0
    48ee:	e716      	b.n	471e <__aeabi_ddiv+0x2f6>
    48f0:	469b      	mov	fp, r3
    48f2:	e6ca      	b.n	468a <__aeabi_ddiv+0x262>
    48f4:	0015      	movs	r5, r2
    48f6:	e6e7      	b.n	46c8 <__aeabi_ddiv+0x2a0>
    48f8:	465a      	mov	r2, fp
    48fa:	08c9      	lsrs	r1, r1, #3
    48fc:	0752      	lsls	r2, r2, #29
    48fe:	430a      	orrs	r2, r1
    4900:	055b      	lsls	r3, r3, #21
    4902:	4690      	mov	r8, r2
    4904:	0d5c      	lsrs	r4, r3, #21
    4906:	465a      	mov	r2, fp
    4908:	2301      	movs	r3, #1
    490a:	9902      	ldr	r1, [sp, #8]
    490c:	0252      	lsls	r2, r2, #9
    490e:	4019      	ands	r1, r3
    4910:	0b12      	lsrs	r2, r2, #12
    4912:	468c      	mov	ip, r1
    4914:	e656      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4916:	2b00      	cmp	r3, #0
    4918:	d100      	bne.n	491c <__aeabi_ddiv+0x4f4>
    491a:	e76f      	b.n	47fc <__aeabi_ddiv+0x3d4>
    491c:	4446      	add	r6, r8
    491e:	1e4a      	subs	r2, r1, #1
    4920:	45b0      	cmp	r8, r6
    4922:	d929      	bls.n	4978 <__aeabi_ddiv+0x550>
    4924:	0011      	movs	r1, r2
    4926:	4286      	cmp	r6, r0
    4928:	d000      	beq.n	492c <__aeabi_ddiv+0x504>
    492a:	e765      	b.n	47f8 <__aeabi_ddiv+0x3d0>
    492c:	9a03      	ldr	r2, [sp, #12]
    492e:	4293      	cmp	r3, r2
    4930:	d000      	beq.n	4934 <__aeabi_ddiv+0x50c>
    4932:	e761      	b.n	47f8 <__aeabi_ddiv+0x3d0>
    4934:	e762      	b.n	47fc <__aeabi_ddiv+0x3d4>
    4936:	2101      	movs	r1, #1
    4938:	4249      	negs	r1, r1
    493a:	2001      	movs	r0, #1
    493c:	1ac2      	subs	r2, r0, r3
    493e:	2a38      	cmp	r2, #56	; 0x38
    4940:	dd21      	ble.n	4986 <__aeabi_ddiv+0x55e>
    4942:	9b02      	ldr	r3, [sp, #8]
    4944:	4003      	ands	r3, r0
    4946:	469c      	mov	ip, r3
    4948:	e638      	b.n	45bc <__aeabi_ddiv+0x194>
    494a:	220f      	movs	r2, #15
    494c:	400a      	ands	r2, r1
    494e:	2a04      	cmp	r2, #4
    4950:	d100      	bne.n	4954 <__aeabi_ddiv+0x52c>
    4952:	e75b      	b.n	480c <__aeabi_ddiv+0x3e4>
    4954:	000a      	movs	r2, r1
    4956:	1d11      	adds	r1, r2, #4
    4958:	4291      	cmp	r1, r2
    495a:	4192      	sbcs	r2, r2
    495c:	4252      	negs	r2, r2
    495e:	4493      	add	fp, r2
    4960:	e754      	b.n	480c <__aeabi_ddiv+0x3e4>
    4962:	4b47      	ldr	r3, [pc, #284]	; (4a80 <__aeabi_ddiv+0x658>)
    4964:	18e3      	adds	r3, r4, r3
    4966:	2b00      	cmp	r3, #0
    4968:	dde5      	ble.n	4936 <__aeabi_ddiv+0x50e>
    496a:	2201      	movs	r2, #1
    496c:	4252      	negs	r2, r2
    496e:	e7f2      	b.n	4956 <__aeabi_ddiv+0x52e>
    4970:	001d      	movs	r5, r3
    4972:	e6fa      	b.n	476a <__aeabi_ddiv+0x342>
    4974:	469a      	mov	sl, r3
    4976:	e71c      	b.n	47b2 <__aeabi_ddiv+0x38a>
    4978:	42b0      	cmp	r0, r6
    497a:	d839      	bhi.n	49f0 <__aeabi_ddiv+0x5c8>
    497c:	d06e      	beq.n	4a5c <__aeabi_ddiv+0x634>
    497e:	0011      	movs	r1, r2
    4980:	e73a      	b.n	47f8 <__aeabi_ddiv+0x3d0>
    4982:	9302      	str	r3, [sp, #8]
    4984:	e73a      	b.n	47fc <__aeabi_ddiv+0x3d4>
    4986:	2a1f      	cmp	r2, #31
    4988:	dc3c      	bgt.n	4a04 <__aeabi_ddiv+0x5dc>
    498a:	2320      	movs	r3, #32
    498c:	1a9b      	subs	r3, r3, r2
    498e:	000c      	movs	r4, r1
    4990:	4658      	mov	r0, fp
    4992:	4099      	lsls	r1, r3
    4994:	4098      	lsls	r0, r3
    4996:	1e4b      	subs	r3, r1, #1
    4998:	4199      	sbcs	r1, r3
    499a:	465b      	mov	r3, fp
    499c:	40d4      	lsrs	r4, r2
    499e:	40d3      	lsrs	r3, r2
    49a0:	4320      	orrs	r0, r4
    49a2:	4308      	orrs	r0, r1
    49a4:	001a      	movs	r2, r3
    49a6:	0743      	lsls	r3, r0, #29
    49a8:	d009      	beq.n	49be <__aeabi_ddiv+0x596>
    49aa:	230f      	movs	r3, #15
    49ac:	4003      	ands	r3, r0
    49ae:	2b04      	cmp	r3, #4
    49b0:	d005      	beq.n	49be <__aeabi_ddiv+0x596>
    49b2:	0001      	movs	r1, r0
    49b4:	1d08      	adds	r0, r1, #4
    49b6:	4288      	cmp	r0, r1
    49b8:	419b      	sbcs	r3, r3
    49ba:	425b      	negs	r3, r3
    49bc:	18d2      	adds	r2, r2, r3
    49be:	0213      	lsls	r3, r2, #8
    49c0:	d53a      	bpl.n	4a38 <__aeabi_ddiv+0x610>
    49c2:	2301      	movs	r3, #1
    49c4:	9a02      	ldr	r2, [sp, #8]
    49c6:	2401      	movs	r4, #1
    49c8:	401a      	ands	r2, r3
    49ca:	2300      	movs	r3, #0
    49cc:	4694      	mov	ip, r2
    49ce:	4698      	mov	r8, r3
    49d0:	2200      	movs	r2, #0
    49d2:	e5f7      	b.n	45c4 <__aeabi_ddiv+0x19c>
    49d4:	2102      	movs	r1, #2
    49d6:	4249      	negs	r1, r1
    49d8:	468c      	mov	ip, r1
    49da:	9d03      	ldr	r5, [sp, #12]
    49dc:	44e3      	add	fp, ip
    49de:	46ac      	mov	ip, r5
    49e0:	44e2      	add	sl, ip
    49e2:	45aa      	cmp	sl, r5
    49e4:	41ad      	sbcs	r5, r5
    49e6:	426d      	negs	r5, r5
    49e8:	4445      	add	r5, r8
    49ea:	18ed      	adds	r5, r5, r3
    49ec:	1a2d      	subs	r5, r5, r0
    49ee:	e696      	b.n	471e <__aeabi_ddiv+0x2f6>
    49f0:	1e8a      	subs	r2, r1, #2
    49f2:	9903      	ldr	r1, [sp, #12]
    49f4:	004d      	lsls	r5, r1, #1
    49f6:	428d      	cmp	r5, r1
    49f8:	4189      	sbcs	r1, r1
    49fa:	4249      	negs	r1, r1
    49fc:	4441      	add	r1, r8
    49fe:	1876      	adds	r6, r6, r1
    4a00:	9503      	str	r5, [sp, #12]
    4a02:	e78f      	b.n	4924 <__aeabi_ddiv+0x4fc>
    4a04:	201f      	movs	r0, #31
    4a06:	4240      	negs	r0, r0
    4a08:	1ac3      	subs	r3, r0, r3
    4a0a:	4658      	mov	r0, fp
    4a0c:	40d8      	lsrs	r0, r3
    4a0e:	0003      	movs	r3, r0
    4a10:	2a20      	cmp	r2, #32
    4a12:	d028      	beq.n	4a66 <__aeabi_ddiv+0x63e>
    4a14:	2040      	movs	r0, #64	; 0x40
    4a16:	465d      	mov	r5, fp
    4a18:	1a82      	subs	r2, r0, r2
    4a1a:	4095      	lsls	r5, r2
    4a1c:	4329      	orrs	r1, r5
    4a1e:	1e4a      	subs	r2, r1, #1
    4a20:	4191      	sbcs	r1, r2
    4a22:	4319      	orrs	r1, r3
    4a24:	2307      	movs	r3, #7
    4a26:	2200      	movs	r2, #0
    4a28:	400b      	ands	r3, r1
    4a2a:	d009      	beq.n	4a40 <__aeabi_ddiv+0x618>
    4a2c:	230f      	movs	r3, #15
    4a2e:	2200      	movs	r2, #0
    4a30:	400b      	ands	r3, r1
    4a32:	0008      	movs	r0, r1
    4a34:	2b04      	cmp	r3, #4
    4a36:	d1bd      	bne.n	49b4 <__aeabi_ddiv+0x58c>
    4a38:	0001      	movs	r1, r0
    4a3a:	0753      	lsls	r3, r2, #29
    4a3c:	0252      	lsls	r2, r2, #9
    4a3e:	0b12      	lsrs	r2, r2, #12
    4a40:	08c9      	lsrs	r1, r1, #3
    4a42:	4319      	orrs	r1, r3
    4a44:	2301      	movs	r3, #1
    4a46:	4688      	mov	r8, r1
    4a48:	9902      	ldr	r1, [sp, #8]
    4a4a:	2400      	movs	r4, #0
    4a4c:	4019      	ands	r1, r3
    4a4e:	468c      	mov	ip, r1
    4a50:	e5b8      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4a52:	4552      	cmp	r2, sl
    4a54:	d8be      	bhi.n	49d4 <__aeabi_ddiv+0x5ac>
    4a56:	468b      	mov	fp, r1
    4a58:	2500      	movs	r5, #0
    4a5a:	e660      	b.n	471e <__aeabi_ddiv+0x2f6>
    4a5c:	9d03      	ldr	r5, [sp, #12]
    4a5e:	429d      	cmp	r5, r3
    4a60:	d3c6      	bcc.n	49f0 <__aeabi_ddiv+0x5c8>
    4a62:	0011      	movs	r1, r2
    4a64:	e762      	b.n	492c <__aeabi_ddiv+0x504>
    4a66:	2500      	movs	r5, #0
    4a68:	e7d8      	b.n	4a1c <__aeabi_ddiv+0x5f4>
    4a6a:	2280      	movs	r2, #128	; 0x80
    4a6c:	465b      	mov	r3, fp
    4a6e:	0312      	lsls	r2, r2, #12
    4a70:	431a      	orrs	r2, r3
    4a72:	9b01      	ldr	r3, [sp, #4]
    4a74:	0312      	lsls	r2, r2, #12
    4a76:	0b12      	lsrs	r2, r2, #12
    4a78:	469c      	mov	ip, r3
    4a7a:	4688      	mov	r8, r1
    4a7c:	4c03      	ldr	r4, [pc, #12]	; (4a8c <__aeabi_ddiv+0x664>)
    4a7e:	e5a1      	b.n	45c4 <__aeabi_ddiv+0x19c>
    4a80:	000003ff 	.word	0x000003ff
    4a84:	feffffff 	.word	0xfeffffff
    4a88:	000007fe 	.word	0x000007fe
    4a8c:	000007ff 	.word	0x000007ff

00004a90 <__aeabi_dmul>:
    4a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a92:	4657      	mov	r7, sl
    4a94:	4645      	mov	r5, r8
    4a96:	46de      	mov	lr, fp
    4a98:	464e      	mov	r6, r9
    4a9a:	b5e0      	push	{r5, r6, r7, lr}
    4a9c:	030c      	lsls	r4, r1, #12
    4a9e:	4698      	mov	r8, r3
    4aa0:	004e      	lsls	r6, r1, #1
    4aa2:	0b23      	lsrs	r3, r4, #12
    4aa4:	b087      	sub	sp, #28
    4aa6:	0007      	movs	r7, r0
    4aa8:	4692      	mov	sl, r2
    4aaa:	469b      	mov	fp, r3
    4aac:	0d76      	lsrs	r6, r6, #21
    4aae:	0fcd      	lsrs	r5, r1, #31
    4ab0:	2e00      	cmp	r6, #0
    4ab2:	d06b      	beq.n	4b8c <__aeabi_dmul+0xfc>
    4ab4:	4b6d      	ldr	r3, [pc, #436]	; (4c6c <__aeabi_dmul+0x1dc>)
    4ab6:	429e      	cmp	r6, r3
    4ab8:	d035      	beq.n	4b26 <__aeabi_dmul+0x96>
    4aba:	2480      	movs	r4, #128	; 0x80
    4abc:	465b      	mov	r3, fp
    4abe:	0f42      	lsrs	r2, r0, #29
    4ac0:	0424      	lsls	r4, r4, #16
    4ac2:	00db      	lsls	r3, r3, #3
    4ac4:	4314      	orrs	r4, r2
    4ac6:	431c      	orrs	r4, r3
    4ac8:	00c3      	lsls	r3, r0, #3
    4aca:	4699      	mov	r9, r3
    4acc:	4b68      	ldr	r3, [pc, #416]	; (4c70 <__aeabi_dmul+0x1e0>)
    4ace:	46a3      	mov	fp, r4
    4ad0:	469c      	mov	ip, r3
    4ad2:	2300      	movs	r3, #0
    4ad4:	2700      	movs	r7, #0
    4ad6:	4466      	add	r6, ip
    4ad8:	9302      	str	r3, [sp, #8]
    4ada:	4643      	mov	r3, r8
    4adc:	031c      	lsls	r4, r3, #12
    4ade:	005a      	lsls	r2, r3, #1
    4ae0:	0fdb      	lsrs	r3, r3, #31
    4ae2:	4650      	mov	r0, sl
    4ae4:	0b24      	lsrs	r4, r4, #12
    4ae6:	0d52      	lsrs	r2, r2, #21
    4ae8:	4698      	mov	r8, r3
    4aea:	d100      	bne.n	4aee <__aeabi_dmul+0x5e>
    4aec:	e076      	b.n	4bdc <__aeabi_dmul+0x14c>
    4aee:	4b5f      	ldr	r3, [pc, #380]	; (4c6c <__aeabi_dmul+0x1dc>)
    4af0:	429a      	cmp	r2, r3
    4af2:	d06d      	beq.n	4bd0 <__aeabi_dmul+0x140>
    4af4:	2380      	movs	r3, #128	; 0x80
    4af6:	0f41      	lsrs	r1, r0, #29
    4af8:	041b      	lsls	r3, r3, #16
    4afa:	430b      	orrs	r3, r1
    4afc:	495c      	ldr	r1, [pc, #368]	; (4c70 <__aeabi_dmul+0x1e0>)
    4afe:	00e4      	lsls	r4, r4, #3
    4b00:	468c      	mov	ip, r1
    4b02:	431c      	orrs	r4, r3
    4b04:	00c3      	lsls	r3, r0, #3
    4b06:	2000      	movs	r0, #0
    4b08:	4462      	add	r2, ip
    4b0a:	4641      	mov	r1, r8
    4b0c:	18b6      	adds	r6, r6, r2
    4b0e:	4069      	eors	r1, r5
    4b10:	1c72      	adds	r2, r6, #1
    4b12:	9101      	str	r1, [sp, #4]
    4b14:	4694      	mov	ip, r2
    4b16:	4307      	orrs	r7, r0
    4b18:	2f0f      	cmp	r7, #15
    4b1a:	d900      	bls.n	4b1e <__aeabi_dmul+0x8e>
    4b1c:	e0b0      	b.n	4c80 <__aeabi_dmul+0x1f0>
    4b1e:	4a55      	ldr	r2, [pc, #340]	; (4c74 <__aeabi_dmul+0x1e4>)
    4b20:	00bf      	lsls	r7, r7, #2
    4b22:	59d2      	ldr	r2, [r2, r7]
    4b24:	4697      	mov	pc, r2
    4b26:	465b      	mov	r3, fp
    4b28:	4303      	orrs	r3, r0
    4b2a:	4699      	mov	r9, r3
    4b2c:	d000      	beq.n	4b30 <__aeabi_dmul+0xa0>
    4b2e:	e087      	b.n	4c40 <__aeabi_dmul+0x1b0>
    4b30:	2300      	movs	r3, #0
    4b32:	469b      	mov	fp, r3
    4b34:	3302      	adds	r3, #2
    4b36:	2708      	movs	r7, #8
    4b38:	9302      	str	r3, [sp, #8]
    4b3a:	e7ce      	b.n	4ada <__aeabi_dmul+0x4a>
    4b3c:	4642      	mov	r2, r8
    4b3e:	9201      	str	r2, [sp, #4]
    4b40:	2802      	cmp	r0, #2
    4b42:	d067      	beq.n	4c14 <__aeabi_dmul+0x184>
    4b44:	2803      	cmp	r0, #3
    4b46:	d100      	bne.n	4b4a <__aeabi_dmul+0xba>
    4b48:	e20e      	b.n	4f68 <__aeabi_dmul+0x4d8>
    4b4a:	2801      	cmp	r0, #1
    4b4c:	d000      	beq.n	4b50 <__aeabi_dmul+0xc0>
    4b4e:	e162      	b.n	4e16 <__aeabi_dmul+0x386>
    4b50:	2300      	movs	r3, #0
    4b52:	2400      	movs	r4, #0
    4b54:	2200      	movs	r2, #0
    4b56:	4699      	mov	r9, r3
    4b58:	9901      	ldr	r1, [sp, #4]
    4b5a:	4001      	ands	r1, r0
    4b5c:	b2cd      	uxtb	r5, r1
    4b5e:	2100      	movs	r1, #0
    4b60:	0312      	lsls	r2, r2, #12
    4b62:	0d0b      	lsrs	r3, r1, #20
    4b64:	0b12      	lsrs	r2, r2, #12
    4b66:	051b      	lsls	r3, r3, #20
    4b68:	4313      	orrs	r3, r2
    4b6a:	4a43      	ldr	r2, [pc, #268]	; (4c78 <__aeabi_dmul+0x1e8>)
    4b6c:	0524      	lsls	r4, r4, #20
    4b6e:	4013      	ands	r3, r2
    4b70:	431c      	orrs	r4, r3
    4b72:	0064      	lsls	r4, r4, #1
    4b74:	07ed      	lsls	r5, r5, #31
    4b76:	0864      	lsrs	r4, r4, #1
    4b78:	432c      	orrs	r4, r5
    4b7a:	4648      	mov	r0, r9
    4b7c:	0021      	movs	r1, r4
    4b7e:	b007      	add	sp, #28
    4b80:	bc3c      	pop	{r2, r3, r4, r5}
    4b82:	4690      	mov	r8, r2
    4b84:	4699      	mov	r9, r3
    4b86:	46a2      	mov	sl, r4
    4b88:	46ab      	mov	fp, r5
    4b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b8c:	4303      	orrs	r3, r0
    4b8e:	4699      	mov	r9, r3
    4b90:	d04f      	beq.n	4c32 <__aeabi_dmul+0x1a2>
    4b92:	465b      	mov	r3, fp
    4b94:	2b00      	cmp	r3, #0
    4b96:	d100      	bne.n	4b9a <__aeabi_dmul+0x10a>
    4b98:	e189      	b.n	4eae <__aeabi_dmul+0x41e>
    4b9a:	4658      	mov	r0, fp
    4b9c:	f000 fe46 	bl	582c <__clzsi2>
    4ba0:	0003      	movs	r3, r0
    4ba2:	3b0b      	subs	r3, #11
    4ba4:	2b1c      	cmp	r3, #28
    4ba6:	dd00      	ble.n	4baa <__aeabi_dmul+0x11a>
    4ba8:	e17a      	b.n	4ea0 <__aeabi_dmul+0x410>
    4baa:	221d      	movs	r2, #29
    4bac:	1ad3      	subs	r3, r2, r3
    4bae:	003a      	movs	r2, r7
    4bb0:	0001      	movs	r1, r0
    4bb2:	465c      	mov	r4, fp
    4bb4:	40da      	lsrs	r2, r3
    4bb6:	3908      	subs	r1, #8
    4bb8:	408c      	lsls	r4, r1
    4bba:	0013      	movs	r3, r2
    4bbc:	408f      	lsls	r7, r1
    4bbe:	4323      	orrs	r3, r4
    4bc0:	469b      	mov	fp, r3
    4bc2:	46b9      	mov	r9, r7
    4bc4:	2300      	movs	r3, #0
    4bc6:	4e2d      	ldr	r6, [pc, #180]	; (4c7c <__aeabi_dmul+0x1ec>)
    4bc8:	2700      	movs	r7, #0
    4bca:	1a36      	subs	r6, r6, r0
    4bcc:	9302      	str	r3, [sp, #8]
    4bce:	e784      	b.n	4ada <__aeabi_dmul+0x4a>
    4bd0:	4653      	mov	r3, sl
    4bd2:	4323      	orrs	r3, r4
    4bd4:	d12a      	bne.n	4c2c <__aeabi_dmul+0x19c>
    4bd6:	2400      	movs	r4, #0
    4bd8:	2002      	movs	r0, #2
    4bda:	e796      	b.n	4b0a <__aeabi_dmul+0x7a>
    4bdc:	4653      	mov	r3, sl
    4bde:	4323      	orrs	r3, r4
    4be0:	d020      	beq.n	4c24 <__aeabi_dmul+0x194>
    4be2:	2c00      	cmp	r4, #0
    4be4:	d100      	bne.n	4be8 <__aeabi_dmul+0x158>
    4be6:	e157      	b.n	4e98 <__aeabi_dmul+0x408>
    4be8:	0020      	movs	r0, r4
    4bea:	f000 fe1f 	bl	582c <__clzsi2>
    4bee:	0003      	movs	r3, r0
    4bf0:	3b0b      	subs	r3, #11
    4bf2:	2b1c      	cmp	r3, #28
    4bf4:	dd00      	ble.n	4bf8 <__aeabi_dmul+0x168>
    4bf6:	e149      	b.n	4e8c <__aeabi_dmul+0x3fc>
    4bf8:	211d      	movs	r1, #29
    4bfa:	1acb      	subs	r3, r1, r3
    4bfc:	4651      	mov	r1, sl
    4bfe:	0002      	movs	r2, r0
    4c00:	40d9      	lsrs	r1, r3
    4c02:	4653      	mov	r3, sl
    4c04:	3a08      	subs	r2, #8
    4c06:	4094      	lsls	r4, r2
    4c08:	4093      	lsls	r3, r2
    4c0a:	430c      	orrs	r4, r1
    4c0c:	4a1b      	ldr	r2, [pc, #108]	; (4c7c <__aeabi_dmul+0x1ec>)
    4c0e:	1a12      	subs	r2, r2, r0
    4c10:	2000      	movs	r0, #0
    4c12:	e77a      	b.n	4b0a <__aeabi_dmul+0x7a>
    4c14:	2501      	movs	r5, #1
    4c16:	9b01      	ldr	r3, [sp, #4]
    4c18:	4c14      	ldr	r4, [pc, #80]	; (4c6c <__aeabi_dmul+0x1dc>)
    4c1a:	401d      	ands	r5, r3
    4c1c:	2300      	movs	r3, #0
    4c1e:	2200      	movs	r2, #0
    4c20:	4699      	mov	r9, r3
    4c22:	e79c      	b.n	4b5e <__aeabi_dmul+0xce>
    4c24:	2400      	movs	r4, #0
    4c26:	2200      	movs	r2, #0
    4c28:	2001      	movs	r0, #1
    4c2a:	e76e      	b.n	4b0a <__aeabi_dmul+0x7a>
    4c2c:	4653      	mov	r3, sl
    4c2e:	2003      	movs	r0, #3
    4c30:	e76b      	b.n	4b0a <__aeabi_dmul+0x7a>
    4c32:	2300      	movs	r3, #0
    4c34:	469b      	mov	fp, r3
    4c36:	3301      	adds	r3, #1
    4c38:	2704      	movs	r7, #4
    4c3a:	2600      	movs	r6, #0
    4c3c:	9302      	str	r3, [sp, #8]
    4c3e:	e74c      	b.n	4ada <__aeabi_dmul+0x4a>
    4c40:	2303      	movs	r3, #3
    4c42:	4681      	mov	r9, r0
    4c44:	270c      	movs	r7, #12
    4c46:	9302      	str	r3, [sp, #8]
    4c48:	e747      	b.n	4ada <__aeabi_dmul+0x4a>
    4c4a:	2280      	movs	r2, #128	; 0x80
    4c4c:	2300      	movs	r3, #0
    4c4e:	2500      	movs	r5, #0
    4c50:	0312      	lsls	r2, r2, #12
    4c52:	4699      	mov	r9, r3
    4c54:	4c05      	ldr	r4, [pc, #20]	; (4c6c <__aeabi_dmul+0x1dc>)
    4c56:	e782      	b.n	4b5e <__aeabi_dmul+0xce>
    4c58:	465c      	mov	r4, fp
    4c5a:	464b      	mov	r3, r9
    4c5c:	9802      	ldr	r0, [sp, #8]
    4c5e:	e76f      	b.n	4b40 <__aeabi_dmul+0xb0>
    4c60:	465c      	mov	r4, fp
    4c62:	464b      	mov	r3, r9
    4c64:	9501      	str	r5, [sp, #4]
    4c66:	9802      	ldr	r0, [sp, #8]
    4c68:	e76a      	b.n	4b40 <__aeabi_dmul+0xb0>
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	000007ff 	.word	0x000007ff
    4c70:	fffffc01 	.word	0xfffffc01
    4c74:	00005b60 	.word	0x00005b60
    4c78:	800fffff 	.word	0x800fffff
    4c7c:	fffffc0d 	.word	0xfffffc0d
    4c80:	464a      	mov	r2, r9
    4c82:	4649      	mov	r1, r9
    4c84:	0c17      	lsrs	r7, r2, #16
    4c86:	0c1a      	lsrs	r2, r3, #16
    4c88:	041b      	lsls	r3, r3, #16
    4c8a:	0c1b      	lsrs	r3, r3, #16
    4c8c:	0408      	lsls	r0, r1, #16
    4c8e:	0019      	movs	r1, r3
    4c90:	0c00      	lsrs	r0, r0, #16
    4c92:	4341      	muls	r1, r0
    4c94:	0015      	movs	r5, r2
    4c96:	4688      	mov	r8, r1
    4c98:	0019      	movs	r1, r3
    4c9a:	437d      	muls	r5, r7
    4c9c:	4379      	muls	r1, r7
    4c9e:	9503      	str	r5, [sp, #12]
    4ca0:	4689      	mov	r9, r1
    4ca2:	0029      	movs	r1, r5
    4ca4:	0015      	movs	r5, r2
    4ca6:	4345      	muls	r5, r0
    4ca8:	444d      	add	r5, r9
    4caa:	9502      	str	r5, [sp, #8]
    4cac:	4645      	mov	r5, r8
    4cae:	0c2d      	lsrs	r5, r5, #16
    4cb0:	46aa      	mov	sl, r5
    4cb2:	9d02      	ldr	r5, [sp, #8]
    4cb4:	4455      	add	r5, sl
    4cb6:	45a9      	cmp	r9, r5
    4cb8:	d906      	bls.n	4cc8 <__aeabi_dmul+0x238>
    4cba:	468a      	mov	sl, r1
    4cbc:	2180      	movs	r1, #128	; 0x80
    4cbe:	0249      	lsls	r1, r1, #9
    4cc0:	4689      	mov	r9, r1
    4cc2:	44ca      	add	sl, r9
    4cc4:	4651      	mov	r1, sl
    4cc6:	9103      	str	r1, [sp, #12]
    4cc8:	0c29      	lsrs	r1, r5, #16
    4cca:	9104      	str	r1, [sp, #16]
    4ccc:	4641      	mov	r1, r8
    4cce:	0409      	lsls	r1, r1, #16
    4cd0:	042d      	lsls	r5, r5, #16
    4cd2:	0c09      	lsrs	r1, r1, #16
    4cd4:	4688      	mov	r8, r1
    4cd6:	0029      	movs	r1, r5
    4cd8:	0c25      	lsrs	r5, r4, #16
    4cda:	0424      	lsls	r4, r4, #16
    4cdc:	4441      	add	r1, r8
    4cde:	0c24      	lsrs	r4, r4, #16
    4ce0:	9105      	str	r1, [sp, #20]
    4ce2:	0021      	movs	r1, r4
    4ce4:	4341      	muls	r1, r0
    4ce6:	4688      	mov	r8, r1
    4ce8:	0021      	movs	r1, r4
    4cea:	4379      	muls	r1, r7
    4cec:	468a      	mov	sl, r1
    4cee:	4368      	muls	r0, r5
    4cf0:	4641      	mov	r1, r8
    4cf2:	4450      	add	r0, sl
    4cf4:	4681      	mov	r9, r0
    4cf6:	0c08      	lsrs	r0, r1, #16
    4cf8:	4448      	add	r0, r9
    4cfa:	436f      	muls	r7, r5
    4cfc:	4582      	cmp	sl, r0
    4cfe:	d903      	bls.n	4d08 <__aeabi_dmul+0x278>
    4d00:	2180      	movs	r1, #128	; 0x80
    4d02:	0249      	lsls	r1, r1, #9
    4d04:	4689      	mov	r9, r1
    4d06:	444f      	add	r7, r9
    4d08:	0c01      	lsrs	r1, r0, #16
    4d0a:	4689      	mov	r9, r1
    4d0c:	0039      	movs	r1, r7
    4d0e:	4449      	add	r1, r9
    4d10:	9102      	str	r1, [sp, #8]
    4d12:	4641      	mov	r1, r8
    4d14:	040f      	lsls	r7, r1, #16
    4d16:	9904      	ldr	r1, [sp, #16]
    4d18:	0c3f      	lsrs	r7, r7, #16
    4d1a:	4688      	mov	r8, r1
    4d1c:	0400      	lsls	r0, r0, #16
    4d1e:	19c0      	adds	r0, r0, r7
    4d20:	4480      	add	r8, r0
    4d22:	4641      	mov	r1, r8
    4d24:	9104      	str	r1, [sp, #16]
    4d26:	4659      	mov	r1, fp
    4d28:	0c0f      	lsrs	r7, r1, #16
    4d2a:	0409      	lsls	r1, r1, #16
    4d2c:	0c09      	lsrs	r1, r1, #16
    4d2e:	4688      	mov	r8, r1
    4d30:	4359      	muls	r1, r3
    4d32:	468a      	mov	sl, r1
    4d34:	0039      	movs	r1, r7
    4d36:	4351      	muls	r1, r2
    4d38:	4689      	mov	r9, r1
    4d3a:	4641      	mov	r1, r8
    4d3c:	434a      	muls	r2, r1
    4d3e:	4651      	mov	r1, sl
    4d40:	0c09      	lsrs	r1, r1, #16
    4d42:	468b      	mov	fp, r1
    4d44:	437b      	muls	r3, r7
    4d46:	18d2      	adds	r2, r2, r3
    4d48:	445a      	add	r2, fp
    4d4a:	4293      	cmp	r3, r2
    4d4c:	d903      	bls.n	4d56 <__aeabi_dmul+0x2c6>
    4d4e:	2380      	movs	r3, #128	; 0x80
    4d50:	025b      	lsls	r3, r3, #9
    4d52:	469b      	mov	fp, r3
    4d54:	44d9      	add	r9, fp
    4d56:	4651      	mov	r1, sl
    4d58:	0409      	lsls	r1, r1, #16
    4d5a:	0c09      	lsrs	r1, r1, #16
    4d5c:	468a      	mov	sl, r1
    4d5e:	4641      	mov	r1, r8
    4d60:	4361      	muls	r1, r4
    4d62:	437c      	muls	r4, r7
    4d64:	0c13      	lsrs	r3, r2, #16
    4d66:	0412      	lsls	r2, r2, #16
    4d68:	444b      	add	r3, r9
    4d6a:	4452      	add	r2, sl
    4d6c:	46a1      	mov	r9, r4
    4d6e:	468a      	mov	sl, r1
    4d70:	003c      	movs	r4, r7
    4d72:	4641      	mov	r1, r8
    4d74:	436c      	muls	r4, r5
    4d76:	434d      	muls	r5, r1
    4d78:	4651      	mov	r1, sl
    4d7a:	444d      	add	r5, r9
    4d7c:	0c0f      	lsrs	r7, r1, #16
    4d7e:	197d      	adds	r5, r7, r5
    4d80:	45a9      	cmp	r9, r5
    4d82:	d903      	bls.n	4d8c <__aeabi_dmul+0x2fc>
    4d84:	2180      	movs	r1, #128	; 0x80
    4d86:	0249      	lsls	r1, r1, #9
    4d88:	4688      	mov	r8, r1
    4d8a:	4444      	add	r4, r8
    4d8c:	9f04      	ldr	r7, [sp, #16]
    4d8e:	9903      	ldr	r1, [sp, #12]
    4d90:	46b8      	mov	r8, r7
    4d92:	4441      	add	r1, r8
    4d94:	468b      	mov	fp, r1
    4d96:	4583      	cmp	fp, r0
    4d98:	4180      	sbcs	r0, r0
    4d9a:	4241      	negs	r1, r0
    4d9c:	4688      	mov	r8, r1
    4d9e:	4651      	mov	r1, sl
    4da0:	0408      	lsls	r0, r1, #16
    4da2:	042f      	lsls	r7, r5, #16
    4da4:	0c00      	lsrs	r0, r0, #16
    4da6:	183f      	adds	r7, r7, r0
    4da8:	4658      	mov	r0, fp
    4daa:	9902      	ldr	r1, [sp, #8]
    4dac:	1810      	adds	r0, r2, r0
    4dae:	4689      	mov	r9, r1
    4db0:	4290      	cmp	r0, r2
    4db2:	4192      	sbcs	r2, r2
    4db4:	444f      	add	r7, r9
    4db6:	46ba      	mov	sl, r7
    4db8:	4252      	negs	r2, r2
    4dba:	4699      	mov	r9, r3
    4dbc:	4693      	mov	fp, r2
    4dbe:	44c2      	add	sl, r8
    4dc0:	44d1      	add	r9, sl
    4dc2:	44cb      	add	fp, r9
    4dc4:	428f      	cmp	r7, r1
    4dc6:	41bf      	sbcs	r7, r7
    4dc8:	45c2      	cmp	sl, r8
    4dca:	4189      	sbcs	r1, r1
    4dcc:	4599      	cmp	r9, r3
    4dce:	419b      	sbcs	r3, r3
    4dd0:	4593      	cmp	fp, r2
    4dd2:	4192      	sbcs	r2, r2
    4dd4:	427f      	negs	r7, r7
    4dd6:	4249      	negs	r1, r1
    4dd8:	0c2d      	lsrs	r5, r5, #16
    4dda:	4252      	negs	r2, r2
    4ddc:	430f      	orrs	r7, r1
    4dde:	425b      	negs	r3, r3
    4de0:	4313      	orrs	r3, r2
    4de2:	197f      	adds	r7, r7, r5
    4de4:	18ff      	adds	r7, r7, r3
    4de6:	465b      	mov	r3, fp
    4de8:	193c      	adds	r4, r7, r4
    4dea:	0ddb      	lsrs	r3, r3, #23
    4dec:	9a05      	ldr	r2, [sp, #20]
    4dee:	0264      	lsls	r4, r4, #9
    4df0:	431c      	orrs	r4, r3
    4df2:	0243      	lsls	r3, r0, #9
    4df4:	4313      	orrs	r3, r2
    4df6:	1e5d      	subs	r5, r3, #1
    4df8:	41ab      	sbcs	r3, r5
    4dfa:	465a      	mov	r2, fp
    4dfc:	0dc0      	lsrs	r0, r0, #23
    4dfe:	4303      	orrs	r3, r0
    4e00:	0252      	lsls	r2, r2, #9
    4e02:	4313      	orrs	r3, r2
    4e04:	01e2      	lsls	r2, r4, #7
    4e06:	d556      	bpl.n	4eb6 <__aeabi_dmul+0x426>
    4e08:	2001      	movs	r0, #1
    4e0a:	085a      	lsrs	r2, r3, #1
    4e0c:	4003      	ands	r3, r0
    4e0e:	4313      	orrs	r3, r2
    4e10:	07e2      	lsls	r2, r4, #31
    4e12:	4313      	orrs	r3, r2
    4e14:	0864      	lsrs	r4, r4, #1
    4e16:	485a      	ldr	r0, [pc, #360]	; (4f80 <__aeabi_dmul+0x4f0>)
    4e18:	4460      	add	r0, ip
    4e1a:	2800      	cmp	r0, #0
    4e1c:	dd4d      	ble.n	4eba <__aeabi_dmul+0x42a>
    4e1e:	075a      	lsls	r2, r3, #29
    4e20:	d009      	beq.n	4e36 <__aeabi_dmul+0x3a6>
    4e22:	220f      	movs	r2, #15
    4e24:	401a      	ands	r2, r3
    4e26:	2a04      	cmp	r2, #4
    4e28:	d005      	beq.n	4e36 <__aeabi_dmul+0x3a6>
    4e2a:	1d1a      	adds	r2, r3, #4
    4e2c:	429a      	cmp	r2, r3
    4e2e:	419b      	sbcs	r3, r3
    4e30:	425b      	negs	r3, r3
    4e32:	18e4      	adds	r4, r4, r3
    4e34:	0013      	movs	r3, r2
    4e36:	01e2      	lsls	r2, r4, #7
    4e38:	d504      	bpl.n	4e44 <__aeabi_dmul+0x3b4>
    4e3a:	2080      	movs	r0, #128	; 0x80
    4e3c:	4a51      	ldr	r2, [pc, #324]	; (4f84 <__aeabi_dmul+0x4f4>)
    4e3e:	00c0      	lsls	r0, r0, #3
    4e40:	4014      	ands	r4, r2
    4e42:	4460      	add	r0, ip
    4e44:	4a50      	ldr	r2, [pc, #320]	; (4f88 <__aeabi_dmul+0x4f8>)
    4e46:	4290      	cmp	r0, r2
    4e48:	dd00      	ble.n	4e4c <__aeabi_dmul+0x3bc>
    4e4a:	e6e3      	b.n	4c14 <__aeabi_dmul+0x184>
    4e4c:	2501      	movs	r5, #1
    4e4e:	08db      	lsrs	r3, r3, #3
    4e50:	0762      	lsls	r2, r4, #29
    4e52:	431a      	orrs	r2, r3
    4e54:	0264      	lsls	r4, r4, #9
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	4691      	mov	r9, r2
    4e5a:	0b22      	lsrs	r2, r4, #12
    4e5c:	0544      	lsls	r4, r0, #21
    4e5e:	0d64      	lsrs	r4, r4, #21
    4e60:	401d      	ands	r5, r3
    4e62:	e67c      	b.n	4b5e <__aeabi_dmul+0xce>
    4e64:	2280      	movs	r2, #128	; 0x80
    4e66:	4659      	mov	r1, fp
    4e68:	0312      	lsls	r2, r2, #12
    4e6a:	4211      	tst	r1, r2
    4e6c:	d008      	beq.n	4e80 <__aeabi_dmul+0x3f0>
    4e6e:	4214      	tst	r4, r2
    4e70:	d106      	bne.n	4e80 <__aeabi_dmul+0x3f0>
    4e72:	4322      	orrs	r2, r4
    4e74:	0312      	lsls	r2, r2, #12
    4e76:	0b12      	lsrs	r2, r2, #12
    4e78:	4645      	mov	r5, r8
    4e7a:	4699      	mov	r9, r3
    4e7c:	4c43      	ldr	r4, [pc, #268]	; (4f8c <__aeabi_dmul+0x4fc>)
    4e7e:	e66e      	b.n	4b5e <__aeabi_dmul+0xce>
    4e80:	465b      	mov	r3, fp
    4e82:	431a      	orrs	r2, r3
    4e84:	0312      	lsls	r2, r2, #12
    4e86:	0b12      	lsrs	r2, r2, #12
    4e88:	4c40      	ldr	r4, [pc, #256]	; (4f8c <__aeabi_dmul+0x4fc>)
    4e8a:	e668      	b.n	4b5e <__aeabi_dmul+0xce>
    4e8c:	0003      	movs	r3, r0
    4e8e:	4654      	mov	r4, sl
    4e90:	3b28      	subs	r3, #40	; 0x28
    4e92:	409c      	lsls	r4, r3
    4e94:	2300      	movs	r3, #0
    4e96:	e6b9      	b.n	4c0c <__aeabi_dmul+0x17c>
    4e98:	f000 fcc8 	bl	582c <__clzsi2>
    4e9c:	3020      	adds	r0, #32
    4e9e:	e6a6      	b.n	4bee <__aeabi_dmul+0x15e>
    4ea0:	0003      	movs	r3, r0
    4ea2:	3b28      	subs	r3, #40	; 0x28
    4ea4:	409f      	lsls	r7, r3
    4ea6:	2300      	movs	r3, #0
    4ea8:	46bb      	mov	fp, r7
    4eaa:	4699      	mov	r9, r3
    4eac:	e68a      	b.n	4bc4 <__aeabi_dmul+0x134>
    4eae:	f000 fcbd 	bl	582c <__clzsi2>
    4eb2:	3020      	adds	r0, #32
    4eb4:	e674      	b.n	4ba0 <__aeabi_dmul+0x110>
    4eb6:	46b4      	mov	ip, r6
    4eb8:	e7ad      	b.n	4e16 <__aeabi_dmul+0x386>
    4eba:	2501      	movs	r5, #1
    4ebc:	1a2a      	subs	r2, r5, r0
    4ebe:	2a38      	cmp	r2, #56	; 0x38
    4ec0:	dd06      	ble.n	4ed0 <__aeabi_dmul+0x440>
    4ec2:	9b01      	ldr	r3, [sp, #4]
    4ec4:	2400      	movs	r4, #0
    4ec6:	401d      	ands	r5, r3
    4ec8:	2300      	movs	r3, #0
    4eca:	2200      	movs	r2, #0
    4ecc:	4699      	mov	r9, r3
    4ece:	e646      	b.n	4b5e <__aeabi_dmul+0xce>
    4ed0:	2a1f      	cmp	r2, #31
    4ed2:	dc21      	bgt.n	4f18 <__aeabi_dmul+0x488>
    4ed4:	2520      	movs	r5, #32
    4ed6:	0020      	movs	r0, r4
    4ed8:	1aad      	subs	r5, r5, r2
    4eda:	001e      	movs	r6, r3
    4edc:	40ab      	lsls	r3, r5
    4ede:	40a8      	lsls	r0, r5
    4ee0:	40d6      	lsrs	r6, r2
    4ee2:	1e5d      	subs	r5, r3, #1
    4ee4:	41ab      	sbcs	r3, r5
    4ee6:	4330      	orrs	r0, r6
    4ee8:	4318      	orrs	r0, r3
    4eea:	40d4      	lsrs	r4, r2
    4eec:	0743      	lsls	r3, r0, #29
    4eee:	d009      	beq.n	4f04 <__aeabi_dmul+0x474>
    4ef0:	230f      	movs	r3, #15
    4ef2:	4003      	ands	r3, r0
    4ef4:	2b04      	cmp	r3, #4
    4ef6:	d005      	beq.n	4f04 <__aeabi_dmul+0x474>
    4ef8:	0003      	movs	r3, r0
    4efa:	1d18      	adds	r0, r3, #4
    4efc:	4298      	cmp	r0, r3
    4efe:	419b      	sbcs	r3, r3
    4f00:	425b      	negs	r3, r3
    4f02:	18e4      	adds	r4, r4, r3
    4f04:	0223      	lsls	r3, r4, #8
    4f06:	d521      	bpl.n	4f4c <__aeabi_dmul+0x4bc>
    4f08:	2501      	movs	r5, #1
    4f0a:	9b01      	ldr	r3, [sp, #4]
    4f0c:	2401      	movs	r4, #1
    4f0e:	401d      	ands	r5, r3
    4f10:	2300      	movs	r3, #0
    4f12:	2200      	movs	r2, #0
    4f14:	4699      	mov	r9, r3
    4f16:	e622      	b.n	4b5e <__aeabi_dmul+0xce>
    4f18:	251f      	movs	r5, #31
    4f1a:	0021      	movs	r1, r4
    4f1c:	426d      	negs	r5, r5
    4f1e:	1a28      	subs	r0, r5, r0
    4f20:	40c1      	lsrs	r1, r0
    4f22:	0008      	movs	r0, r1
    4f24:	2a20      	cmp	r2, #32
    4f26:	d01d      	beq.n	4f64 <__aeabi_dmul+0x4d4>
    4f28:	355f      	adds	r5, #95	; 0x5f
    4f2a:	1aaa      	subs	r2, r5, r2
    4f2c:	4094      	lsls	r4, r2
    4f2e:	4323      	orrs	r3, r4
    4f30:	1e5c      	subs	r4, r3, #1
    4f32:	41a3      	sbcs	r3, r4
    4f34:	2507      	movs	r5, #7
    4f36:	4303      	orrs	r3, r0
    4f38:	401d      	ands	r5, r3
    4f3a:	2200      	movs	r2, #0
    4f3c:	2d00      	cmp	r5, #0
    4f3e:	d009      	beq.n	4f54 <__aeabi_dmul+0x4c4>
    4f40:	220f      	movs	r2, #15
    4f42:	2400      	movs	r4, #0
    4f44:	401a      	ands	r2, r3
    4f46:	0018      	movs	r0, r3
    4f48:	2a04      	cmp	r2, #4
    4f4a:	d1d6      	bne.n	4efa <__aeabi_dmul+0x46a>
    4f4c:	0003      	movs	r3, r0
    4f4e:	0765      	lsls	r5, r4, #29
    4f50:	0264      	lsls	r4, r4, #9
    4f52:	0b22      	lsrs	r2, r4, #12
    4f54:	08db      	lsrs	r3, r3, #3
    4f56:	432b      	orrs	r3, r5
    4f58:	2501      	movs	r5, #1
    4f5a:	4699      	mov	r9, r3
    4f5c:	9b01      	ldr	r3, [sp, #4]
    4f5e:	2400      	movs	r4, #0
    4f60:	401d      	ands	r5, r3
    4f62:	e5fc      	b.n	4b5e <__aeabi_dmul+0xce>
    4f64:	2400      	movs	r4, #0
    4f66:	e7e2      	b.n	4f2e <__aeabi_dmul+0x49e>
    4f68:	2280      	movs	r2, #128	; 0x80
    4f6a:	2501      	movs	r5, #1
    4f6c:	0312      	lsls	r2, r2, #12
    4f6e:	4322      	orrs	r2, r4
    4f70:	9901      	ldr	r1, [sp, #4]
    4f72:	0312      	lsls	r2, r2, #12
    4f74:	0b12      	lsrs	r2, r2, #12
    4f76:	400d      	ands	r5, r1
    4f78:	4699      	mov	r9, r3
    4f7a:	4c04      	ldr	r4, [pc, #16]	; (4f8c <__aeabi_dmul+0x4fc>)
    4f7c:	e5ef      	b.n	4b5e <__aeabi_dmul+0xce>
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	000003ff 	.word	0x000003ff
    4f84:	feffffff 	.word	0xfeffffff
    4f88:	000007fe 	.word	0x000007fe
    4f8c:	000007ff 	.word	0x000007ff

00004f90 <__aeabi_dsub>:
    4f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f92:	4646      	mov	r6, r8
    4f94:	46d6      	mov	lr, sl
    4f96:	464f      	mov	r7, r9
    4f98:	030c      	lsls	r4, r1, #12
    4f9a:	b5c0      	push	{r6, r7, lr}
    4f9c:	0fcd      	lsrs	r5, r1, #31
    4f9e:	004e      	lsls	r6, r1, #1
    4fa0:	0a61      	lsrs	r1, r4, #9
    4fa2:	0f44      	lsrs	r4, r0, #29
    4fa4:	430c      	orrs	r4, r1
    4fa6:	00c1      	lsls	r1, r0, #3
    4fa8:	0058      	lsls	r0, r3, #1
    4faa:	0d40      	lsrs	r0, r0, #21
    4fac:	4684      	mov	ip, r0
    4fae:	468a      	mov	sl, r1
    4fb0:	000f      	movs	r7, r1
    4fb2:	0319      	lsls	r1, r3, #12
    4fb4:	0f50      	lsrs	r0, r2, #29
    4fb6:	0a49      	lsrs	r1, r1, #9
    4fb8:	4301      	orrs	r1, r0
    4fba:	48c6      	ldr	r0, [pc, #792]	; (52d4 <__aeabi_dsub+0x344>)
    4fbc:	0d76      	lsrs	r6, r6, #21
    4fbe:	46a8      	mov	r8, r5
    4fc0:	0fdb      	lsrs	r3, r3, #31
    4fc2:	00d2      	lsls	r2, r2, #3
    4fc4:	4584      	cmp	ip, r0
    4fc6:	d100      	bne.n	4fca <__aeabi_dsub+0x3a>
    4fc8:	e0d8      	b.n	517c <__aeabi_dsub+0x1ec>
    4fca:	2001      	movs	r0, #1
    4fcc:	4043      	eors	r3, r0
    4fce:	42ab      	cmp	r3, r5
    4fd0:	d100      	bne.n	4fd4 <__aeabi_dsub+0x44>
    4fd2:	e0a6      	b.n	5122 <__aeabi_dsub+0x192>
    4fd4:	4660      	mov	r0, ip
    4fd6:	1a35      	subs	r5, r6, r0
    4fd8:	2d00      	cmp	r5, #0
    4fda:	dc00      	bgt.n	4fde <__aeabi_dsub+0x4e>
    4fdc:	e105      	b.n	51ea <__aeabi_dsub+0x25a>
    4fde:	2800      	cmp	r0, #0
    4fe0:	d110      	bne.n	5004 <__aeabi_dsub+0x74>
    4fe2:	000b      	movs	r3, r1
    4fe4:	4313      	orrs	r3, r2
    4fe6:	d100      	bne.n	4fea <__aeabi_dsub+0x5a>
    4fe8:	e0d7      	b.n	519a <__aeabi_dsub+0x20a>
    4fea:	1e6b      	subs	r3, r5, #1
    4fec:	2b00      	cmp	r3, #0
    4fee:	d000      	beq.n	4ff2 <__aeabi_dsub+0x62>
    4ff0:	e14b      	b.n	528a <__aeabi_dsub+0x2fa>
    4ff2:	4653      	mov	r3, sl
    4ff4:	1a9f      	subs	r7, r3, r2
    4ff6:	45ba      	cmp	sl, r7
    4ff8:	4180      	sbcs	r0, r0
    4ffa:	1a64      	subs	r4, r4, r1
    4ffc:	4240      	negs	r0, r0
    4ffe:	1a24      	subs	r4, r4, r0
    5000:	2601      	movs	r6, #1
    5002:	e01e      	b.n	5042 <__aeabi_dsub+0xb2>
    5004:	4bb3      	ldr	r3, [pc, #716]	; (52d4 <__aeabi_dsub+0x344>)
    5006:	429e      	cmp	r6, r3
    5008:	d048      	beq.n	509c <__aeabi_dsub+0x10c>
    500a:	2380      	movs	r3, #128	; 0x80
    500c:	041b      	lsls	r3, r3, #16
    500e:	4319      	orrs	r1, r3
    5010:	2d38      	cmp	r5, #56	; 0x38
    5012:	dd00      	ble.n	5016 <__aeabi_dsub+0x86>
    5014:	e119      	b.n	524a <__aeabi_dsub+0x2ba>
    5016:	2d1f      	cmp	r5, #31
    5018:	dd00      	ble.n	501c <__aeabi_dsub+0x8c>
    501a:	e14c      	b.n	52b6 <__aeabi_dsub+0x326>
    501c:	2320      	movs	r3, #32
    501e:	000f      	movs	r7, r1
    5020:	1b5b      	subs	r3, r3, r5
    5022:	0010      	movs	r0, r2
    5024:	409a      	lsls	r2, r3
    5026:	409f      	lsls	r7, r3
    5028:	40e8      	lsrs	r0, r5
    502a:	1e53      	subs	r3, r2, #1
    502c:	419a      	sbcs	r2, r3
    502e:	40e9      	lsrs	r1, r5
    5030:	4307      	orrs	r7, r0
    5032:	4317      	orrs	r7, r2
    5034:	4653      	mov	r3, sl
    5036:	1bdf      	subs	r7, r3, r7
    5038:	1a61      	subs	r1, r4, r1
    503a:	45ba      	cmp	sl, r7
    503c:	41a4      	sbcs	r4, r4
    503e:	4264      	negs	r4, r4
    5040:	1b0c      	subs	r4, r1, r4
    5042:	0223      	lsls	r3, r4, #8
    5044:	d400      	bmi.n	5048 <__aeabi_dsub+0xb8>
    5046:	e0c5      	b.n	51d4 <__aeabi_dsub+0x244>
    5048:	0264      	lsls	r4, r4, #9
    504a:	0a65      	lsrs	r5, r4, #9
    504c:	2d00      	cmp	r5, #0
    504e:	d100      	bne.n	5052 <__aeabi_dsub+0xc2>
    5050:	e0f6      	b.n	5240 <__aeabi_dsub+0x2b0>
    5052:	0028      	movs	r0, r5
    5054:	f000 fbea 	bl	582c <__clzsi2>
    5058:	0003      	movs	r3, r0
    505a:	3b08      	subs	r3, #8
    505c:	2b1f      	cmp	r3, #31
    505e:	dd00      	ble.n	5062 <__aeabi_dsub+0xd2>
    5060:	e0e9      	b.n	5236 <__aeabi_dsub+0x2a6>
    5062:	2220      	movs	r2, #32
    5064:	003c      	movs	r4, r7
    5066:	1ad2      	subs	r2, r2, r3
    5068:	409d      	lsls	r5, r3
    506a:	40d4      	lsrs	r4, r2
    506c:	409f      	lsls	r7, r3
    506e:	4325      	orrs	r5, r4
    5070:	429e      	cmp	r6, r3
    5072:	dd00      	ble.n	5076 <__aeabi_dsub+0xe6>
    5074:	e0db      	b.n	522e <__aeabi_dsub+0x29e>
    5076:	1b9e      	subs	r6, r3, r6
    5078:	1c73      	adds	r3, r6, #1
    507a:	2b1f      	cmp	r3, #31
    507c:	dd00      	ble.n	5080 <__aeabi_dsub+0xf0>
    507e:	e10a      	b.n	5296 <__aeabi_dsub+0x306>
    5080:	2220      	movs	r2, #32
    5082:	0038      	movs	r0, r7
    5084:	1ad2      	subs	r2, r2, r3
    5086:	0029      	movs	r1, r5
    5088:	4097      	lsls	r7, r2
    508a:	002c      	movs	r4, r5
    508c:	4091      	lsls	r1, r2
    508e:	40d8      	lsrs	r0, r3
    5090:	1e7a      	subs	r2, r7, #1
    5092:	4197      	sbcs	r7, r2
    5094:	40dc      	lsrs	r4, r3
    5096:	2600      	movs	r6, #0
    5098:	4301      	orrs	r1, r0
    509a:	430f      	orrs	r7, r1
    509c:	077b      	lsls	r3, r7, #29
    509e:	d009      	beq.n	50b4 <__aeabi_dsub+0x124>
    50a0:	230f      	movs	r3, #15
    50a2:	403b      	ands	r3, r7
    50a4:	2b04      	cmp	r3, #4
    50a6:	d005      	beq.n	50b4 <__aeabi_dsub+0x124>
    50a8:	1d3b      	adds	r3, r7, #4
    50aa:	42bb      	cmp	r3, r7
    50ac:	41bf      	sbcs	r7, r7
    50ae:	427f      	negs	r7, r7
    50b0:	19e4      	adds	r4, r4, r7
    50b2:	001f      	movs	r7, r3
    50b4:	0223      	lsls	r3, r4, #8
    50b6:	d525      	bpl.n	5104 <__aeabi_dsub+0x174>
    50b8:	4b86      	ldr	r3, [pc, #536]	; (52d4 <__aeabi_dsub+0x344>)
    50ba:	3601      	adds	r6, #1
    50bc:	429e      	cmp	r6, r3
    50be:	d100      	bne.n	50c2 <__aeabi_dsub+0x132>
    50c0:	e0af      	b.n	5222 <__aeabi_dsub+0x292>
    50c2:	4b85      	ldr	r3, [pc, #532]	; (52d8 <__aeabi_dsub+0x348>)
    50c4:	2501      	movs	r5, #1
    50c6:	401c      	ands	r4, r3
    50c8:	4643      	mov	r3, r8
    50ca:	0762      	lsls	r2, r4, #29
    50cc:	08ff      	lsrs	r7, r7, #3
    50ce:	0264      	lsls	r4, r4, #9
    50d0:	0576      	lsls	r6, r6, #21
    50d2:	4317      	orrs	r7, r2
    50d4:	0b24      	lsrs	r4, r4, #12
    50d6:	0d76      	lsrs	r6, r6, #21
    50d8:	401d      	ands	r5, r3
    50da:	2100      	movs	r1, #0
    50dc:	0324      	lsls	r4, r4, #12
    50de:	0b23      	lsrs	r3, r4, #12
    50e0:	0d0c      	lsrs	r4, r1, #20
    50e2:	4a7e      	ldr	r2, [pc, #504]	; (52dc <__aeabi_dsub+0x34c>)
    50e4:	0524      	lsls	r4, r4, #20
    50e6:	431c      	orrs	r4, r3
    50e8:	4014      	ands	r4, r2
    50ea:	0533      	lsls	r3, r6, #20
    50ec:	4323      	orrs	r3, r4
    50ee:	005b      	lsls	r3, r3, #1
    50f0:	07ed      	lsls	r5, r5, #31
    50f2:	085b      	lsrs	r3, r3, #1
    50f4:	432b      	orrs	r3, r5
    50f6:	0038      	movs	r0, r7
    50f8:	0019      	movs	r1, r3
    50fa:	bc1c      	pop	{r2, r3, r4}
    50fc:	4690      	mov	r8, r2
    50fe:	4699      	mov	r9, r3
    5100:	46a2      	mov	sl, r4
    5102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5104:	2501      	movs	r5, #1
    5106:	4643      	mov	r3, r8
    5108:	0762      	lsls	r2, r4, #29
    510a:	08ff      	lsrs	r7, r7, #3
    510c:	4317      	orrs	r7, r2
    510e:	08e4      	lsrs	r4, r4, #3
    5110:	401d      	ands	r5, r3
    5112:	4b70      	ldr	r3, [pc, #448]	; (52d4 <__aeabi_dsub+0x344>)
    5114:	429e      	cmp	r6, r3
    5116:	d036      	beq.n	5186 <__aeabi_dsub+0x1f6>
    5118:	0324      	lsls	r4, r4, #12
    511a:	0576      	lsls	r6, r6, #21
    511c:	0b24      	lsrs	r4, r4, #12
    511e:	0d76      	lsrs	r6, r6, #21
    5120:	e7db      	b.n	50da <__aeabi_dsub+0x14a>
    5122:	4663      	mov	r3, ip
    5124:	1af3      	subs	r3, r6, r3
    5126:	2b00      	cmp	r3, #0
    5128:	dc00      	bgt.n	512c <__aeabi_dsub+0x19c>
    512a:	e094      	b.n	5256 <__aeabi_dsub+0x2c6>
    512c:	4660      	mov	r0, ip
    512e:	2800      	cmp	r0, #0
    5130:	d035      	beq.n	519e <__aeabi_dsub+0x20e>
    5132:	4868      	ldr	r0, [pc, #416]	; (52d4 <__aeabi_dsub+0x344>)
    5134:	4286      	cmp	r6, r0
    5136:	d0b1      	beq.n	509c <__aeabi_dsub+0x10c>
    5138:	2780      	movs	r7, #128	; 0x80
    513a:	043f      	lsls	r7, r7, #16
    513c:	4339      	orrs	r1, r7
    513e:	2b38      	cmp	r3, #56	; 0x38
    5140:	dc00      	bgt.n	5144 <__aeabi_dsub+0x1b4>
    5142:	e0fd      	b.n	5340 <__aeabi_dsub+0x3b0>
    5144:	430a      	orrs	r2, r1
    5146:	0017      	movs	r7, r2
    5148:	2100      	movs	r1, #0
    514a:	1e7a      	subs	r2, r7, #1
    514c:	4197      	sbcs	r7, r2
    514e:	4457      	add	r7, sl
    5150:	4557      	cmp	r7, sl
    5152:	4180      	sbcs	r0, r0
    5154:	1909      	adds	r1, r1, r4
    5156:	4244      	negs	r4, r0
    5158:	190c      	adds	r4, r1, r4
    515a:	0223      	lsls	r3, r4, #8
    515c:	d53a      	bpl.n	51d4 <__aeabi_dsub+0x244>
    515e:	4b5d      	ldr	r3, [pc, #372]	; (52d4 <__aeabi_dsub+0x344>)
    5160:	3601      	adds	r6, #1
    5162:	429e      	cmp	r6, r3
    5164:	d100      	bne.n	5168 <__aeabi_dsub+0x1d8>
    5166:	e14b      	b.n	5400 <__aeabi_dsub+0x470>
    5168:	2201      	movs	r2, #1
    516a:	4b5b      	ldr	r3, [pc, #364]	; (52d8 <__aeabi_dsub+0x348>)
    516c:	401c      	ands	r4, r3
    516e:	087b      	lsrs	r3, r7, #1
    5170:	4017      	ands	r7, r2
    5172:	431f      	orrs	r7, r3
    5174:	07e2      	lsls	r2, r4, #31
    5176:	4317      	orrs	r7, r2
    5178:	0864      	lsrs	r4, r4, #1
    517a:	e78f      	b.n	509c <__aeabi_dsub+0x10c>
    517c:	0008      	movs	r0, r1
    517e:	4310      	orrs	r0, r2
    5180:	d000      	beq.n	5184 <__aeabi_dsub+0x1f4>
    5182:	e724      	b.n	4fce <__aeabi_dsub+0x3e>
    5184:	e721      	b.n	4fca <__aeabi_dsub+0x3a>
    5186:	0023      	movs	r3, r4
    5188:	433b      	orrs	r3, r7
    518a:	d100      	bne.n	518e <__aeabi_dsub+0x1fe>
    518c:	e1b9      	b.n	5502 <__aeabi_dsub+0x572>
    518e:	2280      	movs	r2, #128	; 0x80
    5190:	0312      	lsls	r2, r2, #12
    5192:	4314      	orrs	r4, r2
    5194:	0324      	lsls	r4, r4, #12
    5196:	0b24      	lsrs	r4, r4, #12
    5198:	e79f      	b.n	50da <__aeabi_dsub+0x14a>
    519a:	002e      	movs	r6, r5
    519c:	e77e      	b.n	509c <__aeabi_dsub+0x10c>
    519e:	0008      	movs	r0, r1
    51a0:	4310      	orrs	r0, r2
    51a2:	d100      	bne.n	51a6 <__aeabi_dsub+0x216>
    51a4:	e0ca      	b.n	533c <__aeabi_dsub+0x3ac>
    51a6:	1e58      	subs	r0, r3, #1
    51a8:	4684      	mov	ip, r0
    51aa:	2800      	cmp	r0, #0
    51ac:	d000      	beq.n	51b0 <__aeabi_dsub+0x220>
    51ae:	e0e7      	b.n	5380 <__aeabi_dsub+0x3f0>
    51b0:	4452      	add	r2, sl
    51b2:	4552      	cmp	r2, sl
    51b4:	4180      	sbcs	r0, r0
    51b6:	1864      	adds	r4, r4, r1
    51b8:	4240      	negs	r0, r0
    51ba:	1824      	adds	r4, r4, r0
    51bc:	0017      	movs	r7, r2
    51be:	2601      	movs	r6, #1
    51c0:	0223      	lsls	r3, r4, #8
    51c2:	d507      	bpl.n	51d4 <__aeabi_dsub+0x244>
    51c4:	2602      	movs	r6, #2
    51c6:	e7cf      	b.n	5168 <__aeabi_dsub+0x1d8>
    51c8:	4664      	mov	r4, ip
    51ca:	432c      	orrs	r4, r5
    51cc:	d100      	bne.n	51d0 <__aeabi_dsub+0x240>
    51ce:	e1b3      	b.n	5538 <__aeabi_dsub+0x5a8>
    51d0:	002c      	movs	r4, r5
    51d2:	4667      	mov	r7, ip
    51d4:	077b      	lsls	r3, r7, #29
    51d6:	d000      	beq.n	51da <__aeabi_dsub+0x24a>
    51d8:	e762      	b.n	50a0 <__aeabi_dsub+0x110>
    51da:	0763      	lsls	r3, r4, #29
    51dc:	08ff      	lsrs	r7, r7, #3
    51de:	431f      	orrs	r7, r3
    51e0:	2501      	movs	r5, #1
    51e2:	4643      	mov	r3, r8
    51e4:	08e4      	lsrs	r4, r4, #3
    51e6:	401d      	ands	r5, r3
    51e8:	e793      	b.n	5112 <__aeabi_dsub+0x182>
    51ea:	2d00      	cmp	r5, #0
    51ec:	d178      	bne.n	52e0 <__aeabi_dsub+0x350>
    51ee:	1c75      	adds	r5, r6, #1
    51f0:	056d      	lsls	r5, r5, #21
    51f2:	0d6d      	lsrs	r5, r5, #21
    51f4:	2d01      	cmp	r5, #1
    51f6:	dc00      	bgt.n	51fa <__aeabi_dsub+0x26a>
    51f8:	e0f2      	b.n	53e0 <__aeabi_dsub+0x450>
    51fa:	4650      	mov	r0, sl
    51fc:	1a80      	subs	r0, r0, r2
    51fe:	4582      	cmp	sl, r0
    5200:	41bf      	sbcs	r7, r7
    5202:	1a65      	subs	r5, r4, r1
    5204:	427f      	negs	r7, r7
    5206:	1bed      	subs	r5, r5, r7
    5208:	4684      	mov	ip, r0
    520a:	0228      	lsls	r0, r5, #8
    520c:	d400      	bmi.n	5210 <__aeabi_dsub+0x280>
    520e:	e08c      	b.n	532a <__aeabi_dsub+0x39a>
    5210:	4650      	mov	r0, sl
    5212:	1a17      	subs	r7, r2, r0
    5214:	42ba      	cmp	r2, r7
    5216:	4192      	sbcs	r2, r2
    5218:	1b0c      	subs	r4, r1, r4
    521a:	4255      	negs	r5, r2
    521c:	1b65      	subs	r5, r4, r5
    521e:	4698      	mov	r8, r3
    5220:	e714      	b.n	504c <__aeabi_dsub+0xbc>
    5222:	2501      	movs	r5, #1
    5224:	4643      	mov	r3, r8
    5226:	2400      	movs	r4, #0
    5228:	401d      	ands	r5, r3
    522a:	2700      	movs	r7, #0
    522c:	e755      	b.n	50da <__aeabi_dsub+0x14a>
    522e:	4c2a      	ldr	r4, [pc, #168]	; (52d8 <__aeabi_dsub+0x348>)
    5230:	1af6      	subs	r6, r6, r3
    5232:	402c      	ands	r4, r5
    5234:	e732      	b.n	509c <__aeabi_dsub+0x10c>
    5236:	003d      	movs	r5, r7
    5238:	3828      	subs	r0, #40	; 0x28
    523a:	4085      	lsls	r5, r0
    523c:	2700      	movs	r7, #0
    523e:	e717      	b.n	5070 <__aeabi_dsub+0xe0>
    5240:	0038      	movs	r0, r7
    5242:	f000 faf3 	bl	582c <__clzsi2>
    5246:	3020      	adds	r0, #32
    5248:	e706      	b.n	5058 <__aeabi_dsub+0xc8>
    524a:	430a      	orrs	r2, r1
    524c:	0017      	movs	r7, r2
    524e:	2100      	movs	r1, #0
    5250:	1e7a      	subs	r2, r7, #1
    5252:	4197      	sbcs	r7, r2
    5254:	e6ee      	b.n	5034 <__aeabi_dsub+0xa4>
    5256:	2b00      	cmp	r3, #0
    5258:	d000      	beq.n	525c <__aeabi_dsub+0x2cc>
    525a:	e0e5      	b.n	5428 <__aeabi_dsub+0x498>
    525c:	1c73      	adds	r3, r6, #1
    525e:	469c      	mov	ip, r3
    5260:	055b      	lsls	r3, r3, #21
    5262:	0d5b      	lsrs	r3, r3, #21
    5264:	2b01      	cmp	r3, #1
    5266:	dc00      	bgt.n	526a <__aeabi_dsub+0x2da>
    5268:	e09f      	b.n	53aa <__aeabi_dsub+0x41a>
    526a:	4b1a      	ldr	r3, [pc, #104]	; (52d4 <__aeabi_dsub+0x344>)
    526c:	459c      	cmp	ip, r3
    526e:	d100      	bne.n	5272 <__aeabi_dsub+0x2e2>
    5270:	e0c5      	b.n	53fe <__aeabi_dsub+0x46e>
    5272:	4452      	add	r2, sl
    5274:	4552      	cmp	r2, sl
    5276:	4180      	sbcs	r0, r0
    5278:	1864      	adds	r4, r4, r1
    527a:	4240      	negs	r0, r0
    527c:	1824      	adds	r4, r4, r0
    527e:	07e7      	lsls	r7, r4, #31
    5280:	0852      	lsrs	r2, r2, #1
    5282:	4317      	orrs	r7, r2
    5284:	0864      	lsrs	r4, r4, #1
    5286:	4666      	mov	r6, ip
    5288:	e708      	b.n	509c <__aeabi_dsub+0x10c>
    528a:	4812      	ldr	r0, [pc, #72]	; (52d4 <__aeabi_dsub+0x344>)
    528c:	4285      	cmp	r5, r0
    528e:	d100      	bne.n	5292 <__aeabi_dsub+0x302>
    5290:	e085      	b.n	539e <__aeabi_dsub+0x40e>
    5292:	001d      	movs	r5, r3
    5294:	e6bc      	b.n	5010 <__aeabi_dsub+0x80>
    5296:	0029      	movs	r1, r5
    5298:	3e1f      	subs	r6, #31
    529a:	40f1      	lsrs	r1, r6
    529c:	2b20      	cmp	r3, #32
    529e:	d100      	bne.n	52a2 <__aeabi_dsub+0x312>
    52a0:	e07f      	b.n	53a2 <__aeabi_dsub+0x412>
    52a2:	2240      	movs	r2, #64	; 0x40
    52a4:	1ad3      	subs	r3, r2, r3
    52a6:	409d      	lsls	r5, r3
    52a8:	432f      	orrs	r7, r5
    52aa:	1e7d      	subs	r5, r7, #1
    52ac:	41af      	sbcs	r7, r5
    52ae:	2400      	movs	r4, #0
    52b0:	430f      	orrs	r7, r1
    52b2:	2600      	movs	r6, #0
    52b4:	e78e      	b.n	51d4 <__aeabi_dsub+0x244>
    52b6:	002b      	movs	r3, r5
    52b8:	000f      	movs	r7, r1
    52ba:	3b20      	subs	r3, #32
    52bc:	40df      	lsrs	r7, r3
    52be:	2d20      	cmp	r5, #32
    52c0:	d071      	beq.n	53a6 <__aeabi_dsub+0x416>
    52c2:	2340      	movs	r3, #64	; 0x40
    52c4:	1b5d      	subs	r5, r3, r5
    52c6:	40a9      	lsls	r1, r5
    52c8:	430a      	orrs	r2, r1
    52ca:	1e51      	subs	r1, r2, #1
    52cc:	418a      	sbcs	r2, r1
    52ce:	2100      	movs	r1, #0
    52d0:	4317      	orrs	r7, r2
    52d2:	e6af      	b.n	5034 <__aeabi_dsub+0xa4>
    52d4:	000007ff 	.word	0x000007ff
    52d8:	ff7fffff 	.word	0xff7fffff
    52dc:	800fffff 	.word	0x800fffff
    52e0:	2e00      	cmp	r6, #0
    52e2:	d03e      	beq.n	5362 <__aeabi_dsub+0x3d2>
    52e4:	4eb3      	ldr	r6, [pc, #716]	; (55b4 <__aeabi_dsub+0x624>)
    52e6:	45b4      	cmp	ip, r6
    52e8:	d045      	beq.n	5376 <__aeabi_dsub+0x3e6>
    52ea:	2680      	movs	r6, #128	; 0x80
    52ec:	0436      	lsls	r6, r6, #16
    52ee:	426d      	negs	r5, r5
    52f0:	4334      	orrs	r4, r6
    52f2:	2d38      	cmp	r5, #56	; 0x38
    52f4:	dd00      	ble.n	52f8 <__aeabi_dsub+0x368>
    52f6:	e0a8      	b.n	544a <__aeabi_dsub+0x4ba>
    52f8:	2d1f      	cmp	r5, #31
    52fa:	dd00      	ble.n	52fe <__aeabi_dsub+0x36e>
    52fc:	e11f      	b.n	553e <__aeabi_dsub+0x5ae>
    52fe:	2620      	movs	r6, #32
    5300:	0027      	movs	r7, r4
    5302:	4650      	mov	r0, sl
    5304:	1b76      	subs	r6, r6, r5
    5306:	40b7      	lsls	r7, r6
    5308:	40e8      	lsrs	r0, r5
    530a:	4307      	orrs	r7, r0
    530c:	4650      	mov	r0, sl
    530e:	40b0      	lsls	r0, r6
    5310:	1e46      	subs	r6, r0, #1
    5312:	41b0      	sbcs	r0, r6
    5314:	40ec      	lsrs	r4, r5
    5316:	4338      	orrs	r0, r7
    5318:	1a17      	subs	r7, r2, r0
    531a:	42ba      	cmp	r2, r7
    531c:	4192      	sbcs	r2, r2
    531e:	1b0c      	subs	r4, r1, r4
    5320:	4252      	negs	r2, r2
    5322:	1aa4      	subs	r4, r4, r2
    5324:	4666      	mov	r6, ip
    5326:	4698      	mov	r8, r3
    5328:	e68b      	b.n	5042 <__aeabi_dsub+0xb2>
    532a:	4664      	mov	r4, ip
    532c:	4667      	mov	r7, ip
    532e:	432c      	orrs	r4, r5
    5330:	d000      	beq.n	5334 <__aeabi_dsub+0x3a4>
    5332:	e68b      	b.n	504c <__aeabi_dsub+0xbc>
    5334:	2500      	movs	r5, #0
    5336:	2600      	movs	r6, #0
    5338:	2700      	movs	r7, #0
    533a:	e6ea      	b.n	5112 <__aeabi_dsub+0x182>
    533c:	001e      	movs	r6, r3
    533e:	e6ad      	b.n	509c <__aeabi_dsub+0x10c>
    5340:	2b1f      	cmp	r3, #31
    5342:	dc60      	bgt.n	5406 <__aeabi_dsub+0x476>
    5344:	2720      	movs	r7, #32
    5346:	1af8      	subs	r0, r7, r3
    5348:	000f      	movs	r7, r1
    534a:	4684      	mov	ip, r0
    534c:	4087      	lsls	r7, r0
    534e:	0010      	movs	r0, r2
    5350:	40d8      	lsrs	r0, r3
    5352:	4307      	orrs	r7, r0
    5354:	4660      	mov	r0, ip
    5356:	4082      	lsls	r2, r0
    5358:	1e50      	subs	r0, r2, #1
    535a:	4182      	sbcs	r2, r0
    535c:	40d9      	lsrs	r1, r3
    535e:	4317      	orrs	r7, r2
    5360:	e6f5      	b.n	514e <__aeabi_dsub+0x1be>
    5362:	0026      	movs	r6, r4
    5364:	4650      	mov	r0, sl
    5366:	4306      	orrs	r6, r0
    5368:	d005      	beq.n	5376 <__aeabi_dsub+0x3e6>
    536a:	43ed      	mvns	r5, r5
    536c:	2d00      	cmp	r5, #0
    536e:	d0d3      	beq.n	5318 <__aeabi_dsub+0x388>
    5370:	4e90      	ldr	r6, [pc, #576]	; (55b4 <__aeabi_dsub+0x624>)
    5372:	45b4      	cmp	ip, r6
    5374:	d1bd      	bne.n	52f2 <__aeabi_dsub+0x362>
    5376:	000c      	movs	r4, r1
    5378:	0017      	movs	r7, r2
    537a:	4666      	mov	r6, ip
    537c:	4698      	mov	r8, r3
    537e:	e68d      	b.n	509c <__aeabi_dsub+0x10c>
    5380:	488c      	ldr	r0, [pc, #560]	; (55b4 <__aeabi_dsub+0x624>)
    5382:	4283      	cmp	r3, r0
    5384:	d00b      	beq.n	539e <__aeabi_dsub+0x40e>
    5386:	4663      	mov	r3, ip
    5388:	e6d9      	b.n	513e <__aeabi_dsub+0x1ae>
    538a:	2d00      	cmp	r5, #0
    538c:	d000      	beq.n	5390 <__aeabi_dsub+0x400>
    538e:	e096      	b.n	54be <__aeabi_dsub+0x52e>
    5390:	0008      	movs	r0, r1
    5392:	4310      	orrs	r0, r2
    5394:	d100      	bne.n	5398 <__aeabi_dsub+0x408>
    5396:	e0e2      	b.n	555e <__aeabi_dsub+0x5ce>
    5398:	000c      	movs	r4, r1
    539a:	0017      	movs	r7, r2
    539c:	4698      	mov	r8, r3
    539e:	4e85      	ldr	r6, [pc, #532]	; (55b4 <__aeabi_dsub+0x624>)
    53a0:	e67c      	b.n	509c <__aeabi_dsub+0x10c>
    53a2:	2500      	movs	r5, #0
    53a4:	e780      	b.n	52a8 <__aeabi_dsub+0x318>
    53a6:	2100      	movs	r1, #0
    53a8:	e78e      	b.n	52c8 <__aeabi_dsub+0x338>
    53aa:	0023      	movs	r3, r4
    53ac:	4650      	mov	r0, sl
    53ae:	4303      	orrs	r3, r0
    53b0:	2e00      	cmp	r6, #0
    53b2:	d000      	beq.n	53b6 <__aeabi_dsub+0x426>
    53b4:	e0a8      	b.n	5508 <__aeabi_dsub+0x578>
    53b6:	2b00      	cmp	r3, #0
    53b8:	d100      	bne.n	53bc <__aeabi_dsub+0x42c>
    53ba:	e0de      	b.n	557a <__aeabi_dsub+0x5ea>
    53bc:	000b      	movs	r3, r1
    53be:	4313      	orrs	r3, r2
    53c0:	d100      	bne.n	53c4 <__aeabi_dsub+0x434>
    53c2:	e66b      	b.n	509c <__aeabi_dsub+0x10c>
    53c4:	4452      	add	r2, sl
    53c6:	4552      	cmp	r2, sl
    53c8:	4180      	sbcs	r0, r0
    53ca:	1864      	adds	r4, r4, r1
    53cc:	4240      	negs	r0, r0
    53ce:	1824      	adds	r4, r4, r0
    53d0:	0017      	movs	r7, r2
    53d2:	0223      	lsls	r3, r4, #8
    53d4:	d400      	bmi.n	53d8 <__aeabi_dsub+0x448>
    53d6:	e6fd      	b.n	51d4 <__aeabi_dsub+0x244>
    53d8:	4b77      	ldr	r3, [pc, #476]	; (55b8 <__aeabi_dsub+0x628>)
    53da:	4666      	mov	r6, ip
    53dc:	401c      	ands	r4, r3
    53de:	e65d      	b.n	509c <__aeabi_dsub+0x10c>
    53e0:	0025      	movs	r5, r4
    53e2:	4650      	mov	r0, sl
    53e4:	4305      	orrs	r5, r0
    53e6:	2e00      	cmp	r6, #0
    53e8:	d1cf      	bne.n	538a <__aeabi_dsub+0x3fa>
    53ea:	2d00      	cmp	r5, #0
    53ec:	d14f      	bne.n	548e <__aeabi_dsub+0x4fe>
    53ee:	000c      	movs	r4, r1
    53f0:	4314      	orrs	r4, r2
    53f2:	d100      	bne.n	53f6 <__aeabi_dsub+0x466>
    53f4:	e0a0      	b.n	5538 <__aeabi_dsub+0x5a8>
    53f6:	000c      	movs	r4, r1
    53f8:	0017      	movs	r7, r2
    53fa:	4698      	mov	r8, r3
    53fc:	e64e      	b.n	509c <__aeabi_dsub+0x10c>
    53fe:	4666      	mov	r6, ip
    5400:	2400      	movs	r4, #0
    5402:	2700      	movs	r7, #0
    5404:	e685      	b.n	5112 <__aeabi_dsub+0x182>
    5406:	001f      	movs	r7, r3
    5408:	0008      	movs	r0, r1
    540a:	3f20      	subs	r7, #32
    540c:	40f8      	lsrs	r0, r7
    540e:	0007      	movs	r7, r0
    5410:	2b20      	cmp	r3, #32
    5412:	d100      	bne.n	5416 <__aeabi_dsub+0x486>
    5414:	e08e      	b.n	5534 <__aeabi_dsub+0x5a4>
    5416:	2040      	movs	r0, #64	; 0x40
    5418:	1ac3      	subs	r3, r0, r3
    541a:	4099      	lsls	r1, r3
    541c:	430a      	orrs	r2, r1
    541e:	1e51      	subs	r1, r2, #1
    5420:	418a      	sbcs	r2, r1
    5422:	2100      	movs	r1, #0
    5424:	4317      	orrs	r7, r2
    5426:	e692      	b.n	514e <__aeabi_dsub+0x1be>
    5428:	2e00      	cmp	r6, #0
    542a:	d114      	bne.n	5456 <__aeabi_dsub+0x4c6>
    542c:	0026      	movs	r6, r4
    542e:	4650      	mov	r0, sl
    5430:	4306      	orrs	r6, r0
    5432:	d062      	beq.n	54fa <__aeabi_dsub+0x56a>
    5434:	43db      	mvns	r3, r3
    5436:	2b00      	cmp	r3, #0
    5438:	d15c      	bne.n	54f4 <__aeabi_dsub+0x564>
    543a:	1887      	adds	r7, r0, r2
    543c:	4297      	cmp	r7, r2
    543e:	4192      	sbcs	r2, r2
    5440:	1864      	adds	r4, r4, r1
    5442:	4252      	negs	r2, r2
    5444:	18a4      	adds	r4, r4, r2
    5446:	4666      	mov	r6, ip
    5448:	e687      	b.n	515a <__aeabi_dsub+0x1ca>
    544a:	4650      	mov	r0, sl
    544c:	4320      	orrs	r0, r4
    544e:	1e44      	subs	r4, r0, #1
    5450:	41a0      	sbcs	r0, r4
    5452:	2400      	movs	r4, #0
    5454:	e760      	b.n	5318 <__aeabi_dsub+0x388>
    5456:	4e57      	ldr	r6, [pc, #348]	; (55b4 <__aeabi_dsub+0x624>)
    5458:	45b4      	cmp	ip, r6
    545a:	d04e      	beq.n	54fa <__aeabi_dsub+0x56a>
    545c:	2680      	movs	r6, #128	; 0x80
    545e:	0436      	lsls	r6, r6, #16
    5460:	425b      	negs	r3, r3
    5462:	4334      	orrs	r4, r6
    5464:	2b38      	cmp	r3, #56	; 0x38
    5466:	dd00      	ble.n	546a <__aeabi_dsub+0x4da>
    5468:	e07f      	b.n	556a <__aeabi_dsub+0x5da>
    546a:	2b1f      	cmp	r3, #31
    546c:	dd00      	ble.n	5470 <__aeabi_dsub+0x4e0>
    546e:	e08b      	b.n	5588 <__aeabi_dsub+0x5f8>
    5470:	2620      	movs	r6, #32
    5472:	0027      	movs	r7, r4
    5474:	4650      	mov	r0, sl
    5476:	1af6      	subs	r6, r6, r3
    5478:	40b7      	lsls	r7, r6
    547a:	40d8      	lsrs	r0, r3
    547c:	4307      	orrs	r7, r0
    547e:	4650      	mov	r0, sl
    5480:	40b0      	lsls	r0, r6
    5482:	1e46      	subs	r6, r0, #1
    5484:	41b0      	sbcs	r0, r6
    5486:	4307      	orrs	r7, r0
    5488:	40dc      	lsrs	r4, r3
    548a:	18bf      	adds	r7, r7, r2
    548c:	e7d6      	b.n	543c <__aeabi_dsub+0x4ac>
    548e:	000d      	movs	r5, r1
    5490:	4315      	orrs	r5, r2
    5492:	d100      	bne.n	5496 <__aeabi_dsub+0x506>
    5494:	e602      	b.n	509c <__aeabi_dsub+0x10c>
    5496:	4650      	mov	r0, sl
    5498:	1a80      	subs	r0, r0, r2
    549a:	4582      	cmp	sl, r0
    549c:	41bf      	sbcs	r7, r7
    549e:	1a65      	subs	r5, r4, r1
    54a0:	427f      	negs	r7, r7
    54a2:	1bed      	subs	r5, r5, r7
    54a4:	4684      	mov	ip, r0
    54a6:	0228      	lsls	r0, r5, #8
    54a8:	d400      	bmi.n	54ac <__aeabi_dsub+0x51c>
    54aa:	e68d      	b.n	51c8 <__aeabi_dsub+0x238>
    54ac:	4650      	mov	r0, sl
    54ae:	1a17      	subs	r7, r2, r0
    54b0:	42ba      	cmp	r2, r7
    54b2:	4192      	sbcs	r2, r2
    54b4:	1b0c      	subs	r4, r1, r4
    54b6:	4252      	negs	r2, r2
    54b8:	1aa4      	subs	r4, r4, r2
    54ba:	4698      	mov	r8, r3
    54bc:	e5ee      	b.n	509c <__aeabi_dsub+0x10c>
    54be:	000d      	movs	r5, r1
    54c0:	4315      	orrs	r5, r2
    54c2:	d100      	bne.n	54c6 <__aeabi_dsub+0x536>
    54c4:	e76b      	b.n	539e <__aeabi_dsub+0x40e>
    54c6:	4650      	mov	r0, sl
    54c8:	0767      	lsls	r7, r4, #29
    54ca:	08c0      	lsrs	r0, r0, #3
    54cc:	4307      	orrs	r7, r0
    54ce:	2080      	movs	r0, #128	; 0x80
    54d0:	08e4      	lsrs	r4, r4, #3
    54d2:	0300      	lsls	r0, r0, #12
    54d4:	4204      	tst	r4, r0
    54d6:	d007      	beq.n	54e8 <__aeabi_dsub+0x558>
    54d8:	08cd      	lsrs	r5, r1, #3
    54da:	4205      	tst	r5, r0
    54dc:	d104      	bne.n	54e8 <__aeabi_dsub+0x558>
    54de:	002c      	movs	r4, r5
    54e0:	4698      	mov	r8, r3
    54e2:	08d7      	lsrs	r7, r2, #3
    54e4:	0749      	lsls	r1, r1, #29
    54e6:	430f      	orrs	r7, r1
    54e8:	0f7b      	lsrs	r3, r7, #29
    54ea:	00e4      	lsls	r4, r4, #3
    54ec:	431c      	orrs	r4, r3
    54ee:	00ff      	lsls	r7, r7, #3
    54f0:	4e30      	ldr	r6, [pc, #192]	; (55b4 <__aeabi_dsub+0x624>)
    54f2:	e5d3      	b.n	509c <__aeabi_dsub+0x10c>
    54f4:	4e2f      	ldr	r6, [pc, #188]	; (55b4 <__aeabi_dsub+0x624>)
    54f6:	45b4      	cmp	ip, r6
    54f8:	d1b4      	bne.n	5464 <__aeabi_dsub+0x4d4>
    54fa:	000c      	movs	r4, r1
    54fc:	0017      	movs	r7, r2
    54fe:	4666      	mov	r6, ip
    5500:	e5cc      	b.n	509c <__aeabi_dsub+0x10c>
    5502:	2700      	movs	r7, #0
    5504:	2400      	movs	r4, #0
    5506:	e5e8      	b.n	50da <__aeabi_dsub+0x14a>
    5508:	2b00      	cmp	r3, #0
    550a:	d039      	beq.n	5580 <__aeabi_dsub+0x5f0>
    550c:	000b      	movs	r3, r1
    550e:	4313      	orrs	r3, r2
    5510:	d100      	bne.n	5514 <__aeabi_dsub+0x584>
    5512:	e744      	b.n	539e <__aeabi_dsub+0x40e>
    5514:	08c0      	lsrs	r0, r0, #3
    5516:	0767      	lsls	r7, r4, #29
    5518:	4307      	orrs	r7, r0
    551a:	2080      	movs	r0, #128	; 0x80
    551c:	08e4      	lsrs	r4, r4, #3
    551e:	0300      	lsls	r0, r0, #12
    5520:	4204      	tst	r4, r0
    5522:	d0e1      	beq.n	54e8 <__aeabi_dsub+0x558>
    5524:	08cb      	lsrs	r3, r1, #3
    5526:	4203      	tst	r3, r0
    5528:	d1de      	bne.n	54e8 <__aeabi_dsub+0x558>
    552a:	08d7      	lsrs	r7, r2, #3
    552c:	0749      	lsls	r1, r1, #29
    552e:	430f      	orrs	r7, r1
    5530:	001c      	movs	r4, r3
    5532:	e7d9      	b.n	54e8 <__aeabi_dsub+0x558>
    5534:	2100      	movs	r1, #0
    5536:	e771      	b.n	541c <__aeabi_dsub+0x48c>
    5538:	2500      	movs	r5, #0
    553a:	2700      	movs	r7, #0
    553c:	e5e9      	b.n	5112 <__aeabi_dsub+0x182>
    553e:	002e      	movs	r6, r5
    5540:	0027      	movs	r7, r4
    5542:	3e20      	subs	r6, #32
    5544:	40f7      	lsrs	r7, r6
    5546:	2d20      	cmp	r5, #32
    5548:	d02f      	beq.n	55aa <__aeabi_dsub+0x61a>
    554a:	2640      	movs	r6, #64	; 0x40
    554c:	1b75      	subs	r5, r6, r5
    554e:	40ac      	lsls	r4, r5
    5550:	4650      	mov	r0, sl
    5552:	4320      	orrs	r0, r4
    5554:	1e44      	subs	r4, r0, #1
    5556:	41a0      	sbcs	r0, r4
    5558:	2400      	movs	r4, #0
    555a:	4338      	orrs	r0, r7
    555c:	e6dc      	b.n	5318 <__aeabi_dsub+0x388>
    555e:	2480      	movs	r4, #128	; 0x80
    5560:	2500      	movs	r5, #0
    5562:	0324      	lsls	r4, r4, #12
    5564:	4e13      	ldr	r6, [pc, #76]	; (55b4 <__aeabi_dsub+0x624>)
    5566:	2700      	movs	r7, #0
    5568:	e5d3      	b.n	5112 <__aeabi_dsub+0x182>
    556a:	4650      	mov	r0, sl
    556c:	4320      	orrs	r0, r4
    556e:	0007      	movs	r7, r0
    5570:	1e78      	subs	r0, r7, #1
    5572:	4187      	sbcs	r7, r0
    5574:	2400      	movs	r4, #0
    5576:	18bf      	adds	r7, r7, r2
    5578:	e760      	b.n	543c <__aeabi_dsub+0x4ac>
    557a:	000c      	movs	r4, r1
    557c:	0017      	movs	r7, r2
    557e:	e58d      	b.n	509c <__aeabi_dsub+0x10c>
    5580:	000c      	movs	r4, r1
    5582:	0017      	movs	r7, r2
    5584:	4e0b      	ldr	r6, [pc, #44]	; (55b4 <__aeabi_dsub+0x624>)
    5586:	e589      	b.n	509c <__aeabi_dsub+0x10c>
    5588:	001e      	movs	r6, r3
    558a:	0027      	movs	r7, r4
    558c:	3e20      	subs	r6, #32
    558e:	40f7      	lsrs	r7, r6
    5590:	2b20      	cmp	r3, #32
    5592:	d00c      	beq.n	55ae <__aeabi_dsub+0x61e>
    5594:	2640      	movs	r6, #64	; 0x40
    5596:	1af3      	subs	r3, r6, r3
    5598:	409c      	lsls	r4, r3
    559a:	4650      	mov	r0, sl
    559c:	4320      	orrs	r0, r4
    559e:	1e44      	subs	r4, r0, #1
    55a0:	41a0      	sbcs	r0, r4
    55a2:	4307      	orrs	r7, r0
    55a4:	2400      	movs	r4, #0
    55a6:	18bf      	adds	r7, r7, r2
    55a8:	e748      	b.n	543c <__aeabi_dsub+0x4ac>
    55aa:	2400      	movs	r4, #0
    55ac:	e7d0      	b.n	5550 <__aeabi_dsub+0x5c0>
    55ae:	2400      	movs	r4, #0
    55b0:	e7f3      	b.n	559a <__aeabi_dsub+0x60a>
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	000007ff 	.word	0x000007ff
    55b8:	ff7fffff 	.word	0xff7fffff

000055bc <__aeabi_d2iz>:
    55bc:	b530      	push	{r4, r5, lr}
    55be:	4d13      	ldr	r5, [pc, #76]	; (560c <__aeabi_d2iz+0x50>)
    55c0:	030a      	lsls	r2, r1, #12
    55c2:	004b      	lsls	r3, r1, #1
    55c4:	0b12      	lsrs	r2, r2, #12
    55c6:	0d5b      	lsrs	r3, r3, #21
    55c8:	0fc9      	lsrs	r1, r1, #31
    55ca:	2400      	movs	r4, #0
    55cc:	42ab      	cmp	r3, r5
    55ce:	dd10      	ble.n	55f2 <__aeabi_d2iz+0x36>
    55d0:	4c0f      	ldr	r4, [pc, #60]	; (5610 <__aeabi_d2iz+0x54>)
    55d2:	42a3      	cmp	r3, r4
    55d4:	dc0f      	bgt.n	55f6 <__aeabi_d2iz+0x3a>
    55d6:	2480      	movs	r4, #128	; 0x80
    55d8:	4d0e      	ldr	r5, [pc, #56]	; (5614 <__aeabi_d2iz+0x58>)
    55da:	0364      	lsls	r4, r4, #13
    55dc:	4322      	orrs	r2, r4
    55de:	1aed      	subs	r5, r5, r3
    55e0:	2d1f      	cmp	r5, #31
    55e2:	dd0b      	ble.n	55fc <__aeabi_d2iz+0x40>
    55e4:	480c      	ldr	r0, [pc, #48]	; (5618 <__aeabi_d2iz+0x5c>)
    55e6:	1ac3      	subs	r3, r0, r3
    55e8:	40da      	lsrs	r2, r3
    55ea:	4254      	negs	r4, r2
    55ec:	2900      	cmp	r1, #0
    55ee:	d100      	bne.n	55f2 <__aeabi_d2iz+0x36>
    55f0:	0014      	movs	r4, r2
    55f2:	0020      	movs	r0, r4
    55f4:	bd30      	pop	{r4, r5, pc}
    55f6:	4b09      	ldr	r3, [pc, #36]	; (561c <__aeabi_d2iz+0x60>)
    55f8:	18cc      	adds	r4, r1, r3
    55fa:	e7fa      	b.n	55f2 <__aeabi_d2iz+0x36>
    55fc:	4c08      	ldr	r4, [pc, #32]	; (5620 <__aeabi_d2iz+0x64>)
    55fe:	40e8      	lsrs	r0, r5
    5600:	46a4      	mov	ip, r4
    5602:	4463      	add	r3, ip
    5604:	409a      	lsls	r2, r3
    5606:	4302      	orrs	r2, r0
    5608:	e7ef      	b.n	55ea <__aeabi_d2iz+0x2e>
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	000003fe 	.word	0x000003fe
    5610:	0000041d 	.word	0x0000041d
    5614:	00000433 	.word	0x00000433
    5618:	00000413 	.word	0x00000413
    561c:	7fffffff 	.word	0x7fffffff
    5620:	fffffbed 	.word	0xfffffbed

00005624 <__aeabi_i2d>:
    5624:	b570      	push	{r4, r5, r6, lr}
    5626:	2800      	cmp	r0, #0
    5628:	d030      	beq.n	568c <__aeabi_i2d+0x68>
    562a:	17c3      	asrs	r3, r0, #31
    562c:	18c4      	adds	r4, r0, r3
    562e:	405c      	eors	r4, r3
    5630:	0fc5      	lsrs	r5, r0, #31
    5632:	0020      	movs	r0, r4
    5634:	f000 f8fa 	bl	582c <__clzsi2>
    5638:	4b17      	ldr	r3, [pc, #92]	; (5698 <__aeabi_i2d+0x74>)
    563a:	4a18      	ldr	r2, [pc, #96]	; (569c <__aeabi_i2d+0x78>)
    563c:	1a1b      	subs	r3, r3, r0
    563e:	1ad2      	subs	r2, r2, r3
    5640:	2a1f      	cmp	r2, #31
    5642:	dd18      	ble.n	5676 <__aeabi_i2d+0x52>
    5644:	4a16      	ldr	r2, [pc, #88]	; (56a0 <__aeabi_i2d+0x7c>)
    5646:	1ad2      	subs	r2, r2, r3
    5648:	4094      	lsls	r4, r2
    564a:	2200      	movs	r2, #0
    564c:	0324      	lsls	r4, r4, #12
    564e:	055b      	lsls	r3, r3, #21
    5650:	0b24      	lsrs	r4, r4, #12
    5652:	0d5b      	lsrs	r3, r3, #21
    5654:	2100      	movs	r1, #0
    5656:	0010      	movs	r0, r2
    5658:	0324      	lsls	r4, r4, #12
    565a:	0d0a      	lsrs	r2, r1, #20
    565c:	0b24      	lsrs	r4, r4, #12
    565e:	0512      	lsls	r2, r2, #20
    5660:	4322      	orrs	r2, r4
    5662:	4c10      	ldr	r4, [pc, #64]	; (56a4 <__aeabi_i2d+0x80>)
    5664:	051b      	lsls	r3, r3, #20
    5666:	4022      	ands	r2, r4
    5668:	4313      	orrs	r3, r2
    566a:	005b      	lsls	r3, r3, #1
    566c:	07ed      	lsls	r5, r5, #31
    566e:	085b      	lsrs	r3, r3, #1
    5670:	432b      	orrs	r3, r5
    5672:	0019      	movs	r1, r3
    5674:	bd70      	pop	{r4, r5, r6, pc}
    5676:	0021      	movs	r1, r4
    5678:	4091      	lsls	r1, r2
    567a:	000a      	movs	r2, r1
    567c:	210b      	movs	r1, #11
    567e:	1a08      	subs	r0, r1, r0
    5680:	40c4      	lsrs	r4, r0
    5682:	055b      	lsls	r3, r3, #21
    5684:	0324      	lsls	r4, r4, #12
    5686:	0b24      	lsrs	r4, r4, #12
    5688:	0d5b      	lsrs	r3, r3, #21
    568a:	e7e3      	b.n	5654 <__aeabi_i2d+0x30>
    568c:	2500      	movs	r5, #0
    568e:	2300      	movs	r3, #0
    5690:	2400      	movs	r4, #0
    5692:	2200      	movs	r2, #0
    5694:	e7de      	b.n	5654 <__aeabi_i2d+0x30>
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	0000041e 	.word	0x0000041e
    569c:	00000433 	.word	0x00000433
    56a0:	00000413 	.word	0x00000413
    56a4:	800fffff 	.word	0x800fffff

000056a8 <__aeabi_ui2d>:
    56a8:	b510      	push	{r4, lr}
    56aa:	1e04      	subs	r4, r0, #0
    56ac:	d028      	beq.n	5700 <__aeabi_ui2d+0x58>
    56ae:	f000 f8bd 	bl	582c <__clzsi2>
    56b2:	4b15      	ldr	r3, [pc, #84]	; (5708 <__aeabi_ui2d+0x60>)
    56b4:	4a15      	ldr	r2, [pc, #84]	; (570c <__aeabi_ui2d+0x64>)
    56b6:	1a1b      	subs	r3, r3, r0
    56b8:	1ad2      	subs	r2, r2, r3
    56ba:	2a1f      	cmp	r2, #31
    56bc:	dd15      	ble.n	56ea <__aeabi_ui2d+0x42>
    56be:	4a14      	ldr	r2, [pc, #80]	; (5710 <__aeabi_ui2d+0x68>)
    56c0:	1ad2      	subs	r2, r2, r3
    56c2:	4094      	lsls	r4, r2
    56c4:	2200      	movs	r2, #0
    56c6:	0324      	lsls	r4, r4, #12
    56c8:	055b      	lsls	r3, r3, #21
    56ca:	0b24      	lsrs	r4, r4, #12
    56cc:	0d5b      	lsrs	r3, r3, #21
    56ce:	2100      	movs	r1, #0
    56d0:	0010      	movs	r0, r2
    56d2:	0324      	lsls	r4, r4, #12
    56d4:	0d0a      	lsrs	r2, r1, #20
    56d6:	0b24      	lsrs	r4, r4, #12
    56d8:	0512      	lsls	r2, r2, #20
    56da:	4322      	orrs	r2, r4
    56dc:	4c0d      	ldr	r4, [pc, #52]	; (5714 <__aeabi_ui2d+0x6c>)
    56de:	051b      	lsls	r3, r3, #20
    56e0:	4022      	ands	r2, r4
    56e2:	4313      	orrs	r3, r2
    56e4:	005b      	lsls	r3, r3, #1
    56e6:	0859      	lsrs	r1, r3, #1
    56e8:	bd10      	pop	{r4, pc}
    56ea:	0021      	movs	r1, r4
    56ec:	4091      	lsls	r1, r2
    56ee:	000a      	movs	r2, r1
    56f0:	210b      	movs	r1, #11
    56f2:	1a08      	subs	r0, r1, r0
    56f4:	40c4      	lsrs	r4, r0
    56f6:	055b      	lsls	r3, r3, #21
    56f8:	0324      	lsls	r4, r4, #12
    56fa:	0b24      	lsrs	r4, r4, #12
    56fc:	0d5b      	lsrs	r3, r3, #21
    56fe:	e7e6      	b.n	56ce <__aeabi_ui2d+0x26>
    5700:	2300      	movs	r3, #0
    5702:	2400      	movs	r4, #0
    5704:	2200      	movs	r2, #0
    5706:	e7e2      	b.n	56ce <__aeabi_ui2d+0x26>
    5708:	0000041e 	.word	0x0000041e
    570c:	00000433 	.word	0x00000433
    5710:	00000413 	.word	0x00000413
    5714:	800fffff 	.word	0x800fffff

00005718 <__aeabi_d2f>:
    5718:	b5f0      	push	{r4, r5, r6, r7, lr}
    571a:	004c      	lsls	r4, r1, #1
    571c:	0d64      	lsrs	r4, r4, #21
    571e:	030b      	lsls	r3, r1, #12
    5720:	1c62      	adds	r2, r4, #1
    5722:	0f45      	lsrs	r5, r0, #29
    5724:	0a5b      	lsrs	r3, r3, #9
    5726:	0552      	lsls	r2, r2, #21
    5728:	432b      	orrs	r3, r5
    572a:	0fc9      	lsrs	r1, r1, #31
    572c:	00c5      	lsls	r5, r0, #3
    572e:	0d52      	lsrs	r2, r2, #21
    5730:	2a01      	cmp	r2, #1
    5732:	dd28      	ble.n	5786 <__aeabi_d2f+0x6e>
    5734:	4a3a      	ldr	r2, [pc, #232]	; (5820 <__aeabi_d2f+0x108>)
    5736:	18a6      	adds	r6, r4, r2
    5738:	2efe      	cmp	r6, #254	; 0xfe
    573a:	dc1b      	bgt.n	5774 <__aeabi_d2f+0x5c>
    573c:	2e00      	cmp	r6, #0
    573e:	dd3e      	ble.n	57be <__aeabi_d2f+0xa6>
    5740:	0180      	lsls	r0, r0, #6
    5742:	0002      	movs	r2, r0
    5744:	1e50      	subs	r0, r2, #1
    5746:	4182      	sbcs	r2, r0
    5748:	0f6d      	lsrs	r5, r5, #29
    574a:	432a      	orrs	r2, r5
    574c:	00db      	lsls	r3, r3, #3
    574e:	4313      	orrs	r3, r2
    5750:	075a      	lsls	r2, r3, #29
    5752:	d004      	beq.n	575e <__aeabi_d2f+0x46>
    5754:	220f      	movs	r2, #15
    5756:	401a      	ands	r2, r3
    5758:	2a04      	cmp	r2, #4
    575a:	d000      	beq.n	575e <__aeabi_d2f+0x46>
    575c:	3304      	adds	r3, #4
    575e:	2280      	movs	r2, #128	; 0x80
    5760:	04d2      	lsls	r2, r2, #19
    5762:	401a      	ands	r2, r3
    5764:	d05a      	beq.n	581c <__aeabi_d2f+0x104>
    5766:	3601      	adds	r6, #1
    5768:	2eff      	cmp	r6, #255	; 0xff
    576a:	d003      	beq.n	5774 <__aeabi_d2f+0x5c>
    576c:	019b      	lsls	r3, r3, #6
    576e:	0a5b      	lsrs	r3, r3, #9
    5770:	b2f4      	uxtb	r4, r6
    5772:	e001      	b.n	5778 <__aeabi_d2f+0x60>
    5774:	24ff      	movs	r4, #255	; 0xff
    5776:	2300      	movs	r3, #0
    5778:	0258      	lsls	r0, r3, #9
    577a:	05e4      	lsls	r4, r4, #23
    577c:	0a40      	lsrs	r0, r0, #9
    577e:	07c9      	lsls	r1, r1, #31
    5780:	4320      	orrs	r0, r4
    5782:	4308      	orrs	r0, r1
    5784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5786:	2c00      	cmp	r4, #0
    5788:	d007      	beq.n	579a <__aeabi_d2f+0x82>
    578a:	431d      	orrs	r5, r3
    578c:	d0f2      	beq.n	5774 <__aeabi_d2f+0x5c>
    578e:	2080      	movs	r0, #128	; 0x80
    5790:	00db      	lsls	r3, r3, #3
    5792:	0480      	lsls	r0, r0, #18
    5794:	4303      	orrs	r3, r0
    5796:	26ff      	movs	r6, #255	; 0xff
    5798:	e7da      	b.n	5750 <__aeabi_d2f+0x38>
    579a:	432b      	orrs	r3, r5
    579c:	d003      	beq.n	57a6 <__aeabi_d2f+0x8e>
    579e:	2305      	movs	r3, #5
    57a0:	08db      	lsrs	r3, r3, #3
    57a2:	2cff      	cmp	r4, #255	; 0xff
    57a4:	d003      	beq.n	57ae <__aeabi_d2f+0x96>
    57a6:	025b      	lsls	r3, r3, #9
    57a8:	0a5b      	lsrs	r3, r3, #9
    57aa:	b2e4      	uxtb	r4, r4
    57ac:	e7e4      	b.n	5778 <__aeabi_d2f+0x60>
    57ae:	2b00      	cmp	r3, #0
    57b0:	d032      	beq.n	5818 <__aeabi_d2f+0x100>
    57b2:	2080      	movs	r0, #128	; 0x80
    57b4:	03c0      	lsls	r0, r0, #15
    57b6:	4303      	orrs	r3, r0
    57b8:	025b      	lsls	r3, r3, #9
    57ba:	0a5b      	lsrs	r3, r3, #9
    57bc:	e7dc      	b.n	5778 <__aeabi_d2f+0x60>
    57be:	0032      	movs	r2, r6
    57c0:	3217      	adds	r2, #23
    57c2:	db14      	blt.n	57ee <__aeabi_d2f+0xd6>
    57c4:	2280      	movs	r2, #128	; 0x80
    57c6:	271e      	movs	r7, #30
    57c8:	0412      	lsls	r2, r2, #16
    57ca:	4313      	orrs	r3, r2
    57cc:	1bbf      	subs	r7, r7, r6
    57ce:	2f1f      	cmp	r7, #31
    57d0:	dc0f      	bgt.n	57f2 <__aeabi_d2f+0xda>
    57d2:	4a14      	ldr	r2, [pc, #80]	; (5824 <__aeabi_d2f+0x10c>)
    57d4:	4694      	mov	ip, r2
    57d6:	4464      	add	r4, ip
    57d8:	002a      	movs	r2, r5
    57da:	40a5      	lsls	r5, r4
    57dc:	002e      	movs	r6, r5
    57de:	40a3      	lsls	r3, r4
    57e0:	1e75      	subs	r5, r6, #1
    57e2:	41ae      	sbcs	r6, r5
    57e4:	40fa      	lsrs	r2, r7
    57e6:	4333      	orrs	r3, r6
    57e8:	4313      	orrs	r3, r2
    57ea:	2600      	movs	r6, #0
    57ec:	e7b0      	b.n	5750 <__aeabi_d2f+0x38>
    57ee:	2400      	movs	r4, #0
    57f0:	e7d5      	b.n	579e <__aeabi_d2f+0x86>
    57f2:	2202      	movs	r2, #2
    57f4:	4252      	negs	r2, r2
    57f6:	1b96      	subs	r6, r2, r6
    57f8:	001a      	movs	r2, r3
    57fa:	40f2      	lsrs	r2, r6
    57fc:	2f20      	cmp	r7, #32
    57fe:	d009      	beq.n	5814 <__aeabi_d2f+0xfc>
    5800:	4809      	ldr	r0, [pc, #36]	; (5828 <__aeabi_d2f+0x110>)
    5802:	4684      	mov	ip, r0
    5804:	4464      	add	r4, ip
    5806:	40a3      	lsls	r3, r4
    5808:	432b      	orrs	r3, r5
    580a:	1e5d      	subs	r5, r3, #1
    580c:	41ab      	sbcs	r3, r5
    580e:	2600      	movs	r6, #0
    5810:	4313      	orrs	r3, r2
    5812:	e79d      	b.n	5750 <__aeabi_d2f+0x38>
    5814:	2300      	movs	r3, #0
    5816:	e7f7      	b.n	5808 <__aeabi_d2f+0xf0>
    5818:	2300      	movs	r3, #0
    581a:	e7ad      	b.n	5778 <__aeabi_d2f+0x60>
    581c:	0034      	movs	r4, r6
    581e:	e7bf      	b.n	57a0 <__aeabi_d2f+0x88>
    5820:	fffffc80 	.word	0xfffffc80
    5824:	fffffc82 	.word	0xfffffc82
    5828:	fffffca2 	.word	0xfffffca2

0000582c <__clzsi2>:
    582c:	211c      	movs	r1, #28
    582e:	2301      	movs	r3, #1
    5830:	041b      	lsls	r3, r3, #16
    5832:	4298      	cmp	r0, r3
    5834:	d301      	bcc.n	583a <__clzsi2+0xe>
    5836:	0c00      	lsrs	r0, r0, #16
    5838:	3910      	subs	r1, #16
    583a:	0a1b      	lsrs	r3, r3, #8
    583c:	4298      	cmp	r0, r3
    583e:	d301      	bcc.n	5844 <__clzsi2+0x18>
    5840:	0a00      	lsrs	r0, r0, #8
    5842:	3908      	subs	r1, #8
    5844:	091b      	lsrs	r3, r3, #4
    5846:	4298      	cmp	r0, r3
    5848:	d301      	bcc.n	584e <__clzsi2+0x22>
    584a:	0900      	lsrs	r0, r0, #4
    584c:	3904      	subs	r1, #4
    584e:	a202      	add	r2, pc, #8	; (adr r2, 5858 <__clzsi2+0x2c>)
    5850:	5c10      	ldrb	r0, [r2, r0]
    5852:	1840      	adds	r0, r0, r1
    5854:	4770      	bx	lr
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	02020304 	.word	0x02020304
    585c:	01010101 	.word	0x01010101
	...

00005868 <__clzdi2>:
    5868:	b510      	push	{r4, lr}
    586a:	2900      	cmp	r1, #0
    586c:	d103      	bne.n	5876 <__clzdi2+0xe>
    586e:	f7ff ffdd 	bl	582c <__clzsi2>
    5872:	3020      	adds	r0, #32
    5874:	e002      	b.n	587c <__clzdi2+0x14>
    5876:	1c08      	adds	r0, r1, #0
    5878:	f7ff ffd8 	bl	582c <__clzsi2>
    587c:	bd10      	pop	{r4, pc}
    587e:	46c0      	nop			; (mov r8, r8)

00005880 <__divdi3>:
    5880:	b5f0      	push	{r4, r5, r6, r7, lr}
    5882:	464e      	mov	r6, r9
    5884:	4657      	mov	r7, sl
    5886:	46de      	mov	lr, fp
    5888:	4645      	mov	r5, r8
    588a:	b5e0      	push	{r5, r6, r7, lr}
    588c:	0006      	movs	r6, r0
    588e:	2000      	movs	r0, #0
    5890:	000f      	movs	r7, r1
    5892:	b083      	sub	sp, #12
    5894:	0019      	movs	r1, r3
    5896:	4681      	mov	r9, r0
    5898:	2f00      	cmp	r7, #0
    589a:	da00      	bge.n	589e <__divdi3+0x1e>
    589c:	e08c      	b.n	59b8 <__divdi3+0x138>
    589e:	2900      	cmp	r1, #0
    58a0:	da00      	bge.n	58a4 <__divdi3+0x24>
    58a2:	e080      	b.n	59a6 <__divdi3+0x126>
    58a4:	0034      	movs	r4, r6
    58a6:	003d      	movs	r5, r7
    58a8:	4692      	mov	sl, r2
    58aa:	4698      	mov	r8, r3
    58ac:	42bb      	cmp	r3, r7
    58ae:	d869      	bhi.n	5984 <__divdi3+0x104>
    58b0:	d066      	beq.n	5980 <__divdi3+0x100>
    58b2:	4641      	mov	r1, r8
    58b4:	4650      	mov	r0, sl
    58b6:	f7ff ffd7 	bl	5868 <__clzdi2>
    58ba:	4683      	mov	fp, r0
    58bc:	0039      	movs	r1, r7
    58be:	0030      	movs	r0, r6
    58c0:	f7ff ffd2 	bl	5868 <__clzdi2>
    58c4:	465b      	mov	r3, fp
    58c6:	1a1b      	subs	r3, r3, r0
    58c8:	469c      	mov	ip, r3
    58ca:	3b20      	subs	r3, #32
    58cc:	469b      	mov	fp, r3
    58ce:	d500      	bpl.n	58d2 <__divdi3+0x52>
    58d0:	e087      	b.n	59e2 <__divdi3+0x162>
    58d2:	4651      	mov	r1, sl
    58d4:	4658      	mov	r0, fp
    58d6:	4081      	lsls	r1, r0
    58d8:	000b      	movs	r3, r1
    58da:	4651      	mov	r1, sl
    58dc:	4660      	mov	r0, ip
    58de:	4081      	lsls	r1, r0
    58e0:	000a      	movs	r2, r1
    58e2:	42bb      	cmp	r3, r7
    58e4:	d900      	bls.n	58e8 <__divdi3+0x68>
    58e6:	e072      	b.n	59ce <__divdi3+0x14e>
    58e8:	d06e      	beq.n	59c8 <__divdi3+0x148>
    58ea:	0034      	movs	r4, r6
    58ec:	003d      	movs	r5, r7
    58ee:	4659      	mov	r1, fp
    58f0:	1aa4      	subs	r4, r4, r2
    58f2:	419d      	sbcs	r5, r3
    58f4:	2900      	cmp	r1, #0
    58f6:	da00      	bge.n	58fa <__divdi3+0x7a>
    58f8:	e08a      	b.n	5a10 <__divdi3+0x190>
    58fa:	2100      	movs	r1, #0
    58fc:	2000      	movs	r0, #0
    58fe:	2601      	movs	r6, #1
    5900:	9000      	str	r0, [sp, #0]
    5902:	9101      	str	r1, [sp, #4]
    5904:	4659      	mov	r1, fp
    5906:	408e      	lsls	r6, r1
    5908:	9601      	str	r6, [sp, #4]
    590a:	4661      	mov	r1, ip
    590c:	2601      	movs	r6, #1
    590e:	408e      	lsls	r6, r1
    5910:	4661      	mov	r1, ip
    5912:	9600      	str	r6, [sp, #0]
    5914:	2900      	cmp	r1, #0
    5916:	d061      	beq.n	59dc <__divdi3+0x15c>
    5918:	07d9      	lsls	r1, r3, #31
    591a:	0856      	lsrs	r6, r2, #1
    591c:	430e      	orrs	r6, r1
    591e:	085f      	lsrs	r7, r3, #1
    5920:	4661      	mov	r1, ip
    5922:	2201      	movs	r2, #1
    5924:	2300      	movs	r3, #0
    5926:	e00c      	b.n	5942 <__divdi3+0xc2>
    5928:	42af      	cmp	r7, r5
    592a:	d101      	bne.n	5930 <__divdi3+0xb0>
    592c:	42a6      	cmp	r6, r4
    592e:	d80a      	bhi.n	5946 <__divdi3+0xc6>
    5930:	1ba4      	subs	r4, r4, r6
    5932:	41bd      	sbcs	r5, r7
    5934:	1924      	adds	r4, r4, r4
    5936:	416d      	adcs	r5, r5
    5938:	3901      	subs	r1, #1
    593a:	18a4      	adds	r4, r4, r2
    593c:	415d      	adcs	r5, r3
    593e:	2900      	cmp	r1, #0
    5940:	d006      	beq.n	5950 <__divdi3+0xd0>
    5942:	42af      	cmp	r7, r5
    5944:	d9f0      	bls.n	5928 <__divdi3+0xa8>
    5946:	3901      	subs	r1, #1
    5948:	1924      	adds	r4, r4, r4
    594a:	416d      	adcs	r5, r5
    594c:	2900      	cmp	r1, #0
    594e:	d1f8      	bne.n	5942 <__divdi3+0xc2>
    5950:	465b      	mov	r3, fp
    5952:	9800      	ldr	r0, [sp, #0]
    5954:	9901      	ldr	r1, [sp, #4]
    5956:	1900      	adds	r0, r0, r4
    5958:	4169      	adcs	r1, r5
    595a:	2b00      	cmp	r3, #0
    595c:	db4d      	blt.n	59fa <__divdi3+0x17a>
    595e:	002e      	movs	r6, r5
    5960:	40de      	lsrs	r6, r3
    5962:	4663      	mov	r3, ip
    5964:	002c      	movs	r4, r5
    5966:	40dc      	lsrs	r4, r3
    5968:	465b      	mov	r3, fp
    596a:	2b00      	cmp	r3, #0
    596c:	db5b      	blt.n	5a26 <__divdi3+0x1a6>
    596e:	0034      	movs	r4, r6
    5970:	409c      	lsls	r4, r3
    5972:	0023      	movs	r3, r4
    5974:	4664      	mov	r4, ip
    5976:	40a6      	lsls	r6, r4
    5978:	0032      	movs	r2, r6
    597a:	1a80      	subs	r0, r0, r2
    597c:	4199      	sbcs	r1, r3
    597e:	e003      	b.n	5988 <__divdi3+0x108>
    5980:	42b2      	cmp	r2, r6
    5982:	d996      	bls.n	58b2 <__divdi3+0x32>
    5984:	2000      	movs	r0, #0
    5986:	2100      	movs	r1, #0
    5988:	464b      	mov	r3, r9
    598a:	2b00      	cmp	r3, #0
    598c:	d004      	beq.n	5998 <__divdi3+0x118>
    598e:	0003      	movs	r3, r0
    5990:	000c      	movs	r4, r1
    5992:	2100      	movs	r1, #0
    5994:	4258      	negs	r0, r3
    5996:	41a1      	sbcs	r1, r4
    5998:	b003      	add	sp, #12
    599a:	bc3c      	pop	{r2, r3, r4, r5}
    599c:	4690      	mov	r8, r2
    599e:	4699      	mov	r9, r3
    59a0:	46a2      	mov	sl, r4
    59a2:	46ab      	mov	fp, r5
    59a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59a6:	4649      	mov	r1, r9
    59a8:	43c9      	mvns	r1, r1
    59aa:	0010      	movs	r0, r2
    59ac:	4689      	mov	r9, r1
    59ae:	0019      	movs	r1, r3
    59b0:	2300      	movs	r3, #0
    59b2:	4242      	negs	r2, r0
    59b4:	418b      	sbcs	r3, r1
    59b6:	e775      	b.n	58a4 <__divdi3+0x24>
    59b8:	0034      	movs	r4, r6
    59ba:	003d      	movs	r5, r7
    59bc:	3801      	subs	r0, #1
    59be:	2700      	movs	r7, #0
    59c0:	4266      	negs	r6, r4
    59c2:	41af      	sbcs	r7, r5
    59c4:	4681      	mov	r9, r0
    59c6:	e76a      	b.n	589e <__divdi3+0x1e>
    59c8:	42b1      	cmp	r1, r6
    59ca:	d800      	bhi.n	59ce <__divdi3+0x14e>
    59cc:	e78d      	b.n	58ea <__divdi3+0x6a>
    59ce:	2100      	movs	r1, #0
    59d0:	2000      	movs	r0, #0
    59d2:	9000      	str	r0, [sp, #0]
    59d4:	9101      	str	r1, [sp, #4]
    59d6:	4661      	mov	r1, ip
    59d8:	2900      	cmp	r1, #0
    59da:	d19d      	bne.n	5918 <__divdi3+0x98>
    59dc:	9800      	ldr	r0, [sp, #0]
    59de:	9901      	ldr	r1, [sp, #4]
    59e0:	e7d2      	b.n	5988 <__divdi3+0x108>
    59e2:	4662      	mov	r2, ip
    59e4:	4640      	mov	r0, r8
    59e6:	2320      	movs	r3, #32
    59e8:	4651      	mov	r1, sl
    59ea:	4090      	lsls	r0, r2
    59ec:	1a9b      	subs	r3, r3, r2
    59ee:	40d9      	lsrs	r1, r3
    59f0:	0003      	movs	r3, r0
    59f2:	9100      	str	r1, [sp, #0]
    59f4:	9900      	ldr	r1, [sp, #0]
    59f6:	430b      	orrs	r3, r1
    59f8:	e76f      	b.n	58da <__divdi3+0x5a>
    59fa:	4662      	mov	r2, ip
    59fc:	2320      	movs	r3, #32
    59fe:	1a9b      	subs	r3, r3, r2
    5a00:	002a      	movs	r2, r5
    5a02:	409a      	lsls	r2, r3
    5a04:	0026      	movs	r6, r4
    5a06:	0013      	movs	r3, r2
    5a08:	4662      	mov	r2, ip
    5a0a:	40d6      	lsrs	r6, r2
    5a0c:	431e      	orrs	r6, r3
    5a0e:	e7a8      	b.n	5962 <__divdi3+0xe2>
    5a10:	4661      	mov	r1, ip
    5a12:	2620      	movs	r6, #32
    5a14:	2701      	movs	r7, #1
    5a16:	1a76      	subs	r6, r6, r1
    5a18:	2000      	movs	r0, #0
    5a1a:	2100      	movs	r1, #0
    5a1c:	40f7      	lsrs	r7, r6
    5a1e:	9000      	str	r0, [sp, #0]
    5a20:	9101      	str	r1, [sp, #4]
    5a22:	9701      	str	r7, [sp, #4]
    5a24:	e771      	b.n	590a <__divdi3+0x8a>
    5a26:	4662      	mov	r2, ip
    5a28:	2320      	movs	r3, #32
    5a2a:	0035      	movs	r5, r6
    5a2c:	4094      	lsls	r4, r2
    5a2e:	1a9b      	subs	r3, r3, r2
    5a30:	40dd      	lsrs	r5, r3
    5a32:	0023      	movs	r3, r4
    5a34:	432b      	orrs	r3, r5
    5a36:	e79d      	b.n	5974 <__divdi3+0xf4>

00005a38 <__libc_init_array>:
    5a38:	b570      	push	{r4, r5, r6, lr}
    5a3a:	2600      	movs	r6, #0
    5a3c:	4d0c      	ldr	r5, [pc, #48]	; (5a70 <__libc_init_array+0x38>)
    5a3e:	4c0d      	ldr	r4, [pc, #52]	; (5a74 <__libc_init_array+0x3c>)
    5a40:	1b64      	subs	r4, r4, r5
    5a42:	10a4      	asrs	r4, r4, #2
    5a44:	42a6      	cmp	r6, r4
    5a46:	d109      	bne.n	5a5c <__libc_init_array+0x24>
    5a48:	2600      	movs	r6, #0
    5a4a:	f000 f8a9 	bl	5ba0 <_init>
    5a4e:	4d0a      	ldr	r5, [pc, #40]	; (5a78 <__libc_init_array+0x40>)
    5a50:	4c0a      	ldr	r4, [pc, #40]	; (5a7c <__libc_init_array+0x44>)
    5a52:	1b64      	subs	r4, r4, r5
    5a54:	10a4      	asrs	r4, r4, #2
    5a56:	42a6      	cmp	r6, r4
    5a58:	d105      	bne.n	5a66 <__libc_init_array+0x2e>
    5a5a:	bd70      	pop	{r4, r5, r6, pc}
    5a5c:	00b3      	lsls	r3, r6, #2
    5a5e:	58eb      	ldr	r3, [r5, r3]
    5a60:	4798      	blx	r3
    5a62:	3601      	adds	r6, #1
    5a64:	e7ee      	b.n	5a44 <__libc_init_array+0xc>
    5a66:	00b3      	lsls	r3, r6, #2
    5a68:	58eb      	ldr	r3, [r5, r3]
    5a6a:	4798      	blx	r3
    5a6c:	3601      	adds	r6, #1
    5a6e:	e7f2      	b.n	5a56 <__libc_init_array+0x1e>
    5a70:	00005bac 	.word	0x00005bac
    5a74:	00005bac 	.word	0x00005bac
    5a78:	00005bac 	.word	0x00005bac
    5a7c:	00005bb0 	.word	0x00005bb0

00005a80 <memcpy>:
    5a80:	2300      	movs	r3, #0
    5a82:	b510      	push	{r4, lr}
    5a84:	429a      	cmp	r2, r3
    5a86:	d100      	bne.n	5a8a <memcpy+0xa>
    5a88:	bd10      	pop	{r4, pc}
    5a8a:	5ccc      	ldrb	r4, [r1, r3]
    5a8c:	54c4      	strb	r4, [r0, r3]
    5a8e:	3301      	adds	r3, #1
    5a90:	e7f8      	b.n	5a84 <memcpy+0x4>

00005a92 <memset>:
    5a92:	0003      	movs	r3, r0
    5a94:	1882      	adds	r2, r0, r2
    5a96:	4293      	cmp	r3, r2
    5a98:	d100      	bne.n	5a9c <memset+0xa>
    5a9a:	4770      	bx	lr
    5a9c:	7019      	strb	r1, [r3, #0]
    5a9e:	3301      	adds	r3, #1
    5aa0:	e7f9      	b.n	5a96 <memset+0x4>
    5aa2:	0000      	movs	r0, r0
    5aa4:	00000318 	.word	0x00000318
    5aa8:	00000326 	.word	0x00000326
    5aac:	00000334 	.word	0x00000334
    5ab0:	00000342 	.word	0x00000342
    5ab4:	00000350 	.word	0x00000350
    5ab8:	00000b50 	.word	0x00000b50
    5abc:	00000b5e 	.word	0x00000b5e
    5ac0:	00000b6c 	.word	0x00000b6c
    5ac4:	00000b7a 	.word	0x00000b7a
    5ac8:	00000b88 	.word	0x00000b88
    5acc:	00004905 	.word	0x00004905
    5ad0:	42000000 	.word	0x42000000
    5ad4:	42000400 	.word	0x42000400
    5ad8:	42000800 	.word	0x42000800
    5adc:	42000c00 	.word	0x42000c00
    5ae0:	42001000 	.word	0x42001000
    5ae4:	43000400 	.word	0x43000400
    5ae8:	00002c72 	.word	0x00002c72
    5aec:	00002cee 	.word	0x00002cee
    5af0:	00002cee 	.word	0x00002cee
    5af4:	00002c92 	.word	0x00002c92
    5af8:	00002c8c 	.word	0x00002c8c
    5afc:	00002c98 	.word	0x00002c98
    5b00:	00002c78 	.word	0x00002c78
    5b04:	00002c9e 	.word	0x00002c9e
    5b08:	00002cd4 	.word	0x00002cd4
    5b0c:	00002e0c 	.word	0x00002e0c
    5b10:	00002e1a 	.word	0x00002e1a
    5b14:	00002e28 	.word	0x00002e28
    5b18:	00002e36 	.word	0x00002e36
    5b1c:	00002e44 	.word	0x00002e44
    5b20:	00004620 	.word	0x00004620
    5b24:	00004602 	.word	0x00004602
    5b28:	000045bc 	.word	0x000045bc
    5b2c:	000044da 	.word	0x000044da
    5b30:	000045bc 	.word	0x000045bc
    5b34:	000045f4 	.word	0x000045f4
    5b38:	000045bc 	.word	0x000045bc
    5b3c:	000044da 	.word	0x000044da
    5b40:	00004602 	.word	0x00004602
    5b44:	00004602 	.word	0x00004602
    5b48:	000045f4 	.word	0x000045f4
    5b4c:	000044da 	.word	0x000044da
    5b50:	000044d2 	.word	0x000044d2
    5b54:	000044d2 	.word	0x000044d2
    5b58:	000044d2 	.word	0x000044d2
    5b5c:	00004838 	.word	0x00004838
    5b60:	00004c80 	.word	0x00004c80
    5b64:	00004b40 	.word	0x00004b40
    5b68:	00004b40 	.word	0x00004b40
    5b6c:	00004b3c 	.word	0x00004b3c
    5b70:	00004c58 	.word	0x00004c58
    5b74:	00004c58 	.word	0x00004c58
    5b78:	00004c4a 	.word	0x00004c4a
    5b7c:	00004b3c 	.word	0x00004b3c
    5b80:	00004c58 	.word	0x00004c58
    5b84:	00004c4a 	.word	0x00004c4a
    5b88:	00004c58 	.word	0x00004c58
    5b8c:	00004b3c 	.word	0x00004b3c
    5b90:	00004c60 	.word	0x00004c60
    5b94:	00004c60 	.word	0x00004c60
    5b98:	00004c60 	.word	0x00004c60
    5b9c:	00004e64 	.word	0x00004e64

00005ba0 <_init>:
    5ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ba6:	bc08      	pop	{r3}
    5ba8:	469e      	mov	lr, r3
    5baa:	4770      	bx	lr

00005bac <__init_array_start>:
    5bac:	000000dd 	.word	0x000000dd

00005bb0 <_fini>:
    5bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5bb6:	bc08      	pop	{r3}
    5bb8:	469e      	mov	lr, r3
    5bba:	4770      	bx	lr

00005bbc <__fini_array_start>:
    5bbc:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....
