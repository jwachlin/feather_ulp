
Feather_ULP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000074f4  000074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  000074fc  00020000  2**1
                  CONTENTS, ALLOC, LOAD, CODE
  3 .lpram        00000000  30000000  30000000  00020010  2**0
                  CONTENTS
  4 .bss          00000194  20000010  0000750c  00020010  2**2
                  ALLOC
  5 .stack        00002004  200001a4  000076a0  00020010  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .debug_info   00045ca2  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000488a  00000000  00000000  00065d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000033ae  00000000  00000000  0006a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e0  00000000  00000000  0006d96b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000860  00000000  00000000  0006e34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ac8a  00000000  00000000  0006ebab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013cfb  00000000  00000000  00079835  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009bb1a  00000000  00000000  0008d530  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000022bc  00000000  00000000  0012904c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 21 00 20 35 4a 00 00 c9 4a 00 00 c9 4a 00 00     .!. 5J...J...J..
	...
      2c:	c9 4a 00 00 00 00 00 00 00 00 00 00 c9 4a 00 00     .J...........J..
      3c:	c9 4a 00 00 c9 4a 00 00 4d 3b 00 00 cd 13 00 00     .J...J..M;......
      4c:	c9 4a 00 00 c9 4a 00 00 c9 4a 00 00 c9 4a 00 00     .J...J...J...J..
      5c:	c9 4a 00 00 c9 4a 00 00 c9 4a 00 00 c9 4a 00 00     .J...J...J...J..
      6c:	c9 4a 00 00 c9 4a 00 00 c9 4a 00 00 c9 4a 00 00     .J...J...J...J..
      7c:	c9 4a 00 00 c9 4a 00 00 69 1f 00 00 7d 1f 00 00     .J...J..i...}...
      8c:	91 1f 00 00 a5 1f 00 00 b9 1f 00 00 ad 0b 00 00     ................
      9c:	c9 4a 00 00 c9 4a 00 00 c9 4a 00 00 c9 4a 00 00     .J...J...J...J..
      ac:	c9 4a 00 00 00 00 00 00                             .J......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	000074fc 	.word	0x000074fc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	000074fc 	.word	0x000074fc
     10c:	000074fc 	.word	0x000074fc
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b04      	cmp	r3, #4
     140:	d827      	bhi.n	192 <system_apb_clock_set_mask+0x66>
     142:	009a      	lsls	r2, r3, #2
     144:	4b16      	ldr	r3, [pc, #88]	; (1a0 <system_apb_clock_set_mask+0x74>)
     146:	18d3      	adds	r3, r2, r3
     148:	681b      	ldr	r3, [r3, #0]
     14a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     14c:	4b15      	ldr	r3, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     150:	6951      	ldr	r1, [r2, #20]
     152:	683a      	ldr	r2, [r7, #0]
     154:	430a      	orrs	r2, r1
     156:	615a      	str	r2, [r3, #20]
			break;
     158:	e01d      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15c:	4a11      	ldr	r2, [pc, #68]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15e:	6991      	ldr	r1, [r2, #24]
     160:	683a      	ldr	r2, [r7, #0]
     162:	430a      	orrs	r2, r1
     164:	619a      	str	r2, [r3, #24]
			break;
     166:	e016      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     168:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16a:	4a0e      	ldr	r2, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16c:	69d1      	ldr	r1, [r2, #28]
     16e:	683a      	ldr	r2, [r7, #0]
     170:	430a      	orrs	r2, r1
     172:	61da      	str	r2, [r3, #28]
			break;
     174:	e00f      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     176:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <system_apb_clock_set_mask+0x78>)
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <system_apb_clock_set_mask+0x78>)
     17a:	6a11      	ldr	r1, [r2, #32]
     17c:	683a      	ldr	r2, [r7, #0]
     17e:	430a      	orrs	r2, r1
     180:	621a      	str	r2, [r3, #32]
			break;
     182:	e008      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     184:	4b07      	ldr	r3, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     186:	4a07      	ldr	r2, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     188:	6a51      	ldr	r1, [r2, #36]	; 0x24
     18a:	683a      	ldr	r2, [r7, #0]
     18c:	430a      	orrs	r2, r1
     18e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     190:	e001      	b.n	196 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     192:	2317      	movs	r3, #23
     194:	e000      	b.n	198 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     196:	2300      	movs	r3, #0
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}
     1a0:	0000718c 	.word	0x0000718c
     1a4:	40000400 	.word	0x40000400

000001a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2280      	movs	r2, #128	; 0x80
     1b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	2200      	movs	r2, #0
     1ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2201      	movs	r2, #1
     1c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	70da      	strb	r2, [r3, #3]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}

000001d0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	2b00      	cmp	r3, #0
     1e2:	d002      	beq.n	1ea <system_voltage_reference_enable+0x1a>
     1e4:	2b01      	cmp	r3, #1
     1e6:	d007      	beq.n	1f8 <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     1e8:	e00d      	b.n	206 <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     1ea:	4b08      	ldr	r3, [pc, #32]	; (20c <system_voltage_reference_enable+0x3c>)
     1ec:	4a07      	ldr	r2, [pc, #28]	; (20c <system_voltage_reference_enable+0x3c>)
     1ee:	69d2      	ldr	r2, [r2, #28]
     1f0:	2102      	movs	r1, #2
     1f2:	430a      	orrs	r2, r1
     1f4:	61da      	str	r2, [r3, #28]
			break;
     1f6:	e006      	b.n	206 <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1f8:	4b04      	ldr	r3, [pc, #16]	; (20c <system_voltage_reference_enable+0x3c>)
     1fa:	4a04      	ldr	r2, [pc, #16]	; (20c <system_voltage_reference_enable+0x3c>)
     1fc:	69d2      	ldr	r2, [r2, #28]
     1fe:	2104      	movs	r1, #4
     200:	430a      	orrs	r2, r1
     202:	61da      	str	r2, [r3, #28]
			break;
     204:	46c0      	nop			; (mov r8, r8)
	}
}
     206:	46bd      	mov	sp, r7
     208:	b002      	add	sp, #8
     20a:	bd80      	pop	{r7, pc}
     20c:	40001400 	.word	0x40001400

00000210 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     210:	b580      	push	{r7, lr}
     212:	b084      	sub	sp, #16
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     21e:	68fb      	ldr	r3, [r7, #12]
     220:	8c1b      	ldrh	r3, [r3, #32]
     222:	b29b      	uxth	r3, r3
     224:	2b00      	cmp	r3, #0
     226:	d001      	beq.n	22c <adc_is_syncing+0x1c>
		return true;
     228:	2301      	movs	r3, #1
     22a:	e000      	b.n	22e <adc_is_syncing+0x1e>
	}

	return false;
     22c:	2300      	movs	r3, #0
}
     22e:	0018      	movs	r0, r3
     230:	46bd      	mov	sp, r7
     232:	b004      	add	sp, #16
     234:	bd80      	pop	{r7, pc}
	...

00000238 <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     238:	b580      	push	{r7, lr}
     23a:	b084      	sub	sp, #16
     23c:	af00      	add	r7, sp, #0
     23e:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     240:	4b0e      	ldr	r3, [pc, #56]	; (27c <_adc_get_inst_index+0x44>)
     242:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     244:	2300      	movs	r3, #0
     246:	60fb      	str	r3, [r7, #12]
     248:	e010      	b.n	26c <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	009b      	lsls	r3, r3, #2
     24e:	2210      	movs	r2, #16
     250:	4694      	mov	ip, r2
     252:	44bc      	add	ip, r7
     254:	4463      	add	r3, ip
     256:	3b08      	subs	r3, #8
     258:	681a      	ldr	r2, [r3, #0]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	429a      	cmp	r2, r3
     25e:	d102      	bne.n	266 <_adc_get_inst_index+0x2e>
			return i;
     260:	68fb      	ldr	r3, [r7, #12]
     262:	b2db      	uxtb	r3, r3
     264:	e006      	b.n	274 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     266:	68fb      	ldr	r3, [r7, #12]
     268:	3301      	adds	r3, #1
     26a:	60fb      	str	r3, [r7, #12]
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	2b00      	cmp	r3, #0
     270:	d0eb      	beq.n	24a <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     272:	2300      	movs	r3, #0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b004      	add	sp, #16
     27a:	bd80      	pop	{r7, pc}
     27c:	43000c00 	.word	0x43000c00

00000280 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2200      	movs	r2, #0
     292:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	2200      	movs	r2, #0
     29e:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	2200      	movs	r2, #0
     2a4:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     2a6:	687b      	ldr	r3, [r7, #4]
     2a8:	2200      	movs	r2, #0
     2aa:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	2200      	movs	r2, #0
     2b0:	61da      	str	r2, [r3, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	2201      	movs	r2, #1
     2b6:	711a      	strb	r2, [r3, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	22c0      	movs	r2, #192	; 0xc0
     2bc:	0152      	lsls	r2, r2, #5
     2be:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	2200      	movs	r2, #0
     2c4:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	2200      	movs	r2, #0
     2ca:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	2200      	movs	r2, #0
     2d6:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2200      	movs	r2, #0
     2dc:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	222a      	movs	r2, #42	; 0x2a
     2e2:	2100      	movs	r1, #0
     2e4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	2200      	movs	r2, #0
     2ea:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2200      	movs	r2, #0
     2f0:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	2200      	movs	r2, #0
     2f6:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	2200      	movs	r2, #0
     2fc:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	2200      	movs	r2, #0
     302:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     304:	687b      	ldr	r3, [r7, #4]
     306:	2224      	movs	r2, #36	; 0x24
     308:	2100      	movs	r1, #0
     30a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	2200      	movs	r2, #0
     310:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     312:	687b      	ldr	r3, [r7, #4]
     314:	2200      	movs	r2, #0
     316:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     318:	687b      	ldr	r3, [r7, #4]
     31a:	2200      	movs	r2, #0
     31c:	755a      	strb	r2, [r3, #21]
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b002      	add	sp, #8
     324:	bd80      	pop	{r7, pc}
	...

00000328 <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     328:	b580      	push	{r7, lr}
     32a:	b09c      	sub	sp, #112	; 0x70
     32c:	af00      	add	r7, sp, #0
     32e:	0002      	movs	r2, r0
     330:	6039      	str	r1, [r7, #0]
     332:	1dfb      	adds	r3, r7, #7
     334:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     336:	230c      	movs	r3, #12
     338:	18fa      	adds	r2, r7, r3
     33a:	4b16      	ldr	r3, [pc, #88]	; (394 <_adc_configure_ain_pin+0x6c>)
     33c:	0010      	movs	r0, r2
     33e:	0019      	movs	r1, r3
     340:	2360      	movs	r3, #96	; 0x60
     342:	001a      	movs	r2, r3
     344:	4b14      	ldr	r3, [pc, #80]	; (398 <_adc_configure_ain_pin+0x70>)
     346:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     348:	4b14      	ldr	r3, [pc, #80]	; (39c <_adc_configure_ain_pin+0x74>)
     34a:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (pin <= _adc_extchannel_msb[index]) {
     34c:	2213      	movs	r2, #19
     34e:	683b      	ldr	r3, [r7, #0]
     350:	429a      	cmp	r2, r3
     352:	d31a      	bcc.n	38a <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     354:	230c      	movs	r3, #12
     356:	18fb      	adds	r3, r7, r3
     358:	683a      	ldr	r2, [r7, #0]
     35a:	0092      	lsls	r2, r2, #2
     35c:	58d3      	ldr	r3, [r2, r3]
     35e:	66fb      	str	r3, [r7, #108]	; 0x6c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     360:	2308      	movs	r3, #8
     362:	18fb      	adds	r3, r7, r3
     364:	0018      	movs	r0, r3
     366:	4b0e      	ldr	r3, [pc, #56]	; (3a0 <_adc_configure_ain_pin+0x78>)
     368:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     36a:	2308      	movs	r3, #8
     36c:	18fb      	adds	r3, r7, r3
     36e:	2200      	movs	r2, #0
     370:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     372:	2308      	movs	r3, #8
     374:	18fb      	adds	r3, r7, r3
     376:	2201      	movs	r2, #1
     378:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     37c:	b2db      	uxtb	r3, r3
     37e:	2208      	movs	r2, #8
     380:	18ba      	adds	r2, r7, r2
     382:	0011      	movs	r1, r2
     384:	0018      	movs	r0, r3
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <_adc_configure_ain_pin+0x7c>)
     388:	4798      	blx	r3
	}
}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	46bd      	mov	sp, r7
     38e:	b01c      	add	sp, #112	; 0x70
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	000071a0 	.word	0x000071a0
     398:	00007169 	.word	0x00007169
     39c:	0000ffff 	.word	0x0000ffff
     3a0:	000001a9 	.word	0x000001a9
     3a4:	000049ad 	.word	0x000049ad

000003a8 <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b08a      	sub	sp, #40	; 0x28
     3ac:	af00      	add	r7, sp, #0
     3ae:	60b9      	str	r1, [r7, #8]
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	230f      	movs	r3, #15
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	1c02      	adds	r2, r0, #0
     3b8:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     3ba:	2327      	movs	r3, #39	; 0x27
     3bc:	18fb      	adds	r3, r7, r3
     3be:	2200      	movs	r2, #0
     3c0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     3c2:	2310      	movs	r3, #16
     3c4:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3c6:	231f      	movs	r3, #31
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	2200      	movs	r2, #0
     3cc:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     3ce:	68bb      	ldr	r3, [r7, #8]
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3d4:	2314      	movs	r3, #20
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	0018      	movs	r0, r3
     3da:	4bc5      	ldr	r3, [pc, #788]	; (6f0 <_adc_set_config+0x348>)
     3dc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	2314      	movs	r3, #20
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     3e8:	221e      	movs	r2, #30
     3ea:	2314      	movs	r3, #20
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	0019      	movs	r1, r3
     3f0:	0010      	movs	r0, r2
     3f2:	4bc0      	ldr	r3, [pc, #768]	; (6f4 <_adc_set_config+0x34c>)
     3f4:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     3f6:	231e      	movs	r3, #30
     3f8:	0018      	movs	r0, r3
     3fa:	4bbf      	ldr	r3, [pc, #764]	; (6f8 <_adc_set_config+0x350>)
     3fc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	791b      	ldrb	r3, [r3, #4]
     402:	001a      	movs	r2, r3
     404:	230f      	movs	r3, #15
     406:	18fb      	adds	r3, r7, r3
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	0011      	movs	r1, r2
     40c:	0018      	movs	r0, r3
     40e:	4bbb      	ldr	r3, [pc, #748]	; (6fc <_adc_set_config+0x354>)
     410:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     412:	687b      	ldr	r3, [r7, #4]
     414:	88db      	ldrh	r3, [r3, #6]
     416:	001a      	movs	r2, r3
     418:	230f      	movs	r3, #15
     41a:	18fb      	adds	r3, r7, r3
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	0011      	movs	r1, r2
     420:	0018      	movs	r0, r3
     422:	4bb6      	ldr	r3, [pc, #728]	; (6fc <_adc_set_config+0x354>)
     424:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     426:	231e      	movs	r3, #30
     428:	18fb      	adds	r3, r7, r3
     42a:	2200      	movs	r2, #0
     42c:	701a      	strb	r2, [r3, #0]
     42e:	e01a      	b.n	466 <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     430:	687b      	ldr	r3, [r7, #4]
     432:	691b      	ldr	r3, [r3, #16]
     434:	221e      	movs	r2, #30
     436:	18ba      	adds	r2, r7, r2
     438:	7812      	ldrb	r2, [r2, #0]
     43a:	2101      	movs	r1, #1
     43c:	4091      	lsls	r1, r2
     43e:	000a      	movs	r2, r1
     440:	4013      	ands	r3, r2
     442:	d009      	beq.n	458 <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     444:	231e      	movs	r3, #30
     446:	18fb      	adds	r3, r7, r3
     448:	781a      	ldrb	r2, [r3, #0]
     44a:	230f      	movs	r3, #15
     44c:	18fb      	adds	r3, r7, r3
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	0011      	movs	r1, r2
     452:	0018      	movs	r0, r3
     454:	4ba9      	ldr	r3, [pc, #676]	; (6fc <_adc_set_config+0x354>)
     456:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     458:	231e      	movs	r3, #30
     45a:	18fb      	adds	r3, r7, r3
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	231e      	movs	r3, #30
     460:	18fb      	adds	r3, r7, r3
     462:	3201      	adds	r2, #1
     464:	701a      	strb	r2, [r3, #0]
     466:	231e      	movs	r3, #30
     468:	18fb      	adds	r3, r7, r3
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	2213      	movs	r2, #19
     46e:	4293      	cmp	r3, r2
     470:	d9de      	bls.n	430 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     472:	687b      	ldr	r3, [r7, #4]
     474:	7b5b      	ldrb	r3, [r3, #13]
     476:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     478:	b25a      	sxtb	r2, r3
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	7b9b      	ldrb	r3, [r3, #14]
     47e:	01db      	lsls	r3, r3, #7
     480:	b25b      	sxtb	r3, r3
     482:	4313      	orrs	r3, r2
     484:	b25b      	sxtb	r3, r3
     486:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     488:	69bb      	ldr	r3, [r7, #24]
     48a:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	7d1b      	ldrb	r3, [r3, #20]
     490:	01db      	lsls	r3, r3, #7
			| (config->reference);
     492:	b25a      	sxtb	r2, r3
     494:	687b      	ldr	r3, [r7, #4]
     496:	785b      	ldrb	r3, [r3, #1]
     498:	b25b      	sxtb	r3, r3
     49a:	4313      	orrs	r3, r2
     49c:	b25b      	sxtb	r3, r3
     49e:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     4a0:	69bb      	ldr	r3, [r7, #24]
     4a2:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	78db      	ldrb	r3, [r3, #3]
     4a8:	2b34      	cmp	r3, #52	; 0x34
     4aa:	d846      	bhi.n	53a <_adc_set_config+0x192>
     4ac:	009a      	lsls	r2, r3, #2
     4ae:	4b94      	ldr	r3, [pc, #592]	; (700 <_adc_set_config+0x358>)
     4b0:	18d3      	adds	r3, r2, r3
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4b6:	2327      	movs	r3, #39	; 0x27
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	687a      	ldr	r2, [r7, #4]
     4bc:	7a52      	ldrb	r2, [r2, #9]
     4be:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     4c0:	231f      	movs	r3, #31
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	687a      	ldr	r2, [r7, #4]
     4c6:	7a12      	ldrb	r2, [r2, #8]
     4c8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ca:	2310      	movs	r3, #16
     4cc:	623b      	str	r3, [r7, #32]
		break;
     4ce:	e036      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4d0:	2327      	movs	r3, #39	; 0x27
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	2201      	movs	r2, #1
     4d6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4d8:	231f      	movs	r3, #31
     4da:	18fb      	adds	r3, r7, r3
     4dc:	2202      	movs	r2, #2
     4de:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e0:	2310      	movs	r3, #16
     4e2:	623b      	str	r3, [r7, #32]
		break;
     4e4:	e02b      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     4e6:	2327      	movs	r3, #39	; 0x27
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	2202      	movs	r2, #2
     4ec:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     4ee:	231f      	movs	r3, #31
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	2204      	movs	r2, #4
     4f4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4f6:	2310      	movs	r3, #16
     4f8:	623b      	str	r3, [r7, #32]
		break;
     4fa:	e020      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4fc:	2327      	movs	r3, #39	; 0x27
     4fe:	18fb      	adds	r3, r7, r3
     500:	2201      	movs	r2, #1
     502:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     504:	231f      	movs	r3, #31
     506:	18fb      	adds	r3, r7, r3
     508:	2206      	movs	r2, #6
     50a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     50c:	2310      	movs	r3, #16
     50e:	623b      	str	r3, [r7, #32]
		break;
     510:	e015      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     512:	2327      	movs	r3, #39	; 0x27
     514:	18fb      	adds	r3, r7, r3
     516:	2200      	movs	r2, #0
     518:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     51a:	231f      	movs	r3, #31
     51c:	18fb      	adds	r3, r7, r3
     51e:	2208      	movs	r2, #8
     520:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     522:	2310      	movs	r3, #16
     524:	623b      	str	r3, [r7, #32]
		break;
     526:	e00a      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     528:	2330      	movs	r3, #48	; 0x30
     52a:	623b      	str	r3, [r7, #32]
		break;
     52c:	e007      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     52e:	2320      	movs	r3, #32
     530:	623b      	str	r3, [r7, #32]
		break;
     532:	e004      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     534:	2300      	movs	r3, #0
     536:	623b      	str	r3, [r7, #32]
		break;
     538:	e001      	b.n	53e <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     53a:	2317      	movs	r3, #23
     53c:	e1a7      	b.n	88e <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     53e:	2327      	movs	r3, #39	; 0x27
     540:	18fb      	adds	r3, r7, r3
     542:	781b      	ldrb	r3, [r3, #0]
     544:	011b      	lsls	r3, r3, #4
     546:	b2db      	uxtb	r3, r3
     548:	2270      	movs	r2, #112	; 0x70
     54a:	4013      	ands	r3, r2
     54c:	b2da      	uxtb	r2, r3
     54e:	231f      	movs	r3, #31
     550:	18fb      	adds	r3, r7, r3
     552:	781b      	ldrb	r3, [r3, #0]
     554:	4313      	orrs	r3, r2
     556:	b2da      	uxtb	r2, r3
     558:	69bb      	ldr	r3, [r7, #24]
     55a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	68bb      	ldr	r3, [r7, #8]
     560:	0018      	movs	r0, r3
     562:	4b68      	ldr	r3, [pc, #416]	; (704 <_adc_set_config+0x35c>)
     564:	4798      	blx	r3
     566:	1e03      	subs	r3, r0, #0
     568:	d1f9      	bne.n	55e <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	7d5b      	ldrb	r3, [r3, #21]
     56e:	2b3f      	cmp	r3, #63	; 0x3f
     570:	d901      	bls.n	576 <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     572:	2317      	movs	r3, #23
     574:	e18b      	b.n	88e <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     576:	687b      	ldr	r3, [r7, #4]
     578:	7d5b      	ldrb	r3, [r3, #21]
     57a:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	7bdb      	ldrb	r3, [r3, #15]
     580:	01db      	lsls	r3, r3, #7
     582:	b25b      	sxtb	r3, r3
     584:	4313      	orrs	r3, r2
     586:	b25b      	sxtb	r3, r3
     588:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     58a:	69bb      	ldr	r3, [r7, #24]
     58c:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     58e:	46c0      	nop			; (mov r8, r8)
     590:	68bb      	ldr	r3, [r7, #8]
     592:	0018      	movs	r0, r3
     594:	4b5b      	ldr	r3, [pc, #364]	; (704 <_adc_set_config+0x35c>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	d1f9      	bne.n	590 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     5a0:	69bb      	ldr	r3, [r7, #24]
     5a2:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	2224      	movs	r2, #36	; 0x24
     5a8:	5c9b      	ldrb	r3, [r3, r2]
     5aa:	b29b      	uxth	r3, r3
     5ac:	00db      	lsls	r3, r3, #3
     5ae:	b29a      	uxth	r2, r3
			resolution |
     5b0:	6a3b      	ldr	r3, [r7, #32]
     5b2:	b29b      	uxth	r3, r3
     5b4:	4313      	orrs	r3, r2
     5b6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	7b1b      	ldrb	r3, [r3, #12]
     5bc:	b29b      	uxth	r3, r3
     5be:	009b      	lsls	r3, r3, #2
     5c0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     5c2:	4313      	orrs	r3, r2
     5c4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	7a9b      	ldrb	r3, [r3, #10]
     5ca:	b29b      	uxth	r3, r3
     5cc:	18db      	adds	r3, r3, r3
     5ce:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     5d0:	4313      	orrs	r3, r2
     5d2:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	7adb      	ldrb	r3, [r3, #11]
     5d8:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     5da:	4313      	orrs	r3, r2
     5dc:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     5de:	69bb      	ldr	r3, [r7, #24]
     5e0:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	68bb      	ldr	r3, [r7, #8]
     5e6:	0018      	movs	r0, r3
     5e8:	4b46      	ldr	r3, [pc, #280]	; (704 <_adc_set_config+0x35c>)
     5ea:	4798      	blx	r3
     5ec:	1e03      	subs	r3, r0, #0
     5ee:	d1f9      	bne.n	5e4 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	8b1b      	ldrh	r3, [r3, #24]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d100      	bne.n	5fa <_adc_set_config+0x252>
     5f8:	e0bf      	b.n	77a <_adc_set_config+0x3d2>
		switch (resolution) {
     5fa:	6a3b      	ldr	r3, [r7, #32]
     5fc:	2b10      	cmp	r3, #16
     5fe:	d100      	bne.n	602 <_adc_set_config+0x25a>
     600:	e08e      	b.n	720 <_adc_set_config+0x378>
     602:	d802      	bhi.n	60a <_adc_set_config+0x262>
     604:	2b00      	cmp	r3, #0
     606:	d04d      	beq.n	6a4 <_adc_set_config+0x2fc>
     608:	e0b7      	b.n	77a <_adc_set_config+0x3d2>
     60a:	2b20      	cmp	r3, #32
     60c:	d023      	beq.n	656 <_adc_set_config+0x2ae>
     60e:	2b30      	cmp	r3, #48	; 0x30
     610:	d000      	beq.n	614 <_adc_set_config+0x26c>
     612:	e0b2      	b.n	77a <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     614:	687b      	ldr	r3, [r7, #4]
     616:	7adb      	ldrb	r3, [r3, #11]
     618:	2b00      	cmp	r3, #0
     61a:	d011      	beq.n	640 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     620:	2b7f      	cmp	r3, #127	; 0x7f
     622:	dc0b      	bgt.n	63c <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     624:	687b      	ldr	r3, [r7, #4]
     626:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     628:	3380      	adds	r3, #128	; 0x80
     62a:	db07      	blt.n	63c <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     630:	2b7f      	cmp	r3, #127	; 0x7f
     632:	dc03      	bgt.n	63c <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     634:	687b      	ldr	r3, [r7, #4]
     636:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     638:	3380      	adds	r3, #128	; 0x80
     63a:	da01      	bge.n	640 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     63c:	2317      	movs	r3, #23
     63e:	e126      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     640:	687b      	ldr	r3, [r7, #4]
     642:	69db      	ldr	r3, [r3, #28]
     644:	2bff      	cmp	r3, #255	; 0xff
     646:	dc04      	bgt.n	652 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     648:	687b      	ldr	r3, [r7, #4]
     64a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     64c:	2bff      	cmp	r3, #255	; 0xff
     64e:	dc00      	bgt.n	652 <_adc_set_config+0x2aa>
     650:	e08c      	b.n	76c <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     652:	2317      	movs	r3, #23
     654:	e11b      	b.n	88e <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     656:	687b      	ldr	r3, [r7, #4]
     658:	7adb      	ldrb	r3, [r3, #11]
     65a:	2b00      	cmp	r3, #0
     65c:	d015      	beq.n	68a <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     65e:	687b      	ldr	r3, [r7, #4]
     660:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     662:	4a29      	ldr	r2, [pc, #164]	; (708 <_adc_set_config+0x360>)
     664:	4293      	cmp	r3, r2
     666:	dc0e      	bgt.n	686 <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     668:	687b      	ldr	r3, [r7, #4]
     66a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     66c:	4a27      	ldr	r2, [pc, #156]	; (70c <_adc_set_config+0x364>)
     66e:	4293      	cmp	r3, r2
     670:	db09      	blt.n	686 <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     672:	687b      	ldr	r3, [r7, #4]
     674:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     676:	4a24      	ldr	r2, [pc, #144]	; (708 <_adc_set_config+0x360>)
     678:	4293      	cmp	r3, r2
     67a:	dc04      	bgt.n	686 <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     680:	4a22      	ldr	r2, [pc, #136]	; (70c <_adc_set_config+0x364>)
     682:	4293      	cmp	r3, r2
     684:	da01      	bge.n	68a <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     686:	2317      	movs	r3, #23
     688:	e101      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	69db      	ldr	r3, [r3, #28]
     68e:	4a20      	ldr	r2, [pc, #128]	; (710 <_adc_set_config+0x368>)
     690:	4293      	cmp	r3, r2
     692:	dc05      	bgt.n	6a0 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     694:	687b      	ldr	r3, [r7, #4]
     696:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     698:	4a1d      	ldr	r2, [pc, #116]	; (710 <_adc_set_config+0x368>)
     69a:	4293      	cmp	r3, r2
     69c:	dc00      	bgt.n	6a0 <_adc_set_config+0x2f8>
     69e:	e067      	b.n	770 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6a0:	2317      	movs	r3, #23
     6a2:	e0f4      	b.n	88e <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	7adb      	ldrb	r3, [r3, #11]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d015      	beq.n	6d8 <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6b0:	4a18      	ldr	r2, [pc, #96]	; (714 <_adc_set_config+0x36c>)
     6b2:	4293      	cmp	r3, r2
     6b4:	dc0e      	bgt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     6ba:	4a17      	ldr	r2, [pc, #92]	; (718 <_adc_set_config+0x370>)
     6bc:	4293      	cmp	r3, r2
     6be:	db09      	blt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     6c4:	4a13      	ldr	r2, [pc, #76]	; (714 <_adc_set_config+0x36c>)
     6c6:	4293      	cmp	r3, r2
     6c8:	dc04      	bgt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     6ce:	4a12      	ldr	r2, [pc, #72]	; (718 <_adc_set_config+0x370>)
     6d0:	4293      	cmp	r3, r2
     6d2:	da01      	bge.n	6d8 <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6d4:	2317      	movs	r3, #23
     6d6:	e0da      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	69db      	ldr	r3, [r3, #28]
     6dc:	4a0f      	ldr	r2, [pc, #60]	; (71c <_adc_set_config+0x374>)
     6de:	4293      	cmp	r3, r2
     6e0:	dc04      	bgt.n	6ec <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     6e6:	4a0d      	ldr	r2, [pc, #52]	; (71c <_adc_set_config+0x374>)
     6e8:	4293      	cmp	r3, r2
     6ea:	dd43      	ble.n	774 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6ec:	2317      	movs	r3, #23
     6ee:	e0ce      	b.n	88e <_adc_set_config+0x4e6>
     6f0:	00000115 	.word	0x00000115
     6f4:	000046f9 	.word	0x000046f9
     6f8:	00004739 	.word	0x00004739
     6fc:	00000329 	.word	0x00000329
     700:	00007200 	.word	0x00007200
     704:	00000211 	.word	0x00000211
     708:	000001ff 	.word	0x000001ff
     70c:	fffffe00 	.word	0xfffffe00
     710:	000003ff 	.word	0x000003ff
     714:	000007ff 	.word	0x000007ff
     718:	fffff800 	.word	0xfffff800
     71c:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     720:	687b      	ldr	r3, [r7, #4]
     722:	7adb      	ldrb	r3, [r3, #11]
     724:	2b00      	cmp	r3, #0
     726:	d015      	beq.n	754 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     728:	687b      	ldr	r3, [r7, #4]
     72a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     72c:	4a5a      	ldr	r2, [pc, #360]	; (898 <_adc_set_config+0x4f0>)
     72e:	4293      	cmp	r3, r2
     730:	dc0e      	bgt.n	750 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     732:	687b      	ldr	r3, [r7, #4]
     734:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     736:	4a59      	ldr	r2, [pc, #356]	; (89c <_adc_set_config+0x4f4>)
     738:	4293      	cmp	r3, r2
     73a:	db09      	blt.n	750 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     740:	4a55      	ldr	r2, [pc, #340]	; (898 <_adc_set_config+0x4f0>)
     742:	4293      	cmp	r3, r2
     744:	dc04      	bgt.n	750 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     746:	687b      	ldr	r3, [r7, #4]
     748:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     74a:	4a54      	ldr	r2, [pc, #336]	; (89c <_adc_set_config+0x4f4>)
     74c:	4293      	cmp	r3, r2
     74e:	da01      	bge.n	754 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     750:	2317      	movs	r3, #23
     752:	e09c      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     754:	687b      	ldr	r3, [r7, #4]
     756:	69db      	ldr	r3, [r3, #28]
     758:	4a51      	ldr	r2, [pc, #324]	; (8a0 <_adc_set_config+0x4f8>)
     75a:	4293      	cmp	r3, r2
     75c:	dc04      	bgt.n	768 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     75e:	687b      	ldr	r3, [r7, #4]
     760:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     762:	4a4f      	ldr	r2, [pc, #316]	; (8a0 <_adc_set_config+0x4f8>)
     764:	4293      	cmp	r3, r2
     766:	dd07      	ble.n	778 <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     768:	2317      	movs	r3, #23
     76a:	e090      	b.n	88e <_adc_set_config+0x4e6>
			break;
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	e004      	b.n	77a <_adc_set_config+0x3d2>
			break;
     770:	46c0      	nop			; (mov r8, r8)
     772:	e002      	b.n	77a <_adc_set_config+0x3d2>
			break;
     774:	46c0      	nop			; (mov r8, r8)
     776:	e000      	b.n	77a <_adc_set_config+0x3d2>
			}
			break;
     778:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     77a:	69bb      	ldr	r3, [r7, #24]
     77c:	895b      	ldrh	r3, [r3, #10]
     77e:	b29a      	uxth	r2, r3
     780:	687b      	ldr	r3, [r7, #4]
     782:	8b1b      	ldrh	r3, [r3, #24]
     784:	4313      	orrs	r3, r2
     786:	b29a      	uxth	r2, r3
     788:	69bb      	ldr	r3, [r7, #24]
     78a:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	68bb      	ldr	r3, [r7, #8]
     790:	0018      	movs	r0, r3
     792:	4b44      	ldr	r3, [pc, #272]	; (8a4 <_adc_set_config+0x4fc>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     79e:	b29a      	uxth	r2, r3
     7a0:	69bb      	ldr	r3, [r7, #24]
     7a2:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     7a4:	46c0      	nop			; (mov r8, r8)
     7a6:	68bb      	ldr	r3, [r7, #8]
     7a8:	0018      	movs	r0, r3
     7aa:	4b3e      	ldr	r3, [pc, #248]	; (8a4 <_adc_set_config+0x4fc>)
     7ac:	4798      	blx	r3
     7ae:	1e03      	subs	r3, r0, #0
     7b0:	d1f9      	bne.n	7a6 <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	6a1b      	ldr	r3, [r3, #32]
     7b6:	b29a      	uxth	r2, r3
     7b8:	69bb      	ldr	r3, [r7, #24]
     7ba:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     7bc:	46c0      	nop			; (mov r8, r8)
     7be:	68bb      	ldr	r3, [r7, #8]
     7c0:	0018      	movs	r0, r3
     7c2:	4b38      	ldr	r3, [pc, #224]	; (8a4 <_adc_set_config+0x4fc>)
     7c4:	4798      	blx	r3
     7c6:	1e03      	subs	r3, r0, #0
     7c8:	d1f9      	bne.n	7be <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	791b      	ldrb	r3, [r3, #4]
     7d2:	b29b      	uxth	r3, r3
			config->negative_input |
     7d4:	4313      	orrs	r3, r2
     7d6:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     7d8:	69bb      	ldr	r3, [r7, #24]
     7da:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	68bb      	ldr	r3, [r7, #8]
     7e0:	0018      	movs	r0, r3
     7e2:	4b30      	ldr	r3, [pc, #192]	; (8a4 <_adc_set_config+0x4fc>)
     7e4:	4798      	blx	r3
     7e6:	1e03      	subs	r3, r0, #0
     7e8:	d1f9      	bne.n	7de <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	222a      	movs	r2, #42	; 0x2a
     7ee:	5c9a      	ldrb	r2, [r3, r2]
     7f0:	69bb      	ldr	r3, [r7, #24]
     7f2:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7f4:	69bb      	ldr	r3, [r7, #24]
     7f6:	2207      	movs	r2, #7
     7f8:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	2224      	movs	r2, #36	; 0x24
     7fe:	5c9b      	ldrb	r3, [r3, r2]
     800:	2b00      	cmp	r3, #0
     802:	d02c      	beq.n	85e <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     804:	687b      	ldr	r3, [r7, #4]
     806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     808:	4a27      	ldr	r2, [pc, #156]	; (8a8 <_adc_set_config+0x500>)
     80a:	4293      	cmp	r3, r2
     80c:	d901      	bls.n	812 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     80e:	2317      	movs	r3, #23
     810:	e03d      	b.n	88e <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     812:	687b      	ldr	r3, [r7, #4]
     814:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     816:	69bb      	ldr	r3, [r7, #24]
     818:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	68bb      	ldr	r3, [r7, #8]
     81e:	0018      	movs	r0, r3
     820:	4b20      	ldr	r3, [pc, #128]	; (8a4 <_adc_set_config+0x4fc>)
     822:	4798      	blx	r3
     824:	1e03      	subs	r3, r0, #0
     826:	d1f9      	bne.n	81c <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     828:	687b      	ldr	r3, [r7, #4]
     82a:	2228      	movs	r2, #40	; 0x28
     82c:	5e9b      	ldrsh	r3, [r3, r2]
     82e:	4a1f      	ldr	r2, [pc, #124]	; (8ac <_adc_set_config+0x504>)
     830:	4293      	cmp	r3, r2
     832:	dc05      	bgt.n	840 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     834:	687b      	ldr	r3, [r7, #4]
     836:	2228      	movs	r2, #40	; 0x28
     838:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     83a:	4a1d      	ldr	r2, [pc, #116]	; (8b0 <_adc_set_config+0x508>)
     83c:	4293      	cmp	r3, r2
     83e:	da01      	bge.n	844 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     840:	2317      	movs	r3, #23
     842:	e024      	b.n	88e <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     844:	687b      	ldr	r3, [r7, #4]
     846:	2228      	movs	r2, #40	; 0x28
     848:	5e9b      	ldrsh	r3, [r3, r2]
     84a:	b29a      	uxth	r2, r3
     84c:	69bb      	ldr	r3, [r7, #24]
     84e:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     850:	46c0      	nop			; (mov r8, r8)
     852:	68bb      	ldr	r3, [r7, #8]
     854:	0018      	movs	r0, r3
     856:	4b13      	ldr	r3, [pc, #76]	; (8a4 <_adc_set_config+0x4fc>)
     858:	4798      	blx	r3
     85a:	1e03      	subs	r3, r0, #0
     85c:	d1f9      	bne.n	852 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     85e:	4b15      	ldr	r3, [pc, #84]	; (8b4 <_adc_set_config+0x50c>)
     860:	681b      	ldr	r3, [r3, #0]
     862:	2200      	movs	r2, #0
     864:	40d3      	lsrs	r3, r2
     866:	b29b      	uxth	r3, r3
     868:	021b      	lsls	r3, r3, #8
     86a:	b29a      	uxth	r2, r3
     86c:	23e0      	movs	r3, #224	; 0xe0
     86e:	00db      	lsls	r3, r3, #3
     870:	4013      	ands	r3, r2
     872:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     874:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <_adc_set_config+0x50c>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	2103      	movs	r1, #3
     87a:	40cb      	lsrs	r3, r1
     87c:	b29b      	uxth	r3, r3
     87e:	2107      	movs	r1, #7
     880:	400b      	ands	r3, r1
     882:	b29b      	uxth	r3, r3
			) |
     884:	4313      	orrs	r3, r2
     886:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     888:	69bb      	ldr	r3, [r7, #24]
     88a:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     88c:	2300      	movs	r3, #0
}
     88e:	0018      	movs	r0, r3
     890:	46bd      	mov	sp, r7
     892:	b00a      	add	sp, #40	; 0x28
     894:	bd80      	pop	{r7, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00007fff 	.word	0x00007fff
     89c:	ffff8000 	.word	0xffff8000
     8a0:	0000ffff 	.word	0x0000ffff
     8a4:	00000211 	.word	0x00000211
     8a8:	00000fff 	.word	0x00000fff
     8ac:	000007ff 	.word	0x000007ff
     8b0:	fffff800 	.word	0xfffff800
     8b4:	00806020 	.word	0x00806020

000008b8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8b8:	b590      	push	{r4, r7, lr}
     8ba:	b087      	sub	sp, #28
     8bc:	af00      	add	r7, sp, #0
     8be:	60f8      	str	r0, [r7, #12]
     8c0:	60b9      	str	r1, [r7, #8]
     8c2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     8c4:	2316      	movs	r3, #22
     8c6:	18fc      	adds	r4, r7, r3
     8c8:	68bb      	ldr	r3, [r7, #8]
     8ca:	0018      	movs	r0, r3
     8cc:	4b3d      	ldr	r3, [pc, #244]	; (9c4 <adc_init+0x10c>)
     8ce:	4798      	blx	r3
     8d0:	0003      	movs	r3, r0
     8d2:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	68ba      	ldr	r2, [r7, #8]
     8d8:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     8da:	2108      	movs	r1, #8
     8dc:	2003      	movs	r0, #3
     8de:	4b3a      	ldr	r3, [pc, #232]	; (9c8 <adc_init+0x110>)
     8e0:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8e2:	68bb      	ldr	r3, [r7, #8]
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	b2db      	uxtb	r3, r3
     8e8:	001a      	movs	r2, r3
     8ea:	2301      	movs	r3, #1
     8ec:	4013      	ands	r3, r2
     8ee:	d001      	beq.n	8f4 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     8f0:	2305      	movs	r3, #5
     8f2:	e062      	b.n	9ba <adc_init+0x102>
	}

	while (adc_is_syncing(module_inst)) {
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	0018      	movs	r0, r3
     8fa:	4b34      	ldr	r3, [pc, #208]	; (9cc <adc_init+0x114>)
     8fc:	4798      	blx	r3
     8fe:	1e03      	subs	r3, r0, #0
     900:	d1f9      	bne.n	8f6 <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     902:	68bb      	ldr	r3, [r7, #8]
     904:	781b      	ldrb	r3, [r3, #0]
     906:	b2db      	uxtb	r3, r3
     908:	001a      	movs	r2, r3
     90a:	2302      	movs	r3, #2
     90c:	4013      	ands	r3, r2
     90e:	d001      	beq.n	914 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     910:	231c      	movs	r3, #28
     912:	e052      	b.n	9ba <adc_init+0x102>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     914:	687b      	ldr	r3, [r7, #4]
     916:	785a      	ldrb	r2, [r3, #1]
     918:	68fb      	ldr	r3, [r7, #12]
     91a:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	791b      	ldrb	r3, [r3, #4]
     920:	2b00      	cmp	r3, #0
     922:	d102      	bne.n	92a <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     924:	2001      	movs	r0, #1
     926:	4b2a      	ldr	r3, [pc, #168]	; (9d0 <adc_init+0x118>)
     928:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     92a:	2317      	movs	r3, #23
     92c:	18fb      	adds	r3, r7, r3
     92e:	2200      	movs	r2, #0
     930:	701a      	strb	r2, [r3, #0]
     932:	e00e      	b.n	952 <adc_init+0x9a>
		module_inst->callback[i] = NULL;
     934:	2317      	movs	r3, #23
     936:	18fb      	adds	r3, r7, r3
     938:	781a      	ldrb	r2, [r3, #0]
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	3202      	adds	r2, #2
     93e:	0092      	lsls	r2, r2, #2
     940:	2100      	movs	r1, #0
     942:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     944:	2317      	movs	r3, #23
     946:	18fb      	adds	r3, r7, r3
     948:	781a      	ldrb	r2, [r3, #0]
     94a:	2317      	movs	r3, #23
     94c:	18fb      	adds	r3, r7, r3
     94e:	3201      	adds	r2, #1
     950:	701a      	strb	r2, [r3, #0]
     952:	2317      	movs	r3, #23
     954:	18fb      	adds	r3, r7, r3
     956:	781b      	ldrb	r3, [r3, #0]
     958:	2b02      	cmp	r3, #2
     95a:	d9eb      	bls.n	934 <adc_init+0x7c>
	};

	module_inst->registered_callback_mask = 0;
     95c:	68fb      	ldr	r3, [r7, #12]
     95e:	2200      	movs	r2, #0
     960:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     962:	68fb      	ldr	r3, [r7, #12]
     964:	2200      	movs	r2, #0
     966:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	2200      	movs	r2, #0
     96c:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     96e:	68fb      	ldr	r3, [r7, #12]
     970:	2200      	movs	r2, #0
     972:	771a      	strb	r2, [r3, #28]

	_adc_instances[instance] = module_inst;
     974:	2316      	movs	r3, #22
     976:	18fb      	adds	r3, r7, r3
     978:	781a      	ldrb	r2, [r3, #0]
     97a:	4b16      	ldr	r3, [pc, #88]	; (9d4 <adc_init+0x11c>)
     97c:	0092      	lsls	r2, r2, #2
     97e:	68f9      	ldr	r1, [r7, #12]
     980:	50d1      	str	r1, [r2, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     982:	687b      	ldr	r3, [r7, #4]
     984:	222a      	movs	r2, #42	; 0x2a
     986:	5c9b      	ldrb	r3, [r3, r2]
     988:	2b00      	cmp	r3, #0
     98a:	d10a      	bne.n	9a2 <adc_init+0xea>
			!config->freerunning) {
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	7b1b      	ldrb	r3, [r3, #12]
     990:	2201      	movs	r2, #1
     992:	4053      	eors	r3, r2
     994:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     996:	2b00      	cmp	r3, #0
     998:	d003      	beq.n	9a2 <adc_init+0xea>
		module_inst->software_trigger = true;
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	2201      	movs	r2, #1
     99e:	775a      	strb	r2, [r3, #29]
     9a0:	e002      	b.n	9a8 <adc_init+0xf0>
	} else {
		module_inst->software_trigger = false;
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	2200      	movs	r2, #0
     9a6:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     9a8:	687a      	ldr	r2, [r7, #4]
     9aa:	68f9      	ldr	r1, [r7, #12]
     9ac:	2316      	movs	r3, #22
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	0018      	movs	r0, r3
     9b4:	4b08      	ldr	r3, [pc, #32]	; (9d8 <adc_init+0x120>)
     9b6:	4798      	blx	r3
     9b8:	0003      	movs	r3, r0
}
     9ba:	0018      	movs	r0, r3
     9bc:	46bd      	mov	sp, r7
     9be:	b007      	add	sp, #28
     9c0:	bd90      	pop	{r4, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	00000239 	.word	0x00000239
     9c8:	0000012d 	.word	0x0000012d
     9cc:	00000211 	.word	0x00000211
     9d0:	000001d1 	.word	0x000001d1
     9d4:	20000184 	.word	0x20000184
     9d8:	000003a9 	.word	0x000003a9

000009dc <adc_is_syncing>:
{
     9dc:	b580      	push	{r7, lr}
     9de:	b084      	sub	sp, #16
     9e0:	af00      	add	r7, sp, #0
     9e2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	8c1b      	ldrh	r3, [r3, #32]
     9ee:	b29b      	uxth	r3, r3
     9f0:	2b00      	cmp	r3, #0
     9f2:	d001      	beq.n	9f8 <adc_is_syncing+0x1c>
		return true;
     9f4:	2301      	movs	r3, #1
     9f6:	e000      	b.n	9fa <adc_is_syncing+0x1e>
	return false;
     9f8:	2300      	movs	r3, #0
}
     9fa:	0018      	movs	r0, r3
     9fc:	46bd      	mov	sp, r7
     9fe:	b004      	add	sp, #16
     a00:	bd80      	pop	{r7, pc}
	...

00000a04 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	0018      	movs	r0, r3
     a18:	4b0b      	ldr	r3, [pc, #44]	; (a48 <adc_start_conversion+0x44>)
     a1a:	4798      	blx	r3
     a1c:	1e03      	subs	r3, r0, #0
     a1e:	d1f9      	bne.n	a14 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	7e1b      	ldrb	r3, [r3, #24]
     a24:	b2db      	uxtb	r3, r3
     a26:	2202      	movs	r2, #2
     a28:	4313      	orrs	r3, r2
     a2a:	b2da      	uxtb	r2, r3
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     a30:	46c0      	nop			; (mov r8, r8)
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	0018      	movs	r0, r3
     a36:	4b04      	ldr	r3, [pc, #16]	; (a48 <adc_start_conversion+0x44>)
     a38:	4798      	blx	r3
     a3a:	1e03      	subs	r3, r0, #0
     a3c:	d1f9      	bne.n	a32 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	46bd      	mov	sp, r7
     a42:	b004      	add	sp, #16
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	000009dd 	.word	0x000009dd

00000a4c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b084      	sub	sp, #16
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
     a54:	000a      	movs	r2, r1
     a56:	1cfb      	adds	r3, r7, #3
     a58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	1cfa      	adds	r2, r7, #3
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	711a      	strb	r2, [r3, #4]
}
     a68:	46c0      	nop			; (mov r8, r8)
     a6a:	46bd      	mov	sp, r7
     a6c:	b004      	add	sp, #16
     a6e:	bd80      	pop	{r7, pc}

00000a70 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	0002      	movs	r2, r0
     a78:	1dfb      	adds	r3, r7, #7
     a7a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     a7c:	1dfb      	adds	r3, r7, #7
     a7e:	781a      	ldrb	r2, [r3, #0]
     a80:	4b47      	ldr	r3, [pc, #284]	; (ba0 <_adc_interrupt_handler+0x130>)
     a82:	0092      	lsls	r2, r2, #2
     a84:	58d3      	ldr	r3, [r2, r3]
     a86:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	799b      	ldrb	r3, [r3, #6]
     a8e:	b2da      	uxtb	r2, r3
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	795b      	ldrb	r3, [r3, #5]
     a96:	b2db      	uxtb	r3, r3
     a98:	4013      	ands	r3, r2
     a9a:	b2db      	uxtb	r3, r3
     a9c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     a9e:	68bb      	ldr	r3, [r7, #8]
     aa0:	2201      	movs	r2, #1
     aa2:	4013      	ands	r3, r2
     aa4:	d045      	beq.n	b32 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	2201      	movs	r2, #1
     aac:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	695b      	ldr	r3, [r3, #20]
     ab2:	1c99      	adds	r1, r3, #2
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	6151      	str	r1, [r2, #20]
     ab8:	68fa      	ldr	r2, [r7, #12]
     aba:	6812      	ldr	r2, [r2, #0]
     abc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     abe:	b292      	uxth	r2, r2
     ac0:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     ac2:	68fb      	ldr	r3, [r7, #12]
     ac4:	8b1b      	ldrh	r3, [r3, #24]
     ac6:	b29b      	uxth	r3, r3
     ac8:	3b01      	subs	r3, #1
     aca:	b29b      	uxth	r3, r3
     acc:	68fa      	ldr	r2, [r7, #12]
     ace:	1c19      	adds	r1, r3, #0
     ad0:	8311      	strh	r1, [r2, #24]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d00f      	beq.n	af6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     ad6:	68fb      	ldr	r3, [r7, #12]
     ad8:	7f5b      	ldrb	r3, [r3, #29]
     ada:	2b00      	cmp	r3, #0
     adc:	d029      	beq.n	b32 <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     ade:	68fb      	ldr	r3, [r7, #12]
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	79db      	ldrb	r3, [r3, #7]
     ae4:	b2db      	uxtb	r3, r3
     ae6:	b25b      	sxtb	r3, r3
     ae8:	2b00      	cmp	r3, #0
     aea:	db22      	blt.n	b32 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     aec:	68fb      	ldr	r3, [r7, #12]
     aee:	0018      	movs	r0, r3
     af0:	4b2c      	ldr	r3, [pc, #176]	; (ba4 <_adc_interrupt_handler+0x134>)
     af2:	4798      	blx	r3
     af4:	e01d      	b.n	b32 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	2101      	movs	r1, #1
     afa:	0018      	movs	r0, r3
     afc:	4b2a      	ldr	r3, [pc, #168]	; (ba8 <_adc_interrupt_handler+0x138>)
     afe:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	7f1b      	ldrb	r3, [r3, #28]
     b04:	b2db      	uxtb	r3, r3
     b06:	2b05      	cmp	r3, #5
     b08:	d113      	bne.n	b32 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     b0a:	68fb      	ldr	r3, [r7, #12]
     b0c:	2200      	movs	r2, #0
     b0e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	7edb      	ldrb	r3, [r3, #27]
     b14:	001a      	movs	r2, r3
     b16:	2301      	movs	r3, #1
     b18:	4013      	ands	r3, r2
     b1a:	d00a      	beq.n	b32 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	7e9b      	ldrb	r3, [r3, #26]
     b20:	001a      	movs	r2, r3
     b22:	2301      	movs	r3, #1
     b24:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     b26:	d004      	beq.n	b32 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	689b      	ldr	r3, [r3, #8]
     b2c:	68fa      	ldr	r2, [r7, #12]
     b2e:	0010      	movs	r0, r2
     b30:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     b32:	68bb      	ldr	r3, [r7, #8]
     b34:	2204      	movs	r2, #4
     b36:	4013      	ands	r3, r2
     b38:	d014      	beq.n	b64 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	2204      	movs	r2, #4
     b40:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	7edb      	ldrb	r3, [r3, #27]
     b46:	001a      	movs	r2, r3
     b48:	2302      	movs	r3, #2
     b4a:	4013      	ands	r3, r2
     b4c:	d00a      	beq.n	b64 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	7e9b      	ldrb	r3, [r3, #26]
     b52:	001a      	movs	r2, r3
     b54:	2302      	movs	r3, #2
     b56:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     b58:	d004      	beq.n	b64 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	68db      	ldr	r3, [r3, #12]
     b5e:	68fa      	ldr	r2, [r7, #12]
     b60:	0010      	movs	r0, r2
     b62:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     b64:	68bb      	ldr	r3, [r7, #8]
     b66:	2202      	movs	r2, #2
     b68:	4013      	ands	r3, r2
     b6a:	d014      	beq.n	b96 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	2202      	movs	r2, #2
     b72:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	7edb      	ldrb	r3, [r3, #27]
     b78:	001a      	movs	r2, r3
     b7a:	2304      	movs	r3, #4
     b7c:	4013      	ands	r3, r2
     b7e:	d00a      	beq.n	b96 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	7e9b      	ldrb	r3, [r3, #26]
     b84:	001a      	movs	r2, r3
     b86:	2304      	movs	r3, #4
     b88:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b8a:	d004      	beq.n	b96 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	691b      	ldr	r3, [r3, #16]
     b90:	68fa      	ldr	r2, [r7, #12]
     b92:	0010      	movs	r0, r2
     b94:	4798      	blx	r3
		}
	}
}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	46bd      	mov	sp, r7
     b9a:	b004      	add	sp, #16
     b9c:	bd80      	pop	{r7, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	20000184 	.word	0x20000184
     ba4:	00000a05 	.word	0x00000a05
     ba8:	00000a4d 	.word	0x00000a4d

00000bac <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     bac:	b580      	push	{r7, lr}
     bae:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     bb0:	2000      	movs	r0, #0
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <ADC_Handler+0x10>)
     bb4:	4798      	blx	r3
}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	46bd      	mov	sp, r7
     bba:	bd80      	pop	{r7, pc}
     bbc:	00000a71 	.word	0x00000a71

00000bc0 <system_apb_clock_set_mask>:
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	0002      	movs	r2, r0
     bc8:	6039      	str	r1, [r7, #0]
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     bce:	1dfb      	adds	r3, r7, #7
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b04      	cmp	r3, #4
     bd4:	d827      	bhi.n	c26 <system_apb_clock_set_mask+0x66>
     bd6:	009a      	lsls	r2, r3, #2
     bd8:	4b16      	ldr	r3, [pc, #88]	; (c34 <system_apb_clock_set_mask+0x74>)
     bda:	18d3      	adds	r3, r2, r3
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     be0:	4b15      	ldr	r3, [pc, #84]	; (c38 <system_apb_clock_set_mask+0x78>)
     be2:	4a15      	ldr	r2, [pc, #84]	; (c38 <system_apb_clock_set_mask+0x78>)
     be4:	6951      	ldr	r1, [r2, #20]
     be6:	683a      	ldr	r2, [r7, #0]
     be8:	430a      	orrs	r2, r1
     bea:	615a      	str	r2, [r3, #20]
			break;
     bec:	e01d      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     bee:	4b12      	ldr	r3, [pc, #72]	; (c38 <system_apb_clock_set_mask+0x78>)
     bf0:	4a11      	ldr	r2, [pc, #68]	; (c38 <system_apb_clock_set_mask+0x78>)
     bf2:	6991      	ldr	r1, [r2, #24]
     bf4:	683a      	ldr	r2, [r7, #0]
     bf6:	430a      	orrs	r2, r1
     bf8:	619a      	str	r2, [r3, #24]
			break;
     bfa:	e016      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     bfc:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_apb_clock_set_mask+0x78>)
     bfe:	4a0e      	ldr	r2, [pc, #56]	; (c38 <system_apb_clock_set_mask+0x78>)
     c00:	69d1      	ldr	r1, [r2, #28]
     c02:	683a      	ldr	r2, [r7, #0]
     c04:	430a      	orrs	r2, r1
     c06:	61da      	str	r2, [r3, #28]
			break;
     c08:	e00f      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <system_apb_clock_set_mask+0x78>)
     c0c:	4a0a      	ldr	r2, [pc, #40]	; (c38 <system_apb_clock_set_mask+0x78>)
     c0e:	6a11      	ldr	r1, [r2, #32]
     c10:	683a      	ldr	r2, [r7, #0]
     c12:	430a      	orrs	r2, r1
     c14:	621a      	str	r2, [r3, #32]
			break;
     c16:	e008      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <system_apb_clock_set_mask+0x78>)
     c1a:	4a07      	ldr	r2, [pc, #28]	; (c38 <system_apb_clock_set_mask+0x78>)
     c1c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     c1e:	683a      	ldr	r2, [r7, #0]
     c20:	430a      	orrs	r2, r1
     c22:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     c24:	e001      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     c26:	2317      	movs	r3, #23
     c28:	e000      	b.n	c2c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     c2a:	2300      	movs	r3, #0
}
     c2c:	0018      	movs	r0, r3
     c2e:	46bd      	mov	sp, r7
     c30:	b002      	add	sp, #8
     c32:	bd80      	pop	{r7, pc}
     c34:	000072d4 	.word	0x000072d4
     c38:	40000400 	.word	0x40000400

00000c3c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b082      	sub	sp, #8
     c40:	af00      	add	r7, sp, #0
     c42:	0002      	movs	r2, r0
     c44:	1dfb      	adds	r3, r7, #7
     c46:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c48:	4b06      	ldr	r3, [pc, #24]	; (c64 <system_interrupt_enable+0x28>)
     c4a:	1dfa      	adds	r2, r7, #7
     c4c:	7812      	ldrb	r2, [r2, #0]
     c4e:	0011      	movs	r1, r2
     c50:	221f      	movs	r2, #31
     c52:	400a      	ands	r2, r1
     c54:	2101      	movs	r1, #1
     c56:	4091      	lsls	r1, r2
     c58:	000a      	movs	r2, r1
     c5a:	601a      	str	r2, [r3, #0]
}
     c5c:	46c0      	nop			; (mov r8, r8)
     c5e:	46bd      	mov	sp, r7
     c60:	b002      	add	sp, #8
     c62:	bd80      	pop	{r7, pc}
     c64:	e000e100 	.word	0xe000e100

00000c68 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     c68:	b580      	push	{r7, lr}
     c6a:	b082      	sub	sp, #8
     c6c:	af00      	add	r7, sp, #0
     c6e:	0002      	movs	r2, r0
     c70:	1dfb      	adds	r3, r7, #7
     c72:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c74:	4a07      	ldr	r2, [pc, #28]	; (c94 <system_interrupt_disable+0x2c>)
     c76:	1dfb      	adds	r3, r7, #7
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	0019      	movs	r1, r3
     c7c:	231f      	movs	r3, #31
     c7e:	400b      	ands	r3, r1
     c80:	2101      	movs	r1, #1
     c82:	4099      	lsls	r1, r3
     c84:	000b      	movs	r3, r1
     c86:	0019      	movs	r1, r3
     c88:	2380      	movs	r3, #128	; 0x80
     c8a:	50d1      	str	r1, [r2, r3]
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	b002      	add	sp, #8
     c92:	bd80      	pop	{r7, pc}
     c94:	e000e100 	.word	0xe000e100

00000c98 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     c98:	b580      	push	{r7, lr}
     c9a:	b084      	sub	sp, #16
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     ca6:	68fb      	ldr	r3, [r7, #12]
     ca8:	691b      	ldr	r3, [r3, #16]
     caa:	2b00      	cmp	r3, #0
     cac:	d001      	beq.n	cb2 <rtc_count_is_syncing+0x1a>
		return true;
     cae:	2301      	movs	r3, #1
     cb0:	e000      	b.n	cb4 <rtc_count_is_syncing+0x1c>
	}

	return false;
     cb2:	2300      	movs	r3, #0
}
     cb4:	0018      	movs	r0, r3
     cb6:	46bd      	mov	sp, r7
     cb8:	b004      	add	sp, #16
     cba:	bd80      	pop	{r7, pc}

00000cbc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b084      	sub	sp, #16
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     cca:	2002      	movs	r0, #2
     ccc:	4b0d      	ldr	r3, [pc, #52]	; (d04 <rtc_count_enable+0x48>)
     cce:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	0018      	movs	r0, r3
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <rtc_count_enable+0x4c>)
     cd8:	4798      	blx	r3
     cda:	1e03      	subs	r3, r0, #0
     cdc:	d1f9      	bne.n	cd2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     cde:	68fb      	ldr	r3, [r7, #12]
     ce0:	881b      	ldrh	r3, [r3, #0]
     ce2:	b29b      	uxth	r3, r3
     ce4:	2202      	movs	r2, #2
     ce6:	4313      	orrs	r3, r2
     ce8:	b29a      	uxth	r2, r3
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	0018      	movs	r0, r3
     cf4:	4b04      	ldr	r3, [pc, #16]	; (d08 <rtc_count_enable+0x4c>)
     cf6:	4798      	blx	r3
     cf8:	1e03      	subs	r3, r0, #0
     cfa:	d1f9      	bne.n	cf0 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	46bd      	mov	sp, r7
     d00:	b004      	add	sp, #16
     d02:	bd80      	pop	{r7, pc}
     d04:	00000c3d 	.word	0x00000c3d
     d08:	00000c99 	.word	0x00000c99

00000d0c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	b084      	sub	sp, #16
     d10:	af00      	add	r7, sp, #0
     d12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     d1a:	2002      	movs	r0, #2
     d1c:	4b10      	ldr	r3, [pc, #64]	; (d60 <rtc_count_disable+0x54>)
     d1e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	0018      	movs	r0, r3
     d26:	4b0f      	ldr	r3, [pc, #60]	; (d64 <rtc_count_disable+0x58>)
     d28:	4798      	blx	r3
     d2a:	1e03      	subs	r3, r0, #0
     d2c:	d1f9      	bne.n	d22 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	4a0d      	ldr	r2, [pc, #52]	; (d68 <rtc_count_disable+0x5c>)
     d32:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	4a0c      	ldr	r2, [pc, #48]	; (d68 <rtc_count_disable+0x5c>)
     d38:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	881b      	ldrh	r3, [r3, #0]
     d3e:	b29b      	uxth	r3, r3
     d40:	2202      	movs	r2, #2
     d42:	4393      	bics	r3, r2
     d44:	b29a      	uxth	r2, r3
     d46:	68fb      	ldr	r3, [r7, #12]
     d48:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	0018      	movs	r0, r3
     d50:	4b04      	ldr	r3, [pc, #16]	; (d64 <rtc_count_disable+0x58>)
     d52:	4798      	blx	r3
     d54:	1e03      	subs	r3, r0, #0
     d56:	d1f9      	bne.n	d4c <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
     d58:	46c0      	nop			; (mov r8, r8)
     d5a:	46bd      	mov	sp, r7
     d5c:	b004      	add	sp, #16
     d5e:	bd80      	pop	{r7, pc}
     d60:	00000c69 	.word	0x00000c69
     d64:	00000c99 	.word	0x00000c99
     d68:	ffff81ff 	.word	0xffff81ff

00000d6c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	0018      	movs	r0, r3
     d7e:	4b11      	ldr	r3, [pc, #68]	; (dc4 <rtc_count_reset+0x58>)
     d80:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	2200      	movs	r2, #0
     d86:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	2200      	movs	r2, #0
     d8c:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	0018      	movs	r0, r3
     d94:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <rtc_count_reset+0x5c>)
     d96:	4798      	blx	r3
     d98:	1e03      	subs	r3, r0, #0
     d9a:	d1f9      	bne.n	d90 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	881b      	ldrh	r3, [r3, #0]
     da0:	b29b      	uxth	r3, r3
     da2:	2201      	movs	r2, #1
     da4:	4313      	orrs	r3, r2
     da6:	b29a      	uxth	r2, r3
     da8:	68fb      	ldr	r3, [r7, #12]
     daa:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     dac:	46c0      	nop			; (mov r8, r8)
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	0018      	movs	r0, r3
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <rtc_count_reset+0x5c>)
     db4:	4798      	blx	r3
     db6:	1e03      	subs	r3, r0, #0
     db8:	d1f9      	bne.n	dae <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	46bd      	mov	sp, r7
     dbe:	b004      	add	sp, #16
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00000d0d 	.word	0x00000d0d
     dc8:	00000c99 	.word	0x00000c99

00000dcc <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     dcc:	b580      	push	{r7, lr}
     dce:	b084      	sub	sp, #16
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
     dd4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     ddc:	683b      	ldr	r3, [r7, #0]
     dde:	791b      	ldrb	r3, [r3, #4]
     de0:	b29b      	uxth	r3, r3
     de2:	03db      	lsls	r3, r3, #15
     de4:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
     de6:	683b      	ldr	r3, [r7, #0]
     de8:	881b      	ldrh	r3, [r3, #0]
     dea:	4313      	orrs	r3, r2
     dec:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     dee:	68bb      	ldr	r3, [r7, #8]
     df0:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     df2:	683b      	ldr	r3, [r7, #0]
     df4:	789b      	ldrb	r3, [r3, #2]
     df6:	2b00      	cmp	r3, #0
     df8:	d032      	beq.n	e60 <_rtc_count_set_config+0x94>
     dfa:	2b01      	cmp	r3, #1
     dfc:	d15e      	bne.n	ebc <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     dfe:	68bb      	ldr	r3, [r7, #8]
     e00:	881b      	ldrh	r3, [r3, #0]
     e02:	b29a      	uxth	r2, r3
     e04:	68bb      	ldr	r3, [r7, #8]
     e06:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     e08:	683b      	ldr	r3, [r7, #0]
     e0a:	78db      	ldrb	r3, [r3, #3]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d007      	beq.n	e20 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     e10:	68bb      	ldr	r3, [r7, #8]
     e12:	881b      	ldrh	r3, [r3, #0]
     e14:	b29b      	uxth	r3, r3
     e16:	2280      	movs	r2, #128	; 0x80
     e18:	4313      	orrs	r3, r2
     e1a:	b29a      	uxth	r2, r3
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     e20:	230f      	movs	r3, #15
     e22:	18fb      	adds	r3, r7, r3
     e24:	2200      	movs	r2, #0
     e26:	701a      	strb	r2, [r3, #0]
     e28:	e014      	b.n	e54 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
     e2a:	230f      	movs	r3, #15
     e2c:	18fb      	adds	r3, r7, r3
     e2e:	781a      	ldrb	r2, [r3, #0]
     e30:	683b      	ldr	r3, [r7, #0]
     e32:	3202      	adds	r2, #2
     e34:	0092      	lsls	r2, r2, #2
     e36:	58d1      	ldr	r1, [r2, r3]
     e38:	230f      	movs	r3, #15
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	781a      	ldrb	r2, [r3, #0]
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	0018      	movs	r0, r3
     e42:	4b22      	ldr	r3, [pc, #136]	; (ecc <_rtc_count_set_config+0x100>)
     e44:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     e46:	230f      	movs	r3, #15
     e48:	18fb      	adds	r3, r7, r3
     e4a:	781a      	ldrb	r2, [r3, #0]
     e4c:	230f      	movs	r3, #15
     e4e:	18fb      	adds	r3, r7, r3
     e50:	3201      	adds	r2, #1
     e52:	701a      	strb	r2, [r3, #0]
     e54:	230f      	movs	r3, #15
     e56:	18fb      	adds	r3, r7, r3
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d0e5      	beq.n	e2a <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
     e5e:	e02f      	b.n	ec0 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     e60:	68bb      	ldr	r3, [r7, #8]
     e62:	881b      	ldrh	r3, [r3, #0]
     e64:	b29b      	uxth	r3, r3
     e66:	2204      	movs	r2, #4
     e68:	4313      	orrs	r3, r2
     e6a:	b29a      	uxth	r2, r3
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     e70:	683b      	ldr	r3, [r7, #0]
     e72:	78db      	ldrb	r3, [r3, #3]
     e74:	2b00      	cmp	r3, #0
     e76:	d001      	beq.n	e7c <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     e78:	2317      	movs	r3, #23
     e7a:	e022      	b.n	ec2 <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     e7c:	230e      	movs	r3, #14
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e014      	b.n	eb0 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
     e86:	230e      	movs	r3, #14
     e88:	18fb      	adds	r3, r7, r3
     e8a:	781a      	ldrb	r2, [r3, #0]
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	3202      	adds	r2, #2
     e90:	0092      	lsls	r2, r2, #2
     e92:	58d1      	ldr	r1, [r2, r3]
     e94:	230e      	movs	r3, #14
     e96:	18fb      	adds	r3, r7, r3
     e98:	781a      	ldrb	r2, [r3, #0]
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	0018      	movs	r0, r3
     e9e:	4b0b      	ldr	r3, [pc, #44]	; (ecc <_rtc_count_set_config+0x100>)
     ea0:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     ea2:	230e      	movs	r3, #14
     ea4:	18fb      	adds	r3, r7, r3
     ea6:	781a      	ldrb	r2, [r3, #0]
     ea8:	230e      	movs	r3, #14
     eaa:	18fb      	adds	r3, r7, r3
     eac:	3201      	adds	r2, #1
     eae:	701a      	strb	r2, [r3, #0]
     eb0:	230e      	movs	r3, #14
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d9e5      	bls.n	e86 <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
     eba:	e001      	b.n	ec0 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ebc:	2317      	movs	r3, #23
     ebe:	e000      	b.n	ec2 <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     ec0:	2300      	movs	r3, #0
}
     ec2:	0018      	movs	r0, r3
     ec4:	46bd      	mov	sp, r7
     ec6:	b004      	add	sp, #16
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ff1 	.word	0x00000ff1

00000ed0 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	60f8      	str	r0, [r7, #12]
     ed8:	60b9      	str	r1, [r7, #8]
     eda:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	68ba      	ldr	r2, [r7, #8]
     ee0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	005b      	lsls	r3, r3, #1
     ee6:	0019      	movs	r1, r3
     ee8:	2000      	movs	r0, #0
     eea:	4b0d      	ldr	r3, [pc, #52]	; (f20 <rtc_count_init+0x50>)
     eec:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <rtc_count_init+0x54>)
     ef0:	2200      	movs	r2, #0
     ef2:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	0018      	movs	r0, r3
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <rtc_count_init+0x58>)
     efa:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	789a      	ldrb	r2, [r3, #2]
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     f04:	4b09      	ldr	r3, [pc, #36]	; (f2c <rtc_count_init+0x5c>)
     f06:	68fa      	ldr	r2, [r7, #12]
     f08:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     f0a:	687a      	ldr	r2, [r7, #4]
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	0011      	movs	r1, r2
     f10:	0018      	movs	r0, r3
     f12:	4b07      	ldr	r3, [pc, #28]	; (f30 <rtc_count_init+0x60>)
     f14:	4798      	blx	r3
     f16:	0003      	movs	r3, r0
}
     f18:	0018      	movs	r0, r3
     f1a:	46bd      	mov	sp, r7
     f1c:	b004      	add	sp, #16
     f1e:	bd80      	pop	{r7, pc}
     f20:	00000bc1 	.word	0x00000bc1
     f24:	40001000 	.word	0x40001000
     f28:	00000d6d 	.word	0x00000d6d
     f2c:	20000188 	.word	0x20000188
     f30:	00000dcd 	.word	0x00000dcd

00000f34 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]
     f3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     f44:	46c0      	nop			; (mov r8, r8)
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	0018      	movs	r0, r3
     f4a:	4b13      	ldr	r3, [pc, #76]	; (f98 <rtc_count_set_count+0x64>)
     f4c:	4798      	blx	r3
     f4e:	1e03      	subs	r3, r0, #0
     f50:	d1f9      	bne.n	f46 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	791b      	ldrb	r3, [r3, #4]
     f56:	2b00      	cmp	r3, #0
     f58:	d005      	beq.n	f66 <rtc_count_set_count+0x32>
     f5a:	2b01      	cmp	r3, #1
     f5c:	d10e      	bne.n	f7c <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	683a      	ldr	r2, [r7, #0]
     f62:	619a      	str	r2, [r3, #24]
			break;
     f64:	e00c      	b.n	f80 <rtc_count_set_count+0x4c>
		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     f66:	683b      	ldr	r3, [r7, #0]
     f68:	4a0c      	ldr	r2, [pc, #48]	; (f9c <rtc_count_set_count+0x68>)
     f6a:	4293      	cmp	r3, r2
     f6c:	d901      	bls.n	f72 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     f6e:	2317      	movs	r3, #23
     f70:	e00e      	b.n	f90 <rtc_count_set_count+0x5c>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     f72:	683b      	ldr	r3, [r7, #0]
     f74:	b29a      	uxth	r2, r3
     f76:	68fb      	ldr	r3, [r7, #12]
     f78:	831a      	strh	r2, [r3, #24]

			break;
     f7a:	e001      	b.n	f80 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     f7c:	2317      	movs	r3, #23
     f7e:	e007      	b.n	f90 <rtc_count_set_count+0x5c>
	}

	while (rtc_count_is_syncing(module)) {
     f80:	46c0      	nop			; (mov r8, r8)
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	0018      	movs	r0, r3
     f86:	4b04      	ldr	r3, [pc, #16]	; (f98 <rtc_count_set_count+0x64>)
     f88:	4798      	blx	r3
     f8a:	1e03      	subs	r3, r0, #0
     f8c:	d1f9      	bne.n	f82 <rtc_count_set_count+0x4e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     f8e:	2300      	movs	r3, #0
}
     f90:	0018      	movs	r0, r3
     f92:	46bd      	mov	sp, r7
     f94:	b004      	add	sp, #16
     f96:	bd80      	pop	{r7, pc}
     f98:	00000c99 	.word	0x00000c99
     f9c:	0000ffff 	.word	0x0000ffff

00000fa0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     fa0:	b580      	push	{r7, lr}
     fa2:	b084      	sub	sp, #16
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	60bb      	str	r3, [r7, #8]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	0018      	movs	r0, r3
     fb4:	4b0d      	ldr	r3, [pc, #52]	; (fec <rtc_count_get_count+0x4c>)
     fb6:	4798      	blx	r3
     fb8:	1e03      	subs	r3, r0, #0
     fba:	d1f9      	bne.n	fb0 <rtc_count_get_count+0x10>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	791b      	ldrb	r3, [r3, #4]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d005      	beq.n	fd0 <rtc_count_get_count+0x30>
     fc4:	2b01      	cmp	r3, #1
     fc6:	d108      	bne.n	fda <rtc_count_get_count+0x3a>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	699b      	ldr	r3, [r3, #24]
     fcc:	60fb      	str	r3, [r7, #12]

			break;
     fce:	e007      	b.n	fe0 <rtc_count_get_count+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     fd0:	68bb      	ldr	r3, [r7, #8]
     fd2:	8b1b      	ldrh	r3, [r3, #24]
     fd4:	b29b      	uxth	r3, r3
     fd6:	60fb      	str	r3, [r7, #12]

			break;
     fd8:	e002      	b.n	fe0 <rtc_count_get_count+0x40>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     fda:	2300      	movs	r3, #0
     fdc:	60fb      	str	r3, [r7, #12]
			break;
     fde:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     fe0:	68fb      	ldr	r3, [r7, #12]
}
     fe2:	0018      	movs	r0, r3
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	00000c99 	.word	0x00000c99

00000ff0 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     ff0:	b580      	push	{r7, lr}
     ff2:	b086      	sub	sp, #24
     ff4:	af00      	add	r7, sp, #0
     ff6:	60f8      	str	r0, [r7, #12]
     ff8:	60b9      	str	r1, [r7, #8]
     ffa:	1dfb      	adds	r3, r7, #7
     ffc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	68fb      	ldr	r3, [r7, #12]
    1008:	0018      	movs	r0, r3
    100a:	4b1d      	ldr	r3, [pc, #116]	; (1080 <rtc_count_set_compare+0x90>)
    100c:	4798      	blx	r3
    100e:	1e03      	subs	r3, r0, #0
    1010:	d1f9      	bne.n	1006 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	791b      	ldrb	r3, [r3, #4]
    1016:	2b00      	cmp	r3, #0
    1018:	d00f      	beq.n	103a <rtc_count_set_compare+0x4a>
    101a:	2b01      	cmp	r3, #1
    101c:	d122      	bne.n	1064 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    101e:	1dfb      	adds	r3, r7, #7
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b01      	cmp	r3, #1
    1024:	d901      	bls.n	102a <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    1026:	2317      	movs	r3, #23
    1028:	e026      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    102a:	1dfb      	adds	r3, r7, #7
    102c:	781a      	ldrb	r2, [r3, #0]
    102e:	697b      	ldr	r3, [r7, #20]
    1030:	3208      	adds	r2, #8
    1032:	0092      	lsls	r2, r2, #2
    1034:	68b9      	ldr	r1, [r7, #8]
    1036:	50d1      	str	r1, [r2, r3]

			break;
    1038:	e016      	b.n	1068 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    103a:	1dfb      	adds	r3, r7, #7
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	2b02      	cmp	r3, #2
    1040:	d901      	bls.n	1046 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    1042:	2317      	movs	r3, #23
    1044:	e018      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	4a0e      	ldr	r2, [pc, #56]	; (1084 <rtc_count_set_compare+0x94>)
    104a:	4293      	cmp	r3, r2
    104c:	d901      	bls.n	1052 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    104e:	2317      	movs	r3, #23
    1050:	e012      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1052:	1dfb      	adds	r3, r7, #7
    1054:	781a      	ldrb	r2, [r3, #0]
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	b299      	uxth	r1, r3
    105a:	697b      	ldr	r3, [r7, #20]
    105c:	3210      	adds	r2, #16
    105e:	0052      	lsls	r2, r2, #1
    1060:	52d1      	strh	r1, [r2, r3]

			break;
    1062:	e001      	b.n	1068 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    1064:	231a      	movs	r3, #26
    1066:	e007      	b.n	1078 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    1068:	46c0      	nop			; (mov r8, r8)
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	0018      	movs	r0, r3
    106e:	4b04      	ldr	r3, [pc, #16]	; (1080 <rtc_count_set_compare+0x90>)
    1070:	4798      	blx	r3
    1072:	1e03      	subs	r3, r0, #0
    1074:	d1f9      	bne.n	106a <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    1076:	2300      	movs	r3, #0
}
    1078:	0018      	movs	r0, r3
    107a:	46bd      	mov	sp, r7
    107c:	b006      	add	sp, #24
    107e:	bd80      	pop	{r7, pc}
    1080:	00000c99 	.word	0x00000c99
    1084:	0000ffff 	.word	0x0000ffff

00001088 <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
    1088:	b580      	push	{r7, lr}
    108a:	b086      	sub	sp, #24
    108c:	af00      	add	r7, sp, #0
    108e:	60f8      	str	r0, [r7, #12]
    1090:	60b9      	str	r1, [r7, #8]
    1092:	1dfb      	adds	r3, r7, #7
    1094:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
    1096:	2317      	movs	r3, #23
    1098:	18fb      	adds	r3, r7, r3
    109a:	2200      	movs	r2, #0
    109c:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    109e:	1dfb      	adds	r3, r7, #7
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	2b0a      	cmp	r3, #10
    10a4:	d003      	beq.n	10ae <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    10a6:	1dfb      	adds	r3, r7, #7
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b07      	cmp	r3, #7
    10ac:	d804      	bhi.n	10b8 <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
    10ae:	2317      	movs	r3, #23
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	2200      	movs	r2, #0
    10b4:	701a      	strb	r2, [r3, #0]
    10b6:	e01f      	b.n	10f8 <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	791b      	ldrb	r3, [r3, #4]
    10bc:	2b00      	cmp	r3, #0
    10be:	d00a      	beq.n	10d6 <rtc_count_register_callback+0x4e>
    10c0:	2b01      	cmp	r3, #1
    10c2:	d111      	bne.n	10e8 <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    10c4:	1dfb      	adds	r3, r7, #7
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	2b09      	cmp	r3, #9
    10ca:	d912      	bls.n	10f2 <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
    10cc:	2317      	movs	r3, #23
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	2217      	movs	r2, #23
    10d2:	701a      	strb	r2, [r3, #0]
			}

			break;
    10d4:	e00d      	b.n	10f2 <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    10d6:	1dfb      	adds	r3, r7, #7
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	2b0a      	cmp	r3, #10
    10dc:	d90b      	bls.n	10f6 <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
    10de:	2317      	movs	r3, #23
    10e0:	18fb      	adds	r3, r7, r3
    10e2:	2217      	movs	r2, #23
    10e4:	701a      	strb	r2, [r3, #0]
			}
			break;
    10e6:	e006      	b.n	10f6 <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
    10e8:	2317      	movs	r3, #23
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	2217      	movs	r2, #23
    10ee:	701a      	strb	r2, [r3, #0]
    10f0:	e002      	b.n	10f8 <rtc_count_register_callback+0x70>
			break;
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	e000      	b.n	10f8 <rtc_count_register_callback+0x70>
			break;
    10f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
    10f8:	2317      	movs	r3, #23
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d115      	bne.n	112e <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
    1102:	1dfb      	adds	r3, r7, #7
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	3202      	adds	r2, #2
    110a:	0092      	lsls	r2, r2, #2
    110c:	68b9      	ldr	r1, [r7, #8]
    110e:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1114:	b29b      	uxth	r3, r3
    1116:	b21a      	sxth	r2, r3
    1118:	1dfb      	adds	r3, r7, #7
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2101      	movs	r1, #1
    111e:	4099      	lsls	r1, r3
    1120:	000b      	movs	r3, r1
    1122:	b21b      	sxth	r3, r3
    1124:	4313      	orrs	r3, r2
    1126:	b21b      	sxth	r3, r3
    1128:	b29a      	uxth	r2, r3
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
    112e:	2317      	movs	r3, #23
    1130:	18fb      	adds	r3, r7, r3
    1132:	781b      	ldrb	r3, [r3, #0]
}
    1134:	0018      	movs	r0, r3
    1136:	46bd      	mov	sp, r7
    1138:	b006      	add	sp, #24
    113a:	bd80      	pop	{r7, pc}

0000113c <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    113c:	b580      	push	{r7, lr}
    113e:	b084      	sub	sp, #16
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	000a      	movs	r2, r1
    1146:	1cfb      	adds	r3, r7, #3
    1148:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1150:	1cfb      	adds	r3, r7, #3
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	2b0a      	cmp	r3, #10
    1156:	d103      	bne.n	1160 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	4a1a      	ldr	r2, [pc, #104]	; (11c4 <rtc_count_enable_callback+0x88>)
    115c:	815a      	strh	r2, [r3, #10]
    115e:	e01e      	b.n	119e <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1160:	1cfb      	adds	r3, r7, #3
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b07      	cmp	r3, #7
    1166:	d80b      	bhi.n	1180 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    1168:	1cfb      	adds	r3, r7, #3
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	2201      	movs	r2, #1
    116e:	409a      	lsls	r2, r3
    1170:	0013      	movs	r3, r2
    1172:	b29b      	uxth	r3, r3
    1174:	22ff      	movs	r2, #255	; 0xff
    1176:	4013      	ands	r3, r2
    1178:	b29a      	uxth	r2, r3
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	815a      	strh	r2, [r3, #10]
    117e:	e00e      	b.n	119e <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1180:	1cfb      	adds	r3, r7, #3
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	3b08      	subs	r3, #8
    1186:	2201      	movs	r2, #1
    1188:	409a      	lsls	r2, r3
    118a:	0013      	movs	r3, r2
    118c:	b29b      	uxth	r3, r3
    118e:	021b      	lsls	r3, r3, #8
    1190:	b29a      	uxth	r2, r3
    1192:	23c0      	movs	r3, #192	; 0xc0
    1194:	009b      	lsls	r3, r3, #2
    1196:	4013      	ands	r3, r2
    1198:	b29a      	uxth	r2, r3
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    11a2:	b29b      	uxth	r3, r3
    11a4:	b21a      	sxth	r2, r3
    11a6:	1cfb      	adds	r3, r7, #3
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2101      	movs	r1, #1
    11ac:	4099      	lsls	r1, r3
    11ae:	000b      	movs	r3, r1
    11b0:	b21b      	sxth	r3, r3
    11b2:	4313      	orrs	r3, r2
    11b4:	b21b      	sxth	r3, r3
    11b6:	b29a      	uxth	r2, r3
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	86da      	strh	r2, [r3, #54]	; 0x36
}
    11bc:	46c0      	nop			; (mov r8, r8)
    11be:	46bd      	mov	sp, r7
    11c0:	b004      	add	sp, #16
    11c2:	bd80      	pop	{r7, pc}
    11c4:	ffff8000 	.word	0xffff8000

000011c8 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    11c8:	b580      	push	{r7, lr}
    11ca:	b084      	sub	sp, #16
    11cc:	af00      	add	r7, sp, #0
    11ce:	6078      	str	r0, [r7, #4]
    11d0:	000a      	movs	r2, r1
    11d2:	1cfb      	adds	r3, r7, #3
    11d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	681b      	ldr	r3, [r3, #0]
    11da:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    11dc:	1cfb      	adds	r3, r7, #3
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	2b0a      	cmp	r3, #10
    11e2:	d103      	bne.n	11ec <rtc_count_disable_callback+0x24>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	4a1b      	ldr	r2, [pc, #108]	; (1254 <rtc_count_disable_callback+0x8c>)
    11e8:	811a      	strh	r2, [r3, #8]
    11ea:	e01e      	b.n	122a <rtc_count_disable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    11ec:	1cfb      	adds	r3, r7, #3
    11ee:	781b      	ldrb	r3, [r3, #0]
    11f0:	2b07      	cmp	r3, #7
    11f2:	d80b      	bhi.n	120c <rtc_count_disable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    11f4:	1cfb      	adds	r3, r7, #3
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2201      	movs	r2, #1
    11fa:	409a      	lsls	r2, r3
    11fc:	0013      	movs	r3, r2
    11fe:	b29b      	uxth	r3, r3
    1200:	22ff      	movs	r2, #255	; 0xff
    1202:	4013      	ands	r3, r2
    1204:	b29a      	uxth	r2, r3
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	811a      	strh	r2, [r3, #8]
    120a:	e00e      	b.n	122a <rtc_count_disable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    120c:	1cfb      	adds	r3, r7, #3
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	3b08      	subs	r3, #8
    1212:	2201      	movs	r2, #1
    1214:	409a      	lsls	r2, r3
    1216:	0013      	movs	r3, r2
    1218:	b29b      	uxth	r3, r3
    121a:	021b      	lsls	r3, r3, #8
    121c:	b29a      	uxth	r2, r3
    121e:	23c0      	movs	r3, #192	; 0xc0
    1220:	009b      	lsls	r3, r3, #2
    1222:	4013      	ands	r3, r2
    1224:	b29a      	uxth	r2, r3
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	811a      	strh	r2, [r3, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    122e:	b29b      	uxth	r3, r3
    1230:	b21b      	sxth	r3, r3
    1232:	1cfa      	adds	r2, r7, #3
    1234:	7812      	ldrb	r2, [r2, #0]
    1236:	2101      	movs	r1, #1
    1238:	4091      	lsls	r1, r2
    123a:	000a      	movs	r2, r1
    123c:	b212      	sxth	r2, r2
    123e:	43d2      	mvns	r2, r2
    1240:	b212      	sxth	r2, r2
    1242:	4013      	ands	r3, r2
    1244:	b21b      	sxth	r3, r3
    1246:	b29a      	uxth	r2, r3
    1248:	687b      	ldr	r3, [r7, #4]
    124a:	86da      	strh	r2, [r3, #54]	; 0x36
}
    124c:	46c0      	nop			; (mov r8, r8)
    124e:	46bd      	mov	sp, r7
    1250:	b004      	add	sp, #16
    1252:	bd80      	pop	{r7, pc}
    1254:	ffff8000 	.word	0xffff8000

00001258 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1258:	b580      	push	{r7, lr}
    125a:	b086      	sub	sp, #24
    125c:	af00      	add	r7, sp, #0
    125e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    1260:	4b58      	ldr	r3, [pc, #352]	; (13c4 <_rtc_interrupt_handler+0x16c>)
    1262:	687a      	ldr	r2, [r7, #4]
    1264:	0092      	lsls	r2, r2, #2
    1266:	58d3      	ldr	r3, [r2, r3]
    1268:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    126a:	693b      	ldr	r3, [r7, #16]
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1270:	230a      	movs	r3, #10
    1272:	18fb      	adds	r3, r7, r3
    1274:	693a      	ldr	r2, [r7, #16]
    1276:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    1278:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    127a:	693b      	ldr	r3, [r7, #16]
    127c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    127e:	b29a      	uxth	r2, r3
    1280:	230a      	movs	r3, #10
    1282:	18fb      	adds	r3, r7, r3
    1284:	210a      	movs	r1, #10
    1286:	1879      	adds	r1, r7, r1
    1288:	8809      	ldrh	r1, [r1, #0]
    128a:	400a      	ands	r2, r1
    128c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    128e:	2308      	movs	r3, #8
    1290:	18fb      	adds	r3, r7, r3
    1292:	68fa      	ldr	r2, [r7, #12]
    1294:	8992      	ldrh	r2, [r2, #12]
    1296:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	895b      	ldrh	r3, [r3, #10]
    129c:	b29a      	uxth	r2, r3
    129e:	2308      	movs	r3, #8
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	2108      	movs	r1, #8
    12a4:	1879      	adds	r1, r7, r1
    12a6:	8809      	ldrh	r1, [r1, #0]
    12a8:	400a      	ands	r2, r1
    12aa:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    12ac:	2308      	movs	r3, #8
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	2200      	movs	r2, #0
    12b2:	5e9b      	ldrsh	r3, [r3, r2]
    12b4:	2b00      	cmp	r3, #0
    12b6:	da0d      	bge.n	12d4 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    12b8:	230a      	movs	r3, #10
    12ba:	18fb      	adds	r3, r7, r3
    12bc:	881a      	ldrh	r2, [r3, #0]
    12be:	2380      	movs	r3, #128	; 0x80
    12c0:	00db      	lsls	r3, r3, #3
    12c2:	4013      	ands	r3, r2
    12c4:	d002      	beq.n	12cc <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    12ca:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	4a3e      	ldr	r2, [pc, #248]	; (13c8 <_rtc_interrupt_handler+0x170>)
    12d0:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    12d2:	e072      	b.n	13ba <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    12d4:	2308      	movs	r3, #8
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	881b      	ldrh	r3, [r3, #0]
    12da:	22ff      	movs	r2, #255	; 0xff
    12dc:	4013      	ands	r3, r2
    12de:	d041      	beq.n	1364 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    12e0:	2317      	movs	r3, #23
    12e2:	18fb      	adds	r3, r7, r3
    12e4:	2200      	movs	r2, #0
    12e6:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    12e8:	2317      	movs	r3, #23
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	2200      	movs	r2, #0
    12ee:	701a      	strb	r2, [r3, #0]
    12f0:	e032      	b.n	1358 <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    12f2:	2308      	movs	r3, #8
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	881b      	ldrh	r3, [r3, #0]
    12f8:	2217      	movs	r2, #23
    12fa:	18ba      	adds	r2, r7, r2
    12fc:	7812      	ldrb	r2, [r2, #0]
    12fe:	2101      	movs	r1, #1
    1300:	4091      	lsls	r1, r2
    1302:	000a      	movs	r2, r1
    1304:	4013      	ands	r3, r2
    1306:	22ff      	movs	r2, #255	; 0xff
    1308:	4013      	ands	r3, r2
    130a:	d012      	beq.n	1332 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    130c:	230a      	movs	r3, #10
    130e:	18fb      	adds	r3, r7, r3
    1310:	881a      	ldrh	r2, [r3, #0]
    1312:	2317      	movs	r3, #23
    1314:	18fb      	adds	r3, r7, r3
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	411a      	asrs	r2, r3
    131a:	0013      	movs	r3, r2
    131c:	2201      	movs	r2, #1
    131e:	4013      	ands	r3, r2
    1320:	d007      	beq.n	1332 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    1322:	2317      	movs	r3, #23
    1324:	18fb      	adds	r3, r7, r3
    1326:	781a      	ldrb	r2, [r3, #0]
    1328:	693b      	ldr	r3, [r7, #16]
    132a:	3202      	adds	r2, #2
    132c:	0092      	lsls	r2, r2, #2
    132e:	58d3      	ldr	r3, [r2, r3]
    1330:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    1332:	2317      	movs	r3, #23
    1334:	18fb      	adds	r3, r7, r3
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	2201      	movs	r2, #1
    133a:	409a      	lsls	r2, r3
    133c:	0013      	movs	r3, r2
    133e:	b29b      	uxth	r3, r3
    1340:	22ff      	movs	r2, #255	; 0xff
    1342:	4013      	ands	r3, r2
    1344:	b29a      	uxth	r2, r3
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    134a:	2317      	movs	r3, #23
    134c:	18fb      	adds	r3, r7, r3
    134e:	781a      	ldrb	r2, [r3, #0]
    1350:	2317      	movs	r3, #23
    1352:	18fb      	adds	r3, r7, r3
    1354:	3201      	adds	r2, #1
    1356:	701a      	strb	r2, [r3, #0]
    1358:	2317      	movs	r3, #23
    135a:	18fb      	adds	r3, r7, r3
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	2b07      	cmp	r3, #7
    1360:	d9c7      	bls.n	12f2 <_rtc_interrupt_handler+0x9a>
}
    1362:	e02a      	b.n	13ba <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    1364:	2308      	movs	r3, #8
    1366:	18fb      	adds	r3, r7, r3
    1368:	881a      	ldrh	r2, [r3, #0]
    136a:	2380      	movs	r3, #128	; 0x80
    136c:	005b      	lsls	r3, r3, #1
    136e:	4013      	ands	r3, r2
    1370:	d00e      	beq.n	1390 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1372:	230a      	movs	r3, #10
    1374:	18fb      	adds	r3, r7, r3
    1376:	881a      	ldrh	r2, [r3, #0]
    1378:	2380      	movs	r3, #128	; 0x80
    137a:	005b      	lsls	r3, r3, #1
    137c:	4013      	ands	r3, r2
    137e:	d002      	beq.n	1386 <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1380:	693b      	ldr	r3, [r7, #16]
    1382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1384:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	0052      	lsls	r2, r2, #1
    138c:	819a      	strh	r2, [r3, #12]
}
    138e:	e014      	b.n	13ba <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1390:	2308      	movs	r3, #8
    1392:	18fb      	adds	r3, r7, r3
    1394:	881a      	ldrh	r2, [r3, #0]
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	009b      	lsls	r3, r3, #2
    139a:	4013      	ands	r3, r2
    139c:	d00d      	beq.n	13ba <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    139e:	230a      	movs	r3, #10
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	881a      	ldrh	r2, [r3, #0]
    13a4:	2380      	movs	r3, #128	; 0x80
    13a6:	009b      	lsls	r3, r3, #2
    13a8:	4013      	ands	r3, r2
    13aa:	d002      	beq.n	13b2 <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    13ac:	693b      	ldr	r3, [r7, #16]
    13ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13b0:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	2280      	movs	r2, #128	; 0x80
    13b6:	0092      	lsls	r2, r2, #2
    13b8:	819a      	strh	r2, [r3, #12]
}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46bd      	mov	sp, r7
    13be:	b006      	add	sp, #24
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	20000188 	.word	0x20000188
    13c8:	ffff8000 	.word	0xffff8000

000013cc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    13d0:	2000      	movs	r0, #0
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <RTC_Handler+0x10>)
    13d4:	4798      	blx	r3
}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	00001259 	.word	0x00001259

000013e0 <system_gclk_chan_get_config_defaults>:
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	2200      	movs	r2, #0
    13ec:	701a      	strb	r2, [r3, #0]
}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	46bd      	mov	sp, r7
    13f2:	b002      	add	sp, #8
    13f4:	bd80      	pop	{r7, pc}
	...

000013f8 <system_apb_clock_set_mask>:
{
    13f8:	b580      	push	{r7, lr}
    13fa:	b082      	sub	sp, #8
    13fc:	af00      	add	r7, sp, #0
    13fe:	0002      	movs	r2, r0
    1400:	6039      	str	r1, [r7, #0]
    1402:	1dfb      	adds	r3, r7, #7
    1404:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1406:	1dfb      	adds	r3, r7, #7
    1408:	781b      	ldrb	r3, [r3, #0]
    140a:	2b04      	cmp	r3, #4
    140c:	d827      	bhi.n	145e <system_apb_clock_set_mask+0x66>
    140e:	009a      	lsls	r2, r3, #2
    1410:	4b16      	ldr	r3, [pc, #88]	; (146c <system_apb_clock_set_mask+0x74>)
    1412:	18d3      	adds	r3, r2, r3
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1418:	4b15      	ldr	r3, [pc, #84]	; (1470 <system_apb_clock_set_mask+0x78>)
    141a:	4a15      	ldr	r2, [pc, #84]	; (1470 <system_apb_clock_set_mask+0x78>)
    141c:	6951      	ldr	r1, [r2, #20]
    141e:	683a      	ldr	r2, [r7, #0]
    1420:	430a      	orrs	r2, r1
    1422:	615a      	str	r2, [r3, #20]
			break;
    1424:	e01d      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    1426:	4b12      	ldr	r3, [pc, #72]	; (1470 <system_apb_clock_set_mask+0x78>)
    1428:	4a11      	ldr	r2, [pc, #68]	; (1470 <system_apb_clock_set_mask+0x78>)
    142a:	6991      	ldr	r1, [r2, #24]
    142c:	683a      	ldr	r2, [r7, #0]
    142e:	430a      	orrs	r2, r1
    1430:	619a      	str	r2, [r3, #24]
			break;
    1432:	e016      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <system_apb_clock_set_mask+0x78>)
    1436:	4a0e      	ldr	r2, [pc, #56]	; (1470 <system_apb_clock_set_mask+0x78>)
    1438:	69d1      	ldr	r1, [r2, #28]
    143a:	683a      	ldr	r2, [r7, #0]
    143c:	430a      	orrs	r2, r1
    143e:	61da      	str	r2, [r3, #28]
			break;
    1440:	e00f      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1442:	4b0b      	ldr	r3, [pc, #44]	; (1470 <system_apb_clock_set_mask+0x78>)
    1444:	4a0a      	ldr	r2, [pc, #40]	; (1470 <system_apb_clock_set_mask+0x78>)
    1446:	6a11      	ldr	r1, [r2, #32]
    1448:	683a      	ldr	r2, [r7, #0]
    144a:	430a      	orrs	r2, r1
    144c:	621a      	str	r2, [r3, #32]
			break;
    144e:	e008      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    1450:	4b07      	ldr	r3, [pc, #28]	; (1470 <system_apb_clock_set_mask+0x78>)
    1452:	4a07      	ldr	r2, [pc, #28]	; (1470 <system_apb_clock_set_mask+0x78>)
    1454:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1456:	683a      	ldr	r2, [r7, #0]
    1458:	430a      	orrs	r2, r1
    145a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    145c:	e001      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    145e:	2317      	movs	r3, #23
    1460:	e000      	b.n	1464 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    1462:	2300      	movs	r3, #0
}
    1464:	0018      	movs	r0, r3
    1466:	46bd      	mov	sp, r7
    1468:	b002      	add	sp, #8
    146a:	bd80      	pop	{r7, pc}
    146c:	000072e8 	.word	0x000072e8
    1470:	40000400 	.word	0x40000400

00001474 <system_pinmux_get_config_defaults>:
{
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2280      	movs	r2, #128	; 0x80
    1480:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	2200      	movs	r2, #0
    1486:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	2201      	movs	r2, #1
    148c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	2200      	movs	r2, #0
    1492:	70da      	strb	r2, [r3, #3]
}
    1494:	46c0      	nop			; (mov r8, r8)
    1496:	46bd      	mov	sp, r7
    1498:	b002      	add	sp, #8
    149a:	bd80      	pop	{r7, pc}

0000149c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <system_is_debugger_present+0x1c>)
    14a2:	789b      	ldrb	r3, [r3, #2]
    14a4:	b2db      	uxtb	r3, r3
    14a6:	001a      	movs	r2, r3
    14a8:	2302      	movs	r3, #2
    14aa:	4013      	ands	r3, r2
    14ac:	1e5a      	subs	r2, r3, #1
    14ae:	4193      	sbcs	r3, r2
    14b0:	b2db      	uxtb	r3, r3
}
    14b2:	0018      	movs	r0, r3
    14b4:	46bd      	mov	sp, r7
    14b6:	bd80      	pop	{r7, pc}
    14b8:	41002000 	.word	0x41002000

000014bc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	69db      	ldr	r3, [r3, #28]
    14ce:	2207      	movs	r2, #7
    14d0:	4013      	ands	r3, r2
    14d2:	1e5a      	subs	r2, r3, #1
    14d4:	4193      	sbcs	r3, r2
    14d6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    14d8:	0018      	movs	r0, r3
    14da:	46bd      	mov	sp, r7
    14dc:	b004      	add	sp, #16
    14de:	bd80      	pop	{r7, pc}

000014e0 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b082      	sub	sp, #8
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    14e8:	46c0      	nop			; (mov r8, r8)
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	0018      	movs	r0, r3
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <_i2c_master_wait_for_sync+0x20>)
    14f0:	4798      	blx	r3
    14f2:	1e03      	subs	r3, r0, #0
    14f4:	d1f9      	bne.n	14ea <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	46bd      	mov	sp, r7
    14fa:	b002      	add	sp, #8
    14fc:	bd80      	pop	{r7, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	000014bd 	.word	0x000014bd

00001504 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	b097      	sub	sp, #92	; 0x5c
    1508:	af00      	add	r7, sp, #0
    150a:	6178      	str	r0, [r7, #20]
    150c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    150e:	2300      	movs	r3, #0
    1510:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    1512:	2300      	movs	r3, #0
    1514:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    1516:	2300      	movs	r3, #0
    1518:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    151a:	233b      	movs	r3, #59	; 0x3b
    151c:	2210      	movs	r2, #16
    151e:	4694      	mov	ip, r2
    1520:	44bc      	add	ip, r7
    1522:	4463      	add	r3, ip
    1524:	2200      	movs	r2, #0
    1526:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1528:	697b      	ldr	r3, [r7, #20]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    152e:	697b      	ldr	r3, [r7, #20]
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1534:	2323      	movs	r3, #35	; 0x23
    1536:	2210      	movs	r2, #16
    1538:	18ba      	adds	r2, r7, r2
    153a:	18d4      	adds	r4, r2, r3
    153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    153e:	0018      	movs	r0, r3
    1540:	4bc0      	ldr	r3, [pc, #768]	; (1844 <_i2c_master_set_config+0x340>)
    1542:	4798      	blx	r3
    1544:	0003      	movs	r3, r0
    1546:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1548:	230c      	movs	r3, #12
    154a:	2210      	movs	r2, #16
    154c:	4694      	mov	ip, r2
    154e:	44bc      	add	ip, r7
    1550:	4463      	add	r3, ip
    1552:	0018      	movs	r0, r3
    1554:	4bbc      	ldr	r3, [pc, #752]	; (1848 <_i2c_master_set_config+0x344>)
    1556:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1558:	693b      	ldr	r3, [r7, #16]
    155a:	69db      	ldr	r3, [r3, #28]
    155c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    155e:	693b      	ldr	r3, [r7, #16]
    1560:	6a1b      	ldr	r3, [r3, #32]
    1562:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1566:	2b00      	cmp	r3, #0
    1568:	d106      	bne.n	1578 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    156c:	2100      	movs	r1, #0
    156e:	0018      	movs	r0, r3
    1570:	4bb6      	ldr	r3, [pc, #728]	; (184c <_i2c_master_set_config+0x348>)
    1572:	4798      	blx	r3
    1574:	0003      	movs	r3, r0
    1576:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    157a:	b2da      	uxtb	r2, r3
    157c:	230c      	movs	r3, #12
    157e:	2110      	movs	r1, #16
    1580:	468c      	mov	ip, r1
    1582:	44bc      	add	ip, r7
    1584:	4463      	add	r3, ip
    1586:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1588:	230c      	movs	r3, #12
    158a:	2210      	movs	r2, #16
    158c:	4694      	mov	ip, r2
    158e:	44bc      	add	ip, r7
    1590:	4463      	add	r3, ip
    1592:	2202      	movs	r2, #2
    1594:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1598:	0c1b      	lsrs	r3, r3, #16
    159a:	b2db      	uxtb	r3, r3
    159c:	220c      	movs	r2, #12
    159e:	2110      	movs	r1, #16
    15a0:	468c      	mov	ip, r1
    15a2:	44bc      	add	ip, r7
    15a4:	4462      	add	r2, ip
    15a6:	0011      	movs	r1, r2
    15a8:	0018      	movs	r0, r3
    15aa:	4ba9      	ldr	r3, [pc, #676]	; (1850 <_i2c_master_set_config+0x34c>)
    15ac:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    15ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15b0:	2b00      	cmp	r3, #0
    15b2:	d106      	bne.n	15c2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    15b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15b6:	2101      	movs	r1, #1
    15b8:	0018      	movs	r0, r3
    15ba:	4ba4      	ldr	r3, [pc, #656]	; (184c <_i2c_master_set_config+0x348>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    15c0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    15c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15c4:	b2da      	uxtb	r2, r3
    15c6:	230c      	movs	r3, #12
    15c8:	2110      	movs	r1, #16
    15ca:	468c      	mov	ip, r1
    15cc:	44bc      	add	ip, r7
    15ce:	4463      	add	r3, ip
    15d0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    15d2:	230c      	movs	r3, #12
    15d4:	2210      	movs	r2, #16
    15d6:	4694      	mov	ip, r2
    15d8:	44bc      	add	ip, r7
    15da:	4463      	add	r3, ip
    15dc:	2202      	movs	r2, #2
    15de:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    15e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15e2:	0c1b      	lsrs	r3, r3, #16
    15e4:	b2db      	uxtb	r3, r3
    15e6:	220c      	movs	r2, #12
    15e8:	2110      	movs	r1, #16
    15ea:	468c      	mov	ip, r1
    15ec:	44bc      	add	ip, r7
    15ee:	4462      	add	r2, ip
    15f0:	0011      	movs	r1, r2
    15f2:	0018      	movs	r0, r3
    15f4:	4b96      	ldr	r3, [pc, #600]	; (1850 <_i2c_master_set_config+0x34c>)
    15f6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    15f8:	693b      	ldr	r3, [r7, #16]
    15fa:	8a9a      	ldrh	r2, [r3, #20]
    15fc:	697b      	ldr	r3, [r7, #20]
    15fe:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1600:	693b      	ldr	r3, [r7, #16]
    1602:	8ada      	ldrh	r2, [r3, #22]
    1604:	697b      	ldr	r3, [r7, #20]
    1606:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1608:	693b      	ldr	r3, [r7, #16]
    160a:	7e1b      	ldrb	r3, [r3, #24]
    160c:	2b00      	cmp	r3, #0
    160e:	d103      	bne.n	1618 <_i2c_master_set_config+0x114>
    1610:	4b90      	ldr	r3, [pc, #576]	; (1854 <_i2c_master_set_config+0x350>)
    1612:	4798      	blx	r3
    1614:	1e03      	subs	r3, r0, #0
    1616:	d002      	beq.n	161e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1618:	2380      	movs	r3, #128	; 0x80
    161a:	657b      	str	r3, [r7, #84]	; 0x54
    161c:	e001      	b.n	1622 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    161e:	2300      	movs	r3, #0
    1620:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1622:	693b      	ldr	r3, [r7, #16]
    1624:	691b      	ldr	r3, [r3, #16]
    1626:	2b00      	cmp	r3, #0
    1628:	d004      	beq.n	1634 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    162a:	693b      	ldr	r3, [r7, #16]
    162c:	691b      	ldr	r3, [r3, #16]
    162e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1630:	4313      	orrs	r3, r2
    1632:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1634:	693b      	ldr	r3, [r7, #16]
    1636:	689b      	ldr	r3, [r3, #8]
    1638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    163a:	4313      	orrs	r3, r2
    163c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    163e:	693b      	ldr	r3, [r7, #16]
    1640:	2224      	movs	r2, #36	; 0x24
    1642:	5c9b      	ldrb	r3, [r3, r2]
    1644:	2b00      	cmp	r3, #0
    1646:	d004      	beq.n	1652 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    164a:	2280      	movs	r2, #128	; 0x80
    164c:	05d2      	lsls	r2, r2, #23
    164e:	4313      	orrs	r3, r2
    1650:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1652:	693b      	ldr	r3, [r7, #16]
    1654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1656:	2b00      	cmp	r3, #0
    1658:	d004      	beq.n	1664 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    165a:	693b      	ldr	r3, [r7, #16]
    165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    165e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1660:	4313      	orrs	r3, r2
    1662:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1664:	693b      	ldr	r3, [r7, #16]
    1666:	222c      	movs	r2, #44	; 0x2c
    1668:	5c9b      	ldrb	r3, [r3, r2]
    166a:	2b00      	cmp	r3, #0
    166c:	d105      	bne.n	167a <_i2c_master_set_config+0x176>
    166e:	693b      	ldr	r3, [r7, #16]
    1670:	689a      	ldr	r2, [r3, #8]
    1672:	2380      	movs	r3, #128	; 0x80
    1674:	049b      	lsls	r3, r3, #18
    1676:	429a      	cmp	r2, r3
    1678:	d104      	bne.n	1684 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    167c:	2280      	movs	r2, #128	; 0x80
    167e:	0512      	lsls	r2, r2, #20
    1680:	4313      	orrs	r3, r2
    1682:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1684:	693b      	ldr	r3, [r7, #16]
    1686:	222d      	movs	r2, #45	; 0x2d
    1688:	5c9b      	ldrb	r3, [r3, r2]
    168a:	2b00      	cmp	r3, #0
    168c:	d004      	beq.n	1698 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1690:	2280      	movs	r2, #128	; 0x80
    1692:	0412      	lsls	r2, r2, #16
    1694:	4313      	orrs	r3, r2
    1696:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1698:	693b      	ldr	r3, [r7, #16]
    169a:	222e      	movs	r2, #46	; 0x2e
    169c:	5c9b      	ldrb	r3, [r3, r2]
    169e:	2b00      	cmp	r3, #0
    16a0:	d004      	beq.n	16ac <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    16a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	03d2      	lsls	r2, r2, #15
    16a8:	4313      	orrs	r3, r2
    16aa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    16ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ae:	681a      	ldr	r2, [r3, #0]
    16b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16b2:	431a      	orrs	r2, r3
    16b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16b6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    16b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ba:	2280      	movs	r2, #128	; 0x80
    16bc:	0052      	lsls	r2, r2, #1
    16be:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    16c0:	2323      	movs	r3, #35	; 0x23
    16c2:	2210      	movs	r2, #16
    16c4:	4694      	mov	ip, r2
    16c6:	44bc      	add	ip, r7
    16c8:	4463      	add	r3, ip
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	3312      	adds	r3, #18
    16ce:	b2db      	uxtb	r3, r3
    16d0:	0018      	movs	r0, r3
    16d2:	4b61      	ldr	r3, [pc, #388]	; (1858 <_i2c_master_set_config+0x354>)
    16d4:	4798      	blx	r3
    16d6:	0003      	movs	r3, r0
    16d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    16da:	693b      	ldr	r3, [r7, #16]
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	22fa      	movs	r2, #250	; 0xfa
    16e0:	0092      	lsls	r2, r2, #2
    16e2:	4353      	muls	r3, r2
    16e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    16e6:	693b      	ldr	r3, [r7, #16]
    16e8:	685b      	ldr	r3, [r3, #4]
    16ea:	22fa      	movs	r2, #250	; 0xfa
    16ec:	0092      	lsls	r2, r2, #2
    16ee:	4353      	muls	r3, r2
    16f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    16f2:	693b      	ldr	r3, [r7, #16]
    16f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    16f6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    16f8:	4b58      	ldr	r3, [pc, #352]	; (185c <_i2c_master_set_config+0x358>)
    16fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    16fc:	4798      	blx	r3
    16fe:	0005      	movs	r5, r0
    1700:	000e      	movs	r6, r1
    1702:	4b56      	ldr	r3, [pc, #344]	; (185c <_i2c_master_set_config+0x358>)
    1704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1706:	4798      	blx	r3
    1708:	60b8      	str	r0, [r7, #8]
    170a:	60f9      	str	r1, [r7, #12]
    170c:	4b53      	ldr	r3, [pc, #332]	; (185c <_i2c_master_set_config+0x358>)
    170e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1710:	4798      	blx	r3
    1712:	4c53      	ldr	r4, [pc, #332]	; (1860 <_i2c_master_set_config+0x35c>)
    1714:	4a53      	ldr	r2, [pc, #332]	; (1864 <_i2c_master_set_config+0x360>)
    1716:	4b54      	ldr	r3, [pc, #336]	; (1868 <_i2c_master_set_config+0x364>)
    1718:	47a0      	blx	r4
    171a:	0003      	movs	r3, r0
    171c:	000c      	movs	r4, r1
    171e:	603b      	str	r3, [r7, #0]
    1720:	607c      	str	r4, [r7, #4]
    1722:	4b4e      	ldr	r3, [pc, #312]	; (185c <_i2c_master_set_config+0x358>)
    1724:	6a38      	ldr	r0, [r7, #32]
    1726:	4798      	blx	r3
    1728:	0002      	movs	r2, r0
    172a:	000b      	movs	r3, r1
    172c:	4c4c      	ldr	r4, [pc, #304]	; (1860 <_i2c_master_set_config+0x35c>)
    172e:	6838      	ldr	r0, [r7, #0]
    1730:	6879      	ldr	r1, [r7, #4]
    1732:	47a0      	blx	r4
    1734:	0003      	movs	r3, r0
    1736:	000c      	movs	r4, r1
    1738:	0018      	movs	r0, r3
    173a:	0021      	movs	r1, r4
    173c:	4c4b      	ldr	r4, [pc, #300]	; (186c <_i2c_master_set_config+0x368>)
    173e:	2200      	movs	r2, #0
    1740:	4b4b      	ldr	r3, [pc, #300]	; (1870 <_i2c_master_set_config+0x36c>)
    1742:	47a0      	blx	r4
    1744:	0003      	movs	r3, r0
    1746:	000c      	movs	r4, r1
    1748:	001a      	movs	r2, r3
    174a:	0023      	movs	r3, r4
    174c:	4c44      	ldr	r4, [pc, #272]	; (1860 <_i2c_master_set_config+0x35c>)
    174e:	68b8      	ldr	r0, [r7, #8]
    1750:	68f9      	ldr	r1, [r7, #12]
    1752:	47a0      	blx	r4
    1754:	0003      	movs	r3, r0
    1756:	000c      	movs	r4, r1
    1758:	001a      	movs	r2, r3
    175a:	0023      	movs	r3, r4
    175c:	4c45      	ldr	r4, [pc, #276]	; (1874 <_i2c_master_set_config+0x370>)
    175e:	0028      	movs	r0, r5
    1760:	0031      	movs	r1, r6
    1762:	47a0      	blx	r4
    1764:	0003      	movs	r3, r0
    1766:	000c      	movs	r4, r1
    1768:	001d      	movs	r5, r3
    176a:	0026      	movs	r6, r4
    176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    176e:	005a      	lsls	r2, r3, #1
    1770:	4b3a      	ldr	r3, [pc, #232]	; (185c <_i2c_master_set_config+0x358>)
    1772:	0010      	movs	r0, r2
    1774:	4798      	blx	r3
    1776:	0002      	movs	r2, r0
    1778:	000b      	movs	r3, r1
    177a:	4c3c      	ldr	r4, [pc, #240]	; (186c <_i2c_master_set_config+0x368>)
    177c:	0028      	movs	r0, r5
    177e:	0031      	movs	r1, r6
    1780:	47a0      	blx	r4
    1782:	0003      	movs	r3, r0
    1784:	000c      	movs	r4, r1
    1786:	0018      	movs	r0, r3
    1788:	0021      	movs	r1, r4
    178a:	4c3a      	ldr	r4, [pc, #232]	; (1874 <_i2c_master_set_config+0x370>)
    178c:	2200      	movs	r2, #0
    178e:	4b3a      	ldr	r3, [pc, #232]	; (1878 <_i2c_master_set_config+0x374>)
    1790:	47a0      	blx	r4
    1792:	0003      	movs	r3, r0
    1794:	000c      	movs	r4, r1
    1796:	001d      	movs	r5, r3
    1798:	0026      	movs	r6, r4
    179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    179c:	005a      	lsls	r2, r3, #1
    179e:	4b2f      	ldr	r3, [pc, #188]	; (185c <_i2c_master_set_config+0x358>)
    17a0:	0010      	movs	r0, r2
    17a2:	4798      	blx	r3
    17a4:	0002      	movs	r2, r0
    17a6:	000b      	movs	r3, r1
    17a8:	4c34      	ldr	r4, [pc, #208]	; (187c <_i2c_master_set_config+0x378>)
    17aa:	0028      	movs	r0, r5
    17ac:	0031      	movs	r1, r6
    17ae:	47a0      	blx	r4
    17b0:	0003      	movs	r3, r0
    17b2:	000c      	movs	r4, r1
    17b4:	0019      	movs	r1, r3
    17b6:	0022      	movs	r2, r4
    17b8:	4b31      	ldr	r3, [pc, #196]	; (1880 <_i2c_master_set_config+0x37c>)
    17ba:	0008      	movs	r0, r1
    17bc:	0011      	movs	r1, r2
    17be:	4798      	blx	r3
    17c0:	0003      	movs	r3, r0
    17c2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    17c4:	693b      	ldr	r3, [r7, #16]
    17c6:	689a      	ldr	r2, [r3, #8]
    17c8:	2380      	movs	r3, #128	; 0x80
    17ca:	049b      	lsls	r3, r3, #18
    17cc:	429a      	cmp	r2, r3
    17ce:	d16a      	bne.n	18a6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    17d0:	4b22      	ldr	r3, [pc, #136]	; (185c <_i2c_master_set_config+0x358>)
    17d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    17d4:	4798      	blx	r3
    17d6:	4c25      	ldr	r4, [pc, #148]	; (186c <_i2c_master_set_config+0x368>)
    17d8:	0002      	movs	r2, r0
    17da:	000b      	movs	r3, r1
    17dc:	47a0      	blx	r4
    17de:	0003      	movs	r3, r0
    17e0:	000c      	movs	r4, r1
    17e2:	001d      	movs	r5, r3
    17e4:	0026      	movs	r6, r4
    17e6:	4b1d      	ldr	r3, [pc, #116]	; (185c <_i2c_master_set_config+0x358>)
    17e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    17ea:	4798      	blx	r3
    17ec:	4c1c      	ldr	r4, [pc, #112]	; (1860 <_i2c_master_set_config+0x35c>)
    17ee:	2200      	movs	r2, #0
    17f0:	4b24      	ldr	r3, [pc, #144]	; (1884 <_i2c_master_set_config+0x380>)
    17f2:	47a0      	blx	r4
    17f4:	0003      	movs	r3, r0
    17f6:	000c      	movs	r4, r1
    17f8:	001a      	movs	r2, r3
    17fa:	0023      	movs	r3, r4
    17fc:	4c1f      	ldr	r4, [pc, #124]	; (187c <_i2c_master_set_config+0x378>)
    17fe:	0028      	movs	r0, r5
    1800:	0031      	movs	r1, r6
    1802:	47a0      	blx	r4
    1804:	0003      	movs	r3, r0
    1806:	000c      	movs	r4, r1
    1808:	0018      	movs	r0, r3
    180a:	0021      	movs	r1, r4
    180c:	4c19      	ldr	r4, [pc, #100]	; (1874 <_i2c_master_set_config+0x370>)
    180e:	2200      	movs	r2, #0
    1810:	4b19      	ldr	r3, [pc, #100]	; (1878 <_i2c_master_set_config+0x374>)
    1812:	47a0      	blx	r4
    1814:	0003      	movs	r3, r0
    1816:	000c      	movs	r4, r1
    1818:	0019      	movs	r1, r3
    181a:	0022      	movs	r2, r4
    181c:	4b18      	ldr	r3, [pc, #96]	; (1880 <_i2c_master_set_config+0x37c>)
    181e:	0008      	movs	r0, r1
    1820:	0011      	movs	r1, r2
    1822:	4798      	blx	r3
    1824:	0003      	movs	r3, r0
    1826:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    182a:	2b00      	cmp	r3, #0
    182c:	d02e      	beq.n	188c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    182e:	4b16      	ldr	r3, [pc, #88]	; (1888 <_i2c_master_set_config+0x384>)
    1830:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1834:	4798      	blx	r3
    1836:	0003      	movs	r3, r0
    1838:	1e9a      	subs	r2, r3, #2
    183a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    183c:	1ad3      	subs	r3, r2, r3
    183e:	653b      	str	r3, [r7, #80]	; 0x50
    1840:	e031      	b.n	18a6 <_i2c_master_set_config+0x3a2>
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00003dd1 	.word	0x00003dd1
    1848:	00001475 	.word	0x00001475
    184c:	00003c15 	.word	0x00003c15
    1850:	000049ad 	.word	0x000049ad
    1854:	0000149d 	.word	0x0000149d
    1858:	000047e9 	.word	0x000047e9
    185c:	00006d91 	.word	0x00006d91
    1860:	00006179 	.word	0x00006179
    1864:	e826d695 	.word	0xe826d695
    1868:	3e112e0b 	.word	0x3e112e0b
    186c:	000054f1 	.word	0x000054f1
    1870:	40240000 	.word	0x40240000
    1874:	00006679 	.word	0x00006679
    1878:	3ff00000 	.word	0x3ff00000
    187c:	00005b11 	.word	0x00005b11
    1880:	00006ca5 	.word	0x00006ca5
    1884:	40080000 	.word	0x40080000
    1888:	00004f71 	.word	0x00004f71
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    188e:	005a      	lsls	r2, r3, #1
    1890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1892:	18d3      	adds	r3, r2, r3
    1894:	1e5a      	subs	r2, r3, #1
    1896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1898:	0059      	lsls	r1, r3, #1
    189a:	4b1d      	ldr	r3, [pc, #116]	; (1910 <_i2c_master_set_config+0x40c>)
    189c:	0010      	movs	r0, r2
    189e:	4798      	blx	r3
    18a0:	0003      	movs	r3, r0
    18a2:	3b01      	subs	r3, #1
    18a4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    18a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18a8:	2bff      	cmp	r3, #255	; 0xff
    18aa:	dc08      	bgt.n	18be <_i2c_master_set_config+0x3ba>
    18ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18ae:	2b00      	cmp	r3, #0
    18b0:	db05      	blt.n	18be <_i2c_master_set_config+0x3ba>
    18b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18b4:	2bff      	cmp	r3, #255	; 0xff
    18b6:	dc02      	bgt.n	18be <_i2c_master_set_config+0x3ba>
    18b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18ba:	2b00      	cmp	r3, #0
    18bc:	da06      	bge.n	18cc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18be:	233b      	movs	r3, #59	; 0x3b
    18c0:	2210      	movs	r2, #16
    18c2:	4694      	mov	ip, r2
    18c4:	44bc      	add	ip, r7
    18c6:	4463      	add	r3, ip
    18c8:	2240      	movs	r2, #64	; 0x40
    18ca:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    18cc:	233b      	movs	r3, #59	; 0x3b
    18ce:	2210      	movs	r2, #16
    18d0:	4694      	mov	ip, r2
    18d2:	44bc      	add	ip, r7
    18d4:	4463      	add	r3, ip
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	2b40      	cmp	r3, #64	; 0x40
    18da:	d00e      	beq.n	18fa <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18de:	22ff      	movs	r2, #255	; 0xff
    18e0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    18e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18e4:	041b      	lsls	r3, r3, #16
    18e6:	0019      	movs	r1, r3
    18e8:	23ff      	movs	r3, #255	; 0xff
    18ea:	041b      	lsls	r3, r3, #16
    18ec:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18ee:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    18f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    18f2:	0612      	lsls	r2, r2, #24
    18f4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    18f8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    18fa:	233b      	movs	r3, #59	; 0x3b
    18fc:	2210      	movs	r2, #16
    18fe:	4694      	mov	ip, r2
    1900:	44bc      	add	ip, r7
    1902:	4463      	add	r3, ip
    1904:	781b      	ldrb	r3, [r3, #0]
}
    1906:	0018      	movs	r0, r3
    1908:	46bd      	mov	sp, r7
    190a:	b017      	add	sp, #92	; 0x5c
    190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	00004f71 	.word	0x00004f71

00001914 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1914:	b580      	push	{r7, lr}
    1916:	b08a      	sub	sp, #40	; 0x28
    1918:	af00      	add	r7, sp, #0
    191a:	60f8      	str	r0, [r7, #12]
    191c:	60b9      	str	r1, [r7, #8]
    191e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	68ba      	ldr	r2, [r7, #8]
    1924:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	0018      	movs	r0, r3
    1932:	4b2f      	ldr	r3, [pc, #188]	; (19f0 <i2c_master_init+0xdc>)
    1934:	4798      	blx	r3
    1936:	0003      	movs	r3, r0
    1938:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	2b05      	cmp	r3, #5
    193e:	d104      	bne.n	194a <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1940:	2301      	movs	r3, #1
    1942:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1944:	2318      	movs	r3, #24
    1946:	623b      	str	r3, [r7, #32]
    1948:	e004      	b.n	1954 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    194a:	69bb      	ldr	r3, [r7, #24]
    194c:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    194e:	69bb      	ldr	r3, [r7, #24]
    1950:	3312      	adds	r3, #18
    1952:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    1954:	69bb      	ldr	r3, [r7, #24]
    1956:	2b05      	cmp	r3, #5
    1958:	d108      	bne.n	196c <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    195a:	2201      	movs	r2, #1
    195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    195e:	409a      	lsls	r2, r3
    1960:	0013      	movs	r3, r2
    1962:	0019      	movs	r1, r3
    1964:	2003      	movs	r0, #3
    1966:	4b23      	ldr	r3, [pc, #140]	; (19f4 <i2c_master_init+0xe0>)
    1968:	4798      	blx	r3
    196a:	e007      	b.n	197c <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    196c:	2201      	movs	r2, #1
    196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1970:	409a      	lsls	r2, r3
    1972:	0013      	movs	r3, r2
    1974:	0019      	movs	r1, r3
    1976:	2002      	movs	r0, #2
    1978:	4b1e      	ldr	r3, [pc, #120]	; (19f4 <i2c_master_init+0xe0>)
    197a:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    197c:	2314      	movs	r3, #20
    197e:	18fb      	adds	r3, r7, r3
    1980:	0018      	movs	r0, r3
    1982:	4b1d      	ldr	r3, [pc, #116]	; (19f8 <i2c_master_init+0xe4>)
    1984:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	7b1a      	ldrb	r2, [r3, #12]
    198a:	2314      	movs	r3, #20
    198c:	18fb      	adds	r3, r7, r3
    198e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1990:	6a3b      	ldr	r3, [r7, #32]
    1992:	b2db      	uxtb	r3, r3
    1994:	2214      	movs	r2, #20
    1996:	18ba      	adds	r2, r7, r2
    1998:	0011      	movs	r1, r2
    199a:	0018      	movs	r0, r3
    199c:	4b17      	ldr	r3, [pc, #92]	; (19fc <i2c_master_init+0xe8>)
    199e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    19a0:	6a3b      	ldr	r3, [r7, #32]
    19a2:	b2db      	uxtb	r3, r3
    19a4:	0018      	movs	r0, r3
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <i2c_master_init+0xec>)
    19a8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	7b1b      	ldrb	r3, [r3, #12]
    19ae:	2100      	movs	r1, #0
    19b0:	0018      	movs	r0, r3
    19b2:	4b14      	ldr	r3, [pc, #80]	; (1a04 <i2c_master_init+0xf0>)
    19b4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    19b6:	69fb      	ldr	r3, [r7, #28]
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	2202      	movs	r2, #2
    19bc:	4013      	ands	r3, r2
    19be:	d001      	beq.n	19c4 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    19c0:	231c      	movs	r3, #28
    19c2:	e010      	b.n	19e6 <i2c_master_init+0xd2>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    19c4:	69fb      	ldr	r3, [r7, #28]
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	2201      	movs	r2, #1
    19ca:	4013      	ands	r3, r2
    19cc:	d001      	beq.n	19d2 <i2c_master_init+0xbe>
		return STATUS_BUSY;
    19ce:	2305      	movs	r3, #5
    19d0:	e009      	b.n	19e6 <i2c_master_init+0xd2>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    19d2:	69fb      	ldr	r3, [r7, #28]
    19d4:	2214      	movs	r2, #20
    19d6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    19d8:	687a      	ldr	r2, [r7, #4]
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	0011      	movs	r1, r2
    19de:	0018      	movs	r0, r3
    19e0:	4b09      	ldr	r3, [pc, #36]	; (1a08 <i2c_master_init+0xf4>)
    19e2:	4798      	blx	r3
    19e4:	0003      	movs	r3, r0
}
    19e6:	0018      	movs	r0, r3
    19e8:	46bd      	mov	sp, r7
    19ea:	b00a      	add	sp, #40	; 0x28
    19ec:	bd80      	pop	{r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	00003dd1 	.word	0x00003dd1
    19f4:	000013f9 	.word	0x000013f9
    19f8:	000013e1 	.word	0x000013e1
    19fc:	000046f9 	.word	0x000046f9
    1a00:	00004739 	.word	0x00004739
    1a04:	00003b89 	.word	0x00003b89
    1a08:	00001505 	.word	0x00001505

00001a0c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b084      	sub	sp, #16
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	7e1b      	ldrb	r3, [r3, #24]
    1a1e:	b2db      	uxtb	r3, r3
    1a20:	001a      	movs	r2, r3
    1a22:	2302      	movs	r3, #2
    1a24:	4013      	ands	r3, r2
    1a26:	d00b      	beq.n	1a40 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	2202      	movs	r2, #2
    1a2c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	8b5b      	ldrh	r3, [r3, #26]
    1a32:	b29b      	uxth	r3, r3
    1a34:	001a      	movs	r2, r3
    1a36:	2302      	movs	r3, #2
    1a38:	4013      	ands	r3, r2
    1a3a:	d011      	beq.n	1a60 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1a3c:	2341      	movs	r3, #65	; 0x41
    1a3e:	e010      	b.n	1a62 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	8b5b      	ldrh	r3, [r3, #26]
    1a44:	b29b      	uxth	r3, r3
    1a46:	001a      	movs	r2, r3
    1a48:	2304      	movs	r3, #4
    1a4a:	4013      	ands	r3, r2
    1a4c:	d008      	beq.n	1a60 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a4e:	68fb      	ldr	r3, [r7, #12]
    1a50:	685b      	ldr	r3, [r3, #4]
    1a52:	22c0      	movs	r2, #192	; 0xc0
    1a54:	0292      	lsls	r2, r2, #10
    1a56:	431a      	orrs	r2, r3
    1a58:	68fb      	ldr	r3, [r7, #12]
    1a5a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1a5c:	2318      	movs	r3, #24
    1a5e:	e000      	b.n	1a62 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1a60:	2300      	movs	r3, #0
}
    1a62:	0018      	movs	r0, r3
    1a64:	46bd      	mov	sp, r7
    1a66:	b004      	add	sp, #16
    1a68:	bd80      	pop	{r7, pc}

00001a6a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1a6a:	b580      	push	{r7, lr}
    1a6c:	b084      	sub	sp, #16
    1a6e:	af00      	add	r7, sp, #0
    1a70:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1a78:	230e      	movs	r3, #14
    1a7a:	18fb      	adds	r3, r7, r3
    1a7c:	2200      	movs	r2, #0
    1a7e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1a80:	e00f      	b.n	1aa2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1a82:	230e      	movs	r3, #14
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	220e      	movs	r2, #14
    1a88:	18ba      	adds	r2, r7, r2
    1a8a:	8812      	ldrh	r2, [r2, #0]
    1a8c:	3201      	adds	r2, #1
    1a8e:	801a      	strh	r2, [r3, #0]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	891b      	ldrh	r3, [r3, #8]
    1a94:	220e      	movs	r2, #14
    1a96:	18ba      	adds	r2, r7, r2
    1a98:	8812      	ldrh	r2, [r2, #0]
    1a9a:	429a      	cmp	r2, r3
    1a9c:	d301      	bcc.n	1aa2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1a9e:	2312      	movs	r3, #18
    1aa0:	e00e      	b.n	1ac0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1aa2:	68bb      	ldr	r3, [r7, #8]
    1aa4:	7e1b      	ldrb	r3, [r3, #24]
    1aa6:	b2db      	uxtb	r3, r3
    1aa8:	001a      	movs	r2, r3
    1aaa:	2301      	movs	r3, #1
    1aac:	4013      	ands	r3, r2
    1aae:	d106      	bne.n	1abe <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1ab0:	68bb      	ldr	r3, [r7, #8]
    1ab2:	7e1b      	ldrb	r3, [r3, #24]
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	001a      	movs	r2, r3
    1ab8:	2302      	movs	r3, #2
    1aba:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1abc:	d0e1      	beq.n	1a82 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    1abe:	2300      	movs	r3, #0
}
    1ac0:	0018      	movs	r0, r3
    1ac2:	46bd      	mov	sp, r7
    1ac4:	b004      	add	sp, #16
    1ac6:	bd80      	pop	{r7, pc}

00001ac8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1ac8:	b590      	push	{r4, r7, lr}
    1aca:	b085      	sub	sp, #20
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
    1ad0:	000a      	movs	r2, r1
    1ad2:	1cfb      	adds	r3, r7, #3
    1ad4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1adc:	68fb      	ldr	r3, [r7, #12]
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	2280      	movs	r2, #128	; 0x80
    1ae2:	02d2      	lsls	r2, r2, #11
    1ae4:	431a      	orrs	r2, r3
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1aea:	1cfb      	adds	r3, r7, #3
    1aec:	781a      	ldrb	r2, [r3, #0]
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1af2:	230b      	movs	r3, #11
    1af4:	18fc      	adds	r4, r7, r3
    1af6:	687b      	ldr	r3, [r7, #4]
    1af8:	0018      	movs	r0, r3
    1afa:	4b07      	ldr	r3, [pc, #28]	; (1b18 <_i2c_master_send_hs_master_code+0x50>)
    1afc:	4798      	blx	r3
    1afe:	0003      	movs	r3, r0
    1b00:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	2201      	movs	r2, #1
    1b06:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1b08:	230b      	movs	r3, #11
    1b0a:	18fb      	adds	r3, r7, r3
    1b0c:	781b      	ldrb	r3, [r3, #0]
}
    1b0e:	0018      	movs	r0, r3
    1b10:	46bd      	mov	sp, r7
    1b12:	b005      	add	sp, #20
    1b14:	bd90      	pop	{r4, r7, pc}
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	00001a6b 	.word	0x00001a6b

00001b1c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b1c:	b590      	push	{r4, r7, lr}
    1b1e:	b087      	sub	sp, #28
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
    1b24:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1b2c:	2314      	movs	r3, #20
    1b2e:	18fb      	adds	r3, r7, r3
    1b30:	683a      	ldr	r2, [r7, #0]
    1b32:	8852      	ldrh	r2, [r2, #2]
    1b34:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1b36:	2312      	movs	r3, #18
    1b38:	18fb      	adds	r3, r7, r3
    1b3a:	2200      	movs	r2, #0
    1b3c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b3e:	68fb      	ldr	r3, [r7, #12]
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	011b      	lsls	r3, r3, #4
    1b44:	0fdb      	lsrs	r3, r3, #31
    1b46:	b2db      	uxtb	r3, r3
    1b48:	001a      	movs	r2, r3
    1b4a:	230b      	movs	r3, #11
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	1e51      	subs	r1, r2, #1
    1b50:	418a      	sbcs	r2, r1
    1b52:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1b54:	683b      	ldr	r3, [r7, #0]
    1b56:	7a5b      	ldrb	r3, [r3, #9]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d006      	beq.n	1b6a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1b5c:	683b      	ldr	r3, [r7, #0]
    1b5e:	7a9a      	ldrb	r2, [r3, #10]
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	0011      	movs	r1, r2
    1b64:	0018      	movs	r0, r3
    1b66:	4b85      	ldr	r3, [pc, #532]	; (1d7c <_i2c_master_read_packet+0x260>)
    1b68:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	685b      	ldr	r3, [r3, #4]
    1b6e:	4a84      	ldr	r2, [pc, #528]	; (1d80 <_i2c_master_read_packet+0x264>)
    1b70:	401a      	ands	r2, r3
    1b72:	68fb      	ldr	r3, [r7, #12]
    1b74:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1b76:	683b      	ldr	r3, [r7, #0]
    1b78:	7a1b      	ldrb	r3, [r3, #8]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d042      	beq.n	1c04 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b7e:	683b      	ldr	r3, [r7, #0]
    1b80:	881b      	ldrh	r3, [r3, #0]
    1b82:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b84:	683b      	ldr	r3, [r7, #0]
    1b86:	7a5b      	ldrb	r3, [r3, #9]
    1b88:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b8a:	4313      	orrs	r3, r2
    1b8c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b8e:	2380      	movs	r3, #128	; 0x80
    1b90:	021b      	lsls	r3, r3, #8
    1b92:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1b98:	2317      	movs	r3, #23
    1b9a:	18fc      	adds	r4, r7, r3
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	0018      	movs	r0, r3
    1ba0:	4b78      	ldr	r3, [pc, #480]	; (1d84 <_i2c_master_read_packet+0x268>)
    1ba2:	4798      	blx	r3
    1ba4:	0003      	movs	r3, r0
    1ba6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ba8:	68fb      	ldr	r3, [r7, #12]
    1baa:	685b      	ldr	r3, [r3, #4]
    1bac:	4a74      	ldr	r2, [pc, #464]	; (1d80 <_i2c_master_read_packet+0x264>)
    1bae:	401a      	ands	r2, r3
    1bb0:	68fb      	ldr	r3, [r7, #12]
    1bb2:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1bb4:	2317      	movs	r3, #23
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d107      	bne.n	1bce <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    1bbe:	2317      	movs	r3, #23
    1bc0:	18fc      	adds	r4, r7, r3
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	0018      	movs	r0, r3
    1bc6:	4b70      	ldr	r3, [pc, #448]	; (1d88 <_i2c_master_read_packet+0x26c>)
    1bc8:	4798      	blx	r3
    1bca:	0003      	movs	r3, r0
    1bcc:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1bce:	2317      	movs	r3, #23
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d111      	bne.n	1bfc <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bd8:	683b      	ldr	r3, [r7, #0]
    1bda:	881b      	ldrh	r3, [r3, #0]
    1bdc:	0a1b      	lsrs	r3, r3, #8
    1bde:	b29b      	uxth	r3, r3
    1be0:	2278      	movs	r2, #120	; 0x78
    1be2:	4313      	orrs	r3, r2
    1be4:	b29b      	uxth	r3, r3
    1be6:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	7a5b      	ldrb	r3, [r3, #9]
    1bec:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bee:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1bf0:	2201      	movs	r2, #1
    1bf2:	4313      	orrs	r3, r2
    1bf4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	625a      	str	r2, [r3, #36]	; 0x24
    1bfa:	e00f      	b.n	1c1c <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1bfc:	2317      	movs	r3, #23
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	e0b6      	b.n	1d72 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1c04:	683b      	ldr	r3, [r7, #0]
    1c06:	881b      	ldrh	r3, [r3, #0]
    1c08:	005b      	lsls	r3, r3, #1
    1c0a:	2201      	movs	r2, #1
    1c0c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1c0e:	683b      	ldr	r3, [r7, #0]
    1c10:	7a5b      	ldrb	r3, [r3, #9]
    1c12:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1c14:	4313      	orrs	r3, r2
    1c16:	001a      	movs	r2, r3
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1c1c:	2317      	movs	r3, #23
    1c1e:	18fc      	adds	r4, r7, r3
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	0018      	movs	r0, r3
    1c24:	4b57      	ldr	r3, [pc, #348]	; (1d84 <_i2c_master_read_packet+0x268>)
    1c26:	4798      	blx	r3
    1c28:	0003      	movs	r3, r0
    1c2a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1c2c:	230b      	movs	r3, #11
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d00b      	beq.n	1c4e <_i2c_master_read_packet+0x132>
    1c36:	683b      	ldr	r3, [r7, #0]
    1c38:	885b      	ldrh	r3, [r3, #2]
    1c3a:	2b01      	cmp	r3, #1
    1c3c:	d107      	bne.n	1c4e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	685b      	ldr	r3, [r3, #4]
    1c42:	2280      	movs	r2, #128	; 0x80
    1c44:	02d2      	lsls	r2, r2, #11
    1c46:	431a      	orrs	r2, r3
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	605a      	str	r2, [r3, #4]
    1c4c:	e005      	b.n	1c5a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	4a4b      	ldr	r2, [pc, #300]	; (1d80 <_i2c_master_read_packet+0x264>)
    1c54:	401a      	ands	r2, r3
    1c56:	68fb      	ldr	r3, [r7, #12]
    1c58:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1c5a:	2317      	movs	r3, #23
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d107      	bne.n	1c74 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1c64:	2317      	movs	r3, #23
    1c66:	18fc      	adds	r4, r7, r3
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	0018      	movs	r0, r3
    1c6c:	4b46      	ldr	r3, [pc, #280]	; (1d88 <_i2c_master_read_packet+0x26c>)
    1c6e:	4798      	blx	r3
    1c70:	0003      	movs	r3, r0
    1c72:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1c74:	2317      	movs	r3, #23
    1c76:	18fb      	adds	r3, r7, r3
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d000      	beq.n	1c80 <_i2c_master_read_packet+0x164>
    1c7e:	e075      	b.n	1d6c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1c80:	e04b      	b.n	1d1a <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	8b5b      	ldrh	r3, [r3, #26]
    1c86:	b29b      	uxth	r3, r3
    1c88:	001a      	movs	r2, r3
    1c8a:	2320      	movs	r3, #32
    1c8c:	4013      	ands	r3, r2
    1c8e:	d101      	bne.n	1c94 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1c90:	2341      	movs	r3, #65	; 0x41
    1c92:	e06e      	b.n	1d72 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	7adb      	ldrb	r3, [r3, #11]
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d01e      	beq.n	1cda <_i2c_master_read_packet+0x1be>
    1c9c:	230b      	movs	r3, #11
    1c9e:	18fb      	adds	r3, r7, r3
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	2201      	movs	r2, #1
    1ca4:	4053      	eors	r3, r2
    1ca6:	b2db      	uxtb	r3, r3
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d004      	beq.n	1cb6 <_i2c_master_read_packet+0x19a>
    1cac:	2314      	movs	r3, #20
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	881b      	ldrh	r3, [r3, #0]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d009      	beq.n	1cca <_i2c_master_read_packet+0x1ae>
    1cb6:	230b      	movs	r3, #11
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d00c      	beq.n	1cda <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1cc0:	2314      	movs	r3, #20
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	881b      	ldrh	r3, [r3, #0]
    1cc6:	2b01      	cmp	r3, #1
    1cc8:	d107      	bne.n	1cda <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	685b      	ldr	r3, [r3, #4]
    1cce:	2280      	movs	r2, #128	; 0x80
    1cd0:	02d2      	lsls	r2, r2, #11
    1cd2:	431a      	orrs	r2, r3
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	605a      	str	r2, [r3, #4]
    1cd8:	e01a      	b.n	1d10 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	0018      	movs	r0, r3
    1cde:	4b2b      	ldr	r3, [pc, #172]	; (1d8c <_i2c_master_read_packet+0x270>)
    1ce0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1ce2:	683b      	ldr	r3, [r7, #0]
    1ce4:	685a      	ldr	r2, [r3, #4]
    1ce6:	2312      	movs	r3, #18
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	881b      	ldrh	r3, [r3, #0]
    1cec:	2112      	movs	r1, #18
    1cee:	1879      	adds	r1, r7, r1
    1cf0:	1c58      	adds	r0, r3, #1
    1cf2:	8008      	strh	r0, [r1, #0]
    1cf4:	18d3      	adds	r3, r2, r3
    1cf6:	68fa      	ldr	r2, [r7, #12]
    1cf8:	2128      	movs	r1, #40	; 0x28
    1cfa:	5c52      	ldrb	r2, [r2, r1]
    1cfc:	b2d2      	uxtb	r2, r2
    1cfe:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1d00:	2317      	movs	r3, #23
    1d02:	18fc      	adds	r4, r7, r3
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	0018      	movs	r0, r3
    1d08:	4b1e      	ldr	r3, [pc, #120]	; (1d84 <_i2c_master_read_packet+0x268>)
    1d0a:	4798      	blx	r3
    1d0c:	0003      	movs	r3, r0
    1d0e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1d10:	2317      	movs	r3, #23
    1d12:	18fb      	adds	r3, r7, r3
    1d14:	781b      	ldrb	r3, [r3, #0]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d109      	bne.n	1d2e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    1d1a:	2314      	movs	r3, #20
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	881b      	ldrh	r3, [r3, #0]
    1d20:	2214      	movs	r2, #20
    1d22:	18ba      	adds	r2, r7, r2
    1d24:	1e59      	subs	r1, r3, #1
    1d26:	8011      	strh	r1, [r2, #0]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d1aa      	bne.n	1c82 <_i2c_master_read_packet+0x166>
    1d2c:	e000      	b.n	1d30 <_i2c_master_read_packet+0x214>
				break;
    1d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	7a9b      	ldrb	r3, [r3, #10]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d00a      	beq.n	1d4e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	0018      	movs	r0, r3
    1d3c:	4b13      	ldr	r3, [pc, #76]	; (1d8c <_i2c_master_read_packet+0x270>)
    1d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1d40:	68fb      	ldr	r3, [r7, #12]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	22c0      	movs	r2, #192	; 0xc0
    1d46:	0292      	lsls	r2, r2, #10
    1d48:	431a      	orrs	r2, r3
    1d4a:	68fb      	ldr	r3, [r7, #12]
    1d4c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	0018      	movs	r0, r3
    1d52:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <_i2c_master_read_packet+0x270>)
    1d54:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1d56:	683b      	ldr	r3, [r7, #0]
    1d58:	685a      	ldr	r2, [r3, #4]
    1d5a:	2312      	movs	r3, #18
    1d5c:	18fb      	adds	r3, r7, r3
    1d5e:	881b      	ldrh	r3, [r3, #0]
    1d60:	18d3      	adds	r3, r2, r3
    1d62:	68fa      	ldr	r2, [r7, #12]
    1d64:	2128      	movs	r1, #40	; 0x28
    1d66:	5c52      	ldrb	r2, [r2, r1]
    1d68:	b2d2      	uxtb	r2, r2
    1d6a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1d6c:	2317      	movs	r3, #23
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	781b      	ldrb	r3, [r3, #0]
}
    1d72:	0018      	movs	r0, r3
    1d74:	46bd      	mov	sp, r7
    1d76:	b007      	add	sp, #28
    1d78:	bd90      	pop	{r4, r7, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	00001ac9 	.word	0x00001ac9
    1d80:	fffbffff 	.word	0xfffbffff
    1d84:	00001a6b 	.word	0x00001a6b
    1d88:	00001a0d 	.word	0x00001a0d
    1d8c:	000014e1 	.word	0x000014e1

00001d90 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	2201      	movs	r2, #1
    1d9e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	2201      	movs	r2, #1
    1da4:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1da6:	683a      	ldr	r2, [r7, #0]
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	0011      	movs	r1, r2
    1dac:	0018      	movs	r0, r3
    1dae:	4b03      	ldr	r3, [pc, #12]	; (1dbc <i2c_master_read_packet_wait+0x2c>)
    1db0:	4798      	blx	r3
    1db2:	0003      	movs	r3, r0
}
    1db4:	0018      	movs	r0, r3
    1db6:	46bd      	mov	sp, r7
    1db8:	b002      	add	sp, #8
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	00001b1d 	.word	0x00001b1d

00001dc0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1dc0:	b590      	push	{r4, r7, lr}
    1dc2:	b087      	sub	sp, #28
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
    1dc8:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1dd0:	2314      	movs	r3, #20
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	683a      	ldr	r2, [r7, #0]
    1dd6:	8852      	ldrh	r2, [r2, #2]
    1dd8:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	0018      	movs	r0, r3
    1dde:	4b51      	ldr	r3, [pc, #324]	; (1f24 <_i2c_master_write_packet+0x164>)
    1de0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1de2:	683b      	ldr	r3, [r7, #0]
    1de4:	7a5b      	ldrb	r3, [r3, #9]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d006      	beq.n	1df8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1dea:	683b      	ldr	r3, [r7, #0]
    1dec:	7a9a      	ldrb	r2, [r3, #10]
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	0011      	movs	r1, r2
    1df2:	0018      	movs	r0, r3
    1df4:	4b4c      	ldr	r3, [pc, #304]	; (1f28 <_i2c_master_write_packet+0x168>)
    1df6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1df8:	68fb      	ldr	r3, [r7, #12]
    1dfa:	685b      	ldr	r3, [r3, #4]
    1dfc:	4a4b      	ldr	r2, [pc, #300]	; (1f2c <_i2c_master_write_packet+0x16c>)
    1dfe:	401a      	ands	r2, r3
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	7a1b      	ldrb	r3, [r3, #8]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d00d      	beq.n	1e28 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e0c:	683b      	ldr	r3, [r7, #0]
    1e0e:	881b      	ldrh	r3, [r3, #0]
    1e10:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e12:	683b      	ldr	r3, [r7, #0]
    1e14:	7a5b      	ldrb	r3, [r3, #9]
    1e16:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e18:	4313      	orrs	r3, r2
    1e1a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e1c:	2380      	movs	r3, #128	; 0x80
    1e1e:	021b      	lsls	r3, r3, #8
    1e20:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	625a      	str	r2, [r3, #36]	; 0x24
    1e26:	e009      	b.n	1e3c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e28:	683b      	ldr	r3, [r7, #0]
    1e2a:	881b      	ldrh	r3, [r3, #0]
    1e2c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1e2e:	683b      	ldr	r3, [r7, #0]
    1e30:	7a5b      	ldrb	r3, [r3, #9]
    1e32:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e34:	4313      	orrs	r3, r2
    1e36:	001a      	movs	r2, r3
    1e38:	68fb      	ldr	r3, [r7, #12]
    1e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1e3c:	2317      	movs	r3, #23
    1e3e:	18fc      	adds	r4, r7, r3
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	0018      	movs	r0, r3
    1e44:	4b3a      	ldr	r3, [pc, #232]	; (1f30 <_i2c_master_write_packet+0x170>)
    1e46:	4798      	blx	r3
    1e48:	0003      	movs	r3, r0
    1e4a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1e4c:	2317      	movs	r3, #23
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d107      	bne.n	1e66 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1e56:	2317      	movs	r3, #23
    1e58:	18fc      	adds	r4, r7, r3
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b35      	ldr	r3, [pc, #212]	; (1f34 <_i2c_master_write_packet+0x174>)
    1e60:	4798      	blx	r3
    1e62:	0003      	movs	r3, r0
    1e64:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1e66:	2317      	movs	r3, #23
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	781b      	ldrb	r3, [r3, #0]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d152      	bne.n	1f16 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1e70:	2312      	movs	r3, #18
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	2200      	movs	r2, #0
    1e76:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1e78:	e033      	b.n	1ee2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1e7a:	68fb      	ldr	r3, [r7, #12]
    1e7c:	8b5b      	ldrh	r3, [r3, #26]
    1e7e:	b29b      	uxth	r3, r3
    1e80:	001a      	movs	r2, r3
    1e82:	2320      	movs	r3, #32
    1e84:	4013      	ands	r3, r2
    1e86:	d101      	bne.n	1e8c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1e88:	2341      	movs	r3, #65	; 0x41
    1e8a:	e047      	b.n	1f1c <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	0018      	movs	r0, r3
    1e90:	4b24      	ldr	r3, [pc, #144]	; (1f24 <_i2c_master_write_packet+0x164>)
    1e92:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1e94:	683b      	ldr	r3, [r7, #0]
    1e96:	685a      	ldr	r2, [r3, #4]
    1e98:	2312      	movs	r3, #18
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	881b      	ldrh	r3, [r3, #0]
    1e9e:	2112      	movs	r1, #18
    1ea0:	1879      	adds	r1, r7, r1
    1ea2:	1c58      	adds	r0, r3, #1
    1ea4:	8008      	strh	r0, [r1, #0]
    1ea6:	18d3      	adds	r3, r2, r3
    1ea8:	7819      	ldrb	r1, [r3, #0]
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	2228      	movs	r2, #40	; 0x28
    1eae:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1eb0:	2317      	movs	r3, #23
    1eb2:	18fc      	adds	r4, r7, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b1d      	ldr	r3, [pc, #116]	; (1f30 <_i2c_master_write_packet+0x170>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1ec0:	2317      	movs	r3, #23
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	781b      	ldrb	r3, [r3, #0]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d115      	bne.n	1ef6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	8b5b      	ldrh	r3, [r3, #26]
    1ece:	b29b      	uxth	r3, r3
    1ed0:	001a      	movs	r2, r3
    1ed2:	2304      	movs	r3, #4
    1ed4:	4013      	ands	r3, r2
    1ed6:	d004      	beq.n	1ee2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1ed8:	2317      	movs	r3, #23
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	221e      	movs	r2, #30
    1ede:	701a      	strb	r2, [r3, #0]
				break;
    1ee0:	e00a      	b.n	1ef8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    1ee2:	2314      	movs	r3, #20
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	881b      	ldrh	r3, [r3, #0]
    1ee8:	2214      	movs	r2, #20
    1eea:	18ba      	adds	r2, r7, r2
    1eec:	1e59      	subs	r1, r3, #1
    1eee:	8011      	strh	r1, [r2, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d1c2      	bne.n	1e7a <_i2c_master_write_packet+0xba>
    1ef4:	e000      	b.n	1ef8 <_i2c_master_write_packet+0x138>
				break;
    1ef6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	7a9b      	ldrb	r3, [r3, #10]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d00a      	beq.n	1f16 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	0018      	movs	r0, r3
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <_i2c_master_write_packet+0x164>)
    1f06:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	685b      	ldr	r3, [r3, #4]
    1f0c:	22c0      	movs	r2, #192	; 0xc0
    1f0e:	0292      	lsls	r2, r2, #10
    1f10:	431a      	orrs	r2, r3
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1f16:	2317      	movs	r3, #23
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	781b      	ldrb	r3, [r3, #0]
}
    1f1c:	0018      	movs	r0, r3
    1f1e:	46bd      	mov	sp, r7
    1f20:	b007      	add	sp, #28
    1f22:	bd90      	pop	{r4, r7, pc}
    1f24:	000014e1 	.word	0x000014e1
    1f28:	00001ac9 	.word	0x00001ac9
    1f2c:	fffbffff 	.word	0xfffbffff
    1f30:	00001a6b 	.word	0x00001a6b
    1f34:	00001a0d 	.word	0x00001a0d

00001f38 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b082      	sub	sp, #8
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	6078      	str	r0, [r7, #4]
    1f40:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	2201      	movs	r2, #1
    1f46:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	2201      	movs	r2, #1
    1f4c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1f4e:	683a      	ldr	r2, [r7, #0]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	0011      	movs	r1, r2
    1f54:	0018      	movs	r0, r3
    1f56:	4b03      	ldr	r3, [pc, #12]	; (1f64 <i2c_master_write_packet_wait+0x2c>)
    1f58:	4798      	blx	r3
    1f5a:	0003      	movs	r3, r0
}
    1f5c:	0018      	movs	r0, r3
    1f5e:	46bd      	mov	sp, r7
    1f60:	b002      	add	sp, #8
    1f62:	bd80      	pop	{r7, pc}
    1f64:	00001dc1 	.word	0x00001dc1

00001f68 <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1f68:	b580      	push	{r7, lr}
    1f6a:	af00      	add	r7, sp, #0
    1f6c:	2000      	movs	r0, #0
    1f6e:	4b02      	ldr	r3, [pc, #8]	; (1f78 <TC0_Handler+0x10>)
    1f70:	4798      	blx	r3
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	46bd      	mov	sp, r7
    1f76:	bd80      	pop	{r7, pc}
    1f78:	00001fcd 	.word	0x00001fcd

00001f7c <TC1_Handler>:
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0
    1f80:	2001      	movs	r0, #1
    1f82:	4b02      	ldr	r3, [pc, #8]	; (1f8c <TC1_Handler+0x10>)
    1f84:	4798      	blx	r3
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	46bd      	mov	sp, r7
    1f8a:	bd80      	pop	{r7, pc}
    1f8c:	00001fcd 	.word	0x00001fcd

00001f90 <TC2_Handler>:
    1f90:	b580      	push	{r7, lr}
    1f92:	af00      	add	r7, sp, #0
    1f94:	2002      	movs	r0, #2
    1f96:	4b02      	ldr	r3, [pc, #8]	; (1fa0 <TC2_Handler+0x10>)
    1f98:	4798      	blx	r3
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	46bd      	mov	sp, r7
    1f9e:	bd80      	pop	{r7, pc}
    1fa0:	00001fcd 	.word	0x00001fcd

00001fa4 <TC3_Handler>:
    1fa4:	b580      	push	{r7, lr}
    1fa6:	af00      	add	r7, sp, #0
    1fa8:	2003      	movs	r0, #3
    1faa:	4b02      	ldr	r3, [pc, #8]	; (1fb4 <TC3_Handler+0x10>)
    1fac:	4798      	blx	r3
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	46bd      	mov	sp, r7
    1fb2:	bd80      	pop	{r7, pc}
    1fb4:	00001fcd 	.word	0x00001fcd

00001fb8 <TC4_Handler>:
    1fb8:	b580      	push	{r7, lr}
    1fba:	af00      	add	r7, sp, #0
    1fbc:	2004      	movs	r0, #4
    1fbe:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <TC4_Handler+0x10>)
    1fc0:	4798      	blx	r3
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	46bd      	mov	sp, r7
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	00001fcd 	.word	0x00001fcd

00001fcc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	0002      	movs	r2, r0
    1fd4:	1dfb      	adds	r3, r7, #7
    1fd6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    1fdc:	4b28      	ldr	r3, [pc, #160]	; (2080 <STACK_SIZE+0x80>)
    1fde:	0092      	lsls	r2, r2, #2
    1fe0:	58d3      	ldr	r3, [r2, r3]
    1fe2:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1fe4:	68fb      	ldr	r3, [r7, #12]
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	7a9b      	ldrb	r3, [r3, #10]
    1fea:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1fec:	68fa      	ldr	r2, [r7, #12]
    1fee:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ff0:	4013      	ands	r3, r2
    1ff2:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ff8:	230b      	movs	r3, #11
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	400a      	ands	r2, r1
    1ffe:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2000:	230b      	movs	r3, #11
    2002:	18fb      	adds	r3, r7, r3
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	2201      	movs	r2, #1
    2008:	4013      	ands	r3, r2
    200a:	d008      	beq.n	201e <STACK_SIZE+0x1e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	689b      	ldr	r3, [r3, #8]
    2010:	68fa      	ldr	r2, [r7, #12]
    2012:	0010      	movs	r0, r2
    2014:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	2201      	movs	r2, #1
    201c:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    201e:	230b      	movs	r3, #11
    2020:	18fb      	adds	r3, r7, r3
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2202      	movs	r2, #2
    2026:	4013      	ands	r3, r2
    2028:	d008      	beq.n	203c <STACK_SIZE+0x3c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	68db      	ldr	r3, [r3, #12]
    202e:	68fa      	ldr	r2, [r7, #12]
    2030:	0010      	movs	r0, r2
    2032:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	2202      	movs	r2, #2
    203a:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    203c:	230b      	movs	r3, #11
    203e:	18fb      	adds	r3, r7, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2210      	movs	r2, #16
    2044:	4013      	ands	r3, r2
    2046:	d008      	beq.n	205a <STACK_SIZE+0x5a>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2048:	68fb      	ldr	r3, [r7, #12]
    204a:	691b      	ldr	r3, [r3, #16]
    204c:	68fa      	ldr	r2, [r7, #12]
    204e:	0010      	movs	r0, r2
    2050:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2052:	68fb      	ldr	r3, [r7, #12]
    2054:	681b      	ldr	r3, [r3, #0]
    2056:	2210      	movs	r2, #16
    2058:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    205a:	230b      	movs	r3, #11
    205c:	18fb      	adds	r3, r7, r3
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	2220      	movs	r2, #32
    2062:	4013      	ands	r3, r2
    2064:	d008      	beq.n	2078 <STACK_SIZE+0x78>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	695b      	ldr	r3, [r3, #20]
    206a:	68fa      	ldr	r2, [r7, #12]
    206c:	0010      	movs	r0, r2
    206e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2070:	68fb      	ldr	r3, [r7, #12]
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	2220      	movs	r2, #32
    2076:	729a      	strb	r2, [r3, #10]
	}
}
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	46bd      	mov	sp, r7
    207c:	b004      	add	sp, #16
    207e:	bd80      	pop	{r7, pc}
    2080:	2000018c 	.word	0x2000018c

00002084 <system_gclk_chan_get_config_defaults>:
{
    2084:	b580      	push	{r7, lr}
    2086:	b082      	sub	sp, #8
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	2200      	movs	r2, #0
    2090:	701a      	strb	r2, [r3, #0]
}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	46bd      	mov	sp, r7
    2096:	b002      	add	sp, #8
    2098:	bd80      	pop	{r7, pc}
	...

0000209c <system_apb_clock_set_mask>:
{
    209c:	b580      	push	{r7, lr}
    209e:	b082      	sub	sp, #8
    20a0:	af00      	add	r7, sp, #0
    20a2:	0002      	movs	r2, r0
    20a4:	6039      	str	r1, [r7, #0]
    20a6:	1dfb      	adds	r3, r7, #7
    20a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    20aa:	1dfb      	adds	r3, r7, #7
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	2b04      	cmp	r3, #4
    20b0:	d827      	bhi.n	2102 <system_apb_clock_set_mask+0x66>
    20b2:	009a      	lsls	r2, r3, #2
    20b4:	4b16      	ldr	r3, [pc, #88]	; (2110 <system_apb_clock_set_mask+0x74>)
    20b6:	18d3      	adds	r3, r2, r3
    20b8:	681b      	ldr	r3, [r3, #0]
    20ba:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    20bc:	4b15      	ldr	r3, [pc, #84]	; (2114 <system_apb_clock_set_mask+0x78>)
    20be:	4a15      	ldr	r2, [pc, #84]	; (2114 <system_apb_clock_set_mask+0x78>)
    20c0:	6951      	ldr	r1, [r2, #20]
    20c2:	683a      	ldr	r2, [r7, #0]
    20c4:	430a      	orrs	r2, r1
    20c6:	615a      	str	r2, [r3, #20]
			break;
    20c8:	e01d      	b.n	2106 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    20ca:	4b12      	ldr	r3, [pc, #72]	; (2114 <system_apb_clock_set_mask+0x78>)
    20cc:	4a11      	ldr	r2, [pc, #68]	; (2114 <system_apb_clock_set_mask+0x78>)
    20ce:	6991      	ldr	r1, [r2, #24]
    20d0:	683a      	ldr	r2, [r7, #0]
    20d2:	430a      	orrs	r2, r1
    20d4:	619a      	str	r2, [r3, #24]
			break;
    20d6:	e016      	b.n	2106 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    20d8:	4b0e      	ldr	r3, [pc, #56]	; (2114 <system_apb_clock_set_mask+0x78>)
    20da:	4a0e      	ldr	r2, [pc, #56]	; (2114 <system_apb_clock_set_mask+0x78>)
    20dc:	69d1      	ldr	r1, [r2, #28]
    20de:	683a      	ldr	r2, [r7, #0]
    20e0:	430a      	orrs	r2, r1
    20e2:	61da      	str	r2, [r3, #28]
			break;
    20e4:	e00f      	b.n	2106 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    20e6:	4b0b      	ldr	r3, [pc, #44]	; (2114 <system_apb_clock_set_mask+0x78>)
    20e8:	4a0a      	ldr	r2, [pc, #40]	; (2114 <system_apb_clock_set_mask+0x78>)
    20ea:	6a11      	ldr	r1, [r2, #32]
    20ec:	683a      	ldr	r2, [r7, #0]
    20ee:	430a      	orrs	r2, r1
    20f0:	621a      	str	r2, [r3, #32]
			break;
    20f2:	e008      	b.n	2106 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    20f4:	4b07      	ldr	r3, [pc, #28]	; (2114 <system_apb_clock_set_mask+0x78>)
    20f6:	4a07      	ldr	r2, [pc, #28]	; (2114 <system_apb_clock_set_mask+0x78>)
    20f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    20fa:	683a      	ldr	r2, [r7, #0]
    20fc:	430a      	orrs	r2, r1
    20fe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    2100:	e001      	b.n	2106 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    2102:	2317      	movs	r3, #23
    2104:	e000      	b.n	2108 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    2106:	2300      	movs	r3, #0
}
    2108:	0018      	movs	r0, r3
    210a:	46bd      	mov	sp, r7
    210c:	b002      	add	sp, #8
    210e:	bd80      	pop	{r7, pc}
    2110:	000072fc 	.word	0x000072fc
    2114:	40000400 	.word	0x40000400

00002118 <system_pinmux_get_config_defaults>:
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	2280      	movs	r2, #128	; 0x80
    2124:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	2200      	movs	r2, #0
    212a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	2201      	movs	r2, #1
    2130:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	2200      	movs	r2, #0
    2136:	70da      	strb	r2, [r3, #3]
}
    2138:	46c0      	nop			; (mov r8, r8)
    213a:	46bd      	mov	sp, r7
    213c:	b002      	add	sp, #8
    213e:	bd80      	pop	{r7, pc}

00002140 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    2140:	b580      	push	{r7, lr}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	691b      	ldr	r3, [r3, #16]
    2152:	1e5a      	subs	r2, r3, #1
    2154:	4193      	sbcs	r3, r2
    2156:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
    2158:	0018      	movs	r0, r3
    215a:	46bd      	mov	sp, r7
    215c:	b004      	add	sp, #16
    215e:	bd80      	pop	{r7, pc}

00002160 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2160:	b590      	push	{r4, r7, lr}
    2162:	b089      	sub	sp, #36	; 0x24
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2168:	2308      	movs	r3, #8
    216a:	18fb      	adds	r3, r7, r3
    216c:	4a0e      	ldr	r2, [pc, #56]	; (21a8 <_tc_get_inst_index+0x48>)
    216e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2170:	c313      	stmia	r3!, {r0, r1, r4}
    2172:	ca03      	ldmia	r2!, {r0, r1}
    2174:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2176:	2300      	movs	r3, #0
    2178:	61fb      	str	r3, [r7, #28]
    217a:	e00d      	b.n	2198 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    217c:	2308      	movs	r3, #8
    217e:	18fb      	adds	r3, r7, r3
    2180:	69fa      	ldr	r2, [r7, #28]
    2182:	0092      	lsls	r2, r2, #2
    2184:	58d2      	ldr	r2, [r2, r3]
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	429a      	cmp	r2, r3
    218a:	d102      	bne.n	2192 <_tc_get_inst_index+0x32>
			return i;
    218c:	69fb      	ldr	r3, [r7, #28]
    218e:	b2db      	uxtb	r3, r3
    2190:	e006      	b.n	21a0 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2192:	69fb      	ldr	r3, [r7, #28]
    2194:	3301      	adds	r3, #1
    2196:	61fb      	str	r3, [r7, #28]
    2198:	69fb      	ldr	r3, [r7, #28]
    219a:	2b04      	cmp	r3, #4
    219c:	d9ee      	bls.n	217c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    219e:	2300      	movs	r3, #0
}
    21a0:	0018      	movs	r0, r3
    21a2:	46bd      	mov	sp, r7
    21a4:	b009      	add	sp, #36	; 0x24
    21a6:	bd90      	pop	{r4, r7, pc}
    21a8:	00007310 	.word	0x00007310

000021ac <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    21ac:	b590      	push	{r4, r7, lr}
    21ae:	b095      	sub	sp, #84	; 0x54
    21b0:	af00      	add	r7, sp, #0
    21b2:	60f8      	str	r0, [r7, #12]
    21b4:	60b9      	str	r1, [r7, #8]
    21b6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
    21b8:	2300      	movs	r3, #0
    21ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    21bc:	234b      	movs	r3, #75	; 0x4b
    21be:	18fb      	adds	r3, r7, r3
    21c0:	2200      	movs	r2, #0
    21c2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    21c4:	2347      	movs	r3, #71	; 0x47
    21c6:	18fc      	adds	r4, r7, r3
    21c8:	68bb      	ldr	r3, [r7, #8]
    21ca:	0018      	movs	r0, r3
    21cc:	4bd6      	ldr	r3, [pc, #856]	; (2528 <tc_init+0x37c>)
    21ce:	4798      	blx	r3
    21d0:	0003      	movs	r3, r0
    21d2:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    21d4:	2340      	movs	r3, #64	; 0x40
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	4ad4      	ldr	r2, [pc, #848]	; (252c <tc_init+0x380>)
    21da:	6811      	ldr	r1, [r2, #0]
    21dc:	6019      	str	r1, [r3, #0]
    21de:	7912      	ldrb	r2, [r2, #4]
    21e0:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    21e2:	2318      	movs	r3, #24
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	4ad2      	ldr	r2, [pc, #840]	; (2530 <tc_init+0x384>)
    21e8:	ca13      	ldmia	r2!, {r0, r1, r4}
    21ea:	c313      	stmia	r3!, {r0, r1, r4}
    21ec:	ca13      	ldmia	r2!, {r0, r1, r4}
    21ee:	c313      	stmia	r3!, {r0, r1, r4}
    21f0:	ca13      	ldmia	r2!, {r0, r1, r4}
    21f2:	c313      	stmia	r3!, {r0, r1, r4}
    21f4:	6812      	ldr	r2, [r2, #0]
    21f6:	601a      	str	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    21f8:	234a      	movs	r3, #74	; 0x4a
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	2200      	movs	r2, #0
    21fe:	701a      	strb	r2, [r3, #0]
    2200:	e00e      	b.n	2220 <tc_init+0x74>
		module_inst->callback[i]        = NULL;
    2202:	234a      	movs	r3, #74	; 0x4a
    2204:	18fb      	adds	r3, r7, r3
    2206:	781a      	ldrb	r2, [r3, #0]
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	3202      	adds	r2, #2
    220c:	0092      	lsls	r2, r2, #2
    220e:	2100      	movs	r1, #0
    2210:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2212:	234a      	movs	r3, #74	; 0x4a
    2214:	18fb      	adds	r3, r7, r3
    2216:	781a      	ldrb	r2, [r3, #0]
    2218:	234a      	movs	r3, #74	; 0x4a
    221a:	18fb      	adds	r3, r7, r3
    221c:	3201      	adds	r2, #1
    221e:	701a      	strb	r2, [r3, #0]
    2220:	234a      	movs	r3, #74	; 0x4a
    2222:	18fb      	adds	r3, r7, r3
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	2b03      	cmp	r3, #3
    2228:	d9eb      	bls.n	2202 <tc_init+0x56>
	}
	module_inst->register_callback_mask     = 0x00;
    222a:	68fb      	ldr	r3, [r7, #12]
    222c:	2200      	movs	r2, #0
    222e:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	2200      	movs	r2, #0
    2234:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2236:	2347      	movs	r3, #71	; 0x47
    2238:	18fb      	adds	r3, r7, r3
    223a:	781a      	ldrb	r2, [r3, #0]
    223c:	4bbd      	ldr	r3, [pc, #756]	; (2534 <tc_init+0x388>)
    223e:	0092      	lsls	r2, r2, #2
    2240:	68f9      	ldr	r1, [r7, #12]
    2242:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2244:	68fb      	ldr	r3, [r7, #12]
    2246:	68ba      	ldr	r2, [r7, #8]
    2248:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2234      	movs	r2, #52	; 0x34
    224e:	5c9a      	ldrb	r2, [r3, r2]
    2250:	68fb      	ldr	r3, [r7, #12]
    2252:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2254:	687b      	ldr	r3, [r7, #4]
    2256:	78db      	ldrb	r3, [r3, #3]
    2258:	2b08      	cmp	r3, #8
    225a:	d107      	bne.n	226c <tc_init+0xc0>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    225c:	2347      	movs	r3, #71	; 0x47
    225e:	18fb      	adds	r3, r7, r3
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	2201      	movs	r2, #1
    2264:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2266:	d001      	beq.n	226c <tc_init+0xc0>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2268:	2317      	movs	r3, #23
    226a:	e1ec      	b.n	2646 <tc_init+0x49a>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	78da      	ldrb	r2, [r3, #3]
    2270:	68fb      	ldr	r3, [r7, #12]
    2272:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2274:	68bb      	ldr	r3, [r7, #8]
    2276:	681b      	ldr	r3, [r3, #0]
    2278:	2201      	movs	r2, #1
    227a:	4013      	ands	r3, r2
    227c:	d001      	beq.n	2282 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    227e:	2305      	movs	r3, #5
    2280:	e1e1      	b.n	2646 <tc_init+0x49a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2282:	68bb      	ldr	r3, [r7, #8]
    2284:	7adb      	ldrb	r3, [r3, #11]
    2286:	b2db      	uxtb	r3, r3
    2288:	001a      	movs	r2, r3
    228a:	2302      	movs	r3, #2
    228c:	4013      	ands	r3, r2
    228e:	d001      	beq.n	2294 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2290:	231c      	movs	r3, #28
    2292:	e1d8      	b.n	2646 <tc_init+0x49a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2294:	68bb      	ldr	r3, [r7, #8]
    2296:	681b      	ldr	r3, [r3, #0]
    2298:	2202      	movs	r2, #2
    229a:	4013      	ands	r3, r2
    229c:	d001      	beq.n	22a2 <tc_init+0xf6>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    229e:	231c      	movs	r3, #28
    22a0:	e1d1      	b.n	2646 <tc_init+0x49a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	7c1b      	ldrb	r3, [r3, #16]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d017      	beq.n	22da <tc_init+0x12e>
		system_pinmux_get_config_defaults(&pin_config);
    22aa:	2314      	movs	r3, #20
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	0018      	movs	r0, r3
    22b0:	4ba1      	ldr	r3, [pc, #644]	; (2538 <tc_init+0x38c>)
    22b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	699b      	ldr	r3, [r3, #24]
    22b8:	b2da      	uxtb	r2, r3
    22ba:	2314      	movs	r3, #20
    22bc:	18fb      	adds	r3, r7, r3
    22be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    22c0:	2314      	movs	r3, #20
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	2201      	movs	r2, #1
    22c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    22cc:	b2db      	uxtb	r3, r3
    22ce:	2214      	movs	r2, #20
    22d0:	18ba      	adds	r2, r7, r2
    22d2:	0011      	movs	r1, r2
    22d4:	0018      	movs	r0, r3
    22d6:	4b99      	ldr	r3, [pc, #612]	; (253c <tc_init+0x390>)
    22d8:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	7f1b      	ldrb	r3, [r3, #28]
    22de:	2b00      	cmp	r3, #0
    22e0:	d017      	beq.n	2312 <tc_init+0x166>
		system_pinmux_get_config_defaults(&pin_config);
    22e2:	2314      	movs	r3, #20
    22e4:	18fb      	adds	r3, r7, r3
    22e6:	0018      	movs	r0, r3
    22e8:	4b93      	ldr	r3, [pc, #588]	; (2538 <tc_init+0x38c>)
    22ea:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22f0:	b2da      	uxtb	r2, r3
    22f2:	2314      	movs	r3, #20
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    22f8:	2314      	movs	r3, #20
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	2201      	movs	r2, #1
    22fe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    2304:	b2db      	uxtb	r3, r3
    2306:	2214      	movs	r2, #20
    2308:	18ba      	adds	r2, r7, r2
    230a:	0011      	movs	r1, r2
    230c:	0018      	movs	r0, r3
    230e:	4b8b      	ldr	r3, [pc, #556]	; (253c <tc_init+0x390>)
    2310:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    2312:	2347      	movs	r3, #71	; 0x47
    2314:	18fb      	adds	r3, r7, r3
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	005a      	lsls	r2, r3, #1
    231a:	2318      	movs	r3, #24
    231c:	18fb      	adds	r3, r7, r3
    231e:	0092      	lsls	r2, r2, #2
    2320:	58d3      	ldr	r3, [r2, r3]
    2322:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    2324:	2347      	movs	r3, #71	; 0x47
    2326:	18fb      	adds	r3, r7, r3
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	005b      	lsls	r3, r3, #1
    232c:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    232e:	2318      	movs	r3, #24
    2330:	18fb      	adds	r3, r7, r3
    2332:	0092      	lsls	r2, r2, #2
    2334:	58d3      	ldr	r3, [r2, r3]
    2336:	0019      	movs	r1, r3
    2338:	4b81      	ldr	r3, [pc, #516]	; (2540 <tc_init+0x394>)
    233a:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	78db      	ldrb	r3, [r3, #3]
    2340:	2b08      	cmp	r3, #8
    2342:	d11c      	bne.n	237e <tc_init+0x1d2>
    2344:	2347      	movs	r3, #71	; 0x47
    2346:	18fb      	adds	r3, r7, r3
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	3301      	adds	r3, #1
    234c:	2b04      	cmp	r3, #4
    234e:	dc16      	bgt.n	237e <tc_init+0x1d2>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    2350:	2347      	movs	r3, #71	; 0x47
    2352:	18fb      	adds	r3, r7, r3
    2354:	781b      	ldrb	r3, [r3, #0]
    2356:	3301      	adds	r3, #1
    2358:	005a      	lsls	r2, r3, #1
    235a:	2318      	movs	r3, #24
    235c:	18fb      	adds	r3, r7, r3
    235e:	0092      	lsls	r2, r2, #2
    2360:	58d3      	ldr	r3, [r2, r3]
    2362:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    2364:	2347      	movs	r3, #71	; 0x47
    2366:	18fb      	adds	r3, r7, r3
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	3301      	adds	r3, #1
    236c:	005b      	lsls	r3, r3, #1
    236e:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    2370:	2318      	movs	r3, #24
    2372:	18fb      	adds	r3, r7, r3
    2374:	0092      	lsls	r2, r2, #2
    2376:	58d3      	ldr	r3, [r2, r3]
    2378:	0019      	movs	r1, r3
    237a:	4b71      	ldr	r3, [pc, #452]	; (2540 <tc_init+0x394>)
    237c:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    237e:	2310      	movs	r3, #16
    2380:	18fb      	adds	r3, r7, r3
    2382:	0018      	movs	r0, r3
    2384:	4b6f      	ldr	r3, [pc, #444]	; (2544 <tc_init+0x398>)
    2386:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	781a      	ldrb	r2, [r3, #0]
    238c:	2310      	movs	r3, #16
    238e:	18fb      	adds	r3, r7, r3
    2390:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2392:	2347      	movs	r3, #71	; 0x47
    2394:	18fb      	adds	r3, r7, r3
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	2240      	movs	r2, #64	; 0x40
    239a:	18ba      	adds	r2, r7, r2
    239c:	5cd3      	ldrb	r3, [r2, r3]
    239e:	2210      	movs	r2, #16
    23a0:	18ba      	adds	r2, r7, r2
    23a2:	0011      	movs	r1, r2
    23a4:	0018      	movs	r0, r3
    23a6:	4b68      	ldr	r3, [pc, #416]	; (2548 <tc_init+0x39c>)
    23a8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    23aa:	2347      	movs	r3, #71	; 0x47
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	2240      	movs	r2, #64	; 0x40
    23b2:	18ba      	adds	r2, r7, r2
    23b4:	5cd3      	ldrb	r3, [r2, r3]
    23b6:	0018      	movs	r0, r3
    23b8:	4b64      	ldr	r3, [pc, #400]	; (254c <tc_init+0x3a0>)
    23ba:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    23c4:	4313      	orrs	r3, r2
    23c6:	b2db      	uxtb	r3, r3
    23c8:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    23ce:	4313      	orrs	r3, r2
    23d0:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    23d2:	2349      	movs	r3, #73	; 0x49
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	2200      	movs	r2, #0
    23d8:	701a      	strb	r2, [r3, #0]
    23da:	e018      	b.n	240e <tc_init+0x262>
		if (config->enable_capture_on_channel[i] == true) {
    23dc:	2349      	movs	r3, #73	; 0x49
    23de:	18fb      	adds	r3, r7, r3
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	687a      	ldr	r2, [r7, #4]
    23e4:	18d3      	adds	r3, r2, r3
    23e6:	7a5b      	ldrb	r3, [r3, #9]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d009      	beq.n	2400 <tc_init+0x254>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    23ec:	2349      	movs	r3, #73	; 0x49
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	2280      	movs	r2, #128	; 0x80
    23f4:	0252      	lsls	r2, r2, #9
    23f6:	409a      	lsls	r2, r3
    23f8:	0013      	movs	r3, r2
    23fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    23fc:	4313      	orrs	r3, r2
    23fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2400:	2349      	movs	r3, #73	; 0x49
    2402:	18fb      	adds	r3, r7, r3
    2404:	781a      	ldrb	r2, [r3, #0]
    2406:	2349      	movs	r3, #73	; 0x49
    2408:	18fb      	adds	r3, r7, r3
    240a:	3201      	adds	r2, #1
    240c:	701a      	strb	r2, [r3, #0]
    240e:	2349      	movs	r3, #73	; 0x49
    2410:	18fb      	adds	r3, r7, r3
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b01      	cmp	r3, #1
    2416:	d9e1      	bls.n	23dc <tc_init+0x230>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2418:	2348      	movs	r3, #72	; 0x48
    241a:	18fb      	adds	r3, r7, r3
    241c:	2200      	movs	r2, #0
    241e:	701a      	strb	r2, [r3, #0]
    2420:	e018      	b.n	2454 <tc_init+0x2a8>
		if (config->enable_capture_on_IO[i] == true) {
    2422:	2348      	movs	r3, #72	; 0x48
    2424:	18fb      	adds	r3, r7, r3
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	687a      	ldr	r2, [r7, #4]
    242a:	18d3      	adds	r3, r2, r3
    242c:	7adb      	ldrb	r3, [r3, #11]
    242e:	2b00      	cmp	r3, #0
    2430:	d009      	beq.n	2446 <tc_init+0x29a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    2432:	2348      	movs	r3, #72	; 0x48
    2434:	18fb      	adds	r3, r7, r3
    2436:	781b      	ldrb	r3, [r3, #0]
    2438:	2280      	movs	r2, #128	; 0x80
    243a:	0352      	lsls	r2, r2, #13
    243c:	409a      	lsls	r2, r3
    243e:	0013      	movs	r3, r2
    2440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2442:	4313      	orrs	r3, r2
    2444:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2446:	2348      	movs	r3, #72	; 0x48
    2448:	18fb      	adds	r3, r7, r3
    244a:	781a      	ldrb	r2, [r3, #0]
    244c:	2348      	movs	r3, #72	; 0x48
    244e:	18fb      	adds	r3, r7, r3
    2450:	3201      	adds	r2, #1
    2452:	701a      	strb	r2, [r3, #0]
    2454:	2348      	movs	r3, #72	; 0x48
    2456:	18fb      	adds	r3, r7, r3
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	2b01      	cmp	r3, #1
    245c:	d9e1      	bls.n	2422 <tc_init+0x276>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	785b      	ldrb	r3, [r3, #1]
    2462:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	789b      	ldrb	r3, [r3, #2]
    2468:	01db      	lsls	r3, r3, #7
    246a:	4313      	orrs	r3, r2
    246c:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2470:	4313      	orrs	r3, r2
    2472:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	68fb      	ldr	r3, [r7, #12]
    2478:	0018      	movs	r0, r3
    247a:	4b35      	ldr	r3, [pc, #212]	; (2550 <tc_init+0x3a4>)
    247c:	4798      	blx	r3
    247e:	1e03      	subs	r3, r0, #0
    2480:	d1f9      	bne.n	2476 <tc_init+0x2ca>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2482:	68bb      	ldr	r3, [r7, #8]
    2484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2486:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2488:	46c0      	nop			; (mov r8, r8)
    248a:	68fb      	ldr	r3, [r7, #12]
    248c:	0018      	movs	r0, r3
    248e:	4b30      	ldr	r3, [pc, #192]	; (2550 <tc_init+0x3a4>)
    2490:	4798      	blx	r3
    2492:	1e03      	subs	r3, r0, #0
    2494:	d1f9      	bne.n	248a <tc_init+0x2de>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	799a      	ldrb	r2, [r3, #6]
    249a:	68bb      	ldr	r3, [r7, #8]
    249c:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	7b5b      	ldrb	r3, [r3, #13]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d003      	beq.n	24ae <tc_init+0x302>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    24a6:	234b      	movs	r3, #75	; 0x4b
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2204      	movs	r2, #4
    24ac:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	7b9b      	ldrb	r3, [r3, #14]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d007      	beq.n	24c6 <tc_init+0x31a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    24b6:	234b      	movs	r3, #75	; 0x4b
    24b8:	18fb      	adds	r3, r7, r3
    24ba:	224b      	movs	r2, #75	; 0x4b
    24bc:	18ba      	adds	r2, r7, r2
    24be:	7812      	ldrb	r2, [r2, #0]
    24c0:	2101      	movs	r1, #1
    24c2:	430a      	orrs	r2, r1
    24c4:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	0018      	movs	r0, r3
    24cc:	4b20      	ldr	r3, [pc, #128]	; (2550 <tc_init+0x3a4>)
    24ce:	4798      	blx	r3
    24d0:	1e03      	subs	r3, r0, #0
    24d2:	d1f9      	bne.n	24c8 <tc_init+0x31c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    24d4:	68bb      	ldr	r3, [r7, #8]
    24d6:	22ff      	movs	r2, #255	; 0xff
    24d8:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    24da:	234b      	movs	r3, #75	; 0x4b
    24dc:	18fb      	adds	r3, r7, r3
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d00b      	beq.n	24fc <tc_init+0x350>
		while (tc_is_syncing(module_inst)) {
    24e4:	46c0      	nop			; (mov r8, r8)
    24e6:	68fb      	ldr	r3, [r7, #12]
    24e8:	0018      	movs	r0, r3
    24ea:	4b19      	ldr	r3, [pc, #100]	; (2550 <tc_init+0x3a4>)
    24ec:	4798      	blx	r3
    24ee:	1e03      	subs	r3, r0, #0
    24f0:	d1f9      	bne.n	24e6 <tc_init+0x33a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    24f2:	68bb      	ldr	r3, [r7, #8]
    24f4:	224b      	movs	r2, #75	; 0x4b
    24f6:	18ba      	adds	r2, r7, r2
    24f8:	7812      	ldrb	r2, [r2, #0]
    24fa:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	7a1a      	ldrb	r2, [r3, #8]
    2500:	68bb      	ldr	r3, [r7, #8]
    2502:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2504:	46c0      	nop			; (mov r8, r8)
    2506:	68fb      	ldr	r3, [r7, #12]
    2508:	0018      	movs	r0, r3
    250a:	4b11      	ldr	r3, [pc, #68]	; (2550 <tc_init+0x3a4>)
    250c:	4798      	blx	r3
    250e:	1e03      	subs	r3, r0, #0
    2510:	d1f9      	bne.n	2506 <tc_init+0x35a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2512:	68fb      	ldr	r3, [r7, #12]
    2514:	791b      	ldrb	r3, [r3, #4]
    2516:	2b04      	cmp	r3, #4
    2518:	d01c      	beq.n	2554 <tc_init+0x3a8>
    251a:	2b08      	cmp	r3, #8
    251c:	d100      	bne.n	2520 <tc_init+0x374>
    251e:	e06e      	b.n	25fe <tc_init+0x452>
    2520:	2b00      	cmp	r3, #0
    2522:	d049      	beq.n	25b8 <tc_init+0x40c>
    2524:	e08e      	b.n	2644 <tc_init+0x498>
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	00002161 	.word	0x00002161
    252c:	00007324 	.word	0x00007324
    2530:	0000732c 	.word	0x0000732c
    2534:	2000018c 	.word	0x2000018c
    2538:	00002119 	.word	0x00002119
    253c:	000049ad 	.word	0x000049ad
    2540:	0000209d 	.word	0x0000209d
    2544:	00002085 	.word	0x00002085
    2548:	000046f9 	.word	0x000046f9
    254c:	00004739 	.word	0x00004739
    2550:	00002141 	.word	0x00002141
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2554:	46c0      	nop			; (mov r8, r8)
    2556:	68fb      	ldr	r3, [r7, #12]
    2558:	0018      	movs	r0, r3
    255a:	4b3d      	ldr	r3, [pc, #244]	; (2650 <tc_init+0x4a4>)
    255c:	4798      	blx	r3
    255e:	1e03      	subs	r3, r0, #0
    2560:	d1f9      	bne.n	2556 <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	2228      	movs	r2, #40	; 0x28
    2566:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    2568:	68bb      	ldr	r3, [r7, #8]
    256a:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    256c:	46c0      	nop			; (mov r8, r8)
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	0018      	movs	r0, r3
    2572:	4b37      	ldr	r3, [pc, #220]	; (2650 <tc_init+0x4a4>)
    2574:	4798      	blx	r3
    2576:	1e03      	subs	r3, r0, #0
    2578:	d1f9      	bne.n	256e <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	2229      	movs	r2, #41	; 0x29
    257e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    2580:	68bb      	ldr	r3, [r7, #8]
    2582:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    2584:	46c0      	nop			; (mov r8, r8)
    2586:	68fb      	ldr	r3, [r7, #12]
    2588:	0018      	movs	r0, r3
    258a:	4b31      	ldr	r3, [pc, #196]	; (2650 <tc_init+0x4a4>)
    258c:	4798      	blx	r3
    258e:	1e03      	subs	r3, r0, #0
    2590:	d1f9      	bne.n	2586 <tc_init+0x3da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	222a      	movs	r2, #42	; 0x2a
    2596:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    2598:	68bb      	ldr	r3, [r7, #8]
    259a:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    259c:	46c0      	nop			; (mov r8, r8)
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	0018      	movs	r0, r3
    25a2:	4b2b      	ldr	r3, [pc, #172]	; (2650 <tc_init+0x4a4>)
    25a4:	4798      	blx	r3
    25a6:	1e03      	subs	r3, r0, #0
    25a8:	d1f9      	bne.n	259e <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	222b      	movs	r2, #43	; 0x2b
    25ae:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    25b0:	68bb      	ldr	r3, [r7, #8]
    25b2:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    25b4:	2300      	movs	r3, #0
    25b6:	e046      	b.n	2646 <tc_init+0x49a>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    25b8:	46c0      	nop			; (mov r8, r8)
    25ba:	68fb      	ldr	r3, [r7, #12]
    25bc:	0018      	movs	r0, r3
    25be:	4b24      	ldr	r3, [pc, #144]	; (2650 <tc_init+0x4a4>)
    25c0:	4798      	blx	r3
    25c2:	1e03      	subs	r3, r0, #0
    25c4:	d1f9      	bne.n	25ba <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    25ca:	68bb      	ldr	r3, [r7, #8]
    25cc:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	68fb      	ldr	r3, [r7, #12]
    25d2:	0018      	movs	r0, r3
    25d4:	4b1e      	ldr	r3, [pc, #120]	; (2650 <tc_init+0x4a4>)
    25d6:	4798      	blx	r3
    25d8:	1e03      	subs	r3, r0, #0
    25da:	d1f9      	bne.n	25d0 <tc_init+0x424>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    25e0:	68bb      	ldr	r3, [r7, #8]
    25e2:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    25e4:	46c0      	nop			; (mov r8, r8)
    25e6:	68fb      	ldr	r3, [r7, #12]
    25e8:	0018      	movs	r0, r3
    25ea:	4b19      	ldr	r3, [pc, #100]	; (2650 <tc_init+0x4a4>)
    25ec:	4798      	blx	r3
    25ee:	1e03      	subs	r3, r0, #0
    25f0:	d1f9      	bne.n	25e6 <tc_init+0x43a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    25f6:	68bb      	ldr	r3, [r7, #8]
    25f8:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    25fa:	2300      	movs	r3, #0
    25fc:	e023      	b.n	2646 <tc_init+0x49a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	68fb      	ldr	r3, [r7, #12]
    2602:	0018      	movs	r0, r3
    2604:	4b12      	ldr	r3, [pc, #72]	; (2650 <tc_init+0x4a4>)
    2606:	4798      	blx	r3
    2608:	1e03      	subs	r3, r0, #0
    260a:	d1f9      	bne.n	2600 <tc_init+0x454>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2610:	68bb      	ldr	r3, [r7, #8]
    2612:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    2614:	46c0      	nop			; (mov r8, r8)
    2616:	68fb      	ldr	r3, [r7, #12]
    2618:	0018      	movs	r0, r3
    261a:	4b0d      	ldr	r3, [pc, #52]	; (2650 <tc_init+0x4a4>)
    261c:	4798      	blx	r3
    261e:	1e03      	subs	r3, r0, #0
    2620:	d1f9      	bne.n	2616 <tc_init+0x46a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    2626:	68bb      	ldr	r3, [r7, #8]
    2628:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	68fb      	ldr	r3, [r7, #12]
    262e:	0018      	movs	r0, r3
    2630:	4b07      	ldr	r3, [pc, #28]	; (2650 <tc_init+0x4a4>)
    2632:	4798      	blx	r3
    2634:	1e03      	subs	r3, r0, #0
    2636:	d1f9      	bne.n	262c <tc_init+0x480>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    263c:	68bb      	ldr	r3, [r7, #8]
    263e:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    2640:	2300      	movs	r3, #0
    2642:	e000      	b.n	2646 <tc_init+0x49a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2644:	2317      	movs	r3, #23
}
    2646:	0018      	movs	r0, r3
    2648:	46bd      	mov	sp, r7
    264a:	b015      	add	sp, #84	; 0x54
    264c:	bd90      	pop	{r4, r7, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	00002141 	.word	0x00002141

00002654 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2654:	b580      	push	{r7, lr}
    2656:	b086      	sub	sp, #24
    2658:	af00      	add	r7, sp, #0
    265a:	60f8      	str	r0, [r7, #12]
    265c:	607a      	str	r2, [r7, #4]
    265e:	230b      	movs	r3, #11
    2660:	18fb      	adds	r3, r7, r3
    2662:	1c0a      	adds	r2, r1, #0
    2664:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    266c:	46c0      	nop			; (mov r8, r8)
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	0018      	movs	r0, r3
    2672:	4b38      	ldr	r3, [pc, #224]	; (2754 <tc_set_compare_value+0x100>)
    2674:	4798      	blx	r3
    2676:	1e03      	subs	r3, r0, #0
    2678:	d1f9      	bne.n	266e <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	791b      	ldrb	r3, [r3, #4]
    267e:	2b04      	cmp	r3, #4
    2680:	d004      	beq.n	268c <tc_set_compare_value+0x38>
    2682:	2b08      	cmp	r3, #8
    2684:	d043      	beq.n	270e <tc_set_compare_value+0xba>
    2686:	2b00      	cmp	r3, #0
    2688:	d020      	beq.n	26cc <tc_set_compare_value+0x78>
    268a:	e05e      	b.n	274a <tc_set_compare_value+0xf6>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    268c:	230b      	movs	r3, #11
    268e:	18fb      	adds	r3, r7, r3
    2690:	781b      	ldrb	r3, [r3, #0]
    2692:	2b01      	cmp	r3, #1
    2694:	d81a      	bhi.n	26cc <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	7e9b      	ldrb	r3, [r3, #26]
    269a:	2b00      	cmp	r3, #0
    269c:	d00b      	beq.n	26b6 <tc_set_compare_value+0x62>
					tc_module->COUNT8.CCBUF[channel_index].reg =
    269e:	230b      	movs	r3, #11
    26a0:	18fb      	adds	r3, r7, r3
    26a2:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    26a4:	687a      	ldr	r2, [r7, #4]
    26a6:	b2d0      	uxtb	r0, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    26a8:	697a      	ldr	r2, [r7, #20]
    26aa:	2130      	movs	r1, #48	; 0x30
    26ac:	18d3      	adds	r3, r2, r3
    26ae:	185b      	adds	r3, r3, r1
    26b0:	1c02      	adds	r2, r0, #0
    26b2:	701a      	strb	r2, [r3, #0]
    26b4:	e008      	b.n	26c8 <tc_set_compare_value+0x74>
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    26b6:	230b      	movs	r3, #11
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    26bc:	687a      	ldr	r2, [r7, #4]
    26be:	b2d1      	uxtb	r1, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    26c0:	697a      	ldr	r2, [r7, #20]
    26c2:	18d3      	adds	r3, r2, r3
    26c4:	1c0a      	adds	r2, r1, #0
    26c6:	771a      	strb	r2, [r3, #28]
				}
				return STATUS_OK;
    26c8:	2300      	movs	r3, #0
    26ca:	e03f      	b.n	274c <tc_set_compare_value+0xf8>
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    26cc:	230b      	movs	r3, #11
    26ce:	18fb      	adds	r3, r7, r3
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	2b01      	cmp	r3, #1
    26d4:	d81b      	bhi.n	270e <tc_set_compare_value+0xba>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	7e9b      	ldrb	r3, [r3, #26]
    26da:	2b00      	cmp	r3, #0
    26dc:	d009      	beq.n	26f2 <tc_set_compare_value+0x9e>
					tc_module->COUNT16.CCBUF[channel_index].reg =
    26de:	230b      	movs	r3, #11
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	781a      	ldrb	r2, [r3, #0]
							(uint16_t)compare;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	b299      	uxth	r1, r3
					tc_module->COUNT16.CCBUF[channel_index].reg =
    26e8:	697b      	ldr	r3, [r7, #20]
    26ea:	3218      	adds	r2, #24
    26ec:	0052      	lsls	r2, r2, #1
    26ee:	52d1      	strh	r1, [r2, r3]
    26f0:	e00b      	b.n	270a <tc_set_compare_value+0xb6>
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    26f2:	230b      	movs	r3, #11
    26f4:	18fb      	adds	r3, r7, r3
    26f6:	781b      	ldrb	r3, [r3, #0]
							(uint16_t)compare;
    26f8:	687a      	ldr	r2, [r7, #4]
    26fa:	b291      	uxth	r1, r2
					tc_module->COUNT16.CC[channel_index].reg =
    26fc:	697a      	ldr	r2, [r7, #20]
    26fe:	330c      	adds	r3, #12
    2700:	005b      	lsls	r3, r3, #1
    2702:	18d3      	adds	r3, r2, r3
    2704:	3304      	adds	r3, #4
    2706:	1c0a      	adds	r2, r1, #0
    2708:	801a      	strh	r2, [r3, #0]
				}
				return STATUS_OK;
    270a:	2300      	movs	r3, #0
    270c:	e01e      	b.n	274c <tc_set_compare_value+0xf8>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    270e:	230b      	movs	r3, #11
    2710:	18fb      	adds	r3, r7, r3
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	2b01      	cmp	r3, #1
    2716:	d818      	bhi.n	274a <tc_set_compare_value+0xf6>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    2718:	68fb      	ldr	r3, [r7, #12]
    271a:	7e9b      	ldrb	r3, [r3, #26]
    271c:	2b00      	cmp	r3, #0
    271e:	d008      	beq.n	2732 <tc_set_compare_value+0xde>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    2720:	230b      	movs	r3, #11
    2722:	18fb      	adds	r3, r7, r3
    2724:	781a      	ldrb	r2, [r3, #0]
    2726:	697b      	ldr	r3, [r7, #20]
    2728:	320c      	adds	r2, #12
    272a:	0092      	lsls	r2, r2, #2
    272c:	6879      	ldr	r1, [r7, #4]
    272e:	50d1      	str	r1, [r2, r3]
    2730:	e009      	b.n	2746 <tc_set_compare_value+0xf2>
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    2732:	230b      	movs	r3, #11
    2734:	18fb      	adds	r3, r7, r3
    2736:	781b      	ldrb	r3, [r3, #0]
    2738:	697a      	ldr	r2, [r7, #20]
    273a:	3306      	adds	r3, #6
    273c:	009b      	lsls	r3, r3, #2
    273e:	18d3      	adds	r3, r2, r3
    2740:	3304      	adds	r3, #4
    2742:	687a      	ldr	r2, [r7, #4]
    2744:	601a      	str	r2, [r3, #0]
						(uint32_t)compare;
				}
				return STATUS_OK;
    2746:	2300      	movs	r3, #0
    2748:	e000      	b.n	274c <tc_set_compare_value+0xf8>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    274a:	2317      	movs	r3, #23
}
    274c:	0018      	movs	r0, r3
    274e:	46bd      	mov	sp, r7
    2750:	b006      	add	sp, #24
    2752:	bd80      	pop	{r7, pc}
    2754:	00002141 	.word	0x00002141

00002758 <system_interrupt_enable>:
{
    2758:	b580      	push	{r7, lr}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	0002      	movs	r2, r0
    2760:	1dfb      	adds	r3, r7, #7
    2762:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2764:	4b06      	ldr	r3, [pc, #24]	; (2780 <system_interrupt_enable+0x28>)
    2766:	1dfa      	adds	r2, r7, #7
    2768:	7812      	ldrb	r2, [r2, #0]
    276a:	0011      	movs	r1, r2
    276c:	221f      	movs	r2, #31
    276e:	400a      	ands	r2, r1
    2770:	2101      	movs	r1, #1
    2772:	4091      	lsls	r1, r2
    2774:	000a      	movs	r2, r1
    2776:	601a      	str	r2, [r3, #0]
}
    2778:	46c0      	nop			; (mov r8, r8)
    277a:	46bd      	mov	sp, r7
    277c:	b002      	add	sp, #8
    277e:	bd80      	pop	{r7, pc}
    2780:	e000e100 	.word	0xe000e100

00002784 <adc_is_syncing>:
{
    2784:	b580      	push	{r7, lr}
    2786:	b084      	sub	sp, #16
    2788:	af00      	add	r7, sp, #0
    278a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	8c1b      	ldrh	r3, [r3, #32]
    2796:	b29b      	uxth	r3, r3
    2798:	2b00      	cmp	r3, #0
    279a:	d001      	beq.n	27a0 <adc_is_syncing+0x1c>
		return true;
    279c:	2301      	movs	r3, #1
    279e:	e000      	b.n	27a2 <adc_is_syncing+0x1e>
	return false;
    27a0:	2300      	movs	r3, #0
}
    27a2:	0018      	movs	r0, r3
    27a4:	46bd      	mov	sp, r7
    27a6:	b004      	add	sp, #16
    27a8:	bd80      	pop	{r7, pc}

000027aa <adc_get_status>:
{
    27aa:	b580      	push	{r7, lr}
    27ac:	b086      	sub	sp, #24
    27ae:	af00      	add	r7, sp, #0
    27b0:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    27b8:	693b      	ldr	r3, [r7, #16]
    27ba:	799b      	ldrb	r3, [r3, #6]
    27bc:	b2db      	uxtb	r3, r3
    27be:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
    27c0:	2300      	movs	r3, #0
    27c2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
    27c4:	68fb      	ldr	r3, [r7, #12]
    27c6:	2201      	movs	r2, #1
    27c8:	4013      	ands	r3, r2
    27ca:	d003      	beq.n	27d4 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    27cc:	697b      	ldr	r3, [r7, #20]
    27ce:	2201      	movs	r2, #1
    27d0:	4313      	orrs	r3, r2
    27d2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	2204      	movs	r2, #4
    27d8:	4013      	ands	r3, r2
    27da:	d003      	beq.n	27e4 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    27dc:	697b      	ldr	r3, [r7, #20]
    27de:	2202      	movs	r2, #2
    27e0:	4313      	orrs	r3, r2
    27e2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    27e4:	68fb      	ldr	r3, [r7, #12]
    27e6:	2202      	movs	r2, #2
    27e8:	4013      	ands	r3, r2
    27ea:	d003      	beq.n	27f4 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    27ec:	697b      	ldr	r3, [r7, #20]
    27ee:	2204      	movs	r2, #4
    27f0:	4313      	orrs	r3, r2
    27f2:	617b      	str	r3, [r7, #20]
	return status_flags;
    27f4:	697b      	ldr	r3, [r7, #20]
}
    27f6:	0018      	movs	r0, r3
    27f8:	46bd      	mov	sp, r7
    27fa:	b006      	add	sp, #24
    27fc:	bd80      	pop	{r7, pc}

000027fe <adc_clear_status>:
{
    27fe:	b580      	push	{r7, lr}
    2800:	b084      	sub	sp, #16
    2802:	af00      	add	r7, sp, #0
    2804:	6078      	str	r0, [r7, #4]
    2806:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
    280e:	2300      	movs	r3, #0
    2810:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
    2812:	683b      	ldr	r3, [r7, #0]
    2814:	2201      	movs	r2, #1
    2816:	4013      	ands	r3, r2
    2818:	d003      	beq.n	2822 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	2201      	movs	r2, #1
    281e:	4313      	orrs	r3, r2
    2820:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
    2822:	683b      	ldr	r3, [r7, #0]
    2824:	2202      	movs	r2, #2
    2826:	4013      	ands	r3, r2
    2828:	d003      	beq.n	2832 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	2204      	movs	r2, #4
    282e:	4313      	orrs	r3, r2
    2830:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
    2832:	683b      	ldr	r3, [r7, #0]
    2834:	2204      	movs	r2, #4
    2836:	4013      	ands	r3, r2
    2838:	d003      	beq.n	2842 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	2202      	movs	r2, #2
    283e:	4313      	orrs	r3, r2
    2840:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
    2842:	68fb      	ldr	r3, [r7, #12]
    2844:	b2da      	uxtb	r2, r3
    2846:	68bb      	ldr	r3, [r7, #8]
    2848:	719a      	strb	r2, [r3, #6]
}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	46bd      	mov	sp, r7
    284e:	b004      	add	sp, #16
    2850:	bd80      	pop	{r7, pc}
	...

00002854 <adc_enable>:
{
    2854:	b580      	push	{r7, lr}
    2856:	b084      	sub	sp, #16
    2858:	af00      	add	r7, sp, #0
    285a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	0018      	movs	r0, r3
    2868:	4b10      	ldr	r3, [pc, #64]	; (28ac <adc_enable+0x58>)
    286a:	4798      	blx	r3
    286c:	1e03      	subs	r3, r0, #0
    286e:	d1f9      	bne.n	2864 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2870:	2016      	movs	r0, #22
    2872:	4b0f      	ldr	r3, [pc, #60]	; (28b0 <adc_enable+0x5c>)
    2874:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2876:	68fb      	ldr	r3, [r7, #12]
    2878:	2207      	movs	r2, #7
    287a:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    287c:	68fb      	ldr	r3, [r7, #12]
    287e:	2207      	movs	r2, #7
    2880:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2882:	68fb      	ldr	r3, [r7, #12]
    2884:	781b      	ldrb	r3, [r3, #0]
    2886:	b2db      	uxtb	r3, r3
    2888:	2202      	movs	r2, #2
    288a:	4313      	orrs	r3, r2
    288c:	b2da      	uxtb	r2, r3
    288e:	68fb      	ldr	r3, [r7, #12]
    2890:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	0018      	movs	r0, r3
    2898:	4b04      	ldr	r3, [pc, #16]	; (28ac <adc_enable+0x58>)
    289a:	4798      	blx	r3
    289c:	1e03      	subs	r3, r0, #0
    289e:	d1f9      	bne.n	2894 <adc_enable+0x40>
	return STATUS_OK;
    28a0:	2300      	movs	r3, #0
}
    28a2:	0018      	movs	r0, r3
    28a4:	46bd      	mov	sp, r7
    28a6:	b004      	add	sp, #16
    28a8:	bd80      	pop	{r7, pc}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	00002785 	.word	0x00002785
    28b0:	00002759 	.word	0x00002759

000028b4 <adc_start_conversion>:
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	0018      	movs	r0, r3
    28c8:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <adc_start_conversion+0x44>)
    28ca:	4798      	blx	r3
    28cc:	1e03      	subs	r3, r0, #0
    28ce:	d1f9      	bne.n	28c4 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    28d0:	68fb      	ldr	r3, [r7, #12]
    28d2:	7e1b      	ldrb	r3, [r3, #24]
    28d4:	b2db      	uxtb	r3, r3
    28d6:	2202      	movs	r2, #2
    28d8:	4313      	orrs	r3, r2
    28da:	b2da      	uxtb	r2, r3
    28dc:	68fb      	ldr	r3, [r7, #12]
    28de:	761a      	strb	r2, [r3, #24]
	while (adc_is_syncing(module_inst)) {
    28e0:	46c0      	nop			; (mov r8, r8)
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	0018      	movs	r0, r3
    28e6:	4b04      	ldr	r3, [pc, #16]	; (28f8 <adc_start_conversion+0x44>)
    28e8:	4798      	blx	r3
    28ea:	1e03      	subs	r3, r0, #0
    28ec:	d1f9      	bne.n	28e2 <adc_start_conversion+0x2e>
}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	46bd      	mov	sp, r7
    28f2:	b004      	add	sp, #16
    28f4:	bd80      	pop	{r7, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	00002785 	.word	0x00002785

000028fc <adc_read>:
{
    28fc:	b580      	push	{r7, lr}
    28fe:	b084      	sub	sp, #16
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
    2904:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	0018      	movs	r0, r3
    290a:	4b14      	ldr	r3, [pc, #80]	; (295c <adc_read+0x60>)
    290c:	4798      	blx	r3
    290e:	0002      	movs	r2, r0
    2910:	2301      	movs	r3, #1
    2912:	4013      	ands	r3, r2
    2914:	d101      	bne.n	291a <adc_read+0x1e>
		return STATUS_BUSY;
    2916:	2305      	movs	r3, #5
    2918:	e01c      	b.n	2954 <adc_read+0x58>
	Adc *const adc_module = module_inst->hw;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	60fb      	str	r3, [r7, #12]
	*result = adc_module->RESULT.reg;
    2920:	68fb      	ldr	r3, [r7, #12]
    2922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2924:	b29a      	uxth	r2, r3
    2926:	683b      	ldr	r3, [r7, #0]
    2928:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	2101      	movs	r1, #1
    292e:	0018      	movs	r0, r3
    2930:	4b0b      	ldr	r3, [pc, #44]	; (2960 <adc_read+0x64>)
    2932:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	0018      	movs	r0, r3
    2938:	4b08      	ldr	r3, [pc, #32]	; (295c <adc_read+0x60>)
    293a:	4798      	blx	r3
    293c:	0002      	movs	r2, r0
    293e:	2304      	movs	r3, #4
    2940:	4013      	ands	r3, r2
    2942:	d006      	beq.n	2952 <adc_read+0x56>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	2104      	movs	r1, #4
    2948:	0018      	movs	r0, r3
    294a:	4b05      	ldr	r3, [pc, #20]	; (2960 <adc_read+0x64>)
    294c:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    294e:	231e      	movs	r3, #30
    2950:	e000      	b.n	2954 <adc_read+0x58>
	return STATUS_OK;
    2952:	2300      	movs	r3, #0
}
    2954:	0018      	movs	r0, r3
    2956:	46bd      	mov	sp, r7
    2958:	b004      	add	sp, #16
    295a:	bd80      	pop	{r7, pc}
    295c:	000027ab 	.word	0x000027ab
    2960:	000027ff 	.word	0x000027ff

00002964 <adc_interface_init>:

 static struct adc_module module;
 static struct adc_config config;

 void adc_interface_init(void)
 {
    2964:	b580      	push	{r7, lr}
    2966:	af00      	add	r7, sp, #0
	adc_get_config_defaults(&config);
    2968:	4b0f      	ldr	r3, [pc, #60]	; (29a8 <adc_interface_init+0x44>)
    296a:	0018      	movs	r0, r3
    296c:	4b0f      	ldr	r3, [pc, #60]	; (29ac <adc_interface_init+0x48>)
    296e:	4798      	blx	r3
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;	// Runs off 4MHz clock
    2970:	4b0d      	ldr	r3, [pc, #52]	; (29a8 <adc_interface_init+0x44>)
    2972:	2207      	movs	r2, #7
    2974:	709a      	strb	r2, [r3, #2]
	config.positive_input = ADC_POSITIVE_INPUT_PIN0;
    2976:	4b0c      	ldr	r3, [pc, #48]	; (29a8 <adc_interface_init+0x44>)
    2978:	2200      	movs	r2, #0
    297a:	711a      	strb	r2, [r3, #4]
	config.reference = ADC_REFERENCE_AREFA;
    297c:	4b0a      	ldr	r3, [pc, #40]	; (29a8 <adc_interface_init+0x44>)
    297e:	2203      	movs	r2, #3
    2980:	705a      	strb	r2, [r3, #1]
	config.reference_compensation_enable = false;
    2982:	4b09      	ldr	r3, [pc, #36]	; (29a8 <adc_interface_init+0x44>)
    2984:	2200      	movs	r2, #0
    2986:	751a      	strb	r2, [r3, #20]
	config.positive_input_sequence_mask_enable = (1ul << 0) | (1ul << 2) | (1ul << 3) | (1ul << 4) | (1ul << 5) | (1ul << 10);
    2988:	4b07      	ldr	r3, [pc, #28]	; (29a8 <adc_interface_init+0x44>)
    298a:	4a09      	ldr	r2, [pc, #36]	; (29b0 <adc_interface_init+0x4c>)
    298c:	611a      	str	r2, [r3, #16]

	adc_init(&module, ADC, &config);
    298e:	4a06      	ldr	r2, [pc, #24]	; (29a8 <adc_interface_init+0x44>)
    2990:	4908      	ldr	r1, [pc, #32]	; (29b4 <adc_interface_init+0x50>)
    2992:	4b09      	ldr	r3, [pc, #36]	; (29b8 <adc_interface_init+0x54>)
    2994:	0018      	movs	r0, r3
    2996:	4b09      	ldr	r3, [pc, #36]	; (29bc <adc_interface_init+0x58>)
    2998:	4798      	blx	r3
	adc_enable(&module);
    299a:	4b07      	ldr	r3, [pc, #28]	; (29b8 <adc_interface_init+0x54>)
    299c:	0018      	movs	r0, r3
    299e:	4b08      	ldr	r3, [pc, #32]	; (29c0 <adc_interface_init+0x5c>)
    29a0:	4798      	blx	r3
 }
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	46bd      	mov	sp, r7
    29a6:	bd80      	pop	{r7, pc}
    29a8:	2000004c 	.word	0x2000004c
    29ac:	00000281 	.word	0x00000281
    29b0:	0000043d 	.word	0x0000043d
    29b4:	43000c00 	.word	0x43000c00
    29b8:	2000002c 	.word	0x2000002c
    29bc:	000008b9 	.word	0x000008b9
    29c0:	00002855 	.word	0x00002855

000029c4 <adc_interface_read_pin>:

 uint16_t adc_interface_read_pin(ioport_pin_t pin)
 {
    29c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c6:	b085      	sub	sp, #20
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
	switch (pin)
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	2b29      	cmp	r3, #41	; 0x29
    29d0:	d81d      	bhi.n	2a0e <adc_interface_read_pin+0x4a>
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	009a      	lsls	r2, r3, #2
    29d6:	4b33      	ldr	r3, [pc, #204]	; (2aa4 <adc_interface_read_pin+0xe0>)
    29d8:	18d3      	adds	r3, r2, r3
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	469f      	mov	pc, r3
	{
		case A0_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN0;
    29de:	4b32      	ldr	r3, [pc, #200]	; (2aa8 <adc_interface_read_pin+0xe4>)
    29e0:	2200      	movs	r2, #0
    29e2:	711a      	strb	r2, [r3, #4]
			break;
    29e4:	e015      	b.n	2a12 <adc_interface_read_pin+0x4e>
		case A1_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    29e6:	4b30      	ldr	r3, [pc, #192]	; (2aa8 <adc_interface_read_pin+0xe4>)
    29e8:	2202      	movs	r2, #2
    29ea:	711a      	strb	r2, [r3, #4]
			break;
    29ec:	e011      	b.n	2a12 <adc_interface_read_pin+0x4e>
		case A2_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN3;
    29ee:	4b2e      	ldr	r3, [pc, #184]	; (2aa8 <adc_interface_read_pin+0xe4>)
    29f0:	2203      	movs	r2, #3
    29f2:	711a      	strb	r2, [r3, #4]
			break;
    29f4:	e00d      	b.n	2a12 <adc_interface_read_pin+0x4e>
		case A3_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN4;
    29f6:	4b2c      	ldr	r3, [pc, #176]	; (2aa8 <adc_interface_read_pin+0xe4>)
    29f8:	2204      	movs	r2, #4
    29fa:	711a      	strb	r2, [r3, #4]
			break;
    29fc:	e009      	b.n	2a12 <adc_interface_read_pin+0x4e>
		case A4_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN5;
    29fe:	4b2a      	ldr	r3, [pc, #168]	; (2aa8 <adc_interface_read_pin+0xe4>)
    2a00:	2205      	movs	r2, #5
    2a02:	711a      	strb	r2, [r3, #4]
			break;
    2a04:	e005      	b.n	2a12 <adc_interface_read_pin+0x4e>
		case A5_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN10;
    2a06:	4b28      	ldr	r3, [pc, #160]	; (2aa8 <adc_interface_read_pin+0xe4>)
    2a08:	220a      	movs	r2, #10
    2a0a:	711a      	strb	r2, [r3, #4]
			break;
    2a0c:	e001      	b.n	2a12 <adc_interface_read_pin+0x4e>
		default: // code to be executed if n doesn't match any cases
			return 0;
    2a0e:	2300      	movs	r3, #0
    2a10:	e043      	b.n	2a9a <adc_interface_read_pin+0xd6>
	}

	adc_init(&module, ADC, &config);
    2a12:	4a25      	ldr	r2, [pc, #148]	; (2aa8 <adc_interface_read_pin+0xe4>)
    2a14:	4925      	ldr	r1, [pc, #148]	; (2aac <adc_interface_read_pin+0xe8>)
    2a16:	4b26      	ldr	r3, [pc, #152]	; (2ab0 <adc_interface_read_pin+0xec>)
    2a18:	0018      	movs	r0, r3
    2a1a:	4b26      	ldr	r3, [pc, #152]	; (2ab4 <adc_interface_read_pin+0xf0>)
    2a1c:	4798      	blx	r3
	adc_start_conversion(&module);
    2a1e:	4b24      	ldr	r3, [pc, #144]	; (2ab0 <adc_interface_read_pin+0xec>)
    2a20:	0018      	movs	r0, r3
    2a22:	4b25      	ldr	r3, [pc, #148]	; (2ab8 <adc_interface_read_pin+0xf4>)
    2a24:	4798      	blx	r3
	uint16_t result = 0;
    2a26:	230c      	movs	r3, #12
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	2200      	movs	r2, #0
    2a2c:	801a      	strh	r2, [r3, #0]
	uint16_t timeout = 0;
    2a2e:	230e      	movs	r3, #14
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	2200      	movs	r2, #0
    2a34:	801a      	strh	r2, [r3, #0]
	do {
		delay_us(100);
    2a36:	2000      	movs	r0, #0
    2a38:	4b20      	ldr	r3, [pc, #128]	; (2abc <adc_interface_read_pin+0xf8>)
    2a3a:	4798      	blx	r3
    2a3c:	0003      	movs	r3, r0
    2a3e:	001d      	movs	r5, r3
    2a40:	2300      	movs	r3, #0
    2a42:	001e      	movs	r6, r3
    2a44:	4c1e      	ldr	r4, [pc, #120]	; (2ac0 <adc_interface_read_pin+0xfc>)
    2a46:	2264      	movs	r2, #100	; 0x64
    2a48:	2300      	movs	r3, #0
    2a4a:	0028      	movs	r0, r5
    2a4c:	0031      	movs	r1, r6
    2a4e:	47a0      	blx	r4
    2a50:	0003      	movs	r3, r0
    2a52:	000c      	movs	r4, r1
    2a54:	0019      	movs	r1, r3
    2a56:	0022      	movs	r2, r4
    2a58:	4b1a      	ldr	r3, [pc, #104]	; (2ac4 <adc_interface_read_pin+0x100>)
    2a5a:	2400      	movs	r4, #0
    2a5c:	18c9      	adds	r1, r1, r3
    2a5e:	4162      	adcs	r2, r4
    2a60:	0008      	movs	r0, r1
    2a62:	0011      	movs	r1, r2
    2a64:	4c18      	ldr	r4, [pc, #96]	; (2ac8 <adc_interface_read_pin+0x104>)
    2a66:	4a19      	ldr	r2, [pc, #100]	; (2acc <adc_interface_read_pin+0x108>)
    2a68:	2300      	movs	r3, #0
    2a6a:	47a0      	blx	r4
    2a6c:	0003      	movs	r3, r0
    2a6e:	000c      	movs	r4, r1
    2a70:	0018      	movs	r0, r3
    2a72:	4b17      	ldr	r3, [pc, #92]	; (2ad0 <adc_interface_read_pin+0x10c>)
    2a74:	4798      	blx	r3
	} while (adc_read(&module, &result) == STATUS_BUSY && timeout <  20);
    2a76:	230c      	movs	r3, #12
    2a78:	18fa      	adds	r2, r7, r3
    2a7a:	4b0d      	ldr	r3, [pc, #52]	; (2ab0 <adc_interface_read_pin+0xec>)
    2a7c:	0011      	movs	r1, r2
    2a7e:	0018      	movs	r0, r3
    2a80:	4b14      	ldr	r3, [pc, #80]	; (2ad4 <adc_interface_read_pin+0x110>)
    2a82:	4798      	blx	r3
    2a84:	0003      	movs	r3, r0
    2a86:	2b05      	cmp	r3, #5
    2a88:	d104      	bne.n	2a94 <adc_interface_read_pin+0xd0>
    2a8a:	230e      	movs	r3, #14
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	881b      	ldrh	r3, [r3, #0]
    2a90:	2b13      	cmp	r3, #19
    2a92:	d9d0      	bls.n	2a36 <adc_interface_read_pin+0x72>

	return result;
    2a94:	230c      	movs	r3, #12
    2a96:	18fb      	adds	r3, r7, r3
    2a98:	881b      	ldrh	r3, [r3, #0]
    2a9a:	0018      	movs	r0, r3
    2a9c:	46bd      	mov	sp, r7
    2a9e:	b005      	add	sp, #20
    2aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	00007354 	.word	0x00007354
    2aa8:	2000004c 	.word	0x2000004c
    2aac:	43000c00 	.word	0x43000c00
    2ab0:	2000002c 	.word	0x2000002c
    2ab4:	000008b9 	.word	0x000008b9
    2ab8:	000028b5 	.word	0x000028b5
    2abc:	00004639 	.word	0x00004639
    2ac0:	000052e5 	.word	0x000052e5
    2ac4:	006acfbf 	.word	0x006acfbf
    2ac8:	000052a5 	.word	0x000052a5
    2acc:	006acfc0 	.word	0x006acfc0
    2ad0:	20000001 	.word	0x20000001
    2ad4:	000028fd 	.word	0x000028fd

00002ad8 <tc_is_syncing>:
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b084      	sub	sp, #16
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
    2ae6:	68fb      	ldr	r3, [r7, #12]
    2ae8:	691b      	ldr	r3, [r3, #16]
    2aea:	1e5a      	subs	r2, r3, #1
    2aec:	4193      	sbcs	r3, r2
    2aee:	b2db      	uxtb	r3, r3
}
    2af0:	0018      	movs	r0, r3
    2af2:	46bd      	mov	sp, r7
    2af4:	b004      	add	sp, #16
    2af6:	bd80      	pop	{r7, pc}

00002af8 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    2af8:	b580      	push	{r7, lr}
    2afa:	b082      	sub	sp, #8
    2afc:	af00      	add	r7, sp, #0
    2afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	2200      	movs	r2, #0
    2b04:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	2200      	movs	r2, #0
    2b0a:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	2200      	movs	r2, #0
    2b10:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	2200      	movs	r2, #0
    2b16:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	2200      	movs	r2, #0
    2b1c:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	2200      	movs	r2, #0
    2b22:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	2200      	movs	r2, #0
    2b28:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	2200      	movs	r2, #0
    2b2e:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	2200      	movs	r2, #0
    2b34:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	2200      	movs	r2, #0
    2b3a:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	2200      	movs	r2, #0
    2b40:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	2200      	movs	r2, #0
    2b46:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	2200      	movs	r2, #0
    2b4c:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	2200      	movs	r2, #0
    2b52:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	2200      	movs	r2, #0
    2b58:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	2200      	movs	r2, #0
    2b5e:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	2200      	movs	r2, #0
    2b64:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	2200      	movs	r2, #0
    2b6a:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	2200      	movs	r2, #0
    2b70:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	2200      	movs	r2, #0
    2b76:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	2200      	movs	r2, #0
    2b7c:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	2200      	movs	r2, #0
    2b82:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	2200      	movs	r2, #0
    2b88:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	2234      	movs	r2, #52	; 0x34
    2b8e:	2100      	movs	r1, #0
    2b90:	5499      	strb	r1, [r3, r2]
#endif

}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	46bd      	mov	sp, r7
    2b96:	b002      	add	sp, #8
    2b98:	bd80      	pop	{r7, pc}
	...

00002b9c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	0018      	movs	r0, r3
    2bb0:	4b06      	ldr	r3, [pc, #24]	; (2bcc <tc_enable+0x30>)
    2bb2:	4798      	blx	r3
    2bb4:	1e03      	subs	r3, r0, #0
    2bb6:	d1f9      	bne.n	2bac <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2bb8:	68fb      	ldr	r3, [r7, #12]
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	2202      	movs	r2, #2
    2bbe:	431a      	orrs	r2, r3
    2bc0:	68fb      	ldr	r3, [r7, #12]
    2bc2:	601a      	str	r2, [r3, #0]
}
    2bc4:	46c0      	nop			; (mov r8, r8)
    2bc6:	46bd      	mov	sp, r7
    2bc8:	b004      	add	sp, #16
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	00002ad9 	.word	0x00002ad9

00002bd0 <pwm_interface_init>:

  static struct tc_module module;
  static struct tc_config config;

  void pwm_interface_init(void)
  {
    2bd0:	b580      	push	{r7, lr}
    2bd2:	af00      	add	r7, sp, #0
	tc_get_config_defaults(&config);
    2bd4:	4b18      	ldr	r3, [pc, #96]	; (2c38 <pwm_interface_init+0x68>)
    2bd6:	0018      	movs	r0, r3
    2bd8:	4b18      	ldr	r3, [pc, #96]	; (2c3c <pwm_interface_init+0x6c>)
    2bda:	4798      	blx	r3
	config.counter_size = TC_COUNTER_SIZE_8BIT;
    2bdc:	4b16      	ldr	r3, [pc, #88]	; (2c38 <pwm_interface_init+0x68>)
    2bde:	2204      	movs	r2, #4
    2be0:	70da      	strb	r2, [r3, #3]
	config.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    2be2:	4b15      	ldr	r3, [pc, #84]	; (2c38 <pwm_interface_init+0x68>)
    2be4:	2202      	movs	r2, #2
    2be6:	719a      	strb	r2, [r3, #6]
	config.clock_source = GCLK_GENERATOR_0; // 4MHz
    2be8:	4b13      	ldr	r3, [pc, #76]	; (2c38 <pwm_interface_init+0x68>)
    2bea:	2200      	movs	r2, #0
    2bec:	701a      	strb	r2, [r3, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV1; // 4 MHz for ~16kHz PWM freq
    2bee:	4b12      	ldr	r3, [pc, #72]	; (2c38 <pwm_interface_init+0x68>)
    2bf0:	2200      	movs	r2, #0
    2bf2:	809a      	strh	r2, [r3, #4]

	config.counter_8_bit.compare_capture_channel[0] = 0; // start off
    2bf4:	4b10      	ldr	r3, [pc, #64]	; (2c38 <pwm_interface_init+0x68>)
    2bf6:	222a      	movs	r2, #42	; 0x2a
    2bf8:	2100      	movs	r1, #0
    2bfa:	5499      	strb	r1, [r3, r2]
	config.counter_8_bit.value = 0;
    2bfc:	4b0e      	ldr	r3, [pc, #56]	; (2c38 <pwm_interface_init+0x68>)
    2bfe:	2228      	movs	r2, #40	; 0x28
    2c00:	2100      	movs	r1, #0
    2c02:	5499      	strb	r1, [r3, r2]
	config.counter_8_bit.period = 255;
    2c04:	4b0c      	ldr	r3, [pc, #48]	; (2c38 <pwm_interface_init+0x68>)
    2c06:	2229      	movs	r2, #41	; 0x29
    2c08:	21ff      	movs	r1, #255	; 0xff
    2c0a:	5499      	strb	r1, [r3, r2]
	config.pwm_channel[0].enabled = true;
    2c0c:	4b0a      	ldr	r3, [pc, #40]	; (2c38 <pwm_interface_init+0x68>)
    2c0e:	2201      	movs	r2, #1
    2c10:	741a      	strb	r2, [r3, #16]
	config.pwm_channel[0].pin_out = D9_PIN;
    2c12:	4b09      	ldr	r3, [pc, #36]	; (2c38 <pwm_interface_init+0x68>)
    2c14:	2220      	movs	r2, #32
    2c16:	615a      	str	r2, [r3, #20]
	config.pwm_channel[0].pin_mux = D9_PIN_PWM_PINMUX;
    2c18:	4b07      	ldr	r3, [pc, #28]	; (2c38 <pwm_interface_init+0x68>)
    2c1a:	4a09      	ldr	r2, [pc, #36]	; (2c40 <pwm_interface_init+0x70>)
    2c1c:	619a      	str	r2, [r3, #24]

	tc_init(&module, TC3, &config);
    2c1e:	4a06      	ldr	r2, [pc, #24]	; (2c38 <pwm_interface_init+0x68>)
    2c20:	4908      	ldr	r1, [pc, #32]	; (2c44 <pwm_interface_init+0x74>)
    2c22:	4b09      	ldr	r3, [pc, #36]	; (2c48 <pwm_interface_init+0x78>)
    2c24:	0018      	movs	r0, r3
    2c26:	4b09      	ldr	r3, [pc, #36]	; (2c4c <pwm_interface_init+0x7c>)
    2c28:	4798      	blx	r3

	tc_enable(&module);
    2c2a:	4b07      	ldr	r3, [pc, #28]	; (2c48 <pwm_interface_init+0x78>)
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b08      	ldr	r3, [pc, #32]	; (2c50 <pwm_interface_init+0x80>)
    2c30:	4798      	blx	r3
  }
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}
    2c38:	20000094 	.word	0x20000094
    2c3c:	00002af9 	.word	0x00002af9
    2c40:	00200004 	.word	0x00200004
    2c44:	42002c00 	.word	0x42002c00
    2c48:	20000078 	.word	0x20000078
    2c4c:	000021ad 	.word	0x000021ad
    2c50:	00002b9d 	.word	0x00002b9d

00002c54 <pwm_write>:

  void pwm_write(uint32_t val)
  {
    2c54:	b580      	push	{r7, lr}
    2c56:	b082      	sub	sp, #8
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
	tc_set_compare_value(&module, TC_COMPARE_CAPTURE_CHANNEL_0, val);
    2c5c:	687a      	ldr	r2, [r7, #4]
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <pwm_write+0x1c>)
    2c60:	2100      	movs	r1, #0
    2c62:	0018      	movs	r0, r3
    2c64:	4b03      	ldr	r3, [pc, #12]	; (2c74 <pwm_write+0x20>)
    2c66:	4798      	blx	r3
    2c68:	46c0      	nop			; (mov r8, r8)
    2c6a:	46bd      	mov	sp, r7
    2c6c:	b002      	add	sp, #8
    2c6e:	bd80      	pop	{r7, pc}
    2c70:	20000078 	.word	0x20000078
    2c74:	00002655 	.word	0x00002655

00002c78 <system_set_sleepmode>:
 *
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b082      	sub	sp, #8
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	0002      	movs	r2, r0
    2c80:	1dfb      	adds	r3, r7, #7
    2c82:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
    2c84:	2380      	movs	r3, #128	; 0x80
    2c86:	05db      	lsls	r3, r3, #23
    2c88:	1dfa      	adds	r2, r7, #7
    2c8a:	7812      	ldrb	r2, [r2, #0]
    2c8c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	2380      	movs	r3, #128	; 0x80
    2c92:	05db      	lsls	r3, r3, #23
    2c94:	785b      	ldrb	r3, [r3, #1]
    2c96:	b2db      	uxtb	r3, r3
    2c98:	1dfa      	adds	r2, r7, #7
    2c9a:	7812      	ldrb	r2, [r2, #0]
    2c9c:	429a      	cmp	r2, r3
    2c9e:	d1f7      	bne.n	2c90 <system_set_sleepmode+0x18>
}
    2ca0:	46c0      	nop			; (mov r8, r8)
    2ca2:	46bd      	mov	sp, r7
    2ca4:	b002      	add	sp, #8
    2ca6:	bd80      	pop	{r7, pc}

00002ca8 <system_sleep>:
 * all ongoing memory accesses have completed. Further, a WFI (Wait For Interrupt)
 * instruction is executed to place the device into the sleep mode specified by
 * \ref system_set_sleepmode.
 */
static inline void system_sleep(void)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2cb0:	bf30      	wfi
	__DSB();
	__WFI();
}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	46bd      	mov	sp, r7
    2cb6:	bd80      	pop	{r7, pc}

00002cb8 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b084      	sub	sp, #16
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	22b0      	movs	r2, #176	; 0xb0
    2cc4:	0112      	lsls	r2, r2, #4
    2cc6:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	2201      	movs	r2, #1
    2ccc:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	2200      	movs	r2, #0
    2cd2:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	2201      	movs	r2, #1
    2cd8:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2cda:	230f      	movs	r3, #15
    2cdc:	18fb      	adds	r3, r7, r3
    2cde:	2200      	movs	r2, #0
    2ce0:	701a      	strb	r2, [r3, #0]
    2ce2:	e00e      	b.n	2d02 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    2ce4:	230f      	movs	r3, #15
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	781a      	ldrb	r2, [r3, #0]
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	3202      	adds	r2, #2
    2cee:	0092      	lsls	r2, r2, #2
    2cf0:	2100      	movs	r1, #0
    2cf2:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2cf4:	230f      	movs	r3, #15
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	781a      	ldrb	r2, [r3, #0]
    2cfa:	230f      	movs	r3, #15
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	3201      	adds	r2, #1
    2d00:	701a      	strb	r2, [r3, #0]
    2d02:	230f      	movs	r3, #15
    2d04:	18fb      	adds	r3, r7, r3
    2d06:	781b      	ldrb	r3, [r3, #0]
    2d08:	2b01      	cmp	r3, #1
    2d0a:	d9eb      	bls.n	2ce4 <rtc_count_get_config_defaults+0x2c>
	}
}
    2d0c:	46c0      	nop			; (mov r8, r8)
    2d0e:	46bd      	mov	sp, r7
    2d10:	b004      	add	sp, #16
    2d12:	bd80      	pop	{r7, pc}

00002d14 <rtc_callback>:
 #include "rtc_interface.h"

 static struct rtc_module module;

 static void rtc_callback(void)
 {
    2d14:	b580      	push	{r7, lr}
    2d16:	af00      	add	r7, sp, #0
	// TODO do anything else?
	rtc_count_disable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    2d18:	4b03      	ldr	r3, [pc, #12]	; (2d28 <rtc_callback+0x14>)
    2d1a:	2108      	movs	r1, #8
    2d1c:	0018      	movs	r0, r3
    2d1e:	4b03      	ldr	r3, [pc, #12]	; (2d2c <rtc_callback+0x18>)
    2d20:	4798      	blx	r3
 }
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	46bd      	mov	sp, r7
    2d26:	bd80      	pop	{r7, pc}
    2d28:	200000cc 	.word	0x200000cc
    2d2c:	000011c9 	.word	0x000011c9

00002d30 <rtc_init>:

 void rtc_init(void)
 {
    2d30:	b580      	push	{r7, lr}
    2d32:	b084      	sub	sp, #16
    2d34:	af00      	add	r7, sp, #0
	// Uses 1.024kHz from ULP32K clock
	struct rtc_count_config config;
	rtc_count_get_config_defaults(&config);
    2d36:	003b      	movs	r3, r7
    2d38:	0018      	movs	r0, r3
    2d3a:	4b0f      	ldr	r3, [pc, #60]	; (2d78 <rtc_init+0x48>)
    2d3c:	4798      	blx	r3
	config.prescaler = RTC_COUNT_PRESCALER_OFF; // 1.024kHz clock
    2d3e:	003b      	movs	r3, r7
    2d40:	2200      	movs	r2, #0
    2d42:	801a      	strh	r2, [r3, #0]
	
	rtc_count_init(&module, RTC, &config);
    2d44:	003a      	movs	r2, r7
    2d46:	490d      	ldr	r1, [pc, #52]	; (2d7c <rtc_init+0x4c>)
    2d48:	4b0d      	ldr	r3, [pc, #52]	; (2d80 <rtc_init+0x50>)
    2d4a:	0018      	movs	r0, r3
    2d4c:	4b0d      	ldr	r3, [pc, #52]	; (2d84 <rtc_init+0x54>)
    2d4e:	4798      	blx	r3
	rtc_count_set_count(&module, 0);
    2d50:	4b0b      	ldr	r3, [pc, #44]	; (2d80 <rtc_init+0x50>)
    2d52:	2100      	movs	r1, #0
    2d54:	0018      	movs	r0, r3
    2d56:	4b0c      	ldr	r3, [pc, #48]	; (2d88 <rtc_init+0x58>)
    2d58:	4798      	blx	r3
	rtc_count_enable(&module);
    2d5a:	4b09      	ldr	r3, [pc, #36]	; (2d80 <rtc_init+0x50>)
    2d5c:	0018      	movs	r0, r3
    2d5e:	4b0b      	ldr	r3, [pc, #44]	; (2d8c <rtc_init+0x5c>)
    2d60:	4798      	blx	r3

	rtc_count_register_callback(&module, rtc_callback, RTC_COUNT_CALLBACK_COMPARE_0);
    2d62:	490b      	ldr	r1, [pc, #44]	; (2d90 <rtc_init+0x60>)
    2d64:	4b06      	ldr	r3, [pc, #24]	; (2d80 <rtc_init+0x50>)
    2d66:	2208      	movs	r2, #8
    2d68:	0018      	movs	r0, r3
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <rtc_init+0x64>)
    2d6c:	4798      	blx	r3
 }
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	46bd      	mov	sp, r7
    2d72:	b004      	add	sp, #16
    2d74:	bd80      	pop	{r7, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00002cb9 	.word	0x00002cb9
    2d7c:	40002000 	.word	0x40002000
    2d80:	200000cc 	.word	0x200000cc
    2d84:	00000ed1 	.word	0x00000ed1
    2d88:	00000f35 	.word	0x00000f35
    2d8c:	00000cbd 	.word	0x00000cbd
    2d90:	00002d15 	.word	0x00002d15
    2d94:	00001089 	.word	0x00001089

00002d98 <rtc_idle_delay>:

 void rtc_idle_delay(uint32_t sleep_ms)
 {
    2d98:	b580      	push	{r7, lr}
    2d9a:	b084      	sub	sp, #16
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    2da0:	4b0e      	ldr	r3, [pc, #56]	; (2ddc <rtc_idle_delay+0x44>)
    2da2:	0018      	movs	r0, r3
    2da4:	4b0e      	ldr	r3, [pc, #56]	; (2de0 <rtc_idle_delay+0x48>)
    2da6:	4798      	blx	r3
    2da8:	0003      	movs	r3, r0
    2daa:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    2dac:	68fa      	ldr	r2, [r7, #12]
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	18d3      	adds	r3, r2, r3
    2db2:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    2db4:	68b9      	ldr	r1, [r7, #8]
    2db6:	4b09      	ldr	r3, [pc, #36]	; (2ddc <rtc_idle_delay+0x44>)
    2db8:	2200      	movs	r2, #0
    2dba:	0018      	movs	r0, r3
    2dbc:	4b09      	ldr	r3, [pc, #36]	; (2de4 <rtc_idle_delay+0x4c>)
    2dbe:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    2dc0:	4b06      	ldr	r3, [pc, #24]	; (2ddc <rtc_idle_delay+0x44>)
    2dc2:	2108      	movs	r1, #8
    2dc4:	0018      	movs	r0, r3
    2dc6:	4b08      	ldr	r3, [pc, #32]	; (2de8 <rtc_idle_delay+0x50>)
    2dc8:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
    2dca:	2002      	movs	r0, #2
    2dcc:	4b07      	ldr	r3, [pc, #28]	; (2dec <rtc_idle_delay+0x54>)
    2dce:	4798      	blx	r3
	system_sleep();
    2dd0:	4b07      	ldr	r3, [pc, #28]	; (2df0 <rtc_idle_delay+0x58>)
    2dd2:	4798      	blx	r3
 }
    2dd4:	46c0      	nop			; (mov r8, r8)
    2dd6:	46bd      	mov	sp, r7
    2dd8:	b004      	add	sp, #16
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	200000cc 	.word	0x200000cc
    2de0:	00000fa1 	.word	0x00000fa1
    2de4:	00000ff1 	.word	0x00000ff1
    2de8:	0000113d 	.word	0x0000113d
    2dec:	00002c79 	.word	0x00002c79
    2df0:	00002ca9 	.word	0x00002ca9

00002df4 <rtc_standby_delay>:

 void rtc_standby_delay(uint32_t sleep_ms)
 {
    2df4:	b580      	push	{r7, lr}
    2df6:	b084      	sub	sp, #16
    2df8:	af00      	add	r7, sp, #0
    2dfa:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    2dfc:	4b0e      	ldr	r3, [pc, #56]	; (2e38 <rtc_standby_delay+0x44>)
    2dfe:	0018      	movs	r0, r3
    2e00:	4b0e      	ldr	r3, [pc, #56]	; (2e3c <rtc_standby_delay+0x48>)
    2e02:	4798      	blx	r3
    2e04:	0003      	movs	r3, r0
    2e06:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    2e08:	68fa      	ldr	r2, [r7, #12]
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	18d3      	adds	r3, r2, r3
    2e0e:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    2e10:	68b9      	ldr	r1, [r7, #8]
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <rtc_standby_delay+0x44>)
    2e14:	2200      	movs	r2, #0
    2e16:	0018      	movs	r0, r3
    2e18:	4b09      	ldr	r3, [pc, #36]	; (2e40 <rtc_standby_delay+0x4c>)
    2e1a:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    2e1c:	4b06      	ldr	r3, [pc, #24]	; (2e38 <rtc_standby_delay+0x44>)
    2e1e:	2108      	movs	r1, #8
    2e20:	0018      	movs	r0, r3
    2e22:	4b08      	ldr	r3, [pc, #32]	; (2e44 <rtc_standby_delay+0x50>)
    2e24:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
    2e26:	2004      	movs	r0, #4
    2e28:	4b07      	ldr	r3, [pc, #28]	; (2e48 <rtc_standby_delay+0x54>)
    2e2a:	4798      	blx	r3
	system_sleep();
    2e2c:	4b07      	ldr	r3, [pc, #28]	; (2e4c <rtc_standby_delay+0x58>)
    2e2e:	4798      	blx	r3
    2e30:	46c0      	nop			; (mov r8, r8)
    2e32:	46bd      	mov	sp, r7
    2e34:	b004      	add	sp, #16
    2e36:	bd80      	pop	{r7, pc}
    2e38:	200000cc 	.word	0x200000cc
    2e3c:	00000fa1 	.word	0x00000fa1
    2e40:	00000ff1 	.word	0x00000ff1
    2e44:	0000113d 	.word	0x0000113d
    2e48:	00002c79 	.word	0x00002c79
    2e4c:	00002ca9 	.word	0x00002ca9

00002e50 <bmp280_write_configuration>:
 * \brief Configure Bosch BMP280 registers.
 *
 * \param config Pointer to BMP280 configuration object
 */
static void bmp280_write_configuration(const bmp280_config_t * config)
{
    2e50:	b590      	push	{r4, r7, lr}
    2e52:	b085      	sub	sp, #20
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
    // Sensor configuration register.
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    2e58:	687b      	ldr	r3, [r7, #4]
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	075b      	lsls	r3, r3, #29
    2e5e:	0f5b      	lsrs	r3, r3, #29
    2e60:	b2db      	uxtb	r3, r3
    2e62:	015b      	lsls	r3, r3, #5
    2e64:	b25a      	sxtb	r2, r3
                   ((config->filter & 0x07) << 2) |
    2e66:	687b      	ldr	r3, [r7, #4]
    2e68:	781b      	ldrb	r3, [r3, #0]
    2e6a:	069b      	lsls	r3, r3, #26
    2e6c:	0f5b      	lsrs	r3, r3, #29
    2e6e:	b2db      	uxtb	r3, r3
    2e70:	009b      	lsls	r3, r3, #2
    2e72:	b25b      	sxtb	r3, r3
    2e74:	211c      	movs	r1, #28
    2e76:	400b      	ands	r3, r1
    2e78:	b25b      	sxtb	r3, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    2e7a:	4313      	orrs	r3, r2
    2e7c:	b25a      	sxtb	r2, r3
                   (config->spi3w_en & 0x01);
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	065b      	lsls	r3, r3, #25
    2e84:	0fdb      	lsrs	r3, r3, #31
    2e86:	b2db      	uxtb	r3, r3
    2e88:	b25b      	sxtb	r3, r3
    2e8a:	2101      	movs	r1, #1
    2e8c:	400b      	ands	r3, r1
    2e8e:	b25b      	sxtb	r3, r3
                   ((config->filter & 0x07) << 2) |
    2e90:	4313      	orrs	r3, r2
    2e92:	b25b      	sxtb	r3, r3
    2e94:	b2da      	uxtb	r2, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    2e96:	230f      	movs	r3, #15
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CONFIG);
    2e9c:	230f      	movs	r3, #15
    2e9e:	18f8      	adds	r0, r7, r3
    2ea0:	23f5      	movs	r3, #245	; 0xf5
    2ea2:	2276      	movs	r2, #118	; 0x76
    2ea4:	2101      	movs	r1, #1
    2ea6:	4c17      	ldr	r4, [pc, #92]	; (2f04 <bmp280_write_configuration+0xb4>)
    2ea8:	47a0      	blx	r4

    // Measurement control configuration register.
    temp = ((config->osrs_t & 0x07) << 5) |
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	785b      	ldrb	r3, [r3, #1]
    2eae:	075b      	lsls	r3, r3, #29
    2eb0:	0f5b      	lsrs	r3, r3, #29
    2eb2:	b2db      	uxtb	r3, r3
    2eb4:	015b      	lsls	r3, r3, #5
    2eb6:	b25a      	sxtb	r2, r3
           ((config->osrs_p & 0x07) << 2) |
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	785b      	ldrb	r3, [r3, #1]
    2ebc:	069b      	lsls	r3, r3, #26
    2ebe:	0f5b      	lsrs	r3, r3, #29
    2ec0:	b2db      	uxtb	r3, r3
    2ec2:	009b      	lsls	r3, r3, #2
    2ec4:	b25b      	sxtb	r3, r3
    2ec6:	211c      	movs	r1, #28
    2ec8:	400b      	ands	r3, r1
    2eca:	b25b      	sxtb	r3, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    2ecc:	4313      	orrs	r3, r2
    2ece:	b25a      	sxtb	r2, r3
           (config->mode & 0x03);
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	785b      	ldrb	r3, [r3, #1]
    2ed4:	061b      	lsls	r3, r3, #24
    2ed6:	0f9b      	lsrs	r3, r3, #30
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	b25b      	sxtb	r3, r3
    2edc:	2103      	movs	r1, #3
    2ede:	400b      	ands	r3, r1
    2ee0:	b25b      	sxtb	r3, r3
           ((config->osrs_p & 0x07) << 2) |
    2ee2:	4313      	orrs	r3, r2
    2ee4:	b25b      	sxtb	r3, r3
    2ee6:	b2da      	uxtb	r2, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    2ee8:	230f      	movs	r3, #15
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CTRL_MEAS);
    2eee:	230f      	movs	r3, #15
    2ef0:	18f8      	adds	r0, r7, r3
    2ef2:	23f4      	movs	r3, #244	; 0xf4
    2ef4:	2276      	movs	r2, #118	; 0x76
    2ef6:	2101      	movs	r1, #1
    2ef8:	4c02      	ldr	r4, [pc, #8]	; (2f04 <bmp280_write_configuration+0xb4>)
    2efa:	47a0      	blx	r4
}
    2efc:	46c0      	nop			; (mov r8, r8)
    2efe:	46bd      	mov	sp, r7
    2f00:	b005      	add	sp, #20
    2f02:	bd90      	pop	{r4, r7, pc}
    2f04:	000037a5 	.word	0x000037a5

00002f08 <unpack_uint16>:

static uint16_t unpack_uint16(uint8_t * data)
{
    2f08:	b580      	push	{r7, lr}
    2f0a:	b084      	sub	sp, #16
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	6078      	str	r0, [r7, #4]
	uint16_t val = 0;
    2f10:	230e      	movs	r3, #14
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	2200      	movs	r2, #0
    2f16:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	b21a      	sxth	r2, r3
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	3301      	adds	r3, #1
    2f22:	781b      	ldrb	r3, [r3, #0]
    2f24:	021b      	lsls	r3, r3, #8
    2f26:	b21b      	sxth	r3, r3
    2f28:	4313      	orrs	r3, r2
    2f2a:	b21a      	sxth	r2, r3
    2f2c:	230e      	movs	r3, #14
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	2100      	movs	r1, #0
    2f32:	5e5b      	ldrsh	r3, [r3, r1]
    2f34:	4313      	orrs	r3, r2
    2f36:	b21a      	sxth	r2, r3
    2f38:	230e      	movs	r3, #14
    2f3a:	18fb      	adds	r3, r7, r3
    2f3c:	801a      	strh	r2, [r3, #0]
	return val;
    2f3e:	230e      	movs	r3, #14
    2f40:	18fb      	adds	r3, r7, r3
    2f42:	881b      	ldrh	r3, [r3, #0]
}
    2f44:	0018      	movs	r0, r3
    2f46:	46bd      	mov	sp, r7
    2f48:	b004      	add	sp, #16
    2f4a:	bd80      	pop	{r7, pc}

00002f4c <unpack_int16>:

static int16_t unpack_int16(uint8_t * data)
{
    2f4c:	b580      	push	{r7, lr}
    2f4e:	b084      	sub	sp, #16
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
	int16_t val = 0;
    2f54:	230e      	movs	r3, #14
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	2200      	movs	r2, #0
    2f5a:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	781b      	ldrb	r3, [r3, #0]
    2f60:	b21a      	sxth	r2, r3
    2f62:	687b      	ldr	r3, [r7, #4]
    2f64:	3301      	adds	r3, #1
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	021b      	lsls	r3, r3, #8
    2f6a:	b21b      	sxth	r3, r3
    2f6c:	4313      	orrs	r3, r2
    2f6e:	b219      	sxth	r1, r3
    2f70:	230e      	movs	r3, #14
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	220e      	movs	r2, #14
    2f76:	18ba      	adds	r2, r7, r2
    2f78:	8812      	ldrh	r2, [r2, #0]
    2f7a:	430a      	orrs	r2, r1
    2f7c:	801a      	strh	r2, [r3, #0]
	return val;
    2f7e:	230e      	movs	r3, #14
    2f80:	18fb      	adds	r3, r7, r3
    2f82:	2200      	movs	r2, #0
    2f84:	5e9b      	ldrsh	r3, [r3, r2]
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
	...

00002f90 <init_bmp280>:

/*!
 * \brief Basic initialization function for Bosch BMP280 pressure/temperature sensor.
 */
void init_bmp280(void)
{
    2f90:	b590      	push	{r4, r7, lr}
    2f92:	b089      	sub	sp, #36	; 0x24
    2f94:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    2f96:	231f      	movs	r3, #31
    2f98:	18fb      	adds	r3, r7, r3
    2f9a:	2200      	movs	r2, #0
    2f9c:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, BMP280_I2C_ADDR, BMP280_REG_ID);
    2f9e:	231f      	movs	r3, #31
    2fa0:	18f8      	adds	r0, r7, r3
    2fa2:	23d0      	movs	r3, #208	; 0xd0
    2fa4:	2276      	movs	r2, #118	; 0x76
    2fa6:	2101      	movs	r1, #1
    2fa8:	4c49      	ldr	r4, [pc, #292]	; (30d0 <init_bmp280+0x140>)
    2faa:	47a0      	blx	r4
	if (me != BMP280_CHIP_ID)
    2fac:	231f      	movs	r3, #31
    2fae:	18fb      	adds	r3, r7, r3
    2fb0:	781b      	ldrb	r3, [r3, #0]
    2fb2:	2b58      	cmp	r3, #88	; 0x58
    2fb4:	d000      	beq.n	2fb8 <init_bmp280+0x28>
    2fb6:	e086      	b.n	30c6 <init_bmp280+0x136>
    {
        return;
    }

    // Read calibration data if not done already.
	if(bmp280_cal_data.dig_T1 == 0)
    2fb8:	4b46      	ldr	r3, [pc, #280]	; (30d4 <init_bmp280+0x144>)
    2fba:	881b      	ldrh	r3, [r3, #0]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d177      	bne.n	30b0 <init_bmp280+0x120>
	{
		uint8_t temp[24] = {0};
    2fc0:	1d3b      	adds	r3, r7, #4
    2fc2:	0018      	movs	r0, r3
    2fc4:	2318      	movs	r3, #24
    2fc6:	001a      	movs	r2, r3
    2fc8:	2100      	movs	r1, #0
    2fca:	4b43      	ldr	r3, [pc, #268]	; (30d8 <init_bmp280+0x148>)
    2fcc:	4798      	blx	r3
		i2c_read_bytes(temp, 24, BMP280_I2C_ADDR, 0x88);
    2fce:	1d38      	adds	r0, r7, #4
    2fd0:	2388      	movs	r3, #136	; 0x88
    2fd2:	2276      	movs	r2, #118	; 0x76
    2fd4:	2118      	movs	r1, #24
    2fd6:	4c3e      	ldr	r4, [pc, #248]	; (30d0 <init_bmp280+0x140>)
    2fd8:	47a0      	blx	r4

		// Parse calibration data.
		bmp280_cal_data.dig_T1 = unpack_uint16(&temp[0]);
    2fda:	1d3b      	adds	r3, r7, #4
    2fdc:	0018      	movs	r0, r3
    2fde:	4b3f      	ldr	r3, [pc, #252]	; (30dc <init_bmp280+0x14c>)
    2fe0:	4798      	blx	r3
    2fe2:	0003      	movs	r3, r0
    2fe4:	001a      	movs	r2, r3
    2fe6:	4b3b      	ldr	r3, [pc, #236]	; (30d4 <init_bmp280+0x144>)
    2fe8:	801a      	strh	r2, [r3, #0]
		bmp280_cal_data.dig_T2 = unpack_int16(&temp[2]);
    2fea:	1d3b      	adds	r3, r7, #4
    2fec:	3302      	adds	r3, #2
    2fee:	0018      	movs	r0, r3
    2ff0:	4b3b      	ldr	r3, [pc, #236]	; (30e0 <init_bmp280+0x150>)
    2ff2:	4798      	blx	r3
    2ff4:	0003      	movs	r3, r0
    2ff6:	001a      	movs	r2, r3
    2ff8:	4b36      	ldr	r3, [pc, #216]	; (30d4 <init_bmp280+0x144>)
    2ffa:	805a      	strh	r2, [r3, #2]
		bmp280_cal_data.dig_T3 = unpack_int16(&temp[4]);
    2ffc:	1d3b      	adds	r3, r7, #4
    2ffe:	3304      	adds	r3, #4
    3000:	0018      	movs	r0, r3
    3002:	4b37      	ldr	r3, [pc, #220]	; (30e0 <init_bmp280+0x150>)
    3004:	4798      	blx	r3
    3006:	0003      	movs	r3, r0
    3008:	001a      	movs	r2, r3
    300a:	4b32      	ldr	r3, [pc, #200]	; (30d4 <init_bmp280+0x144>)
    300c:	809a      	strh	r2, [r3, #4]
		bmp280_cal_data.dig_P1 = unpack_uint16(&temp[6]);
    300e:	1d3b      	adds	r3, r7, #4
    3010:	3306      	adds	r3, #6
    3012:	0018      	movs	r0, r3
    3014:	4b31      	ldr	r3, [pc, #196]	; (30dc <init_bmp280+0x14c>)
    3016:	4798      	blx	r3
    3018:	0003      	movs	r3, r0
    301a:	001a      	movs	r2, r3
    301c:	4b2d      	ldr	r3, [pc, #180]	; (30d4 <init_bmp280+0x144>)
    301e:	80da      	strh	r2, [r3, #6]
		bmp280_cal_data.dig_P2 = unpack_int16(&temp[8]);
    3020:	1d3b      	adds	r3, r7, #4
    3022:	3308      	adds	r3, #8
    3024:	0018      	movs	r0, r3
    3026:	4b2e      	ldr	r3, [pc, #184]	; (30e0 <init_bmp280+0x150>)
    3028:	4798      	blx	r3
    302a:	0003      	movs	r3, r0
    302c:	001a      	movs	r2, r3
    302e:	4b29      	ldr	r3, [pc, #164]	; (30d4 <init_bmp280+0x144>)
    3030:	811a      	strh	r2, [r3, #8]
		bmp280_cal_data.dig_P3 = unpack_int16(&temp[10]);
    3032:	1d3b      	adds	r3, r7, #4
    3034:	330a      	adds	r3, #10
    3036:	0018      	movs	r0, r3
    3038:	4b29      	ldr	r3, [pc, #164]	; (30e0 <init_bmp280+0x150>)
    303a:	4798      	blx	r3
    303c:	0003      	movs	r3, r0
    303e:	001a      	movs	r2, r3
    3040:	4b24      	ldr	r3, [pc, #144]	; (30d4 <init_bmp280+0x144>)
    3042:	815a      	strh	r2, [r3, #10]
		bmp280_cal_data.dig_P4 = unpack_int16(&temp[12]);
    3044:	1d3b      	adds	r3, r7, #4
    3046:	330c      	adds	r3, #12
    3048:	0018      	movs	r0, r3
    304a:	4b25      	ldr	r3, [pc, #148]	; (30e0 <init_bmp280+0x150>)
    304c:	4798      	blx	r3
    304e:	0003      	movs	r3, r0
    3050:	001a      	movs	r2, r3
    3052:	4b20      	ldr	r3, [pc, #128]	; (30d4 <init_bmp280+0x144>)
    3054:	819a      	strh	r2, [r3, #12]
		bmp280_cal_data.dig_P5 = unpack_int16(&temp[14]);
    3056:	1d3b      	adds	r3, r7, #4
    3058:	330e      	adds	r3, #14
    305a:	0018      	movs	r0, r3
    305c:	4b20      	ldr	r3, [pc, #128]	; (30e0 <init_bmp280+0x150>)
    305e:	4798      	blx	r3
    3060:	0003      	movs	r3, r0
    3062:	001a      	movs	r2, r3
    3064:	4b1b      	ldr	r3, [pc, #108]	; (30d4 <init_bmp280+0x144>)
    3066:	81da      	strh	r2, [r3, #14]
		bmp280_cal_data.dig_P6 = unpack_int16(&temp[16]);
    3068:	1d3b      	adds	r3, r7, #4
    306a:	3310      	adds	r3, #16
    306c:	0018      	movs	r0, r3
    306e:	4b1c      	ldr	r3, [pc, #112]	; (30e0 <init_bmp280+0x150>)
    3070:	4798      	blx	r3
    3072:	0003      	movs	r3, r0
    3074:	001a      	movs	r2, r3
    3076:	4b17      	ldr	r3, [pc, #92]	; (30d4 <init_bmp280+0x144>)
    3078:	821a      	strh	r2, [r3, #16]
		bmp280_cal_data.dig_P7 = unpack_int16(&temp[18]);
    307a:	1d3b      	adds	r3, r7, #4
    307c:	3312      	adds	r3, #18
    307e:	0018      	movs	r0, r3
    3080:	4b17      	ldr	r3, [pc, #92]	; (30e0 <init_bmp280+0x150>)
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
    3086:	001a      	movs	r2, r3
    3088:	4b12      	ldr	r3, [pc, #72]	; (30d4 <init_bmp280+0x144>)
    308a:	825a      	strh	r2, [r3, #18]
		bmp280_cal_data.dig_P8 = unpack_int16(&temp[20]);
    308c:	1d3b      	adds	r3, r7, #4
    308e:	3314      	adds	r3, #20
    3090:	0018      	movs	r0, r3
    3092:	4b13      	ldr	r3, [pc, #76]	; (30e0 <init_bmp280+0x150>)
    3094:	4798      	blx	r3
    3096:	0003      	movs	r3, r0
    3098:	001a      	movs	r2, r3
    309a:	4b0e      	ldr	r3, [pc, #56]	; (30d4 <init_bmp280+0x144>)
    309c:	829a      	strh	r2, [r3, #20]
		bmp280_cal_data.dig_P9 = unpack_int16(&temp[22]);
    309e:	1d3b      	adds	r3, r7, #4
    30a0:	3316      	adds	r3, #22
    30a2:	0018      	movs	r0, r3
    30a4:	4b0e      	ldr	r3, [pc, #56]	; (30e0 <init_bmp280+0x150>)
    30a6:	4798      	blx	r3
    30a8:	0003      	movs	r3, r0
    30aa:	001a      	movs	r2, r3
    30ac:	4b09      	ldr	r3, [pc, #36]	; (30d4 <init_bmp280+0x144>)
    30ae:	82da      	strh	r2, [r3, #22]
	}

	// Configure barometer in forced mode (1 sample then sleep), 1x oversample on both for <6.4ms measurement time,
	// no filter
    bmp280_config_t config = {
    30b0:	231c      	movs	r3, #28
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	4a0b      	ldr	r2, [pc, #44]	; (30e4 <init_bmp280+0x154>)
    30b6:	8812      	ldrh	r2, [r2, #0]
    30b8:	801a      	strh	r2, [r3, #0]
        .spi3w_en   = BMP280_SPI_4_WIRE,
        .osrs_t     = BMP280_TEMP_OSRS_x1,
        .osrs_p     = BMP280_PRES_OSRS_x1,
        .mode       = BMP280_MODE_FORCED,
    };
    bmp280_write_configuration(&config);
    30ba:	231c      	movs	r3, #28
    30bc:	18fb      	adds	r3, r7, r3
    30be:	0018      	movs	r0, r3
    30c0:	4b09      	ldr	r3, [pc, #36]	; (30e8 <init_bmp280+0x158>)
    30c2:	4798      	blx	r3
    30c4:	e000      	b.n	30c8 <init_bmp280+0x138>
        return;
    30c6:	46c0      	nop			; (mov r8, r8)
}
    30c8:	46bd      	mov	sp, r7
    30ca:	b009      	add	sp, #36	; 0x24
    30cc:	bd90      	pop	{r4, r7, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	000038d5 	.word	0x000038d5
    30d4:	20000104 	.word	0x20000104
    30d8:	0000717b 	.word	0x0000717b
    30dc:	00002f09 	.word	0x00002f09
    30e0:	00002f4d 	.word	0x00002f4d
    30e4:	000073fc 	.word	0x000073fc
    30e8:	00002e51 	.word	0x00002e51

000030ec <bmp280_compensate_T_int32>:
	
/*!
 * \brief Temperature compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b086      	sub	sp, #24
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	10da      	asrs	r2, r3, #3
    30f8:	4b16      	ldr	r3, [pc, #88]	; (3154 <bmp280_compensate_T_int32+0x68>)
    30fa:	881b      	ldrh	r3, [r3, #0]
    30fc:	005b      	lsls	r3, r3, #1
    30fe:	1ad3      	subs	r3, r2, r3
            ((int32_t)bmp280_cal_data.dig_T2)) >> 11;
    3100:	4a14      	ldr	r2, [pc, #80]	; (3154 <bmp280_compensate_T_int32+0x68>)
    3102:	2102      	movs	r1, #2
    3104:	5e52      	ldrsh	r2, [r2, r1]
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    3106:	4353      	muls	r3, r2
    3108:	12db      	asrs	r3, r3, #11
    310a:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	111b      	asrs	r3, r3, #4
    3110:	4a10      	ldr	r2, [pc, #64]	; (3154 <bmp280_compensate_T_int32+0x68>)
    3112:	8812      	ldrh	r2, [r2, #0]
    3114:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    3116:	687a      	ldr	r2, [r7, #4]
    3118:	1112      	asrs	r2, r2, #4
    311a:	490e      	ldr	r1, [pc, #56]	; (3154 <bmp280_compensate_T_int32+0x68>)
    311c:	8809      	ldrh	r1, [r1, #0]
    311e:	1a52      	subs	r2, r2, r1
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    3120:	4353      	muls	r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    3122:	131b      	asrs	r3, r3, #12
            ((int32_t)bmp280_cal_data.dig_T3)) >> 14;
    3124:	4a0b      	ldr	r2, [pc, #44]	; (3154 <bmp280_compensate_T_int32+0x68>)
    3126:	2104      	movs	r1, #4
    3128:	5e52      	ldrsh	r2, [r2, r1]
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    312a:	4353      	muls	r3, r2
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    312c:	139b      	asrs	r3, r3, #14
    312e:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
    3130:	697a      	ldr	r2, [r7, #20]
    3132:	693b      	ldr	r3, [r7, #16]
    3134:	18d2      	adds	r2, r2, r3
    3136:	4b08      	ldr	r3, [pc, #32]	; (3158 <bmp280_compensate_T_int32+0x6c>)
    3138:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
    313a:	4b07      	ldr	r3, [pc, #28]	; (3158 <bmp280_compensate_T_int32+0x6c>)
    313c:	681a      	ldr	r2, [r3, #0]
    313e:	0013      	movs	r3, r2
    3140:	009b      	lsls	r3, r3, #2
    3142:	189b      	adds	r3, r3, r2
    3144:	3380      	adds	r3, #128	; 0x80
    3146:	121b      	asrs	r3, r3, #8
    3148:	60fb      	str	r3, [r7, #12]
    return T;
    314a:	68fb      	ldr	r3, [r7, #12]
}
    314c:	0018      	movs	r0, r3
    314e:	46bd      	mov	sp, r7
    3150:	b006      	add	sp, #24
    3152:	bd80      	pop	{r7, pc}
    3154:	20000104 	.word	0x20000104
    3158:	2000011c 	.word	0x2000011c

0000315c <bmp280_compensate_P_int32>:

/*!
 * \brief Pressure compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
    315c:	b5f0      	push	{r4, r5, r6, r7, lr}
    315e:	b0ab      	sub	sp, #172	; 0xac
    3160:	af00      	add	r7, sp, #0
    3162:	238c      	movs	r3, #140	; 0x8c
    3164:	18fb      	adds	r3, r7, r3
    3166:	6018      	str	r0, [r3, #0]
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
    3168:	4bd0      	ldr	r3, [pc, #832]	; (34ac <bmp280_compensate_P_int32+0x350>)
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	0019      	movs	r1, r3
    316e:	17db      	asrs	r3, r3, #31
    3170:	001a      	movs	r2, r3
    3172:	4bcf      	ldr	r3, [pc, #828]	; (34b0 <bmp280_compensate_P_int32+0x354>)
    3174:	2401      	movs	r4, #1
    3176:	4264      	negs	r4, r4
    3178:	185b      	adds	r3, r3, r1
    317a:	4154      	adcs	r4, r2
    317c:	22a0      	movs	r2, #160	; 0xa0
    317e:	18ba      	adds	r2, r7, r2
    3180:	6013      	str	r3, [r2, #0]
    3182:	6054      	str	r4, [r2, #4]
    var2 = var1 * var1 * (int64_t)bmp280_cal_data.dig_P6;
    3184:	4ccb      	ldr	r4, [pc, #812]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    3186:	23a0      	movs	r3, #160	; 0xa0
    3188:	18fb      	adds	r3, r7, r3
    318a:	681a      	ldr	r2, [r3, #0]
    318c:	685b      	ldr	r3, [r3, #4]
    318e:	21a0      	movs	r1, #160	; 0xa0
    3190:	1879      	adds	r1, r7, r1
    3192:	6808      	ldr	r0, [r1, #0]
    3194:	6849      	ldr	r1, [r1, #4]
    3196:	47a0      	blx	r4
    3198:	0003      	movs	r3, r0
    319a:	000c      	movs	r4, r1
    319c:	0018      	movs	r0, r3
    319e:	0021      	movs	r1, r4
    31a0:	4bc5      	ldr	r3, [pc, #788]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    31a2:	2210      	movs	r2, #16
    31a4:	5e9b      	ldrsh	r3, [r3, r2]
    31a6:	653b      	str	r3, [r7, #80]	; 0x50
    31a8:	17db      	asrs	r3, r3, #31
    31aa:	657b      	str	r3, [r7, #84]	; 0x54
    31ac:	4cc1      	ldr	r4, [pc, #772]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    31ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    31b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31b2:	47a0      	blx	r4
    31b4:	0003      	movs	r3, r0
    31b6:	000c      	movs	r4, r1
    31b8:	2298      	movs	r2, #152	; 0x98
    31ba:	18ba      	adds	r2, r7, r2
    31bc:	6013      	str	r3, [r2, #0]
    31be:	6054      	str	r4, [r2, #4]
    var2 = var2 + ((var1 * (int64_t)bmp280_cal_data.dig_P5) << 17);
    31c0:	4bbd      	ldr	r3, [pc, #756]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    31c2:	220e      	movs	r2, #14
    31c4:	5e9b      	ldrsh	r3, [r3, r2]
    31c6:	64bb      	str	r3, [r7, #72]	; 0x48
    31c8:	17db      	asrs	r3, r3, #31
    31ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    31cc:	4cb9      	ldr	r4, [pc, #740]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    31ce:	23a0      	movs	r3, #160	; 0xa0
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	681a      	ldr	r2, [r3, #0]
    31d4:	685b      	ldr	r3, [r3, #4]
    31d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    31d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    31da:	47a0      	blx	r4
    31dc:	0003      	movs	r3, r0
    31de:	000c      	movs	r4, r1
    31e0:	0bda      	lsrs	r2, r3, #15
    31e2:	0466      	lsls	r6, r4, #17
    31e4:	4316      	orrs	r6, r2
    31e6:	045d      	lsls	r5, r3, #17
    31e8:	2398      	movs	r3, #152	; 0x98
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	685c      	ldr	r4, [r3, #4]
    31ee:	681b      	ldr	r3, [r3, #0]
    31f0:	195b      	adds	r3, r3, r5
    31f2:	4174      	adcs	r4, r6
    31f4:	2298      	movs	r2, #152	; 0x98
    31f6:	18ba      	adds	r2, r7, r2
    31f8:	6013      	str	r3, [r2, #0]
    31fa:	6054      	str	r4, [r2, #4]
    var2 = var2 + (((int64_t)bmp280_cal_data.dig_P4) << 35);
    31fc:	4bae      	ldr	r3, [pc, #696]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    31fe:	220c      	movs	r2, #12
    3200:	5e9b      	ldrsh	r3, [r3, r2]
    3202:	643b      	str	r3, [r7, #64]	; 0x40
    3204:	17db      	asrs	r3, r3, #31
    3206:	647b      	str	r3, [r7, #68]	; 0x44
    3208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    320a:	00db      	lsls	r3, r3, #3
    320c:	63fb      	str	r3, [r7, #60]	; 0x3c
    320e:	2300      	movs	r3, #0
    3210:	63bb      	str	r3, [r7, #56]	; 0x38
    3212:	2398      	movs	r3, #152	; 0x98
    3214:	18fb      	adds	r3, r7, r3
    3216:	685c      	ldr	r4, [r3, #4]
    3218:	681b      	ldr	r3, [r3, #0]
    321a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    321c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    321e:	185b      	adds	r3, r3, r1
    3220:	4154      	adcs	r4, r2
    3222:	2298      	movs	r2, #152	; 0x98
    3224:	18ba      	adds	r2, r7, r2
    3226:	6013      	str	r3, [r2, #0]
    3228:	6054      	str	r4, [r2, #4]
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    322a:	4ca2      	ldr	r4, [pc, #648]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    322c:	23a0      	movs	r3, #160	; 0xa0
    322e:	18fb      	adds	r3, r7, r3
    3230:	681a      	ldr	r2, [r3, #0]
    3232:	685b      	ldr	r3, [r3, #4]
    3234:	21a0      	movs	r1, #160	; 0xa0
    3236:	1879      	adds	r1, r7, r1
    3238:	6808      	ldr	r0, [r1, #0]
    323a:	6849      	ldr	r1, [r1, #4]
    323c:	47a0      	blx	r4
    323e:	0003      	movs	r3, r0
    3240:	000c      	movs	r4, r1
    3242:	0018      	movs	r0, r3
    3244:	0021      	movs	r1, r4
    3246:	4b9c      	ldr	r3, [pc, #624]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    3248:	220a      	movs	r2, #10
    324a:	5e9b      	ldrsh	r3, [r3, r2]
    324c:	633b      	str	r3, [r7, #48]	; 0x30
    324e:	17db      	asrs	r3, r3, #31
    3250:	637b      	str	r3, [r7, #52]	; 0x34
    3252:	4c98      	ldr	r4, [pc, #608]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    3254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3258:	47a0      	blx	r4
    325a:	0003      	movs	r3, r0
    325c:	000c      	movs	r4, r1
    325e:	0622      	lsls	r2, r4, #24
    3260:	0a19      	lsrs	r1, r3, #8
    3262:	2080      	movs	r0, #128	; 0x80
    3264:	1838      	adds	r0, r7, r0
    3266:	6001      	str	r1, [r0, #0]
    3268:	2180      	movs	r1, #128	; 0x80
    326a:	1879      	adds	r1, r7, r1
    326c:	6809      	ldr	r1, [r1, #0]
    326e:	4311      	orrs	r1, r2
    3270:	2280      	movs	r2, #128	; 0x80
    3272:	18ba      	adds	r2, r7, r2
    3274:	6011      	str	r1, [r2, #0]
    3276:	1223      	asrs	r3, r4, #8
    3278:	2284      	movs	r2, #132	; 0x84
    327a:	18ba      	adds	r2, r7, r2
    327c:	6013      	str	r3, [r2, #0]
            ((var1 * (int64_t)bmp280_cal_data.dig_P2) << 12);
    327e:	4b8e      	ldr	r3, [pc, #568]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    3280:	2208      	movs	r2, #8
    3282:	5e9b      	ldrsh	r3, [r3, r2]
    3284:	62bb      	str	r3, [r7, #40]	; 0x28
    3286:	17db      	asrs	r3, r3, #31
    3288:	62fb      	str	r3, [r7, #44]	; 0x2c
    328a:	4c8a      	ldr	r4, [pc, #552]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    328c:	23a0      	movs	r3, #160	; 0xa0
    328e:	18fb      	adds	r3, r7, r3
    3290:	681a      	ldr	r2, [r3, #0]
    3292:	685b      	ldr	r3, [r3, #4]
    3294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3298:	47a0      	blx	r4
    329a:	0003      	movs	r3, r0
    329c:	000c      	movs	r4, r1
    329e:	0d1a      	lsrs	r2, r3, #20
    32a0:	0321      	lsls	r1, r4, #12
    32a2:	67f9      	str	r1, [r7, #124]	; 0x7c
    32a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    32a6:	4311      	orrs	r1, r2
    32a8:	67f9      	str	r1, [r7, #124]	; 0x7c
    32aa:	031b      	lsls	r3, r3, #12
    32ac:	67bb      	str	r3, [r7, #120]	; 0x78
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    32ae:	2380      	movs	r3, #128	; 0x80
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	685c      	ldr	r4, [r3, #4]
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    32b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    32ba:	185b      	adds	r3, r3, r1
    32bc:	4154      	adcs	r4, r2
    32be:	22a0      	movs	r2, #160	; 0xa0
    32c0:	18ba      	adds	r2, r7, r2
    32c2:	6013      	str	r3, [r2, #0]
    32c4:	6054      	str	r4, [r2, #4]
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280_cal_data.dig_P1) >> 33;
    32c6:	23a0      	movs	r3, #160	; 0xa0
    32c8:	18fb      	adds	r3, r7, r3
    32ca:	6819      	ldr	r1, [r3, #0]
    32cc:	685a      	ldr	r2, [r3, #4]
    32ce:	2300      	movs	r3, #0
    32d0:	2480      	movs	r4, #128	; 0x80
    32d2:	0224      	lsls	r4, r4, #8
    32d4:	18c9      	adds	r1, r1, r3
    32d6:	4162      	adcs	r2, r4
    32d8:	0008      	movs	r0, r1
    32da:	0011      	movs	r1, r2
    32dc:	4b76      	ldr	r3, [pc, #472]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    32de:	88db      	ldrh	r3, [r3, #6]
    32e0:	623b      	str	r3, [r7, #32]
    32e2:	2300      	movs	r3, #0
    32e4:	627b      	str	r3, [r7, #36]	; 0x24
    32e6:	4c73      	ldr	r4, [pc, #460]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    32e8:	6a3a      	ldr	r2, [r7, #32]
    32ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32ec:	47a0      	blx	r4
    32ee:	0003      	movs	r3, r0
    32f0:	000c      	movs	r4, r1
    32f2:	1062      	asrs	r2, r4, #1
    32f4:	21a0      	movs	r1, #160	; 0xa0
    32f6:	1879      	adds	r1, r7, r1
    32f8:	600a      	str	r2, [r1, #0]
    32fa:	17e3      	asrs	r3, r4, #31
    32fc:	22a4      	movs	r2, #164	; 0xa4
    32fe:	18ba      	adds	r2, r7, r2
    3300:	6013      	str	r3, [r2, #0]
    if (var1 == 0)
    3302:	23a0      	movs	r3, #160	; 0xa0
    3304:	18fb      	adds	r3, r7, r3
    3306:	681a      	ldr	r2, [r3, #0]
    3308:	23a4      	movs	r3, #164	; 0xa4
    330a:	18fb      	adds	r3, r7, r3
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	431a      	orrs	r2, r3
    3310:	d101      	bne.n	3316 <bmp280_compensate_P_int32+0x1ba>
    {
        return 0; // Avoid exception caused by division by zero.
    3312:	2300      	movs	r3, #0
    3314:	e0c6      	b.n	34a4 <bmp280_compensate_P_int32+0x348>
    }
    p = 1048576 - adc_P;
    3316:	238c      	movs	r3, #140	; 0x8c
    3318:	18fb      	adds	r3, r7, r3
    331a:	681a      	ldr	r2, [r3, #0]
    331c:	2380      	movs	r3, #128	; 0x80
    331e:	035b      	lsls	r3, r3, #13
    3320:	1a9b      	subs	r3, r3, r2
    3322:	2290      	movs	r2, #144	; 0x90
    3324:	18ba      	adds	r2, r7, r2
    3326:	6013      	str	r3, [r2, #0]
    3328:	17db      	asrs	r3, r3, #31
    332a:	2294      	movs	r2, #148	; 0x94
    332c:	18ba      	adds	r2, r7, r2
    332e:	6013      	str	r3, [r2, #0]
    p = (((p << 31) - var2) * 3125) / var1;
    3330:	2390      	movs	r3, #144	; 0x90
    3332:	18fb      	adds	r3, r7, r3
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	105b      	asrs	r3, r3, #1
    3338:	61fb      	str	r3, [r7, #28]
    333a:	2390      	movs	r3, #144	; 0x90
    333c:	18fb      	adds	r3, r7, r3
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	07db      	lsls	r3, r3, #31
    3342:	61bb      	str	r3, [r7, #24]
    3344:	2398      	movs	r3, #152	; 0x98
    3346:	18fb      	adds	r3, r7, r3
    3348:	685c      	ldr	r4, [r3, #4]
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	69b8      	ldr	r0, [r7, #24]
    334e:	69f9      	ldr	r1, [r7, #28]
    3350:	1ac0      	subs	r0, r0, r3
    3352:	41a1      	sbcs	r1, r4
    3354:	4c57      	ldr	r4, [pc, #348]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    3356:	4a59      	ldr	r2, [pc, #356]	; (34bc <bmp280_compensate_P_int32+0x360>)
    3358:	2300      	movs	r3, #0
    335a:	47a0      	blx	r4
    335c:	0003      	movs	r3, r0
    335e:	000c      	movs	r4, r1
    3360:	0018      	movs	r0, r3
    3362:	0021      	movs	r1, r4
    3364:	4c56      	ldr	r4, [pc, #344]	; (34c0 <bmp280_compensate_P_int32+0x364>)
    3366:	23a0      	movs	r3, #160	; 0xa0
    3368:	18fb      	adds	r3, r7, r3
    336a:	681a      	ldr	r2, [r3, #0]
    336c:	685b      	ldr	r3, [r3, #4]
    336e:	47a0      	blx	r4
    3370:	0003      	movs	r3, r0
    3372:	000c      	movs	r4, r1
    3374:	2290      	movs	r2, #144	; 0x90
    3376:	18ba      	adds	r2, r7, r2
    3378:	6013      	str	r3, [r2, #0]
    337a:	6054      	str	r4, [r2, #4]
    var1 = (((int64_t)bmp280_cal_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    337c:	4b4e      	ldr	r3, [pc, #312]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    337e:	2216      	movs	r2, #22
    3380:	5e9b      	ldrsh	r3, [r3, r2]
    3382:	613b      	str	r3, [r7, #16]
    3384:	17db      	asrs	r3, r3, #31
    3386:	617b      	str	r3, [r7, #20]
    3388:	2394      	movs	r3, #148	; 0x94
    338a:	18fb      	adds	r3, r7, r3
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	04da      	lsls	r2, r3, #19
    3390:	2390      	movs	r3, #144	; 0x90
    3392:	18fb      	adds	r3, r7, r3
    3394:	681b      	ldr	r3, [r3, #0]
    3396:	0b5b      	lsrs	r3, r3, #13
    3398:	673b      	str	r3, [r7, #112]	; 0x70
    339a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    339c:	4313      	orrs	r3, r2
    339e:	673b      	str	r3, [r7, #112]	; 0x70
    33a0:	2394      	movs	r3, #148	; 0x94
    33a2:	18fb      	adds	r3, r7, r3
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	135b      	asrs	r3, r3, #13
    33a8:	677b      	str	r3, [r7, #116]	; 0x74
    33aa:	4c42      	ldr	r4, [pc, #264]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    33ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    33ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    33b0:	6938      	ldr	r0, [r7, #16]
    33b2:	6979      	ldr	r1, [r7, #20]
    33b4:	47a0      	blx	r4
    33b6:	0003      	movs	r3, r0
    33b8:	000c      	movs	r4, r1
    33ba:	0018      	movs	r0, r3
    33bc:	0021      	movs	r1, r4
    33be:	2394      	movs	r3, #148	; 0x94
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	681b      	ldr	r3, [r3, #0]
    33c4:	04da      	lsls	r2, r3, #19
    33c6:	2390      	movs	r3, #144	; 0x90
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	0b5b      	lsrs	r3, r3, #13
    33ce:	66bb      	str	r3, [r7, #104]	; 0x68
    33d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    33d2:	4313      	orrs	r3, r2
    33d4:	66bb      	str	r3, [r7, #104]	; 0x68
    33d6:	2394      	movs	r3, #148	; 0x94
    33d8:	18fb      	adds	r3, r7, r3
    33da:	681b      	ldr	r3, [r3, #0]
    33dc:	135b      	asrs	r3, r3, #13
    33de:	66fb      	str	r3, [r7, #108]	; 0x6c
    33e0:	4c34      	ldr	r4, [pc, #208]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    33e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    33e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    33e6:	47a0      	blx	r4
    33e8:	0003      	movs	r3, r0
    33ea:	000c      	movs	r4, r1
    33ec:	01e2      	lsls	r2, r4, #7
    33ee:	0e59      	lsrs	r1, r3, #25
    33f0:	430a      	orrs	r2, r1
    33f2:	21a0      	movs	r1, #160	; 0xa0
    33f4:	1879      	adds	r1, r7, r1
    33f6:	600a      	str	r2, [r1, #0]
    33f8:	1663      	asrs	r3, r4, #25
    33fa:	22a4      	movs	r2, #164	; 0xa4
    33fc:	18ba      	adds	r2, r7, r2
    33fe:	6013      	str	r3, [r2, #0]
    var2 = (((int64_t)bmp280_cal_data.dig_P8) * p) >> 19;
    3400:	4b2d      	ldr	r3, [pc, #180]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    3402:	2214      	movs	r2, #20
    3404:	5e9b      	ldrsh	r3, [r3, r2]
    3406:	60bb      	str	r3, [r7, #8]
    3408:	17db      	asrs	r3, r3, #31
    340a:	60fb      	str	r3, [r7, #12]
    340c:	4c29      	ldr	r4, [pc, #164]	; (34b4 <bmp280_compensate_P_int32+0x358>)
    340e:	2390      	movs	r3, #144	; 0x90
    3410:	18fb      	adds	r3, r7, r3
    3412:	681a      	ldr	r2, [r3, #0]
    3414:	685b      	ldr	r3, [r3, #4]
    3416:	68b8      	ldr	r0, [r7, #8]
    3418:	68f9      	ldr	r1, [r7, #12]
    341a:	47a0      	blx	r4
    341c:	0003      	movs	r3, r0
    341e:	000c      	movs	r4, r1
    3420:	0362      	lsls	r2, r4, #13
    3422:	0cd9      	lsrs	r1, r3, #19
    3424:	430a      	orrs	r2, r1
    3426:	2198      	movs	r1, #152	; 0x98
    3428:	1879      	adds	r1, r7, r1
    342a:	600a      	str	r2, [r1, #0]
    342c:	14e3      	asrs	r3, r4, #19
    342e:	229c      	movs	r2, #156	; 0x9c
    3430:	18ba      	adds	r2, r7, r2
    3432:	6013      	str	r3, [r2, #0]
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280_cal_data.dig_P7) << 4);
    3434:	2390      	movs	r3, #144	; 0x90
    3436:	18fb      	adds	r3, r7, r3
    3438:	6819      	ldr	r1, [r3, #0]
    343a:	685a      	ldr	r2, [r3, #4]
    343c:	23a0      	movs	r3, #160	; 0xa0
    343e:	18fb      	adds	r3, r7, r3
    3440:	685c      	ldr	r4, [r3, #4]
    3442:	681b      	ldr	r3, [r3, #0]
    3444:	18c9      	adds	r1, r1, r3
    3446:	4162      	adcs	r2, r4
    3448:	2398      	movs	r3, #152	; 0x98
    344a:	18fb      	adds	r3, r7, r3
    344c:	685c      	ldr	r4, [r3, #4]
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	185b      	adds	r3, r3, r1
    3452:	4154      	adcs	r4, r2
    3454:	0622      	lsls	r2, r4, #24
    3456:	0a19      	lsrs	r1, r3, #8
    3458:	6639      	str	r1, [r7, #96]	; 0x60
    345a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    345c:	4311      	orrs	r1, r2
    345e:	6639      	str	r1, [r7, #96]	; 0x60
    3460:	1223      	asrs	r3, r4, #8
    3462:	667b      	str	r3, [r7, #100]	; 0x64
    3464:	4b14      	ldr	r3, [pc, #80]	; (34b8 <bmp280_compensate_P_int32+0x35c>)
    3466:	2212      	movs	r2, #18
    3468:	5e9b      	ldrsh	r3, [r3, r2]
    346a:	603b      	str	r3, [r7, #0]
    346c:	17db      	asrs	r3, r3, #31
    346e:	607b      	str	r3, [r7, #4]
    3470:	6839      	ldr	r1, [r7, #0]
    3472:	687a      	ldr	r2, [r7, #4]
    3474:	000b      	movs	r3, r1
    3476:	0f1b      	lsrs	r3, r3, #28
    3478:	0010      	movs	r0, r2
    347a:	0100      	lsls	r0, r0, #4
    347c:	65f8      	str	r0, [r7, #92]	; 0x5c
    347e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    3480:	4318      	orrs	r0, r3
    3482:	65f8      	str	r0, [r7, #92]	; 0x5c
    3484:	000b      	movs	r3, r1
    3486:	011b      	lsls	r3, r3, #4
    3488:	65bb      	str	r3, [r7, #88]	; 0x58
    348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    348c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    348e:	6db9      	ldr	r1, [r7, #88]	; 0x58
    3490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    3492:	185b      	adds	r3, r3, r1
    3494:	4154      	adcs	r4, r2
    3496:	2290      	movs	r2, #144	; 0x90
    3498:	18ba      	adds	r2, r7, r2
    349a:	6013      	str	r3, [r2, #0]
    349c:	6054      	str	r4, [r2, #4]
    return (uint32_t)p;
    349e:	2390      	movs	r3, #144	; 0x90
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	681b      	ldr	r3, [r3, #0]
}
    34a4:	0018      	movs	r0, r3
    34a6:	46bd      	mov	sp, r7
    34a8:	b02b      	add	sp, #172	; 0xac
    34aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ac:	2000011c 	.word	0x2000011c
    34b0:	fffe0c00 	.word	0xfffe0c00
    34b4:	000052e5 	.word	0x000052e5
    34b8:	20000104 	.word	0x20000104
    34bc:	00000c35 	.word	0x00000c35
    34c0:	0000525d 	.word	0x0000525d

000034c4 <read_bmp280>:

/*!
 * \brief Gets BMP280 readings in Pa and deg C
 */
void read_bmp280(bmp280_meas_t * meas)
{
    34c4:	b590      	push	{r4, r7, lr}
    34c6:	b085      	sub	sp, #20
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
	bmp280_raw_data_t raw_data;
	read_bmp280_integer(&raw_data);
    34cc:	2308      	movs	r3, #8
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	0018      	movs	r0, r3
    34d2:	4b18      	ldr	r3, [pc, #96]	; (3534 <read_bmp280+0x70>)
    34d4:	4798      	blx	r3
	
	// Convert to Pascal and degrees C
	meas->pressure = raw_data.P / 256.0;
    34d6:	2308      	movs	r3, #8
    34d8:	18fb      	adds	r3, r7, r3
    34da:	681a      	ldr	r2, [r3, #0]
    34dc:	4b16      	ldr	r3, [pc, #88]	; (3538 <read_bmp280+0x74>)
    34de:	0010      	movs	r0, r2
    34e0:	4798      	blx	r3
    34e2:	4c16      	ldr	r4, [pc, #88]	; (353c <read_bmp280+0x78>)
    34e4:	2200      	movs	r2, #0
    34e6:	4b16      	ldr	r3, [pc, #88]	; (3540 <read_bmp280+0x7c>)
    34e8:	47a0      	blx	r4
    34ea:	0003      	movs	r3, r0
    34ec:	000c      	movs	r4, r1
    34ee:	0019      	movs	r1, r3
    34f0:	0022      	movs	r2, r4
    34f2:	4b14      	ldr	r3, [pc, #80]	; (3544 <read_bmp280+0x80>)
    34f4:	0008      	movs	r0, r1
    34f6:	0011      	movs	r1, r2
    34f8:	4798      	blx	r3
    34fa:	1c02      	adds	r2, r0, #0
    34fc:	687b      	ldr	r3, [r7, #4]
    34fe:	601a      	str	r2, [r3, #0]
	meas->temp = raw_data.T * 0.01;
    3500:	2308      	movs	r3, #8
    3502:	18fb      	adds	r3, r7, r3
    3504:	685a      	ldr	r2, [r3, #4]
    3506:	4b10      	ldr	r3, [pc, #64]	; (3548 <read_bmp280+0x84>)
    3508:	0010      	movs	r0, r2
    350a:	4798      	blx	r3
    350c:	4c0f      	ldr	r4, [pc, #60]	; (354c <read_bmp280+0x88>)
    350e:	4a10      	ldr	r2, [pc, #64]	; (3550 <read_bmp280+0x8c>)
    3510:	4b10      	ldr	r3, [pc, #64]	; (3554 <read_bmp280+0x90>)
    3512:	47a0      	blx	r4
    3514:	0003      	movs	r3, r0
    3516:	000c      	movs	r4, r1
    3518:	0019      	movs	r1, r3
    351a:	0022      	movs	r2, r4
    351c:	4b09      	ldr	r3, [pc, #36]	; (3544 <read_bmp280+0x80>)
    351e:	0008      	movs	r0, r1
    3520:	0011      	movs	r1, r2
    3522:	4798      	blx	r3
    3524:	1c02      	adds	r2, r0, #0
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	605a      	str	r2, [r3, #4]
}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	46bd      	mov	sp, r7
    352e:	b005      	add	sp, #20
    3530:	bd90      	pop	{r4, r7, pc}
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	00003559 	.word	0x00003559
    3538:	00006d91 	.word	0x00006d91
    353c:	00005b11 	.word	0x00005b11
    3540:	40700000 	.word	0x40700000
    3544:	00006e01 	.word	0x00006e01
    3548:	00006d0d 	.word	0x00006d0d
    354c:	00006179 	.word	0x00006179
    3550:	47ae147b 	.word	0x47ae147b
    3554:	3f847ae1 	.word	0x3f847ae1

00003558 <read_bmp280_integer>:

/*!
 * \brief Gets BMP280 readings in integer units for faster speed
 */
void read_bmp280_integer(bmp280_raw_data_t * meas)
{
    3558:	b590      	push	{r4, r7, lr}
    355a:	b087      	sub	sp, #28
    355c:	af00      	add	r7, sp, #0
    355e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6] = {0};
    3560:	2310      	movs	r3, #16
    3562:	18fb      	adds	r3, r7, r3
    3564:	0018      	movs	r0, r3
    3566:	2306      	movs	r3, #6
    3568:	001a      	movs	r2, r3
    356a:	2100      	movs	r1, #0
    356c:	4b24      	ldr	r3, [pc, #144]	; (3600 <read_bmp280_integer+0xa8>)
    356e:	4798      	blx	r3
	i2c_read_bytes(buffer, 6, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB);
    3570:	2310      	movs	r3, #16
    3572:	18f8      	adds	r0, r7, r3
    3574:	23f7      	movs	r3, #247	; 0xf7
    3576:	2276      	movs	r2, #118	; 0x76
    3578:	2106      	movs	r1, #6
    357a:	4c22      	ldr	r4, [pc, #136]	; (3604 <read_bmp280_integer+0xac>)
    357c:	47a0      	blx	r4
		uint32_t i;
		uint8_t b[4];
	} UT, UP;

	// Parse uncompensated pressure measurement.
	UP.b[0] = *(buffer+2);
    357e:	2310      	movs	r3, #16
    3580:	18fb      	adds	r3, r7, r3
    3582:	789a      	ldrb	r2, [r3, #2]
    3584:	2308      	movs	r3, #8
    3586:	18fb      	adds	r3, r7, r3
    3588:	701a      	strb	r2, [r3, #0]
	UP.b[1] = *(buffer+1);
    358a:	2310      	movs	r3, #16
    358c:	18fb      	adds	r3, r7, r3
    358e:	785a      	ldrb	r2, [r3, #1]
    3590:	2308      	movs	r3, #8
    3592:	18fb      	adds	r3, r7, r3
    3594:	705a      	strb	r2, [r3, #1]
	UP.b[2] = *buffer;
    3596:	2310      	movs	r3, #16
    3598:	18fb      	adds	r3, r7, r3
    359a:	781a      	ldrb	r2, [r3, #0]
    359c:	2308      	movs	r3, #8
    359e:	18fb      	adds	r3, r7, r3
    35a0:	709a      	strb	r2, [r3, #2]
	UP.i = (UP.i >> 4) & 0xFFFFFul;
    35a2:	68bb      	ldr	r3, [r7, #8]
    35a4:	091b      	lsrs	r3, r3, #4
    35a6:	031b      	lsls	r3, r3, #12
    35a8:	0b1b      	lsrs	r3, r3, #12
    35aa:	60bb      	str	r3, [r7, #8]

	// Parse uncompensated temperature measurement.
	UT.b[0] = *(buffer+5);
    35ac:	2310      	movs	r3, #16
    35ae:	18fb      	adds	r3, r7, r3
    35b0:	795a      	ldrb	r2, [r3, #5]
    35b2:	230c      	movs	r3, #12
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	701a      	strb	r2, [r3, #0]
	UT.b[1] = *(buffer+4);
    35b8:	2310      	movs	r3, #16
    35ba:	18fb      	adds	r3, r7, r3
    35bc:	791a      	ldrb	r2, [r3, #4]
    35be:	230c      	movs	r3, #12
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	705a      	strb	r2, [r3, #1]
	UT.b[2] = *(buffer+3);
    35c4:	2310      	movs	r3, #16
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	78da      	ldrb	r2, [r3, #3]
    35ca:	230c      	movs	r3, #12
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	709a      	strb	r2, [r3, #2]
	UT.i = (UT.i >> 4) & 0xFFFFFul;
    35d0:	68fb      	ldr	r3, [r7, #12]
    35d2:	091b      	lsrs	r3, r3, #4
    35d4:	031b      	lsls	r3, r3, #12
    35d6:	0b1b      	lsrs	r3, r3, #12
    35d8:	60fb      	str	r3, [r7, #12]

	// Perform pressure/temperature compensation.
	meas->T = bmp280_compensate_T_int32(UT.i);
    35da:	68fb      	ldr	r3, [r7, #12]
    35dc:	0018      	movs	r0, r3
    35de:	4b0a      	ldr	r3, [pc, #40]	; (3608 <read_bmp280_integer+0xb0>)
    35e0:	4798      	blx	r3
    35e2:	0002      	movs	r2, r0
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	605a      	str	r2, [r3, #4]
	meas->P = (int32_t)bmp280_compensate_P_int32(UP.i);
    35e8:	68bb      	ldr	r3, [r7, #8]
    35ea:	0018      	movs	r0, r3
    35ec:	4b07      	ldr	r3, [pc, #28]	; (360c <read_bmp280_integer+0xb4>)
    35ee:	4798      	blx	r3
    35f0:	0002      	movs	r2, r0
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	601a      	str	r2, [r3, #0]
}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	46bd      	mov	sp, r7
    35fa:	b007      	add	sp, #28
    35fc:	bd90      	pop	{r4, r7, pc}
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	0000717b 	.word	0x0000717b
    3604:	000038d5 	.word	0x000038d5
    3608:	000030ed 	.word	0x000030ed
    360c:	0000315d 	.word	0x0000315d

00003610 <i2c_master_is_syncing>:
{
    3610:	b580      	push	{r7, lr}
    3612:	b084      	sub	sp, #16
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    361e:	68fb      	ldr	r3, [r7, #12]
    3620:	69db      	ldr	r3, [r3, #28]
    3622:	2207      	movs	r2, #7
    3624:	4013      	ands	r3, r2
    3626:	1e5a      	subs	r2, r3, #1
    3628:	4193      	sbcs	r3, r2
    362a:	b2db      	uxtb	r3, r3
}
    362c:	0018      	movs	r0, r3
    362e:	46bd      	mov	sp, r7
    3630:	b004      	add	sp, #16
    3632:	bd80      	pop	{r7, pc}

00003634 <_i2c_master_wait_for_sync>:
{
    3634:	b580      	push	{r7, lr}
    3636:	b082      	sub	sp, #8
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	0018      	movs	r0, r3
    3642:	4b04      	ldr	r3, [pc, #16]	; (3654 <_i2c_master_wait_for_sync+0x20>)
    3644:	4798      	blx	r3
    3646:	1e03      	subs	r3, r0, #0
    3648:	d1f9      	bne.n	363e <_i2c_master_wait_for_sync+0xa>
}
    364a:	46c0      	nop			; (mov r8, r8)
    364c:	46bd      	mov	sp, r7
    364e:	b002      	add	sp, #8
    3650:	bd80      	pop	{r7, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	00003611 	.word	0x00003611

00003658 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3658:	b580      	push	{r7, lr}
    365a:	b082      	sub	sp, #8
    365c:	af00      	add	r7, sp, #0
    365e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3660:	687b      	ldr	r3, [r7, #4]
    3662:	2264      	movs	r2, #100	; 0x64
    3664:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	4a1b      	ldr	r2, [pc, #108]	; (36d8 <i2c_master_get_config_defaults+0x80>)
    366a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	2200      	movs	r2, #0
    3670:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	2200      	movs	r2, #0
    3676:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	2200      	movs	r2, #0
    367c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	2280      	movs	r2, #128	; 0x80
    3682:	0392      	lsls	r2, r2, #14
    3684:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	2201      	movs	r2, #1
    368a:	4252      	negs	r2, r2
    368c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	2201      	movs	r2, #1
    3692:	4252      	negs	r2, r2
    3694:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	2200      	movs	r2, #0
    369a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	2200      	movs	r2, #0
    36a0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	2224      	movs	r2, #36	; 0x24
    36a6:	2100      	movs	r1, #0
    36a8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    36aa:	687b      	ldr	r3, [r7, #4]
    36ac:	2200      	movs	r2, #0
    36ae:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	222c      	movs	r2, #44	; 0x2c
    36b4:	2100      	movs	r1, #0
    36b6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	222d      	movs	r2, #45	; 0x2d
    36bc:	2100      	movs	r1, #0
    36be:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	222e      	movs	r2, #46	; 0x2e
    36c4:	2100      	movs	r1, #0
    36c6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	22d7      	movs	r2, #215	; 0xd7
    36cc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	46bd      	mov	sp, r7
    36d2:	b002      	add	sp, #8
    36d4:	bd80      	pop	{r7, pc}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	00000d48 	.word	0x00000d48

000036dc <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    36dc:	b580      	push	{r7, lr}
    36de:	b084      	sub	sp, #16
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    36e4:	687b      	ldr	r3, [r7, #4]
    36e6:	681b      	ldr	r3, [r3, #0]
    36e8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    36ea:	2300      	movs	r3, #0
    36ec:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	0018      	movs	r0, r3
    36f2:	4b10      	ldr	r3, [pc, #64]	; (3734 <i2c_master_enable+0x58>)
    36f4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    36f6:	68bb      	ldr	r3, [r7, #8]
    36f8:	681b      	ldr	r3, [r3, #0]
    36fa:	2202      	movs	r2, #2
    36fc:	431a      	orrs	r2, r3
    36fe:	68bb      	ldr	r3, [r7, #8]
    3700:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3702:	e00c      	b.n	371e <i2c_master_enable+0x42>
		timeout_counter++;
    3704:	68fb      	ldr	r3, [r7, #12]
    3706:	3301      	adds	r3, #1
    3708:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	88db      	ldrh	r3, [r3, #6]
    370e:	001a      	movs	r2, r3
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	429a      	cmp	r2, r3
    3714:	d803      	bhi.n	371e <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3716:	68bb      	ldr	r3, [r7, #8]
    3718:	2210      	movs	r2, #16
    371a:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    371c:	e006      	b.n	372c <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    371e:	68bb      	ldr	r3, [r7, #8]
    3720:	8b5b      	ldrh	r3, [r3, #26]
    3722:	b29b      	uxth	r3, r3
    3724:	001a      	movs	r2, r3
    3726:	2310      	movs	r3, #16
    3728:	4013      	ands	r3, r2
    372a:	d0eb      	beq.n	3704 <i2c_master_enable+0x28>
		}
	}
}
    372c:	46bd      	mov	sp, r7
    372e:	b004      	add	sp, #16
    3730:	bd80      	pop	{r7, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	00003635 	.word	0x00003635

00003738 <i2c_interface_init>:

 static struct i2c_master_config config;
 static struct i2c_master_module module;

 void i2c_interface_init(void)
 {
    3738:	b580      	push	{r7, lr}
    373a:	af00      	add	r7, sp, #0
	i2c_master_get_config_defaults(&config);
    373c:	4b10      	ldr	r3, [pc, #64]	; (3780 <i2c_interface_init+0x48>)
    373e:	0018      	movs	r0, r3
    3740:	4b10      	ldr	r3, [pc, #64]	; (3784 <i2c_interface_init+0x4c>)
    3742:	4798      	blx	r3
	config.start_hold_time = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    3744:	4b0e      	ldr	r3, [pc, #56]	; (3780 <i2c_interface_init+0x48>)
    3746:	22c0      	movs	r2, #192	; 0xc0
    3748:	0392      	lsls	r2, r2, #14
    374a:	611a      	str	r2, [r3, #16]
	config.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    374c:	4b0c      	ldr	r3, [pc, #48]	; (3780 <i2c_interface_init+0x48>)
    374e:	2264      	movs	r2, #100	; 0x64
    3750:	601a      	str	r2, [r3, #0]
	config.buffer_timeout = 10000;
    3752:	4b0b      	ldr	r3, [pc, #44]	; (3780 <i2c_interface_init+0x48>)
    3754:	4a0c      	ldr	r2, [pc, #48]	; (3788 <i2c_interface_init+0x50>)
    3756:	82da      	strh	r2, [r3, #22]
	config.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    3758:	4b09      	ldr	r3, [pc, #36]	; (3780 <i2c_interface_init+0x48>)
    375a:	4a0c      	ldr	r2, [pc, #48]	; (378c <i2c_interface_init+0x54>)
    375c:	61da      	str	r2, [r3, #28]
	config.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    375e:	4b08      	ldr	r3, [pc, #32]	; (3780 <i2c_interface_init+0x48>)
    3760:	4a0b      	ldr	r2, [pc, #44]	; (3790 <i2c_interface_init+0x58>)
    3762:	621a      	str	r2, [r3, #32]

	i2c_master_init(&module, SERCOM3, &config);
    3764:	4a06      	ldr	r2, [pc, #24]	; (3780 <i2c_interface_init+0x48>)
    3766:	490b      	ldr	r1, [pc, #44]	; (3794 <i2c_interface_init+0x5c>)
    3768:	4b0b      	ldr	r3, [pc, #44]	; (3798 <i2c_interface_init+0x60>)
    376a:	0018      	movs	r0, r3
    376c:	4b0b      	ldr	r3, [pc, #44]	; (379c <i2c_interface_init+0x64>)
    376e:	4798      	blx	r3

	i2c_master_enable(&module);
    3770:	4b09      	ldr	r3, [pc, #36]	; (3798 <i2c_interface_init+0x60>)
    3772:	0018      	movs	r0, r3
    3774:	4b0a      	ldr	r3, [pc, #40]	; (37a0 <i2c_interface_init+0x68>)
    3776:	4798      	blx	r3
 }
    3778:	46c0      	nop			; (mov r8, r8)
    377a:	46bd      	mov	sp, r7
    377c:	bd80      	pop	{r7, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	20000120 	.word	0x20000120
    3784:	00003659 	.word	0x00003659
    3788:	00002710 	.word	0x00002710
    378c:	00160002 	.word	0x00160002
    3790:	00170002 	.word	0x00170002
    3794:	42000c00 	.word	0x42000c00
    3798:	20000154 	.word	0x20000154
    379c:	00001915 	.word	0x00001915
    37a0:	000036dd 	.word	0x000036dd

000037a4 <i2c_write_bytes>:
 {
	i2c_master_disable(&module);
 }

 void i2c_write_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    37a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37a6:	b091      	sub	sp, #68	; 0x44
    37a8:	af00      	add	r7, sp, #0
    37aa:	6278      	str	r0, [r7, #36]	; 0x24
    37ac:	000e      	movs	r6, r1
    37ae:	0010      	movs	r0, r2
    37b0:	0019      	movs	r1, r3
    37b2:	2323      	movs	r3, #35	; 0x23
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	1c32      	adds	r2, r6, #0
    37b8:	701a      	strb	r2, [r3, #0]
    37ba:	2322      	movs	r3, #34	; 0x22
    37bc:	18fb      	adds	r3, r7, r3
    37be:	1c02      	adds	r2, r0, #0
    37c0:	701a      	strb	r2, [r3, #0]
    37c2:	2321      	movs	r3, #33	; 0x21
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	1c0a      	adds	r2, r1, #0
    37c8:	701a      	strb	r2, [r3, #0]
    37ca:	466b      	mov	r3, sp
    37cc:	607b      	str	r3, [r7, #4]
	uint8_t buffer[data_length+2];
    37ce:	2323      	movs	r3, #35	; 0x23
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	3302      	adds	r3, #2
    37d6:	1e5a      	subs	r2, r3, #1
    37d8:	63fa      	str	r2, [r7, #60]	; 0x3c
    37da:	001a      	movs	r2, r3
    37dc:	613a      	str	r2, [r7, #16]
    37de:	2200      	movs	r2, #0
    37e0:	617a      	str	r2, [r7, #20]
    37e2:	6938      	ldr	r0, [r7, #16]
    37e4:	6979      	ldr	r1, [r7, #20]
    37e6:	0002      	movs	r2, r0
    37e8:	0f52      	lsrs	r2, r2, #29
    37ea:	000e      	movs	r6, r1
    37ec:	00f6      	lsls	r6, r6, #3
    37ee:	61fe      	str	r6, [r7, #28]
    37f0:	69fe      	ldr	r6, [r7, #28]
    37f2:	4316      	orrs	r6, r2
    37f4:	61fe      	str	r6, [r7, #28]
    37f6:	0002      	movs	r2, r0
    37f8:	00d2      	lsls	r2, r2, #3
    37fa:	61ba      	str	r2, [r7, #24]
    37fc:	001a      	movs	r2, r3
    37fe:	60ba      	str	r2, [r7, #8]
    3800:	2200      	movs	r2, #0
    3802:	60fa      	str	r2, [r7, #12]
    3804:	68b8      	ldr	r0, [r7, #8]
    3806:	68f9      	ldr	r1, [r7, #12]
    3808:	0002      	movs	r2, r0
    380a:	0f52      	lsrs	r2, r2, #29
    380c:	000e      	movs	r6, r1
    380e:	00f5      	lsls	r5, r6, #3
    3810:	4315      	orrs	r5, r2
    3812:	0002      	movs	r2, r0
    3814:	00d4      	lsls	r4, r2, #3
    3816:	3307      	adds	r3, #7
    3818:	08db      	lsrs	r3, r3, #3
    381a:	00db      	lsls	r3, r3, #3
    381c:	466a      	mov	r2, sp
    381e:	1ad3      	subs	r3, r2, r3
    3820:	469d      	mov	sp, r3
    3822:	466b      	mov	r3, sp
    3824:	3300      	adds	r3, #0
    3826:	63bb      	str	r3, [r7, #56]	; 0x38
	buffer[0] = reg;
    3828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    382a:	2221      	movs	r2, #33	; 0x21
    382c:	18ba      	adds	r2, r7, r2
    382e:	7812      	ldrb	r2, [r2, #0]
    3830:	701a      	strb	r2, [r3, #0]
	memcpy(buffer+1, data, data_length);
    3832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3834:	1c58      	adds	r0, r3, #1
    3836:	2323      	movs	r3, #35	; 0x23
    3838:	18fb      	adds	r3, r7, r3
    383a:	781a      	ldrb	r2, [r3, #0]
    383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    383e:	0019      	movs	r1, r3
    3840:	4b21      	ldr	r3, [pc, #132]	; (38c8 <i2c_write_bytes+0x124>)
    3842:	4798      	blx	r3
	
	struct i2c_master_packet packet;
	packet.address = i2c_address;
    3844:	2322      	movs	r3, #34	; 0x22
    3846:	18fb      	adds	r3, r7, r3
    3848:	781b      	ldrb	r3, [r3, #0]
    384a:	b29a      	uxth	r2, r3
    384c:	230c      	movs	r3, #12
    384e:	2120      	movs	r1, #32
    3850:	468c      	mov	ip, r1
    3852:	44bc      	add	ip, r7
    3854:	4463      	add	r3, ip
    3856:	801a      	strh	r2, [r3, #0]
	packet.data = buffer;
    3858:	6bba      	ldr	r2, [r7, #56]	; 0x38
    385a:	230c      	movs	r3, #12
    385c:	2120      	movs	r1, #32
    385e:	468c      	mov	ip, r1
    3860:	44bc      	add	ip, r7
    3862:	4463      	add	r3, ip
    3864:	605a      	str	r2, [r3, #4]
	packet.data_length = data_length+1;
    3866:	2323      	movs	r3, #35	; 0x23
    3868:	18fb      	adds	r3, r7, r3
    386a:	781b      	ldrb	r3, [r3, #0]
    386c:	b29b      	uxth	r3, r3
    386e:	3301      	adds	r3, #1
    3870:	b29a      	uxth	r2, r3
    3872:	230c      	movs	r3, #12
    3874:	2120      	movs	r1, #32
    3876:	468c      	mov	ip, r1
    3878:	44bc      	add	ip, r7
    387a:	4463      	add	r3, ip
    387c:	805a      	strh	r2, [r3, #2]
	packet.high_speed = false;
    387e:	230c      	movs	r3, #12
    3880:	2220      	movs	r2, #32
    3882:	4694      	mov	ip, r2
    3884:	44bc      	add	ip, r7
    3886:	4463      	add	r3, ip
    3888:	2200      	movs	r2, #0
    388a:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0;
    388c:	230c      	movs	r3, #12
    388e:	2220      	movs	r2, #32
    3890:	4694      	mov	ip, r2
    3892:	44bc      	add	ip, r7
    3894:	4463      	add	r3, ip
    3896:	2200      	movs	r2, #0
    3898:	729a      	strb	r2, [r3, #10]
	packet.ten_bit_address = 0;
    389a:	230c      	movs	r3, #12
    389c:	2220      	movs	r2, #32
    389e:	4694      	mov	ip, r2
    38a0:	44bc      	add	ip, r7
    38a2:	4463      	add	r3, ip
    38a4:	2200      	movs	r2, #0
    38a6:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet);
    38a8:	230c      	movs	r3, #12
    38aa:	2220      	movs	r2, #32
    38ac:	18ba      	adds	r2, r7, r2
    38ae:	18d2      	adds	r2, r2, r3
    38b0:	4b06      	ldr	r3, [pc, #24]	; (38cc <i2c_write_bytes+0x128>)
    38b2:	0011      	movs	r1, r2
    38b4:	0018      	movs	r0, r3
    38b6:	4b06      	ldr	r3, [pc, #24]	; (38d0 <i2c_write_bytes+0x12c>)
    38b8:	4798      	blx	r3
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	469d      	mov	sp, r3
 }
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	46bd      	mov	sp, r7
    38c2:	b011      	add	sp, #68	; 0x44
    38c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00007169 	.word	0x00007169
    38cc:	20000154 	.word	0x20000154
    38d0:	00001f39 	.word	0x00001f39

000038d4 <i2c_read_bytes>:

 void i2c_read_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    38d4:	b590      	push	{r4, r7, lr}
    38d6:	b089      	sub	sp, #36	; 0x24
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	000c      	movs	r4, r1
    38de:	0010      	movs	r0, r2
    38e0:	0019      	movs	r1, r3
    38e2:	1cfb      	adds	r3, r7, #3
    38e4:	1c22      	adds	r2, r4, #0
    38e6:	701a      	strb	r2, [r3, #0]
    38e8:	1cbb      	adds	r3, r7, #2
    38ea:	1c02      	adds	r2, r0, #0
    38ec:	701a      	strb	r2, [r3, #0]
    38ee:	1c7b      	adds	r3, r7, #1
    38f0:	1c0a      	adds	r2, r1, #0
    38f2:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet_setup;
	packet_setup.address = i2c_address;
    38f4:	1cbb      	adds	r3, r7, #2
    38f6:	781b      	ldrb	r3, [r3, #0]
    38f8:	b29a      	uxth	r2, r3
    38fa:	2314      	movs	r3, #20
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	801a      	strh	r2, [r3, #0]
	packet_setup.data = &reg;
    3900:	2314      	movs	r3, #20
    3902:	18fb      	adds	r3, r7, r3
    3904:	1c7a      	adds	r2, r7, #1
    3906:	605a      	str	r2, [r3, #4]
	packet_setup.data_length = 1;
    3908:	2314      	movs	r3, #20
    390a:	18fb      	adds	r3, r7, r3
    390c:	2201      	movs	r2, #1
    390e:	805a      	strh	r2, [r3, #2]
	packet_setup.high_speed = false;
    3910:	2314      	movs	r3, #20
    3912:	18fb      	adds	r3, r7, r3
    3914:	2200      	movs	r2, #0
    3916:	725a      	strb	r2, [r3, #9]
	packet_setup.hs_master_code = 0;
    3918:	2314      	movs	r3, #20
    391a:	18fb      	adds	r3, r7, r3
    391c:	2200      	movs	r2, #0
    391e:	729a      	strb	r2, [r3, #10]
	packet_setup.ten_bit_address = 0;
    3920:	2314      	movs	r3, #20
    3922:	18fb      	adds	r3, r7, r3
    3924:	2200      	movs	r2, #0
    3926:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet_setup);
    3928:	2314      	movs	r3, #20
    392a:	18fa      	adds	r2, r7, r3
    392c:	4b15      	ldr	r3, [pc, #84]	; (3984 <i2c_read_bytes+0xb0>)
    392e:	0011      	movs	r1, r2
    3930:	0018      	movs	r0, r3
    3932:	4b15      	ldr	r3, [pc, #84]	; (3988 <i2c_read_bytes+0xb4>)
    3934:	4798      	blx	r3

	struct i2c_master_packet packet_read;
	packet_read.address = i2c_address;
    3936:	1cbb      	adds	r3, r7, #2
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	b29a      	uxth	r2, r3
    393c:	2308      	movs	r3, #8
    393e:	18fb      	adds	r3, r7, r3
    3940:	801a      	strh	r2, [r3, #0]
	packet_read.data = data;
    3942:	2308      	movs	r3, #8
    3944:	18fb      	adds	r3, r7, r3
    3946:	687a      	ldr	r2, [r7, #4]
    3948:	605a      	str	r2, [r3, #4]
	packet_read.data_length = data_length;
    394a:	1cfb      	adds	r3, r7, #3
    394c:	781b      	ldrb	r3, [r3, #0]
    394e:	b29a      	uxth	r2, r3
    3950:	2308      	movs	r3, #8
    3952:	18fb      	adds	r3, r7, r3
    3954:	805a      	strh	r2, [r3, #2]
	packet_read.high_speed = false;
    3956:	2308      	movs	r3, #8
    3958:	18fb      	adds	r3, r7, r3
    395a:	2200      	movs	r2, #0
    395c:	725a      	strb	r2, [r3, #9]
	packet_read.hs_master_code = 0;
    395e:	2308      	movs	r3, #8
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	729a      	strb	r2, [r3, #10]
	packet_read.ten_bit_address = 0;
    3966:	2308      	movs	r3, #8
    3968:	18fb      	adds	r3, r7, r3
    396a:	2200      	movs	r2, #0
    396c:	721a      	strb	r2, [r3, #8]

	i2c_master_read_packet_wait(&module, &packet_read);
    396e:	2308      	movs	r3, #8
    3970:	18fa      	adds	r2, r7, r3
    3972:	4b04      	ldr	r3, [pc, #16]	; (3984 <i2c_read_bytes+0xb0>)
    3974:	0011      	movs	r1, r2
    3976:	0018      	movs	r0, r3
    3978:	4b04      	ldr	r3, [pc, #16]	; (398c <i2c_read_bytes+0xb8>)
    397a:	4798      	blx	r3
    397c:	46c0      	nop			; (mov r8, r8)
    397e:	46bd      	mov	sp, r7
    3980:	b009      	add	sp, #36	; 0x24
    3982:	bd90      	pop	{r4, r7, pc}
    3984:	20000154 	.word	0x20000154
    3988:	00001f39 	.word	0x00001f39
    398c:	00001d91 	.word	0x00001d91

00003990 <init_lis3dh>:
 #include "i2c_interface.h"

 #include "lis3dh.h"

 void init_lis3dh(void)
 {
    3990:	b590      	push	{r4, r7, lr}
    3992:	b083      	sub	sp, #12
    3994:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    3996:	1dfb      	adds	r3, r7, #7
    3998:	2200      	movs	r2, #0
    399a:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, LIS3DH_ADDRESS, REG_WHO_AM_I);
    399c:	1df8      	adds	r0, r7, #7
    399e:	230f      	movs	r3, #15
    39a0:	2219      	movs	r2, #25
    39a2:	2101      	movs	r1, #1
    39a4:	4c0e      	ldr	r4, [pc, #56]	; (39e0 <init_lis3dh+0x50>)
    39a6:	47a0      	blx	r4
	if(me != WHO_AM_I_VAL)
    39a8:	1dfb      	adds	r3, r7, #7
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	2b33      	cmp	r3, #51	; 0x33
    39ae:	d112      	bne.n	39d6 <init_lis3dh+0x46>
		return;
	}

	// Set up sensors
	// 50Hz ODR, low power mode -> 6uA typical
	uint8_t data = (0x04 << 4) | (0x01 << 3) | (0x07 << 0);   // 50Hz, all axes enabled, low power mode
    39b0:	1dbb      	adds	r3, r7, #6
    39b2:	224f      	movs	r2, #79	; 0x4f
    39b4:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
    39b6:	1db8      	adds	r0, r7, #6
    39b8:	2320      	movs	r3, #32
    39ba:	2219      	movs	r2, #25
    39bc:	2101      	movs	r1, #1
    39be:	4c09      	ldr	r4, [pc, #36]	; (39e4 <init_lis3dh+0x54>)
    39c0:	47a0      	blx	r4

	data = (0x01 << 4); // +/-4g range
    39c2:	1dbb      	adds	r3, r7, #6
    39c4:	2210      	movs	r2, #16
    39c6:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG4);
    39c8:	1db8      	adds	r0, r7, #6
    39ca:	2323      	movs	r3, #35	; 0x23
    39cc:	2219      	movs	r2, #25
    39ce:	2101      	movs	r1, #1
    39d0:	4c04      	ldr	r4, [pc, #16]	; (39e4 <init_lis3dh+0x54>)
    39d2:	47a0      	blx	r4
    39d4:	e000      	b.n	39d8 <init_lis3dh+0x48>
		return;
    39d6:	46c0      	nop			; (mov r8, r8)
 }
    39d8:	46bd      	mov	sp, r7
    39da:	b003      	add	sp, #12
    39dc:	bd90      	pop	{r4, r7, pc}
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	000038d5 	.word	0x000038d5
    39e4:	000037a5 	.word	0x000037a5

000039e8 <read_lis3dh_raw>:
	uint8_t data = 0;   // shut down mode, ODR all 0
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
 }

 void read_lis3dh_raw(lis3dh_data_raw_t * data)
 {
    39e8:	b590      	push	{r4, r7, lr}
    39ea:	b085      	sub	sp, #20
    39ec:	af00      	add	r7, sp, #0
    39ee:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	i2c_read_bytes(buffer, 6, LIS3DH_ADDRESS, REG_OUT_X_L | 0x80); // 0x80 enables auto increment
    39f0:	2308      	movs	r3, #8
    39f2:	18f8      	adds	r0, r7, r3
    39f4:	23a8      	movs	r3, #168	; 0xa8
    39f6:	2219      	movs	r2, #25
    39f8:	2106      	movs	r1, #6
    39fa:	4c1e      	ldr	r4, [pc, #120]	; (3a74 <read_lis3dh_raw+0x8c>)
    39fc:	47a0      	blx	r4
	data->x = buffer[0];
    39fe:	2308      	movs	r3, #8
    3a00:	18fb      	adds	r3, r7, r3
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	b21a      	sxth	r2, r3
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	801a      	strh	r2, [r3, #0]
	data->x |= ((uint16_t) buffer[1]) << 8;
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	2200      	movs	r2, #0
    3a0e:	5e9a      	ldrsh	r2, [r3, r2]
    3a10:	2308      	movs	r3, #8
    3a12:	18fb      	adds	r3, r7, r3
    3a14:	785b      	ldrb	r3, [r3, #1]
    3a16:	021b      	lsls	r3, r3, #8
    3a18:	b21b      	sxth	r3, r3
    3a1a:	4313      	orrs	r3, r2
    3a1c:	b21a      	sxth	r2, r3
    3a1e:	687b      	ldr	r3, [r7, #4]
    3a20:	801a      	strh	r2, [r3, #0]
	data->y = buffer[2];
    3a22:	2308      	movs	r3, #8
    3a24:	18fb      	adds	r3, r7, r3
    3a26:	789b      	ldrb	r3, [r3, #2]
    3a28:	b21a      	sxth	r2, r3
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	805a      	strh	r2, [r3, #2]
	data->y |= ((uint16_t) buffer[3]) << 8;
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	2202      	movs	r2, #2
    3a32:	5e9a      	ldrsh	r2, [r3, r2]
    3a34:	2308      	movs	r3, #8
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	78db      	ldrb	r3, [r3, #3]
    3a3a:	021b      	lsls	r3, r3, #8
    3a3c:	b21b      	sxth	r3, r3
    3a3e:	4313      	orrs	r3, r2
    3a40:	b21a      	sxth	r2, r3
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	805a      	strh	r2, [r3, #2]
	data->z = buffer[4];
    3a46:	2308      	movs	r3, #8
    3a48:	18fb      	adds	r3, r7, r3
    3a4a:	791b      	ldrb	r3, [r3, #4]
    3a4c:	b21a      	sxth	r2, r3
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	809a      	strh	r2, [r3, #4]
	data->z |= ((uint16_t) buffer[5]) << 8;
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	2204      	movs	r2, #4
    3a56:	5e9a      	ldrsh	r2, [r3, r2]
    3a58:	2308      	movs	r3, #8
    3a5a:	18fb      	adds	r3, r7, r3
    3a5c:	795b      	ldrb	r3, [r3, #5]
    3a5e:	021b      	lsls	r3, r3, #8
    3a60:	b21b      	sxth	r3, r3
    3a62:	4313      	orrs	r3, r2
    3a64:	b21a      	sxth	r2, r3
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	809a      	strh	r2, [r3, #4]
 }
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	46bd      	mov	sp, r7
    3a6e:	b005      	add	sp, #20
    3a70:	bd90      	pop	{r4, r7, pc}
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	000038d5 	.word	0x000038d5

00003a78 <read_lis3dh_g>:

 void read_lis3dh_g(lis3dh_data_g_t * data)
 {
    3a78:	b590      	push	{r4, r7, lr}
    3a7a:	b085      	sub	sp, #20
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
	lis3dh_data_raw_t raw;
	read_lis3dh_raw(&raw);
    3a80:	2308      	movs	r3, #8
    3a82:	18fb      	adds	r3, r7, r3
    3a84:	0018      	movs	r0, r3
    3a86:	4b24      	ldr	r3, [pc, #144]	; (3b18 <read_lis3dh_g+0xa0>)
    3a88:	4798      	blx	r3
	// 8 bit mode, +/-4g range
	data->x = raw.x * 0.00012207;
    3a8a:	2308      	movs	r3, #8
    3a8c:	18fb      	adds	r3, r7, r3
    3a8e:	2200      	movs	r2, #0
    3a90:	5e9a      	ldrsh	r2, [r3, r2]
    3a92:	4b22      	ldr	r3, [pc, #136]	; (3b1c <read_lis3dh_g+0xa4>)
    3a94:	0010      	movs	r0, r2
    3a96:	4798      	blx	r3
    3a98:	4c21      	ldr	r4, [pc, #132]	; (3b20 <read_lis3dh_g+0xa8>)
    3a9a:	4a22      	ldr	r2, [pc, #136]	; (3b24 <read_lis3dh_g+0xac>)
    3a9c:	4b22      	ldr	r3, [pc, #136]	; (3b28 <read_lis3dh_g+0xb0>)
    3a9e:	47a0      	blx	r4
    3aa0:	0003      	movs	r3, r0
    3aa2:	000c      	movs	r4, r1
    3aa4:	0019      	movs	r1, r3
    3aa6:	0022      	movs	r2, r4
    3aa8:	4b20      	ldr	r3, [pc, #128]	; (3b2c <read_lis3dh_g+0xb4>)
    3aaa:	0008      	movs	r0, r1
    3aac:	0011      	movs	r1, r2
    3aae:	4798      	blx	r3
    3ab0:	1c02      	adds	r2, r0, #0
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	601a      	str	r2, [r3, #0]
	data->y = raw.y * 0.00012207;
    3ab6:	2308      	movs	r3, #8
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	2202      	movs	r2, #2
    3abc:	5e9a      	ldrsh	r2, [r3, r2]
    3abe:	4b17      	ldr	r3, [pc, #92]	; (3b1c <read_lis3dh_g+0xa4>)
    3ac0:	0010      	movs	r0, r2
    3ac2:	4798      	blx	r3
    3ac4:	4c16      	ldr	r4, [pc, #88]	; (3b20 <read_lis3dh_g+0xa8>)
    3ac6:	4a17      	ldr	r2, [pc, #92]	; (3b24 <read_lis3dh_g+0xac>)
    3ac8:	4b17      	ldr	r3, [pc, #92]	; (3b28 <read_lis3dh_g+0xb0>)
    3aca:	47a0      	blx	r4
    3acc:	0003      	movs	r3, r0
    3ace:	000c      	movs	r4, r1
    3ad0:	0019      	movs	r1, r3
    3ad2:	0022      	movs	r2, r4
    3ad4:	4b15      	ldr	r3, [pc, #84]	; (3b2c <read_lis3dh_g+0xb4>)
    3ad6:	0008      	movs	r0, r1
    3ad8:	0011      	movs	r1, r2
    3ada:	4798      	blx	r3
    3adc:	1c02      	adds	r2, r0, #0
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	605a      	str	r2, [r3, #4]
	data->z = raw.z * 0.00012207;
    3ae2:	2308      	movs	r3, #8
    3ae4:	18fb      	adds	r3, r7, r3
    3ae6:	2204      	movs	r2, #4
    3ae8:	5e9a      	ldrsh	r2, [r3, r2]
    3aea:	4b0c      	ldr	r3, [pc, #48]	; (3b1c <read_lis3dh_g+0xa4>)
    3aec:	0010      	movs	r0, r2
    3aee:	4798      	blx	r3
    3af0:	4c0b      	ldr	r4, [pc, #44]	; (3b20 <read_lis3dh_g+0xa8>)
    3af2:	4a0c      	ldr	r2, [pc, #48]	; (3b24 <read_lis3dh_g+0xac>)
    3af4:	4b0c      	ldr	r3, [pc, #48]	; (3b28 <read_lis3dh_g+0xb0>)
    3af6:	47a0      	blx	r4
    3af8:	0003      	movs	r3, r0
    3afa:	000c      	movs	r4, r1
    3afc:	0019      	movs	r1, r3
    3afe:	0022      	movs	r2, r4
    3b00:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <read_lis3dh_g+0xb4>)
    3b02:	0008      	movs	r0, r1
    3b04:	0011      	movs	r1, r2
    3b06:	4798      	blx	r3
    3b08:	1c02      	adds	r2, r0, #0
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	609a      	str	r2, [r3, #8]
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	46bd      	mov	sp, r7
    3b12:	b005      	add	sp, #20
    3b14:	bd90      	pop	{r4, r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	000039e9 	.word	0x000039e9
    3b1c:	00006d0d 	.word	0x00006d0d
    3b20:	00006179 	.word	0x00006179
    3b24:	a19c4774 	.word	0xa19c4774
    3b28:	3f1ffffa 	.word	0x3f1ffffa
    3b2c:	00006e01 	.word	0x00006e01

00003b30 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b082      	sub	sp, #8
    3b34:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    3b36:	4b04      	ldr	r3, [pc, #16]	; (3b48 <wdt_clear_early_warning+0x18>)
    3b38:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	2201      	movs	r2, #1
    3b3e:	719a      	strb	r2, [r3, #6]
}
    3b40:	46c0      	nop			; (mov r8, r8)
    3b42:	46bd      	mov	sp, r7
    3b44:	b002      	add	sp, #8
    3b46:	bd80      	pop	{r7, pc}
    3b48:	40001c00 	.word	0x40001c00

00003b4c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    3b50:	4b05      	ldr	r3, [pc, #20]	; (3b68 <WDT_Handler+0x1c>)
    3b52:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    3b54:	4b05      	ldr	r3, [pc, #20]	; (3b6c <WDT_Handler+0x20>)
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d002      	beq.n	3b62 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    3b5c:	4b03      	ldr	r3, [pc, #12]	; (3b6c <WDT_Handler+0x20>)
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	4798      	blx	r3
	}
}
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	46bd      	mov	sp, r7
    3b66:	bd80      	pop	{r7, pc}
    3b68:	00003b31 	.word	0x00003b31
    3b6c:	200001a0 	.word	0x200001a0

00003b70 <system_gclk_chan_get_config_defaults>:
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b082      	sub	sp, #8
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3b78:	687b      	ldr	r3, [r7, #4]
    3b7a:	2200      	movs	r2, #0
    3b7c:	701a      	strb	r2, [r3, #0]
}
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	46bd      	mov	sp, r7
    3b82:	b002      	add	sp, #8
    3b84:	bd80      	pop	{r7, pc}
	...

00003b88 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b084      	sub	sp, #16
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	0002      	movs	r2, r0
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	701a      	strb	r2, [r3, #0]
    3b94:	1dbb      	adds	r3, r7, #6
    3b96:	1c0a      	adds	r2, r1, #0
    3b98:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3b9a:	4b1a      	ldr	r3, [pc, #104]	; (3c04 <sercom_set_gclk_generator+0x7c>)
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	2201      	movs	r2, #1
    3ba0:	4053      	eors	r3, r2
    3ba2:	b2db      	uxtb	r3, r3
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d103      	bne.n	3bb0 <sercom_set_gclk_generator+0x28>
    3ba8:	1dbb      	adds	r3, r7, #6
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d01b      	beq.n	3be8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3bb0:	230c      	movs	r3, #12
    3bb2:	18fb      	adds	r3, r7, r3
    3bb4:	0018      	movs	r0, r3
    3bb6:	4b14      	ldr	r3, [pc, #80]	; (3c08 <sercom_set_gclk_generator+0x80>)
    3bb8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3bba:	230c      	movs	r3, #12
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	1dfa      	adds	r2, r7, #7
    3bc0:	7812      	ldrb	r2, [r2, #0]
    3bc2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3bc4:	230c      	movs	r3, #12
    3bc6:	18fb      	adds	r3, r7, r3
    3bc8:	0019      	movs	r1, r3
    3bca:	2011      	movs	r0, #17
    3bcc:	4b0f      	ldr	r3, [pc, #60]	; (3c0c <sercom_set_gclk_generator+0x84>)
    3bce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3bd0:	2011      	movs	r0, #17
    3bd2:	4b0f      	ldr	r3, [pc, #60]	; (3c10 <sercom_set_gclk_generator+0x88>)
    3bd4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3bd6:	4b0b      	ldr	r3, [pc, #44]	; (3c04 <sercom_set_gclk_generator+0x7c>)
    3bd8:	1dfa      	adds	r2, r7, #7
    3bda:	7812      	ldrb	r2, [r2, #0]
    3bdc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3bde:	4b09      	ldr	r3, [pc, #36]	; (3c04 <sercom_set_gclk_generator+0x7c>)
    3be0:	2201      	movs	r2, #1
    3be2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3be4:	2300      	movs	r3, #0
    3be6:	e008      	b.n	3bfa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3be8:	4b06      	ldr	r3, [pc, #24]	; (3c04 <sercom_set_gclk_generator+0x7c>)
    3bea:	785b      	ldrb	r3, [r3, #1]
    3bec:	1dfa      	adds	r2, r7, #7
    3bee:	7812      	ldrb	r2, [r2, #0]
    3bf0:	429a      	cmp	r2, r3
    3bf2:	d101      	bne.n	3bf8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3bf4:	2300      	movs	r3, #0
    3bf6:	e000      	b.n	3bfa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3bf8:	231d      	movs	r3, #29
}
    3bfa:	0018      	movs	r0, r3
    3bfc:	46bd      	mov	sp, r7
    3bfe:	b004      	add	sp, #16
    3c00:	bd80      	pop	{r7, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	20000160 	.word	0x20000160
    3c08:	00003b71 	.word	0x00003b71
    3c0c:	000046f9 	.word	0x000046f9
    3c10:	00004739 	.word	0x00004739

00003c14 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b082      	sub	sp, #8
    3c18:	af00      	add	r7, sp, #0
    3c1a:	6078      	str	r0, [r7, #4]
    3c1c:	000a      	movs	r2, r1
    3c1e:	1cfb      	adds	r3, r7, #3
    3c20:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	4a4e      	ldr	r2, [pc, #312]	; (3d60 <_sercom_get_default_pad+0x14c>)
    3c26:	4293      	cmp	r3, r2
    3c28:	d040      	beq.n	3cac <_sercom_get_default_pad+0x98>
    3c2a:	4a4d      	ldr	r2, [pc, #308]	; (3d60 <_sercom_get_default_pad+0x14c>)
    3c2c:	4293      	cmp	r3, r2
    3c2e:	d807      	bhi.n	3c40 <_sercom_get_default_pad+0x2c>
    3c30:	2284      	movs	r2, #132	; 0x84
    3c32:	05d2      	lsls	r2, r2, #23
    3c34:	4293      	cmp	r3, r2
    3c36:	d00f      	beq.n	3c58 <_sercom_get_default_pad+0x44>
    3c38:	4a4a      	ldr	r2, [pc, #296]	; (3d64 <_sercom_get_default_pad+0x150>)
    3c3a:	4293      	cmp	r3, r2
    3c3c:	d021      	beq.n	3c82 <_sercom_get_default_pad+0x6e>
    3c3e:	e089      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3c40:	4a49      	ldr	r2, [pc, #292]	; (3d68 <_sercom_get_default_pad+0x154>)
    3c42:	4293      	cmp	r3, r2
    3c44:	d100      	bne.n	3c48 <_sercom_get_default_pad+0x34>
    3c46:	e05b      	b.n	3d00 <_sercom_get_default_pad+0xec>
    3c48:	4a48      	ldr	r2, [pc, #288]	; (3d6c <_sercom_get_default_pad+0x158>)
    3c4a:	4293      	cmp	r3, r2
    3c4c:	d100      	bne.n	3c50 <_sercom_get_default_pad+0x3c>
    3c4e:	e06c      	b.n	3d2a <_sercom_get_default_pad+0x116>
    3c50:	4a47      	ldr	r2, [pc, #284]	; (3d70 <_sercom_get_default_pad+0x15c>)
    3c52:	4293      	cmp	r3, r2
    3c54:	d03f      	beq.n	3cd6 <_sercom_get_default_pad+0xc2>
    3c56:	e07d      	b.n	3d54 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c58:	1cfb      	adds	r3, r7, #3
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	2b01      	cmp	r3, #1
    3c5e:	d00a      	beq.n	3c76 <_sercom_get_default_pad+0x62>
    3c60:	dc02      	bgt.n	3c68 <_sercom_get_default_pad+0x54>
    3c62:	2b00      	cmp	r3, #0
    3c64:	d005      	beq.n	3c72 <_sercom_get_default_pad+0x5e>
    3c66:	e075      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3c68:	2b02      	cmp	r3, #2
    3c6a:	d006      	beq.n	3c7a <_sercom_get_default_pad+0x66>
    3c6c:	2b03      	cmp	r3, #3
    3c6e:	d006      	beq.n	3c7e <_sercom_get_default_pad+0x6a>
    3c70:	e070      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3c72:	4b40      	ldr	r3, [pc, #256]	; (3d74 <_sercom_get_default_pad+0x160>)
    3c74:	e06f      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3c76:	4b40      	ldr	r3, [pc, #256]	; (3d78 <_sercom_get_default_pad+0x164>)
    3c78:	e06d      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3c7a:	4b40      	ldr	r3, [pc, #256]	; (3d7c <_sercom_get_default_pad+0x168>)
    3c7c:	e06b      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3c7e:	4b40      	ldr	r3, [pc, #256]	; (3d80 <_sercom_get_default_pad+0x16c>)
    3c80:	e069      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3c82:	1cfb      	adds	r3, r7, #3
    3c84:	781b      	ldrb	r3, [r3, #0]
    3c86:	2b01      	cmp	r3, #1
    3c88:	d00a      	beq.n	3ca0 <_sercom_get_default_pad+0x8c>
    3c8a:	dc02      	bgt.n	3c92 <_sercom_get_default_pad+0x7e>
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d005      	beq.n	3c9c <_sercom_get_default_pad+0x88>
    3c90:	e060      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3c92:	2b02      	cmp	r3, #2
    3c94:	d006      	beq.n	3ca4 <_sercom_get_default_pad+0x90>
    3c96:	2b03      	cmp	r3, #3
    3c98:	d006      	beq.n	3ca8 <_sercom_get_default_pad+0x94>
    3c9a:	e05b      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3c9c:	2303      	movs	r3, #3
    3c9e:	e05a      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3ca0:	4b38      	ldr	r3, [pc, #224]	; (3d84 <_sercom_get_default_pad+0x170>)
    3ca2:	e058      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3ca4:	4b38      	ldr	r3, [pc, #224]	; (3d88 <_sercom_get_default_pad+0x174>)
    3ca6:	e056      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3ca8:	4b38      	ldr	r3, [pc, #224]	; (3d8c <_sercom_get_default_pad+0x178>)
    3caa:	e054      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cac:	1cfb      	adds	r3, r7, #3
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	2b01      	cmp	r3, #1
    3cb2:	d00a      	beq.n	3cca <_sercom_get_default_pad+0xb6>
    3cb4:	dc02      	bgt.n	3cbc <_sercom_get_default_pad+0xa8>
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d005      	beq.n	3cc6 <_sercom_get_default_pad+0xb2>
    3cba:	e04b      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3cbc:	2b02      	cmp	r3, #2
    3cbe:	d006      	beq.n	3cce <_sercom_get_default_pad+0xba>
    3cc0:	2b03      	cmp	r3, #3
    3cc2:	d006      	beq.n	3cd2 <_sercom_get_default_pad+0xbe>
    3cc4:	e046      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3cc6:	4b32      	ldr	r3, [pc, #200]	; (3d90 <_sercom_get_default_pad+0x17c>)
    3cc8:	e045      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cca:	4b32      	ldr	r3, [pc, #200]	; (3d94 <_sercom_get_default_pad+0x180>)
    3ccc:	e043      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cce:	4b32      	ldr	r3, [pc, #200]	; (3d98 <_sercom_get_default_pad+0x184>)
    3cd0:	e041      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cd2:	4b32      	ldr	r3, [pc, #200]	; (3d9c <_sercom_get_default_pad+0x188>)
    3cd4:	e03f      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cd6:	1cfb      	adds	r3, r7, #3
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	2b01      	cmp	r3, #1
    3cdc:	d00a      	beq.n	3cf4 <_sercom_get_default_pad+0xe0>
    3cde:	dc02      	bgt.n	3ce6 <_sercom_get_default_pad+0xd2>
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d005      	beq.n	3cf0 <_sercom_get_default_pad+0xdc>
    3ce4:	e036      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3ce6:	2b02      	cmp	r3, #2
    3ce8:	d006      	beq.n	3cf8 <_sercom_get_default_pad+0xe4>
    3cea:	2b03      	cmp	r3, #3
    3cec:	d006      	beq.n	3cfc <_sercom_get_default_pad+0xe8>
    3cee:	e031      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3cf0:	4b2b      	ldr	r3, [pc, #172]	; (3da0 <_sercom_get_default_pad+0x18c>)
    3cf2:	e030      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cf4:	4b2b      	ldr	r3, [pc, #172]	; (3da4 <_sercom_get_default_pad+0x190>)
    3cf6:	e02e      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cf8:	4b2b      	ldr	r3, [pc, #172]	; (3da8 <_sercom_get_default_pad+0x194>)
    3cfa:	e02c      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3cfc:	4b2b      	ldr	r3, [pc, #172]	; (3dac <_sercom_get_default_pad+0x198>)
    3cfe:	e02a      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d00:	1cfb      	adds	r3, r7, #3
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	2b01      	cmp	r3, #1
    3d06:	d00a      	beq.n	3d1e <_sercom_get_default_pad+0x10a>
    3d08:	dc02      	bgt.n	3d10 <_sercom_get_default_pad+0xfc>
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d005      	beq.n	3d1a <_sercom_get_default_pad+0x106>
    3d0e:	e021      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3d10:	2b02      	cmp	r3, #2
    3d12:	d006      	beq.n	3d22 <_sercom_get_default_pad+0x10e>
    3d14:	2b03      	cmp	r3, #3
    3d16:	d006      	beq.n	3d26 <_sercom_get_default_pad+0x112>
    3d18:	e01c      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3d1a:	4b25      	ldr	r3, [pc, #148]	; (3db0 <_sercom_get_default_pad+0x19c>)
    3d1c:	e01b      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d1e:	4b25      	ldr	r3, [pc, #148]	; (3db4 <_sercom_get_default_pad+0x1a0>)
    3d20:	e019      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d22:	4b25      	ldr	r3, [pc, #148]	; (3db8 <_sercom_get_default_pad+0x1a4>)
    3d24:	e017      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d26:	4b25      	ldr	r3, [pc, #148]	; (3dbc <_sercom_get_default_pad+0x1a8>)
    3d28:	e015      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d2a:	1cfb      	adds	r3, r7, #3
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	2b01      	cmp	r3, #1
    3d30:	d00a      	beq.n	3d48 <_sercom_get_default_pad+0x134>
    3d32:	dc02      	bgt.n	3d3a <_sercom_get_default_pad+0x126>
    3d34:	2b00      	cmp	r3, #0
    3d36:	d005      	beq.n	3d44 <_sercom_get_default_pad+0x130>
    3d38:	e00c      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3d3a:	2b02      	cmp	r3, #2
    3d3c:	d006      	beq.n	3d4c <_sercom_get_default_pad+0x138>
    3d3e:	2b03      	cmp	r3, #3
    3d40:	d006      	beq.n	3d50 <_sercom_get_default_pad+0x13c>
    3d42:	e007      	b.n	3d54 <_sercom_get_default_pad+0x140>
    3d44:	4b1e      	ldr	r3, [pc, #120]	; (3dc0 <_sercom_get_default_pad+0x1ac>)
    3d46:	e006      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d48:	4b1e      	ldr	r3, [pc, #120]	; (3dc4 <_sercom_get_default_pad+0x1b0>)
    3d4a:	e004      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d4c:	4b1e      	ldr	r3, [pc, #120]	; (3dc8 <_sercom_get_default_pad+0x1b4>)
    3d4e:	e002      	b.n	3d56 <_sercom_get_default_pad+0x142>
    3d50:	4b1e      	ldr	r3, [pc, #120]	; (3dcc <_sercom_get_default_pad+0x1b8>)
    3d52:	e000      	b.n	3d56 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    3d54:	2300      	movs	r3, #0
}
    3d56:	0018      	movs	r0, r3
    3d58:	46bd      	mov	sp, r7
    3d5a:	b002      	add	sp, #8
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	42000800 	.word	0x42000800
    3d64:	42000400 	.word	0x42000400
    3d68:	42001000 	.word	0x42001000
    3d6c:	43000400 	.word	0x43000400
    3d70:	42000c00 	.word	0x42000c00
    3d74:	00040003 	.word	0x00040003
    3d78:	00050003 	.word	0x00050003
    3d7c:	00060003 	.word	0x00060003
    3d80:	00070003 	.word	0x00070003
    3d84:	00010003 	.word	0x00010003
    3d88:	001e0003 	.word	0x001e0003
    3d8c:	001f0003 	.word	0x001f0003
    3d90:	00080003 	.word	0x00080003
    3d94:	00090003 	.word	0x00090003
    3d98:	000a0003 	.word	0x000a0003
    3d9c:	000b0003 	.word	0x000b0003
    3da0:	00100003 	.word	0x00100003
    3da4:	00110003 	.word	0x00110003
    3da8:	00120003 	.word	0x00120003
    3dac:	00130003 	.word	0x00130003
    3db0:	000c0003 	.word	0x000c0003
    3db4:	000d0003 	.word	0x000d0003
    3db8:	000e0003 	.word	0x000e0003
    3dbc:	000f0003 	.word	0x000f0003
    3dc0:	00160003 	.word	0x00160003
    3dc4:	00170003 	.word	0x00170003
    3dc8:	00180003 	.word	0x00180003
    3dcc:	00190003 	.word	0x00190003

00003dd0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3dd0:	b590      	push	{r4, r7, lr}
    3dd2:	b08b      	sub	sp, #44	; 0x2c
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3dd8:	230c      	movs	r3, #12
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	4a0f      	ldr	r2, [pc, #60]	; (3e1c <_sercom_get_sercom_inst_index+0x4c>)
    3dde:	ca13      	ldmia	r2!, {r0, r1, r4}
    3de0:	c313      	stmia	r3!, {r0, r1, r4}
    3de2:	ca13      	ldmia	r2!, {r0, r1, r4}
    3de4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3de6:	2300      	movs	r3, #0
    3de8:	627b      	str	r3, [r7, #36]	; 0x24
    3dea:	e00e      	b.n	3e0a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3dec:	230c      	movs	r3, #12
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3df2:	0092      	lsls	r2, r2, #2
    3df4:	58d3      	ldr	r3, [r2, r3]
    3df6:	001a      	movs	r2, r3
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	429a      	cmp	r2, r3
    3dfc:	d102      	bne.n	3e04 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e00:	b2db      	uxtb	r3, r3
    3e02:	e006      	b.n	3e12 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e06:	3301      	adds	r3, #1
    3e08:	627b      	str	r3, [r7, #36]	; 0x24
    3e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e0c:	2b05      	cmp	r3, #5
    3e0e:	d9ed      	bls.n	3dec <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e10:	2300      	movs	r3, #0
}
    3e12:	0018      	movs	r0, r3
    3e14:	46bd      	mov	sp, r7
    3e16:	b00b      	add	sp, #44	; 0x2c
    3e18:	bd90      	pop	{r4, r7, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	00007404 	.word	0x00007404

00003e20 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    3e20:	b580      	push	{r7, lr}
    3e22:	af00      	add	r7, sp, #0
}
    3e24:	46c0      	nop			; (mov r8, r8)
    3e26:	46bd      	mov	sp, r7
    3e28:	bd80      	pop	{r7, pc}

00003e2a <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    3e2a:	b580      	push	{r7, lr}
    3e2c:	b082      	sub	sp, #8
    3e2e:	af00      	add	r7, sp, #0
    3e30:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	095b      	lsrs	r3, r3, #5
}
    3e36:	0018      	movs	r0, r3
    3e38:	46bd      	mov	sp, r7
    3e3a:	b002      	add	sp, #8
    3e3c:	bd80      	pop	{r7, pc}
	...

00003e40 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b082      	sub	sp, #8
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	01db      	lsls	r3, r3, #7
    3e4c:	4a03      	ldr	r2, [pc, #12]	; (3e5c <arch_ioport_port_to_base+0x1c>)
    3e4e:	4694      	mov	ip, r2
    3e50:	4463      	add	r3, ip
}
    3e52:	0018      	movs	r0, r3
    3e54:	46bd      	mov	sp, r7
    3e56:	b002      	add	sp, #8
    3e58:	bd80      	pop	{r7, pc}
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	40002800 	.word	0x40002800

00003e60 <arch_ioport_pin_to_mask>:
{
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b082      	sub	sp, #8
    3e64:	af00      	add	r7, sp, #0
    3e66:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	221f      	movs	r2, #31
    3e6c:	4013      	ands	r3, r2
    3e6e:	2201      	movs	r2, #1
    3e70:	409a      	lsls	r2, r3
    3e72:	0013      	movs	r3, r2
}
    3e74:	0018      	movs	r0, r3
    3e76:	46bd      	mov	sp, r7
    3e78:	b002      	add	sp, #8
    3e7a:	bd80      	pop	{r7, pc}

00003e7c <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b08a      	sub	sp, #40	; 0x28
    3e80:	af00      	add	r7, sp, #0
    3e82:	60f8      	str	r0, [r7, #12]
    3e84:	60b9      	str	r1, [r7, #8]
    3e86:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    3e88:	68fb      	ldr	r3, [r7, #12]
    3e8a:	0018      	movs	r0, r3
    3e8c:	4b2b      	ldr	r3, [pc, #172]	; (3f3c <arch_ioport_set_port_mode+0xc0>)
    3e8e:	4798      	blx	r3
    3e90:	0003      	movs	r3, r0
    3e92:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
    3e94:	2300      	movs	r3, #0
    3e96:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    3e98:	2300      	movs	r3, #0
    3e9a:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
    3e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e9e:	2280      	movs	r2, #128	; 0x80
    3ea0:	0292      	lsls	r2, r2, #10
    3ea2:	4313      	orrs	r3, r2
    3ea4:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	2220      	movs	r2, #32
    3eaa:	4013      	ands	r3, r2
    3eac:	d103      	bne.n	3eb6 <arch_ioport_set_port_mode+0x3a>
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	2210      	movs	r2, #16
    3eb2:	4013      	ands	r3, r2
    3eb4:	d004      	beq.n	3ec0 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    3eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eb8:	2280      	movs	r2, #128	; 0x80
    3eba:	02d2      	lsls	r2, r2, #11
    3ebc:	4313      	orrs	r3, r2
    3ebe:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	2280      	movs	r2, #128	; 0x80
    3ec4:	4013      	ands	r3, r2
    3ec6:	d004      	beq.n	3ed2 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    3ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eca:	2280      	movs	r2, #128	; 0x80
    3ecc:	03d2      	lsls	r2, r2, #15
    3ece:	4313      	orrs	r3, r2
    3ed0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	061a      	lsls	r2, r3, #24
    3ed6:	23f0      	movs	r3, #240	; 0xf0
    3ed8:	051b      	lsls	r3, r3, #20
    3eda:	4013      	ands	r3, r2
    3edc:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
    3ede:	68bb      	ldr	r3, [r7, #8]
    3ee0:	041b      	lsls	r3, r3, #16
    3ee2:	0c1b      	lsrs	r3, r3, #16
    3ee4:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    3ee6:	68bb      	ldr	r3, [r7, #8]
    3ee8:	0c1b      	lsrs	r3, r3, #16
    3eea:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3eec:	69ba      	ldr	r2, [r7, #24]
    3eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ef0:	431a      	orrs	r2, r3
			config_mask | config_mux |
    3ef2:	69fb      	ldr	r3, [r7, #28]
    3ef4:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3ef6:	22a0      	movs	r2, #160	; 0xa0
    3ef8:	05d2      	lsls	r2, r2, #23
    3efa:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    3efc:	6a3b      	ldr	r3, [r7, #32]
    3efe:	629a      	str	r2, [r3, #40]	; 0x28

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3f00:	697a      	ldr	r2, [r7, #20]
    3f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f04:	431a      	orrs	r2, r3
			config_mask | config_mux |
    3f06:	69fb      	ldr	r3, [r7, #28]
    3f08:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3f0a:	22d0      	movs	r2, #208	; 0xd0
    3f0c:	0612      	lsls	r2, r2, #24
    3f0e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    3f10:	6a3b      	ldr	r3, [r7, #32]
    3f12:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	2220      	movs	r2, #32
    3f18:	4013      	ands	r3, r2
    3f1a:	d003      	beq.n	3f24 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    3f1c:	6a3b      	ldr	r3, [r7, #32]
    3f1e:	68ba      	ldr	r2, [r7, #8]
    3f20:	615a      	str	r2, [r3, #20]
	}
	else if (mode & IOPORT_MODE_PULLUP) {
		base->OUTSET.reg = mask;
	}
}
    3f22:	e006      	b.n	3f32 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	2210      	movs	r2, #16
    3f28:	4013      	ands	r3, r2
    3f2a:	d002      	beq.n	3f32 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    3f2c:	6a3b      	ldr	r3, [r7, #32]
    3f2e:	68ba      	ldr	r2, [r7, #8]
    3f30:	619a      	str	r2, [r3, #24]
}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	46bd      	mov	sp, r7
    3f36:	b00a      	add	sp, #40	; 0x28
    3f38:	bd80      	pop	{r7, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)
    3f3c:	00003e41 	.word	0x00003e41

00003f40 <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
    3f40:	b590      	push	{r4, r7, lr}
    3f42:	b083      	sub	sp, #12
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	0018      	movs	r0, r3
    3f4e:	4b08      	ldr	r3, [pc, #32]	; (3f70 <arch_ioport_set_pin_mode+0x30>)
    3f50:	4798      	blx	r3
    3f52:	0004      	movs	r4, r0
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	0018      	movs	r0, r3
    3f58:	4b06      	ldr	r3, [pc, #24]	; (3f74 <arch_ioport_set_pin_mode+0x34>)
    3f5a:	4798      	blx	r3
    3f5c:	0001      	movs	r1, r0
    3f5e:	683b      	ldr	r3, [r7, #0]
    3f60:	001a      	movs	r2, r3
    3f62:	0020      	movs	r0, r4
    3f64:	4b04      	ldr	r3, [pc, #16]	; (3f78 <arch_ioport_set_pin_mode+0x38>)
    3f66:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
    3f68:	46c0      	nop			; (mov r8, r8)
    3f6a:	46bd      	mov	sp, r7
    3f6c:	b003      	add	sp, #12
    3f6e:	bd90      	pop	{r4, r7, pc}
    3f70:	00003e2b 	.word	0x00003e2b
    3f74:	00003e61 	.word	0x00003e61
    3f78:	00003e7d 	.word	0x00003e7d

00003f7c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    3f86:	683a      	ldr	r2, [r7, #0]
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	0011      	movs	r1, r2
    3f8c:	0018      	movs	r0, r3
    3f8e:	4b03      	ldr	r3, [pc, #12]	; (3f9c <ioport_set_pin_mode+0x20>)
    3f90:	4798      	blx	r3
}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	46bd      	mov	sp, r7
    3f96:	b002      	add	sp, #8
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00003f41 	.word	0x00003f41

00003fa0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	af00      	add	r7, sp, #0
	ioport_set_pin_mode(SDA_PIN, SDA_PIN_MUX);
    3fa4:	2102      	movs	r1, #2
    3fa6:	2016      	movs	r0, #22
    3fa8:	4b12      	ldr	r3, [pc, #72]	; (3ff4 <system_board_init+0x54>)
    3faa:	4798      	blx	r3
	ioport_set_pin_mode(SCL_PIN, SCL_PIN_MUX);
    3fac:	2102      	movs	r1, #2
    3fae:	2017      	movs	r0, #23
    3fb0:	4b10      	ldr	r3, [pc, #64]	; (3ff4 <system_board_init+0x54>)
    3fb2:	4798      	blx	r3

	ioport_set_pin_mode(A0_PIN, A0_PIN_MUX);
    3fb4:	2101      	movs	r1, #1
    3fb6:	2002      	movs	r0, #2
    3fb8:	4b0e      	ldr	r3, [pc, #56]	; (3ff4 <system_board_init+0x54>)
    3fba:	4798      	blx	r3
	ioport_set_pin_mode(A1_PIN, A1_PIN_MUX);
    3fbc:	2101      	movs	r1, #1
    3fbe:	2028      	movs	r0, #40	; 0x28
    3fc0:	4b0c      	ldr	r3, [pc, #48]	; (3ff4 <system_board_init+0x54>)
    3fc2:	4798      	blx	r3
	ioport_set_pin_mode(A2_PIN, A2_PIN_MUX);
    3fc4:	2101      	movs	r1, #1
    3fc6:	2029      	movs	r0, #41	; 0x29
    3fc8:	4b0a      	ldr	r3, [pc, #40]	; (3ff4 <system_board_init+0x54>)
    3fca:	4798      	blx	r3
	ioport_set_pin_mode(A3_PIN, A3_PIN_MUX);
    3fcc:	2101      	movs	r1, #1
    3fce:	2004      	movs	r0, #4
    3fd0:	4b08      	ldr	r3, [pc, #32]	; (3ff4 <system_board_init+0x54>)
    3fd2:	4798      	blx	r3
	ioport_set_pin_mode(A4_PIN, A4_PIN_MUX);
    3fd4:	2101      	movs	r1, #1
    3fd6:	2005      	movs	r0, #5
    3fd8:	4b06      	ldr	r3, [pc, #24]	; (3ff4 <system_board_init+0x54>)
    3fda:	4798      	blx	r3
	ioport_set_pin_mode(A5_PIN, A5_PIN_MUX);
    3fdc:	2101      	movs	r1, #1
    3fde:	2022      	movs	r0, #34	; 0x22
    3fe0:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <system_board_init+0x54>)
    3fe2:	4798      	blx	r3

	ioport_set_pin_mode(D9_PIN, D9_PIN_PWM_MUX);
    3fe4:	2104      	movs	r1, #4
    3fe6:	2020      	movs	r0, #32
    3fe8:	4b02      	ldr	r3, [pc, #8]	; (3ff4 <system_board_init+0x54>)
    3fea:	4798      	blx	r3
	//ioport_set_pin_dir(D9_PIN, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_level(D9_PIN, false);

	/*ioport_set_pin_mode(TX_PIN, TX_PIN_MUX);
	ioport_set_pin_mode(RX_PIN, RX_PIN_MUX);*/
    3fec:	46c0      	nop			; (mov r8, r8)
    3fee:	46bd      	mov	sp, r7
    3ff0:	bd80      	pop	{r7, pc}
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	00003f7d 	.word	0x00003f7d

00003ff8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	b082      	sub	sp, #8
    3ffc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3ffe:	4b10      	ldr	r3, [pc, #64]	; (4040 <cpu_irq_enter_critical+0x48>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	2b00      	cmp	r3, #0
    4004:	d112      	bne.n	402c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4006:	f3ef 8310 	mrs	r3, PRIMASK
    400a:	607b      	str	r3, [r7, #4]
  return(result);
    400c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    400e:	2b00      	cmp	r3, #0
    4010:	d109      	bne.n	4026 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    4012:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4014:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4018:	4b0a      	ldr	r3, [pc, #40]	; (4044 <cpu_irq_enter_critical+0x4c>)
    401a:	2200      	movs	r2, #0
    401c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    401e:	4b0a      	ldr	r3, [pc, #40]	; (4048 <cpu_irq_enter_critical+0x50>)
    4020:	2201      	movs	r2, #1
    4022:	701a      	strb	r2, [r3, #0]
    4024:	e002      	b.n	402c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4026:	4b08      	ldr	r3, [pc, #32]	; (4048 <cpu_irq_enter_critical+0x50>)
    4028:	2200      	movs	r2, #0
    402a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    402c:	4b04      	ldr	r3, [pc, #16]	; (4040 <cpu_irq_enter_critical+0x48>)
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	1c5a      	adds	r2, r3, #1
    4032:	4b03      	ldr	r3, [pc, #12]	; (4040 <cpu_irq_enter_critical+0x48>)
    4034:	601a      	str	r2, [r3, #0]
}
    4036:	46c0      	nop			; (mov r8, r8)
    4038:	46bd      	mov	sp, r7
    403a:	b002      	add	sp, #8
    403c:	bd80      	pop	{r7, pc}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	20000164 	.word	0x20000164
    4044:	2000000c 	.word	0x2000000c
    4048:	20000168 	.word	0x20000168

0000404c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    404c:	b580      	push	{r7, lr}
    404e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4050:	4b0b      	ldr	r3, [pc, #44]	; (4080 <cpu_irq_leave_critical+0x34>)
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	1e5a      	subs	r2, r3, #1
    4056:	4b0a      	ldr	r3, [pc, #40]	; (4080 <cpu_irq_leave_critical+0x34>)
    4058:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    405a:	4b09      	ldr	r3, [pc, #36]	; (4080 <cpu_irq_leave_critical+0x34>)
    405c:	681b      	ldr	r3, [r3, #0]
    405e:	2b00      	cmp	r3, #0
    4060:	d10a      	bne.n	4078 <cpu_irq_leave_critical+0x2c>
    4062:	4b08      	ldr	r3, [pc, #32]	; (4084 <cpu_irq_leave_critical+0x38>)
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	b2db      	uxtb	r3, r3
    4068:	2b00      	cmp	r3, #0
    406a:	d005      	beq.n	4078 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    406c:	4b06      	ldr	r3, [pc, #24]	; (4088 <cpu_irq_leave_critical+0x3c>)
    406e:	2201      	movs	r2, #1
    4070:	701a      	strb	r2, [r3, #0]
    4072:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4076:	b662      	cpsie	i
	}
}
    4078:	46c0      	nop			; (mov r8, r8)
    407a:	46bd      	mov	sp, r7
    407c:	bd80      	pop	{r7, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	20000164 	.word	0x20000164
    4084:	20000168 	.word	0x20000168
    4088:	2000000c 	.word	0x2000000c

0000408c <system_gclk_gen_get_config_defaults>:
{
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	2201      	movs	r2, #1
    4098:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	2200      	movs	r2, #0
    409e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	2206      	movs	r2, #6
    40a4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	2200      	movs	r2, #0
    40aa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	2200      	movs	r2, #0
    40b0:	725a      	strb	r2, [r3, #9]
}
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	46bd      	mov	sp, r7
    40b6:	b002      	add	sp, #8
    40b8:	bd80      	pop	{r7, pc}

000040ba <system_main_clock_set_failure_detect>:
{
    40ba:	b580      	push	{r7, lr}
    40bc:	b082      	sub	sp, #8
    40be:	af00      	add	r7, sp, #0
    40c0:	0002      	movs	r2, r0
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	701a      	strb	r2, [r3, #0]
}
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	46bd      	mov	sp, r7
    40ca:	b002      	add	sp, #8
    40cc:	bd80      	pop	{r7, pc}
	...

000040d0 <system_cpu_clock_set_divider>:
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	0002      	movs	r2, r0
    40d8:	1dfb      	adds	r3, r7, #7
    40da:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    40dc:	4a05      	ldr	r2, [pc, #20]	; (40f4 <system_cpu_clock_set_divider+0x24>)
    40de:	1dfb      	adds	r3, r7, #7
    40e0:	781b      	ldrb	r3, [r3, #0]
    40e2:	2101      	movs	r1, #1
    40e4:	4099      	lsls	r1, r3
    40e6:	000b      	movs	r3, r1
    40e8:	b2db      	uxtb	r3, r3
    40ea:	7113      	strb	r3, [r2, #4]
}
    40ec:	46c0      	nop			; (mov r8, r8)
    40ee:	46bd      	mov	sp, r7
    40f0:	b002      	add	sp, #8
    40f2:	bd80      	pop	{r7, pc}
    40f4:	40000400 	.word	0x40000400

000040f8 <system_low_power_clock_set_divider>:
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b082      	sub	sp, #8
    40fc:	af00      	add	r7, sp, #0
    40fe:	0002      	movs	r2, r0
    4100:	1dfb      	adds	r3, r7, #7
    4102:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    4104:	4a05      	ldr	r2, [pc, #20]	; (411c <system_low_power_clock_set_divider+0x24>)
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	2101      	movs	r1, #1
    410c:	4099      	lsls	r1, r3
    410e:	000b      	movs	r3, r1
    4110:	b2db      	uxtb	r3, r3
    4112:	7153      	strb	r3, [r2, #5]
}
    4114:	46c0      	nop			; (mov r8, r8)
    4116:	46bd      	mov	sp, r7
    4118:	b002      	add	sp, #8
    411a:	bd80      	pop	{r7, pc}
    411c:	40000400 	.word	0x40000400

00004120 <system_backup_clock_set_divider>:
{
    4120:	b580      	push	{r7, lr}
    4122:	b082      	sub	sp, #8
    4124:	af00      	add	r7, sp, #0
    4126:	0002      	movs	r2, r0
    4128:	1dfb      	adds	r3, r7, #7
    412a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    412c:	4a05      	ldr	r2, [pc, #20]	; (4144 <system_backup_clock_set_divider+0x24>)
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2101      	movs	r1, #1
    4134:	4099      	lsls	r1, r3
    4136:	000b      	movs	r3, r1
    4138:	b2db      	uxtb	r3, r3
    413a:	7193      	strb	r3, [r2, #6]
}
    413c:	46c0      	nop			; (mov r8, r8)
    413e:	46bd      	mov	sp, r7
    4140:	b002      	add	sp, #8
    4142:	bd80      	pop	{r7, pc}
    4144:	40000400 	.word	0x40000400

00004148 <system_cpu_clock_get_hz>:
{
    4148:	b580      	push	{r7, lr}
    414a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    414c:	2000      	movs	r0, #0
    414e:	4b07      	ldr	r3, [pc, #28]	; (416c <system_cpu_clock_get_hz+0x24>)
    4150:	4798      	blx	r3
    4152:	0002      	movs	r2, r0
    4154:	4b06      	ldr	r3, [pc, #24]	; (4170 <system_cpu_clock_get_hz+0x28>)
    4156:	791b      	ldrb	r3, [r3, #4]
    4158:	b2db      	uxtb	r3, r3
    415a:	0019      	movs	r1, r3
    415c:	4b05      	ldr	r3, [pc, #20]	; (4174 <system_cpu_clock_get_hz+0x2c>)
    415e:	0010      	movs	r0, r2
    4160:	4798      	blx	r3
    4162:	0003      	movs	r3, r0
}
    4164:	0018      	movs	r0, r3
    4166:	46bd      	mov	sp, r7
    4168:	bd80      	pop	{r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	00004639 	.word	0x00004639
    4170:	40000400 	.word	0x40000400
    4174:	00004f71 	.word	0x00004f71

00004178 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4178:	b580      	push	{r7, lr}
    417a:	b082      	sub	sp, #8
    417c:	af00      	add	r7, sp, #0
    417e:	0002      	movs	r2, r0
    4180:	1dfb      	adds	r3, r7, #7
    4182:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4184:	4a08      	ldr	r2, [pc, #32]	; (41a8 <system_flash_set_waitstates+0x30>)
    4186:	1dfb      	adds	r3, r7, #7
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	210f      	movs	r1, #15
    418c:	400b      	ands	r3, r1
    418e:	b2d9      	uxtb	r1, r3
    4190:	6853      	ldr	r3, [r2, #4]
    4192:	200f      	movs	r0, #15
    4194:	4001      	ands	r1, r0
    4196:	0049      	lsls	r1, r1, #1
    4198:	201e      	movs	r0, #30
    419a:	4383      	bics	r3, r0
    419c:	430b      	orrs	r3, r1
    419e:	6053      	str	r3, [r2, #4]
}
    41a0:	46c0      	nop			; (mov r8, r8)
    41a2:	46bd      	mov	sp, r7
    41a4:	b002      	add	sp, #8
    41a6:	bd80      	pop	{r7, pc}
    41a8:	41004000 	.word	0x41004000

000041ac <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    41ac:	b580      	push	{r7, lr}
    41ae:	b082      	sub	sp, #8
    41b0:	af00      	add	r7, sp, #0
    41b2:	0002      	movs	r2, r0
    41b4:	1dfb      	adds	r3, r7, #7
    41b6:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    41b8:	2380      	movs	r3, #128	; 0x80
    41ba:	05db      	lsls	r3, r3, #23
    41bc:	789b      	ldrb	r3, [r3, #2]
    41be:	b2db      	uxtb	r3, r3
    41c0:	1dfa      	adds	r2, r7, #7
    41c2:	7812      	ldrb	r2, [r2, #0]
    41c4:	429a      	cmp	r2, r3
    41c6:	d101      	bne.n	41cc <system_switch_performance_level+0x20>
		return STATUS_OK;
    41c8:	2300      	movs	r3, #0
    41ca:	e019      	b.n	4200 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    41cc:	2380      	movs	r3, #128	; 0x80
    41ce:	05db      	lsls	r3, r3, #23
    41d0:	789b      	ldrb	r3, [r3, #2]
    41d2:	b2db      	uxtb	r3, r3
    41d4:	b25b      	sxtb	r3, r3
    41d6:	2b00      	cmp	r3, #0
    41d8:	da01      	bge.n	41de <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    41da:	2317      	movs	r3, #23
    41dc:	e010      	b.n	4200 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    41de:	2380      	movs	r3, #128	; 0x80
    41e0:	05db      	lsls	r3, r3, #23
    41e2:	2201      	movs	r2, #1
    41e4:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    41e6:	2380      	movs	r3, #128	; 0x80
    41e8:	05db      	lsls	r3, r3, #23
    41ea:	1dfa      	adds	r2, r7, #7
    41ec:	7812      	ldrb	r2, [r2, #0]
    41ee:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    41f0:	46c0      	nop			; (mov r8, r8)
    41f2:	2380      	movs	r3, #128	; 0x80
    41f4:	05db      	lsls	r3, r3, #23
    41f6:	799b      	ldrb	r3, [r3, #6]
    41f8:	b2db      	uxtb	r3, r3
    41fa:	2b00      	cmp	r3, #0
    41fc:	d0f9      	beq.n	41f2 <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    41fe:	2300      	movs	r3, #0
}
    4200:	0018      	movs	r0, r3
    4202:	46bd      	mov	sp, r7
    4204:	b002      	add	sp, #8
    4206:	bd80      	pop	{r7, pc}

00004208 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4208:	b580      	push	{r7, lr}
    420a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    420c:	46c0      	nop			; (mov r8, r8)
    420e:	4b04      	ldr	r3, [pc, #16]	; (4220 <_system_dfll_wait_for_sync+0x18>)
    4210:	68da      	ldr	r2, [r3, #12]
    4212:	2380      	movs	r3, #128	; 0x80
    4214:	005b      	lsls	r3, r3, #1
    4216:	4013      	ands	r3, r2
    4218:	d0f9      	beq.n	420e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	46bd      	mov	sp, r7
    421e:	bd80      	pop	{r7, pc}
    4220:	40000c00 	.word	0x40000c00

00004224 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4224:	b580      	push	{r7, lr}
    4226:	b082      	sub	sp, #8
    4228:	af00      	add	r7, sp, #0
    422a:	0002      	movs	r2, r0
    422c:	1dfb      	adds	r3, r7, #7
    422e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4230:	1dfb      	adds	r3, r7, #7
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2b08      	cmp	r3, #8
    4236:	d842      	bhi.n	42be <system_clock_source_get_hz+0x9a>
    4238:	009a      	lsls	r2, r3, #2
    423a:	4b23      	ldr	r3, [pc, #140]	; (42c8 <system_clock_source_get_hz+0xa4>)
    423c:	18d3      	adds	r3, r2, r3
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4242:	4b22      	ldr	r3, [pc, #136]	; (42cc <system_clock_source_get_hz+0xa8>)
    4244:	691b      	ldr	r3, [r3, #16]
    4246:	e03b      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    4248:	4b21      	ldr	r3, [pc, #132]	; (42d0 <system_clock_source_get_hz+0xac>)
    424a:	7d1b      	ldrb	r3, [r3, #20]
    424c:	071b      	lsls	r3, r3, #28
    424e:	0f9b      	lsrs	r3, r3, #30
    4250:	b2db      	uxtb	r3, r3
    4252:	3301      	adds	r3, #1
    4254:	001a      	movs	r2, r3
    4256:	4b1f      	ldr	r3, [pc, #124]	; (42d4 <system_clock_source_get_hz+0xb0>)
    4258:	4353      	muls	r3, r2
    425a:	e031      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	021b      	lsls	r3, r3, #8
    4260:	e02e      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4262:	2380      	movs	r3, #128	; 0x80
    4264:	021b      	lsls	r3, r3, #8
    4266:	e02b      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4268:	4b18      	ldr	r3, [pc, #96]	; (42cc <system_clock_source_get_hz+0xa8>)
    426a:	695b      	ldr	r3, [r3, #20]
    426c:	e028      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    426e:	4b17      	ldr	r3, [pc, #92]	; (42cc <system_clock_source_get_hz+0xa8>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	2202      	movs	r2, #2
    4274:	4013      	ands	r3, r2
    4276:	d101      	bne.n	427c <system_clock_source_get_hz+0x58>
			return 0;
    4278:	2300      	movs	r3, #0
    427a:	e021      	b.n	42c0 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    427c:	4b16      	ldr	r3, [pc, #88]	; (42d8 <system_clock_source_get_hz+0xb4>)
    427e:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    4280:	4b12      	ldr	r3, [pc, #72]	; (42cc <system_clock_source_get_hz+0xa8>)
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	2224      	movs	r2, #36	; 0x24
    4286:	4013      	ands	r3, r2
    4288:	2b04      	cmp	r3, #4
    428a:	d109      	bne.n	42a0 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    428c:	2000      	movs	r0, #0
    428e:	4b13      	ldr	r3, [pc, #76]	; (42dc <system_clock_source_get_hz+0xb8>)
    4290:	4798      	blx	r3
    4292:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4294:	4b0d      	ldr	r3, [pc, #52]	; (42cc <system_clock_source_get_hz+0xa8>)
    4296:	689b      	ldr	r3, [r3, #8]
    4298:	041b      	lsls	r3, r3, #16
    429a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    429c:	4353      	muls	r3, r2
    429e:	e00f      	b.n	42c0 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    42a0:	4b0f      	ldr	r3, [pc, #60]	; (42e0 <system_clock_source_get_hz+0xbc>)
    42a2:	e00d      	b.n	42c0 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    42a4:	4a0a      	ldr	r2, [pc, #40]	; (42d0 <system_clock_source_get_hz+0xac>)
    42a6:	2328      	movs	r3, #40	; 0x28
    42a8:	5cd3      	ldrb	r3, [r2, r3]
    42aa:	b2db      	uxtb	r3, r3
    42ac:	001a      	movs	r2, r3
    42ae:	2302      	movs	r3, #2
    42b0:	4013      	ands	r3, r2
    42b2:	d101      	bne.n	42b8 <system_clock_source_get_hz+0x94>
			return 0;
    42b4:	2300      	movs	r3, #0
    42b6:	e003      	b.n	42c0 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    42b8:	4b04      	ldr	r3, [pc, #16]	; (42cc <system_clock_source_get_hz+0xa8>)
    42ba:	68db      	ldr	r3, [r3, #12]
    42bc:	e000      	b.n	42c0 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    42be:	2300      	movs	r3, #0
	}
}
    42c0:	0018      	movs	r0, r3
    42c2:	46bd      	mov	sp, r7
    42c4:	b002      	add	sp, #8
    42c6:	bd80      	pop	{r7, pc}
    42c8:	0000741c 	.word	0x0000741c
    42cc:	2000016c 	.word	0x2000016c
    42d0:	40000c00 	.word	0x40000c00
    42d4:	003d0900 	.word	0x003d0900
    42d8:	00004209 	.word	0x00004209
    42dc:	000047e9 	.word	0x000047e9
    42e0:	02dc6c00 	.word	0x02dc6c00

000042e4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b0a0      	sub	sp, #128	; 0x80
    42e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    42ea:	4b26      	ldr	r3, [pc, #152]	; (4384 <system_clock_init+0xa0>)
    42ec:	2280      	movs	r2, #128	; 0x80
    42ee:	0052      	lsls	r2, r2, #1
    42f0:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    42f2:	4b25      	ldr	r3, [pc, #148]	; (4388 <system_clock_init+0xa4>)
    42f4:	2203      	movs	r2, #3
    42f6:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    42f8:	2000      	movs	r0, #0
    42fa:	4b24      	ldr	r3, [pc, #144]	; (438c <system_clock_init+0xa8>)
    42fc:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    42fe:	2002      	movs	r0, #2
    4300:	4b23      	ldr	r3, [pc, #140]	; (4390 <system_clock_init+0xac>)
    4302:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    4304:	4a1f      	ldr	r2, [pc, #124]	; (4384 <system_clock_init+0xa0>)
    4306:	7d13      	ldrb	r3, [r2, #20]
    4308:	2180      	movs	r1, #128	; 0x80
    430a:	4249      	negs	r1, r1
    430c:	430b      	orrs	r3, r1
    430e:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    4310:	4a1c      	ldr	r2, [pc, #112]	; (4384 <system_clock_init+0xa0>)
    4312:	7d13      	ldrb	r3, [r2, #20]
    4314:	2140      	movs	r1, #64	; 0x40
    4316:	438b      	bics	r3, r1
    4318:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    431a:	4b1e      	ldr	r3, [pc, #120]	; (4394 <system_clock_init+0xb0>)
    431c:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    431e:	2000      	movs	r0, #0
    4320:	4b1d      	ldr	r3, [pc, #116]	; (4398 <system_clock_init+0xb4>)
    4322:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    4324:	2000      	movs	r0, #0
    4326:	4b1d      	ldr	r3, [pc, #116]	; (439c <system_clock_init+0xb8>)
    4328:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    432a:	2000      	movs	r0, #0
    432c:	4b1c      	ldr	r3, [pc, #112]	; (43a0 <system_clock_init+0xbc>)
    432e:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    4330:	2000      	movs	r0, #0
    4332:	4b1c      	ldr	r3, [pc, #112]	; (43a4 <system_clock_init+0xc0>)
    4334:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4336:	1d3b      	adds	r3, r7, #4
    4338:	0018      	movs	r0, r3
    433a:	4b1b      	ldr	r3, [pc, #108]	; (43a8 <system_clock_init+0xc4>)
    433c:	4798      	blx	r3
    433e:	1d3b      	adds	r3, r7, #4
    4340:	2206      	movs	r2, #6
    4342:	701a      	strb	r2, [r3, #0]
    4344:	1d3b      	adds	r3, r7, #4
    4346:	2201      	movs	r2, #1
    4348:	605a      	str	r2, [r3, #4]
    434a:	1d3b      	adds	r3, r7, #4
    434c:	2200      	movs	r2, #0
    434e:	721a      	strb	r2, [r3, #8]
    4350:	1d3b      	adds	r3, r7, #4
    4352:	2200      	movs	r2, #0
    4354:	725a      	strb	r2, [r3, #9]
    4356:	1d3b      	adds	r3, r7, #4
    4358:	0019      	movs	r1, r3
    435a:	2000      	movs	r0, #0
    435c:	4b13      	ldr	r3, [pc, #76]	; (43ac <system_clock_init+0xc8>)
    435e:	4798      	blx	r3
    4360:	2000      	movs	r0, #0
    4362:	4b13      	ldr	r3, [pc, #76]	; (43b0 <system_clock_init+0xcc>)
    4364:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    4366:	4b13      	ldr	r3, [pc, #76]	; (43b4 <system_clock_init+0xd0>)
    4368:	4798      	blx	r3
    436a:	0003      	movs	r3, r0
    436c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
    436e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4370:	4a11      	ldr	r2, [pc, #68]	; (43b8 <system_clock_init+0xd4>)
    4372:	4293      	cmp	r3, r2
    4374:	d802      	bhi.n	437c <system_clock_init+0x98>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    4376:	2000      	movs	r0, #0
    4378:	4b05      	ldr	r3, [pc, #20]	; (4390 <system_clock_init+0xac>)
    437a:	4798      	blx	r3
	}
}
    437c:	46c0      	nop			; (mov r8, r8)
    437e:	46bd      	mov	sp, r7
    4380:	b020      	add	sp, #128	; 0x80
    4382:	bd80      	pop	{r7, pc}
    4384:	40000c00 	.word	0x40000c00
    4388:	40001400 	.word	0x40001400
    438c:	00004179 	.word	0x00004179
    4390:	000041ad 	.word	0x000041ad
    4394:	0000449d 	.word	0x0000449d
    4398:	00004121 	.word	0x00004121
    439c:	000040f9 	.word	0x000040f9
    43a0:	000040d1 	.word	0x000040d1
    43a4:	000040bb 	.word	0x000040bb
    43a8:	0000408d 	.word	0x0000408d
    43ac:	000044cd 	.word	0x000044cd
    43b0:	000045dd 	.word	0x000045dd
    43b4:	00004149 	.word	0x00004149
    43b8:	00b71b00 	.word	0x00b71b00

000043bc <system_apb_clock_set_mask>:
{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	0002      	movs	r2, r0
    43c4:	6039      	str	r1, [r7, #0]
    43c6:	1dfb      	adds	r3, r7, #7
    43c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    43ca:	1dfb      	adds	r3, r7, #7
    43cc:	781b      	ldrb	r3, [r3, #0]
    43ce:	2b04      	cmp	r3, #4
    43d0:	d827      	bhi.n	4422 <system_apb_clock_set_mask+0x66>
    43d2:	009a      	lsls	r2, r3, #2
    43d4:	4b16      	ldr	r3, [pc, #88]	; (4430 <system_apb_clock_set_mask+0x74>)
    43d6:	18d3      	adds	r3, r2, r3
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    43dc:	4b15      	ldr	r3, [pc, #84]	; (4434 <system_apb_clock_set_mask+0x78>)
    43de:	4a15      	ldr	r2, [pc, #84]	; (4434 <system_apb_clock_set_mask+0x78>)
    43e0:	6951      	ldr	r1, [r2, #20]
    43e2:	683a      	ldr	r2, [r7, #0]
    43e4:	430a      	orrs	r2, r1
    43e6:	615a      	str	r2, [r3, #20]
			break;
    43e8:	e01d      	b.n	4426 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    43ea:	4b12      	ldr	r3, [pc, #72]	; (4434 <system_apb_clock_set_mask+0x78>)
    43ec:	4a11      	ldr	r2, [pc, #68]	; (4434 <system_apb_clock_set_mask+0x78>)
    43ee:	6991      	ldr	r1, [r2, #24]
    43f0:	683a      	ldr	r2, [r7, #0]
    43f2:	430a      	orrs	r2, r1
    43f4:	619a      	str	r2, [r3, #24]
			break;
    43f6:	e016      	b.n	4426 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    43f8:	4b0e      	ldr	r3, [pc, #56]	; (4434 <system_apb_clock_set_mask+0x78>)
    43fa:	4a0e      	ldr	r2, [pc, #56]	; (4434 <system_apb_clock_set_mask+0x78>)
    43fc:	69d1      	ldr	r1, [r2, #28]
    43fe:	683a      	ldr	r2, [r7, #0]
    4400:	430a      	orrs	r2, r1
    4402:	61da      	str	r2, [r3, #28]
			break;
    4404:	e00f      	b.n	4426 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    4406:	4b0b      	ldr	r3, [pc, #44]	; (4434 <system_apb_clock_set_mask+0x78>)
    4408:	4a0a      	ldr	r2, [pc, #40]	; (4434 <system_apb_clock_set_mask+0x78>)
    440a:	6a11      	ldr	r1, [r2, #32]
    440c:	683a      	ldr	r2, [r7, #0]
    440e:	430a      	orrs	r2, r1
    4410:	621a      	str	r2, [r3, #32]
			break;
    4412:	e008      	b.n	4426 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    4414:	4b07      	ldr	r3, [pc, #28]	; (4434 <system_apb_clock_set_mask+0x78>)
    4416:	4a07      	ldr	r2, [pc, #28]	; (4434 <system_apb_clock_set_mask+0x78>)
    4418:	6a51      	ldr	r1, [r2, #36]	; 0x24
    441a:	683a      	ldr	r2, [r7, #0]
    441c:	430a      	orrs	r2, r1
    441e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    4420:	e001      	b.n	4426 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    4422:	2317      	movs	r3, #23
    4424:	e000      	b.n	4428 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    4426:	2300      	movs	r3, #0
}
    4428:	0018      	movs	r0, r3
    442a:	46bd      	mov	sp, r7
    442c:	b002      	add	sp, #8
    442e:	bd80      	pop	{r7, pc}
    4430:	00007440 	.word	0x00007440
    4434:	40000400 	.word	0x40000400

00004438 <system_interrupt_enter_critical_section>:
{
    4438:	b580      	push	{r7, lr}
    443a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    443c:	4b02      	ldr	r3, [pc, #8]	; (4448 <system_interrupt_enter_critical_section+0x10>)
    443e:	4798      	blx	r3
}
    4440:	46c0      	nop			; (mov r8, r8)
    4442:	46bd      	mov	sp, r7
    4444:	bd80      	pop	{r7, pc}
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	00003ff9 	.word	0x00003ff9

0000444c <system_interrupt_leave_critical_section>:
{
    444c:	b580      	push	{r7, lr}
    444e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4450:	4b02      	ldr	r3, [pc, #8]	; (445c <system_interrupt_leave_critical_section+0x10>)
    4452:	4798      	blx	r3
}
    4454:	46c0      	nop			; (mov r8, r8)
    4456:	46bd      	mov	sp, r7
    4458:	bd80      	pop	{r7, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	0000404d 	.word	0x0000404d

00004460 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    4460:	b580      	push	{r7, lr}
    4462:	b082      	sub	sp, #8
    4464:	af00      	add	r7, sp, #0
    4466:	0002      	movs	r2, r0
    4468:	1dfb      	adds	r3, r7, #7
    446a:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    446c:	4b09      	ldr	r3, [pc, #36]	; (4494 <system_gclk_is_syncing+0x34>)
    446e:	685b      	ldr	r3, [r3, #4]
    4470:	1dfa      	adds	r2, r7, #7
    4472:	7812      	ldrb	r2, [r2, #0]
    4474:	2101      	movs	r1, #1
    4476:	4091      	lsls	r1, r2
    4478:	000a      	movs	r2, r1
    447a:	0092      	lsls	r2, r2, #2
    447c:	4013      	ands	r3, r2
    447e:	4a06      	ldr	r2, [pc, #24]	; (4498 <system_gclk_is_syncing+0x38>)
    4480:	4013      	ands	r3, r2
    4482:	d001      	beq.n	4488 <system_gclk_is_syncing+0x28>
		 return true;
    4484:	2301      	movs	r3, #1
    4486:	e000      	b.n	448a <system_gclk_is_syncing+0x2a>
	}

	 return false;
    4488:	2300      	movs	r3, #0
}
    448a:	0018      	movs	r0, r3
    448c:	46bd      	mov	sp, r7
    448e:	b002      	add	sp, #8
    4490:	bd80      	pop	{r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	40001800 	.word	0x40001800
    4498:	000007fc 	.word	0x000007fc

0000449c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    449c:	b580      	push	{r7, lr}
    449e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    44a0:	2140      	movs	r1, #64	; 0x40
    44a2:	2000      	movs	r0, #0
    44a4:	4b07      	ldr	r3, [pc, #28]	; (44c4 <system_gclk_init+0x28>)
    44a6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    44a8:	4b07      	ldr	r3, [pc, #28]	; (44c8 <system_gclk_init+0x2c>)
    44aa:	2201      	movs	r2, #1
    44ac:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	4b05      	ldr	r3, [pc, #20]	; (44c8 <system_gclk_init+0x2c>)
    44b2:	781b      	ldrb	r3, [r3, #0]
    44b4:	b2db      	uxtb	r3, r3
    44b6:	001a      	movs	r2, r3
    44b8:	2301      	movs	r3, #1
    44ba:	4013      	ands	r3, r2
    44bc:	d1f8      	bne.n	44b0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}
    44c4:	000043bd 	.word	0x000043bd
    44c8:	40001800 	.word	0x40001800

000044cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b086      	sub	sp, #24
    44d0:	af00      	add	r7, sp, #0
    44d2:	0002      	movs	r2, r0
    44d4:	6039      	str	r1, [r7, #0]
    44d6:	1dfb      	adds	r3, r7, #7
    44d8:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    44da:	683b      	ldr	r3, [r7, #0]
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    44e0:	683b      	ldr	r3, [r7, #0]
    44e2:	785b      	ldrb	r3, [r3, #1]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d004      	beq.n	44f2 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    44e8:	697b      	ldr	r3, [r7, #20]
    44ea:	2280      	movs	r2, #128	; 0x80
    44ec:	00d2      	lsls	r2, r2, #3
    44ee:	4313      	orrs	r3, r2
    44f0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    44f2:	683b      	ldr	r3, [r7, #0]
    44f4:	7a5b      	ldrb	r3, [r3, #9]
    44f6:	2b00      	cmp	r3, #0
    44f8:	d004      	beq.n	4504 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    44fa:	697b      	ldr	r3, [r7, #20]
    44fc:	2280      	movs	r2, #128	; 0x80
    44fe:	0112      	lsls	r2, r2, #4
    4500:	4313      	orrs	r3, r2
    4502:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4504:	683b      	ldr	r3, [r7, #0]
    4506:	685b      	ldr	r3, [r3, #4]
    4508:	2b01      	cmp	r3, #1
    450a:	d92c      	bls.n	4566 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    450c:	683b      	ldr	r3, [r7, #0]
    450e:	685a      	ldr	r2, [r3, #4]
    4510:	683b      	ldr	r3, [r7, #0]
    4512:	685b      	ldr	r3, [r3, #4]
    4514:	3b01      	subs	r3, #1
    4516:	4013      	ands	r3, r2
    4518:	d11a      	bne.n	4550 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    451a:	2300      	movs	r3, #0
    451c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    451e:	2302      	movs	r3, #2
    4520:	60fb      	str	r3, [r7, #12]
    4522:	e005      	b.n	4530 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    4524:	693b      	ldr	r3, [r7, #16]
    4526:	3301      	adds	r3, #1
    4528:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	005b      	lsls	r3, r3, #1
    452e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    4530:	683b      	ldr	r3, [r7, #0]
    4532:	685a      	ldr	r2, [r3, #4]
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	429a      	cmp	r2, r3
    4538:	d8f4      	bhi.n	4524 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    453a:	693b      	ldr	r3, [r7, #16]
    453c:	041b      	lsls	r3, r3, #16
    453e:	697a      	ldr	r2, [r7, #20]
    4540:	4313      	orrs	r3, r2
    4542:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4544:	697b      	ldr	r3, [r7, #20]
    4546:	2280      	movs	r2, #128	; 0x80
    4548:	0152      	lsls	r2, r2, #5
    454a:	4313      	orrs	r3, r2
    454c:	617b      	str	r3, [r7, #20]
    454e:	e00a      	b.n	4566 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    4550:	683b      	ldr	r3, [r7, #0]
    4552:	685b      	ldr	r3, [r3, #4]
    4554:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    4556:	697a      	ldr	r2, [r7, #20]
    4558:	4313      	orrs	r3, r2
    455a:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    455c:	697b      	ldr	r3, [r7, #20]
    455e:	2280      	movs	r2, #128	; 0x80
    4560:	0092      	lsls	r2, r2, #2
    4562:	4313      	orrs	r3, r2
    4564:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4566:	683b      	ldr	r3, [r7, #0]
    4568:	7a1b      	ldrb	r3, [r3, #8]
    456a:	2b00      	cmp	r3, #0
    456c:	d004      	beq.n	4578 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    456e:	697b      	ldr	r3, [r7, #20]
    4570:	2280      	movs	r2, #128	; 0x80
    4572:	0192      	lsls	r2, r2, #6
    4574:	4313      	orrs	r3, r2
    4576:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    4578:	46c0      	nop			; (mov r8, r8)
    457a:	1dfb      	adds	r3, r7, #7
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	0018      	movs	r0, r3
    4580:	4b12      	ldr	r3, [pc, #72]	; (45cc <system_gclk_gen_set_config+0x100>)
    4582:	4798      	blx	r3
    4584:	1e03      	subs	r3, r0, #0
    4586:	d1f8      	bne.n	457a <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4588:	4b11      	ldr	r3, [pc, #68]	; (45d0 <system_gclk_gen_set_config+0x104>)
    458a:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    458c:	4811      	ldr	r0, [pc, #68]	; (45d4 <system_gclk_gen_set_config+0x108>)
    458e:	1dfb      	adds	r3, r7, #7
    4590:	781b      	ldrb	r3, [r3, #0]
    4592:	4910      	ldr	r1, [pc, #64]	; (45d4 <system_gclk_gen_set_config+0x108>)
    4594:	1dfa      	adds	r2, r7, #7
    4596:	7812      	ldrb	r2, [r2, #0]
    4598:	3208      	adds	r2, #8
    459a:	0092      	lsls	r2, r2, #2
    459c:	5851      	ldr	r1, [r2, r1]
    459e:	2280      	movs	r2, #128	; 0x80
    45a0:	0052      	lsls	r2, r2, #1
    45a2:	4011      	ands	r1, r2
    45a4:	697a      	ldr	r2, [r7, #20]
    45a6:	430a      	orrs	r2, r1
    45a8:	3308      	adds	r3, #8
    45aa:	009b      	lsls	r3, r3, #2
    45ac:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	1dfb      	adds	r3, r7, #7
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	0018      	movs	r0, r3
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <system_gclk_gen_set_config+0x100>)
    45b8:	4798      	blx	r3
    45ba:	1e03      	subs	r3, r0, #0
    45bc:	d1f8      	bne.n	45b0 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    45be:	4b06      	ldr	r3, [pc, #24]	; (45d8 <system_gclk_gen_set_config+0x10c>)
    45c0:	4798      	blx	r3
}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	46bd      	mov	sp, r7
    45c6:	b006      	add	sp, #24
    45c8:	bd80      	pop	{r7, pc}
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	00004461 	.word	0x00004461
    45d0:	00004439 	.word	0x00004439
    45d4:	40001800 	.word	0x40001800
    45d8:	0000444d 	.word	0x0000444d

000045dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    45dc:	b580      	push	{r7, lr}
    45de:	b082      	sub	sp, #8
    45e0:	af00      	add	r7, sp, #0
    45e2:	0002      	movs	r2, r0
    45e4:	1dfb      	adds	r3, r7, #7
    45e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	1dfb      	adds	r3, r7, #7
    45ec:	781b      	ldrb	r3, [r3, #0]
    45ee:	0018      	movs	r0, r3
    45f0:	4b0d      	ldr	r3, [pc, #52]	; (4628 <system_gclk_gen_enable+0x4c>)
    45f2:	4798      	blx	r3
    45f4:	1e03      	subs	r3, r0, #0
    45f6:	d1f8      	bne.n	45ea <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    45f8:	4b0c      	ldr	r3, [pc, #48]	; (462c <system_gclk_gen_enable+0x50>)
    45fa:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    45fc:	480c      	ldr	r0, [pc, #48]	; (4630 <system_gclk_gen_enable+0x54>)
    45fe:	1dfb      	adds	r3, r7, #7
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	490b      	ldr	r1, [pc, #44]	; (4630 <system_gclk_gen_enable+0x54>)
    4604:	1dfa      	adds	r2, r7, #7
    4606:	7812      	ldrb	r2, [r2, #0]
    4608:	3208      	adds	r2, #8
    460a:	0092      	lsls	r2, r2, #2
    460c:	5852      	ldr	r2, [r2, r1]
    460e:	2180      	movs	r1, #128	; 0x80
    4610:	0049      	lsls	r1, r1, #1
    4612:	430a      	orrs	r2, r1
    4614:	3308      	adds	r3, #8
    4616:	009b      	lsls	r3, r3, #2
    4618:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    461a:	4b06      	ldr	r3, [pc, #24]	; (4634 <system_gclk_gen_enable+0x58>)
    461c:	4798      	blx	r3
}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	46bd      	mov	sp, r7
    4622:	b002      	add	sp, #8
    4624:	bd80      	pop	{r7, pc}
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	00004461 	.word	0x00004461
    462c:	00004439 	.word	0x00004439
    4630:	40001800 	.word	0x40001800
    4634:	0000444d 	.word	0x0000444d

00004638 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4638:	b580      	push	{r7, lr}
    463a:	b086      	sub	sp, #24
    463c:	af00      	add	r7, sp, #0
    463e:	0002      	movs	r2, r0
    4640:	1dfb      	adds	r3, r7, #7
    4642:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    4644:	46c0      	nop			; (mov r8, r8)
    4646:	1dfb      	adds	r3, r7, #7
    4648:	781b      	ldrb	r3, [r3, #0]
    464a:	0018      	movs	r0, r3
    464c:	4b24      	ldr	r3, [pc, #144]	; (46e0 <system_gclk_gen_get_hz+0xa8>)
    464e:	4798      	blx	r3
    4650:	1e03      	subs	r3, r0, #0
    4652:	d1f8      	bne.n	4646 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4654:	4b23      	ldr	r3, [pc, #140]	; (46e4 <system_gclk_gen_get_hz+0xac>)
    4656:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    4658:	4a23      	ldr	r2, [pc, #140]	; (46e8 <system_gclk_gen_get_hz+0xb0>)
    465a:	1dfb      	adds	r3, r7, #7
    465c:	781b      	ldrb	r3, [r3, #0]
    465e:	3308      	adds	r3, #8
    4660:	009b      	lsls	r3, r3, #2
    4662:	589b      	ldr	r3, [r3, r2]
    4664:	071b      	lsls	r3, r3, #28
    4666:	0f1b      	lsrs	r3, r3, #28
    4668:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    466a:	0018      	movs	r0, r3
    466c:	4b1f      	ldr	r3, [pc, #124]	; (46ec <system_gclk_gen_get_hz+0xb4>)
    466e:	4798      	blx	r3
    4670:	0003      	movs	r3, r0
    4672:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    4674:	4a1c      	ldr	r2, [pc, #112]	; (46e8 <system_gclk_gen_get_hz+0xb0>)
    4676:	1dfb      	adds	r3, r7, #7
    4678:	781b      	ldrb	r3, [r3, #0]
    467a:	3308      	adds	r3, #8
    467c:	009b      	lsls	r3, r3, #2
    467e:	589b      	ldr	r3, [r3, r2]
    4680:	04db      	lsls	r3, r3, #19
    4682:	0fdb      	lsrs	r3, r3, #31
    4684:	b2da      	uxtb	r2, r3
    4686:	2313      	movs	r3, #19
    4688:	18fb      	adds	r3, r7, r3
    468a:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    468c:	4a16      	ldr	r2, [pc, #88]	; (46e8 <system_gclk_gen_get_hz+0xb0>)
    468e:	1dfb      	adds	r3, r7, #7
    4690:	781b      	ldrb	r3, [r3, #0]
    4692:	3308      	adds	r3, #8
    4694:	009b      	lsls	r3, r3, #2
    4696:	589b      	ldr	r3, [r3, r2]
    4698:	0c1b      	lsrs	r3, r3, #16
    469a:	b29b      	uxth	r3, r3
    469c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    469e:	4b14      	ldr	r3, [pc, #80]	; (46f0 <system_gclk_gen_get_hz+0xb8>)
    46a0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    46a2:	2313      	movs	r3, #19
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	781b      	ldrb	r3, [r3, #0]
    46a8:	2b00      	cmp	r3, #0
    46aa:	d109      	bne.n	46c0 <system_gclk_gen_get_hz+0x88>
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	2b01      	cmp	r3, #1
    46b0:	d906      	bls.n	46c0 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    46b2:	4b10      	ldr	r3, [pc, #64]	; (46f4 <system_gclk_gen_get_hz+0xbc>)
    46b4:	68f9      	ldr	r1, [r7, #12]
    46b6:	6978      	ldr	r0, [r7, #20]
    46b8:	4798      	blx	r3
    46ba:	0003      	movs	r3, r0
    46bc:	617b      	str	r3, [r7, #20]
    46be:	e00a      	b.n	46d6 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    46c0:	2313      	movs	r3, #19
    46c2:	18fb      	adds	r3, r7, r3
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	2b00      	cmp	r3, #0
    46c8:	d005      	beq.n	46d6 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    46ca:	68fb      	ldr	r3, [r7, #12]
    46cc:	3301      	adds	r3, #1
    46ce:	697a      	ldr	r2, [r7, #20]
    46d0:	40da      	lsrs	r2, r3
    46d2:	0013      	movs	r3, r2
    46d4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    46d6:	697b      	ldr	r3, [r7, #20]
}
    46d8:	0018      	movs	r0, r3
    46da:	46bd      	mov	sp, r7
    46dc:	b006      	add	sp, #24
    46de:	bd80      	pop	{r7, pc}
    46e0:	00004461 	.word	0x00004461
    46e4:	00004439 	.word	0x00004439
    46e8:	40001800 	.word	0x40001800
    46ec:	00004225 	.word	0x00004225
    46f0:	0000444d 	.word	0x0000444d
    46f4:	00004f71 	.word	0x00004f71

000046f8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b082      	sub	sp, #8
    46fc:	af00      	add	r7, sp, #0
    46fe:	0002      	movs	r2, r0
    4700:	6039      	str	r1, [r7, #0]
    4702:	1dfb      	adds	r3, r7, #7
    4704:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4706:	1dfb      	adds	r3, r7, #7
    4708:	781b      	ldrb	r3, [r3, #0]
    470a:	0018      	movs	r0, r3
    470c:	4b08      	ldr	r3, [pc, #32]	; (4730 <system_gclk_chan_set_config+0x38>)
    470e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4710:	4908      	ldr	r1, [pc, #32]	; (4734 <system_gclk_chan_set_config+0x3c>)
    4712:	1dfb      	adds	r3, r7, #7
    4714:	781b      	ldrb	r3, [r3, #0]
    4716:	683a      	ldr	r2, [r7, #0]
    4718:	7812      	ldrb	r2, [r2, #0]
    471a:	0010      	movs	r0, r2
    471c:	220f      	movs	r2, #15
    471e:	4002      	ands	r2, r0
    4720:	3320      	adds	r3, #32
    4722:	009b      	lsls	r3, r3, #2
    4724:	505a      	str	r2, [r3, r1]


}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	46bd      	mov	sp, r7
    472a:	b002      	add	sp, #8
    472c:	bd80      	pop	{r7, pc}
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	00004791 	.word	0x00004791
    4734:	40001800 	.word	0x40001800

00004738 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	0002      	movs	r2, r0
    4740:	1dfb      	adds	r3, r7, #7
    4742:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4744:	4b0f      	ldr	r3, [pc, #60]	; (4784 <system_gclk_chan_enable+0x4c>)
    4746:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    4748:	490f      	ldr	r1, [pc, #60]	; (4788 <system_gclk_chan_enable+0x50>)
    474a:	1dfb      	adds	r3, r7, #7
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	480e      	ldr	r0, [pc, #56]	; (4788 <system_gclk_chan_enable+0x50>)
    4750:	1dfa      	adds	r2, r7, #7
    4752:	7812      	ldrb	r2, [r2, #0]
    4754:	3220      	adds	r2, #32
    4756:	0092      	lsls	r2, r2, #2
    4758:	5812      	ldr	r2, [r2, r0]
    475a:	2040      	movs	r0, #64	; 0x40
    475c:	4302      	orrs	r2, r0
    475e:	3320      	adds	r3, #32
    4760:	009b      	lsls	r3, r3, #2
    4762:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    4764:	46c0      	nop			; (mov r8, r8)
    4766:	4a08      	ldr	r2, [pc, #32]	; (4788 <system_gclk_chan_enable+0x50>)
    4768:	1dfb      	adds	r3, r7, #7
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	3320      	adds	r3, #32
    476e:	009b      	lsls	r3, r3, #2
    4770:	589b      	ldr	r3, [r3, r2]
    4772:	2240      	movs	r2, #64	; 0x40
    4774:	4013      	ands	r3, r2
    4776:	d0f6      	beq.n	4766 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    4778:	4b04      	ldr	r3, [pc, #16]	; (478c <system_gclk_chan_enable+0x54>)
    477a:	4798      	blx	r3
}
    477c:	46c0      	nop			; (mov r8, r8)
    477e:	46bd      	mov	sp, r7
    4780:	b002      	add	sp, #8
    4782:	bd80      	pop	{r7, pc}
    4784:	00004439 	.word	0x00004439
    4788:	40001800 	.word	0x40001800
    478c:	0000444d 	.word	0x0000444d

00004790 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0
    4796:	0002      	movs	r2, r0
    4798:	1dfb      	adds	r3, r7, #7
    479a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    479c:	4b0f      	ldr	r3, [pc, #60]	; (47dc <system_gclk_chan_disable+0x4c>)
    479e:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    47a0:	490f      	ldr	r1, [pc, #60]	; (47e0 <system_gclk_chan_disable+0x50>)
    47a2:	1dfb      	adds	r3, r7, #7
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	480e      	ldr	r0, [pc, #56]	; (47e0 <system_gclk_chan_disable+0x50>)
    47a8:	1dfa      	adds	r2, r7, #7
    47aa:	7812      	ldrb	r2, [r2, #0]
    47ac:	3220      	adds	r2, #32
    47ae:	0092      	lsls	r2, r2, #2
    47b0:	5812      	ldr	r2, [r2, r0]
    47b2:	2040      	movs	r0, #64	; 0x40
    47b4:	4382      	bics	r2, r0
    47b6:	3320      	adds	r3, #32
    47b8:	009b      	lsls	r3, r3, #2
    47ba:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    47bc:	46c0      	nop			; (mov r8, r8)
    47be:	4a08      	ldr	r2, [pc, #32]	; (47e0 <system_gclk_chan_disable+0x50>)
    47c0:	1dfb      	adds	r3, r7, #7
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	3320      	adds	r3, #32
    47c6:	009b      	lsls	r3, r3, #2
    47c8:	589b      	ldr	r3, [r3, r2]
    47ca:	2240      	movs	r2, #64	; 0x40
    47cc:	4013      	ands	r3, r2
    47ce:	d1f6      	bne.n	47be <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    47d0:	4b04      	ldr	r3, [pc, #16]	; (47e4 <system_gclk_chan_disable+0x54>)
    47d2:	4798      	blx	r3
}
    47d4:	46c0      	nop			; (mov r8, r8)
    47d6:	46bd      	mov	sp, r7
    47d8:	b002      	add	sp, #8
    47da:	bd80      	pop	{r7, pc}
    47dc:	00004439 	.word	0x00004439
    47e0:	40001800 	.word	0x40001800
    47e4:	0000444d 	.word	0x0000444d

000047e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    47e8:	b580      	push	{r7, lr}
    47ea:	b084      	sub	sp, #16
    47ec:	af00      	add	r7, sp, #0
    47ee:	0002      	movs	r2, r0
    47f0:	1dfb      	adds	r3, r7, #7
    47f2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    47f4:	4b0d      	ldr	r3, [pc, #52]	; (482c <system_gclk_chan_get_hz+0x44>)
    47f6:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    47f8:	4a0d      	ldr	r2, [pc, #52]	; (4830 <system_gclk_chan_get_hz+0x48>)
    47fa:	1dfb      	adds	r3, r7, #7
    47fc:	781b      	ldrb	r3, [r3, #0]
    47fe:	3320      	adds	r3, #32
    4800:	009b      	lsls	r3, r3, #2
    4802:	589b      	ldr	r3, [r3, r2]
    4804:	071b      	lsls	r3, r3, #28
    4806:	0f1b      	lsrs	r3, r3, #28
    4808:	b2da      	uxtb	r2, r3
    480a:	230f      	movs	r3, #15
    480c:	18fb      	adds	r3, r7, r3
    480e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    4810:	4b08      	ldr	r3, [pc, #32]	; (4834 <system_gclk_chan_get_hz+0x4c>)
    4812:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4814:	230f      	movs	r3, #15
    4816:	18fb      	adds	r3, r7, r3
    4818:	781b      	ldrb	r3, [r3, #0]
    481a:	0018      	movs	r0, r3
    481c:	4b06      	ldr	r3, [pc, #24]	; (4838 <system_gclk_chan_get_hz+0x50>)
    481e:	4798      	blx	r3
    4820:	0003      	movs	r3, r0
}
    4822:	0018      	movs	r0, r3
    4824:	46bd      	mov	sp, r7
    4826:	b004      	add	sp, #16
    4828:	bd80      	pop	{r7, pc}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	00004439 	.word	0x00004439
    4830:	40001800 	.word	0x40001800
    4834:	0000444d 	.word	0x0000444d
    4838:	00004639 	.word	0x00004639

0000483c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    483c:	b580      	push	{r7, lr}
    483e:	b084      	sub	sp, #16
    4840:	af00      	add	r7, sp, #0
    4842:	0002      	movs	r2, r0
    4844:	1dfb      	adds	r3, r7, #7
    4846:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4848:	230f      	movs	r3, #15
    484a:	18fb      	adds	r3, r7, r3
    484c:	1dfa      	adds	r2, r7, #7
    484e:	7812      	ldrb	r2, [r2, #0]
    4850:	09d2      	lsrs	r2, r2, #7
    4852:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4854:	230e      	movs	r3, #14
    4856:	18fb      	adds	r3, r7, r3
    4858:	1dfa      	adds	r2, r7, #7
    485a:	7812      	ldrb	r2, [r2, #0]
    485c:	0952      	lsrs	r2, r2, #5
    485e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4860:	4b0d      	ldr	r3, [pc, #52]	; (4898 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4862:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4864:	230f      	movs	r3, #15
    4866:	18fb      	adds	r3, r7, r3
    4868:	781b      	ldrb	r3, [r3, #0]
    486a:	2b00      	cmp	r3, #0
    486c:	d10f      	bne.n	488e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    486e:	230f      	movs	r3, #15
    4870:	18fb      	adds	r3, r7, r3
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	009b      	lsls	r3, r3, #2
    4876:	2210      	movs	r2, #16
    4878:	4694      	mov	ip, r2
    487a:	44bc      	add	ip, r7
    487c:	4463      	add	r3, ip
    487e:	3b08      	subs	r3, #8
    4880:	681a      	ldr	r2, [r3, #0]
    4882:	230e      	movs	r3, #14
    4884:	18fb      	adds	r3, r7, r3
    4886:	781b      	ldrb	r3, [r3, #0]
    4888:	01db      	lsls	r3, r3, #7
    488a:	18d3      	adds	r3, r2, r3
    488c:	e000      	b.n	4890 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    488e:	2300      	movs	r3, #0
	}
}
    4890:	0018      	movs	r0, r3
    4892:	46bd      	mov	sp, r7
    4894:	b004      	add	sp, #16
    4896:	bd80      	pop	{r7, pc}
    4898:	40002800 	.word	0x40002800

0000489c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    489c:	b580      	push	{r7, lr}
    489e:	b088      	sub	sp, #32
    48a0:	af00      	add	r7, sp, #0
    48a2:	60f8      	str	r0, [r7, #12]
    48a4:	60b9      	str	r1, [r7, #8]
    48a6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    48a8:	2300      	movs	r3, #0
    48aa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	78db      	ldrb	r3, [r3, #3]
    48b0:	2201      	movs	r2, #1
    48b2:	4053      	eors	r3, r2
    48b4:	b2db      	uxtb	r3, r3
    48b6:	2b00      	cmp	r3, #0
    48b8:	d035      	beq.n	4926 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	781b      	ldrb	r3, [r3, #0]
    48be:	2b80      	cmp	r3, #128	; 0x80
    48c0:	d00b      	beq.n	48da <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    48c2:	69fb      	ldr	r3, [r7, #28]
    48c4:	2280      	movs	r2, #128	; 0x80
    48c6:	0252      	lsls	r2, r2, #9
    48c8:	4313      	orrs	r3, r2
    48ca:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	781b      	ldrb	r3, [r3, #0]
    48d0:	061b      	lsls	r3, r3, #24
    48d2:	001a      	movs	r2, r3
    48d4:	69fb      	ldr	r3, [r7, #28]
    48d6:	4313      	orrs	r3, r2
    48d8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    48da:	687b      	ldr	r3, [r7, #4]
    48dc:	785b      	ldrb	r3, [r3, #1]
    48de:	2b00      	cmp	r3, #0
    48e0:	d003      	beq.n	48ea <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    48e6:	2b02      	cmp	r3, #2
    48e8:	d110      	bne.n	490c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    48ea:	69fb      	ldr	r3, [r7, #28]
    48ec:	2280      	movs	r2, #128	; 0x80
    48ee:	0292      	lsls	r2, r2, #10
    48f0:	4313      	orrs	r3, r2
    48f2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	789b      	ldrb	r3, [r3, #2]
    48f8:	2b00      	cmp	r3, #0
    48fa:	d004      	beq.n	4906 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    48fc:	69fb      	ldr	r3, [r7, #28]
    48fe:	2280      	movs	r2, #128	; 0x80
    4900:	02d2      	lsls	r2, r2, #11
    4902:	4313      	orrs	r3, r2
    4904:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	68ba      	ldr	r2, [r7, #8]
    490a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	785b      	ldrb	r3, [r3, #1]
    4910:	2b01      	cmp	r3, #1
    4912:	d003      	beq.n	491c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4918:	2b02      	cmp	r3, #2
    491a:	d107      	bne.n	492c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    491c:	69fb      	ldr	r3, [r7, #28]
    491e:	4a22      	ldr	r2, [pc, #136]	; (49a8 <_system_pinmux_config+0x10c>)
    4920:	4013      	ands	r3, r2
    4922:	61fb      	str	r3, [r7, #28]
    4924:	e002      	b.n	492c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	68ba      	ldr	r2, [r7, #8]
    492a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    492c:	68bb      	ldr	r3, [r7, #8]
    492e:	041b      	lsls	r3, r3, #16
    4930:	0c1b      	lsrs	r3, r3, #16
    4932:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4934:	68bb      	ldr	r3, [r7, #8]
    4936:	0c1b      	lsrs	r3, r3, #16
    4938:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    493a:	69ba      	ldr	r2, [r7, #24]
    493c:	69fb      	ldr	r3, [r7, #28]
    493e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4940:	22a0      	movs	r2, #160	; 0xa0
    4942:	05d2      	lsls	r2, r2, #23
    4944:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4946:	68fb      	ldr	r3, [r7, #12]
    4948:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    494a:	697a      	ldr	r2, [r7, #20]
    494c:	69fb      	ldr	r3, [r7, #28]
    494e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4950:	22d0      	movs	r2, #208	; 0xd0
    4952:	0612      	lsls	r2, r2, #24
    4954:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4956:	68fb      	ldr	r3, [r7, #12]
    4958:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	78db      	ldrb	r3, [r3, #3]
    495e:	2201      	movs	r2, #1
    4960:	4053      	eors	r3, r2
    4962:	b2db      	uxtb	r3, r3
    4964:	2b00      	cmp	r3, #0
    4966:	d01a      	beq.n	499e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4968:	69fa      	ldr	r2, [r7, #28]
    496a:	2380      	movs	r3, #128	; 0x80
    496c:	02db      	lsls	r3, r3, #11
    496e:	4013      	ands	r3, r2
    4970:	d00a      	beq.n	4988 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4972:	687b      	ldr	r3, [r7, #4]
    4974:	789b      	ldrb	r3, [r3, #2]
    4976:	2b01      	cmp	r3, #1
    4978:	d103      	bne.n	4982 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	68ba      	ldr	r2, [r7, #8]
    497e:	619a      	str	r2, [r3, #24]
    4980:	e002      	b.n	4988 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4982:	68fb      	ldr	r3, [r7, #12]
    4984:	68ba      	ldr	r2, [r7, #8]
    4986:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	785b      	ldrb	r3, [r3, #1]
    498c:	2b01      	cmp	r3, #1
    498e:	d003      	beq.n	4998 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4994:	2b02      	cmp	r3, #2
    4996:	d102      	bne.n	499e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	68ba      	ldr	r2, [r7, #8]
    499c:	609a      	str	r2, [r3, #8]
		}
	}
}
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	46bd      	mov	sp, r7
    49a2:	b008      	add	sp, #32
    49a4:	bd80      	pop	{r7, pc}
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	fffbffff 	.word	0xfffbffff

000049ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    49ac:	b580      	push	{r7, lr}
    49ae:	b084      	sub	sp, #16
    49b0:	af00      	add	r7, sp, #0
    49b2:	0002      	movs	r2, r0
    49b4:	6039      	str	r1, [r7, #0]
    49b6:	1dfb      	adds	r3, r7, #7
    49b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    49ba:	1dfb      	adds	r3, r7, #7
    49bc:	781b      	ldrb	r3, [r3, #0]
    49be:	0018      	movs	r0, r3
    49c0:	4b0a      	ldr	r3, [pc, #40]	; (49ec <system_pinmux_pin_set_config+0x40>)
    49c2:	4798      	blx	r3
    49c4:	0003      	movs	r3, r0
    49c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    49c8:	1dfb      	adds	r3, r7, #7
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	221f      	movs	r2, #31
    49ce:	4013      	ands	r3, r2
    49d0:	2201      	movs	r2, #1
    49d2:	409a      	lsls	r2, r3
    49d4:	0013      	movs	r3, r2
    49d6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    49d8:	683a      	ldr	r2, [r7, #0]
    49da:	68b9      	ldr	r1, [r7, #8]
    49dc:	68fb      	ldr	r3, [r7, #12]
    49de:	0018      	movs	r0, r3
    49e0:	4b03      	ldr	r3, [pc, #12]	; (49f0 <system_pinmux_pin_set_config+0x44>)
    49e2:	4798      	blx	r3
}
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	46bd      	mov	sp, r7
    49e8:	b004      	add	sp, #16
    49ea:	bd80      	pop	{r7, pc}
    49ec:	0000483d 	.word	0x0000483d
    49f0:	0000489d 	.word	0x0000489d

000049f4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    49f4:	b580      	push	{r7, lr}
    49f6:	af00      	add	r7, sp, #0
	return;
    49f8:	46c0      	nop			; (mov r8, r8)
}
    49fa:	46bd      	mov	sp, r7
    49fc:	bd80      	pop	{r7, pc}
	...

00004a00 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4a04:	4b06      	ldr	r3, [pc, #24]	; (4a20 <system_init+0x20>)
    4a06:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4a08:	4b06      	ldr	r3, [pc, #24]	; (4a24 <system_init+0x24>)
    4a0a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <system_init+0x28>)
    4a0e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <system_init+0x2c>)
    4a12:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4a14:	4b06      	ldr	r3, [pc, #24]	; (4a30 <system_init+0x30>)
    4a16:	4798      	blx	r3
}
    4a18:	46c0      	nop			; (mov r8, r8)
    4a1a:	46bd      	mov	sp, r7
    4a1c:	bd80      	pop	{r7, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	000042e5 	.word	0x000042e5
    4a24:	00003fa1 	.word	0x00003fa1
    4a28:	000049f5 	.word	0x000049f5
    4a2c:	000049f5 	.word	0x000049f5
    4a30:	000049f5 	.word	0x000049f5

00004a34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4a34:	b580      	push	{r7, lr}
    4a36:	b082      	sub	sp, #8
    4a38:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4a3a:	4b19      	ldr	r3, [pc, #100]	; (4aa0 <Reset_Handler+0x6c>)
    4a3c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4a3e:	4b19      	ldr	r3, [pc, #100]	; (4aa4 <Reset_Handler+0x70>)
    4a40:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4a42:	687a      	ldr	r2, [r7, #4]
    4a44:	683b      	ldr	r3, [r7, #0]
    4a46:	429a      	cmp	r2, r3
    4a48:	d00c      	beq.n	4a64 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4a4a:	e007      	b.n	4a5c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4a4c:	683b      	ldr	r3, [r7, #0]
    4a4e:	1d1a      	adds	r2, r3, #4
    4a50:	603a      	str	r2, [r7, #0]
    4a52:	687a      	ldr	r2, [r7, #4]
    4a54:	1d11      	adds	r1, r2, #4
    4a56:	6079      	str	r1, [r7, #4]
    4a58:	6812      	ldr	r2, [r2, #0]
    4a5a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4a5c:	683a      	ldr	r2, [r7, #0]
    4a5e:	4b12      	ldr	r3, [pc, #72]	; (4aa8 <Reset_Handler+0x74>)
    4a60:	429a      	cmp	r2, r3
    4a62:	d3f3      	bcc.n	4a4c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4a64:	4b11      	ldr	r3, [pc, #68]	; (4aac <Reset_Handler+0x78>)
    4a66:	603b      	str	r3, [r7, #0]
    4a68:	e004      	b.n	4a74 <Reset_Handler+0x40>
                *pDest++ = 0;
    4a6a:	683b      	ldr	r3, [r7, #0]
    4a6c:	1d1a      	adds	r2, r3, #4
    4a6e:	603a      	str	r2, [r7, #0]
    4a70:	2200      	movs	r2, #0
    4a72:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    4a74:	683a      	ldr	r2, [r7, #0]
    4a76:	4b0e      	ldr	r3, [pc, #56]	; (4ab0 <Reset_Handler+0x7c>)
    4a78:	429a      	cmp	r2, r3
    4a7a:	d3f6      	bcc.n	4a6a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4a7c:	4b0d      	ldr	r3, [pc, #52]	; (4ab4 <Reset_Handler+0x80>)
    4a7e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4a80:	4b0d      	ldr	r3, [pc, #52]	; (4ab8 <Reset_Handler+0x84>)
    4a82:	687a      	ldr	r2, [r7, #4]
    4a84:	21ff      	movs	r1, #255	; 0xff
    4a86:	438a      	bics	r2, r1
    4a88:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4a8a:	4a0c      	ldr	r2, [pc, #48]	; (4abc <Reset_Handler+0x88>)
    4a8c:	6853      	ldr	r3, [r2, #4]
    4a8e:	2180      	movs	r1, #128	; 0x80
    4a90:	430b      	orrs	r3, r1
    4a92:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4a94:	4b0a      	ldr	r3, [pc, #40]	; (4ac0 <Reset_Handler+0x8c>)
    4a96:	4798      	blx	r3

        /* Branch to main function */
        main();
    4a98:	4b0a      	ldr	r3, [pc, #40]	; (4ac4 <Reset_Handler+0x90>)
    4a9a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4a9c:	e7fe      	b.n	4a9c <Reset_Handler+0x68>
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	000074fc 	.word	0x000074fc
    4aa4:	20000000 	.word	0x20000000
    4aa8:	20000010 	.word	0x20000010
    4aac:	20000010 	.word	0x20000010
    4ab0:	200001a4 	.word	0x200001a4
    4ab4:	00000000 	.word	0x00000000
    4ab8:	e000ed00 	.word	0xe000ed00
    4abc:	41004000 	.word	0x41004000
    4ac0:	00007121 	.word	0x00007121
    4ac4:	00004d25 	.word	0x00004d25

00004ac8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4ac8:	b580      	push	{r7, lr}
    4aca:	af00      	add	r7, sp, #0
        while (1) {
    4acc:	e7fe      	b.n	4acc <Dummy_Handler+0x4>

00004ace <system_voltage_regulator_get_config_defaults>:
{
    4ace:	b580      	push	{r7, lr}
    4ad0:	b082      	sub	sp, #8
    4ad2:	af00      	add	r7, sp, #0
    4ad4:	6078      	str	r0, [r7, #4]
	config->voltage_scale_period = 0;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	2200      	movs	r2, #0
    4ada:	701a      	strb	r2, [r3, #0]
	config->voltage_scale_step   = 0;
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	2200      	movs	r2, #0
    4ae0:	705a      	strb	r2, [r3, #1]
	config->run_in_standby       = false;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	2200      	movs	r2, #0
    4ae6:	709a      	strb	r2, [r3, #2]
	config->regulator_sel        = SYSTEM_VOLTAGE_REGULATOR_LDO;
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	2200      	movs	r2, #0
    4aec:	70da      	strb	r2, [r3, #3]
	config->low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_DEFAULT;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	2200      	movs	r2, #0
    4af2:	711a      	strb	r2, [r3, #4]
	config->run_in_standby_pl0   = false;
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	2200      	movs	r2, #0
    4af8:	715a      	strb	r2, [r3, #5]
}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	46bd      	mov	sp, r7
    4afe:	b002      	add	sp, #8
    4b00:	bd80      	pop	{r7, pc}
	...

00004b04 <system_voltage_regulator_set_config>:
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
    4b0a:	6078      	str	r0, [r7, #4]
	SUPC->VREG.bit.VSPER    = config->voltage_scale_period;
    4b0c:	4a2b      	ldr	r2, [pc, #172]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	7819      	ldrb	r1, [r3, #0]
    4b12:	6993      	ldr	r3, [r2, #24]
    4b14:	0609      	lsls	r1, r1, #24
    4b16:	021b      	lsls	r3, r3, #8
    4b18:	0a1b      	lsrs	r3, r3, #8
    4b1a:	430b      	orrs	r3, r1
    4b1c:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.VSVSTEP  = config->voltage_scale_step;
    4b1e:	4a27      	ldr	r2, [pc, #156]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	785b      	ldrb	r3, [r3, #1]
    4b24:	1c19      	adds	r1, r3, #0
    4b26:	230f      	movs	r3, #15
    4b28:	400b      	ands	r3, r1
    4b2a:	b2d9      	uxtb	r1, r3
    4b2c:	6993      	ldr	r3, [r2, #24]
    4b2e:	200f      	movs	r0, #15
    4b30:	4001      	ands	r1, r0
    4b32:	0409      	lsls	r1, r1, #16
    4b34:	4822      	ldr	r0, [pc, #136]	; (4bc0 <system_voltage_regulator_set_config+0xbc>)
    4b36:	4003      	ands	r3, r0
    4b38:	430b      	orrs	r3, r1
    4b3a:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.RUNSTDBY = config->run_in_standby;
    4b3c:	4a1f      	ldr	r2, [pc, #124]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	7899      	ldrb	r1, [r3, #2]
    4b42:	6993      	ldr	r3, [r2, #24]
    4b44:	2001      	movs	r0, #1
    4b46:	4001      	ands	r1, r0
    4b48:	0189      	lsls	r1, r1, #6
    4b4a:	2040      	movs	r0, #64	; 0x40
    4b4c:	4383      	bics	r3, r0
    4b4e:	430b      	orrs	r3, r1
    4b50:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.SEL      = config->regulator_sel;
    4b52:	4a1a      	ldr	r2, [pc, #104]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	78db      	ldrb	r3, [r3, #3]
    4b58:	1c19      	adds	r1, r3, #0
    4b5a:	2303      	movs	r3, #3
    4b5c:	400b      	ands	r3, r1
    4b5e:	b2d9      	uxtb	r1, r3
    4b60:	6993      	ldr	r3, [r2, #24]
    4b62:	2003      	movs	r0, #3
    4b64:	4001      	ands	r1, r0
    4b66:	0089      	lsls	r1, r1, #2
    4b68:	200c      	movs	r0, #12
    4b6a:	4383      	bics	r3, r0
    4b6c:	430b      	orrs	r3, r1
    4b6e:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.LPEFF    = config->low_power_efficiency;
    4b70:	4a12      	ldr	r2, [pc, #72]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b72:	687b      	ldr	r3, [r7, #4]
    4b74:	791b      	ldrb	r3, [r3, #4]
    4b76:	1c19      	adds	r1, r3, #0
    4b78:	2301      	movs	r3, #1
    4b7a:	400b      	ands	r3, r1
    4b7c:	b2d9      	uxtb	r1, r3
    4b7e:	6993      	ldr	r3, [r2, #24]
    4b80:	2001      	movs	r0, #1
    4b82:	4001      	ands	r1, r0
    4b84:	0209      	lsls	r1, r1, #8
    4b86:	480f      	ldr	r0, [pc, #60]	; (4bc4 <system_voltage_regulator_set_config+0xc0>)
    4b88:	4003      	ands	r3, r0
    4b8a:	430b      	orrs	r3, r1
    4b8c:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.STDBYPL0 = config->run_in_standby_pl0;
    4b8e:	4a0b      	ldr	r2, [pc, #44]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	7959      	ldrb	r1, [r3, #5]
    4b94:	6993      	ldr	r3, [r2, #24]
    4b96:	2001      	movs	r0, #1
    4b98:	4001      	ands	r1, r0
    4b9a:	0149      	lsls	r1, r1, #5
    4b9c:	2020      	movs	r0, #32
    4b9e:	4383      	bics	r3, r0
    4ba0:	430b      	orrs	r3, r1
    4ba2:	6193      	str	r3, [r2, #24]
	while(!(SUPC->STATUS.reg & SUPC_STATUS_VREGRDY)) {
    4ba4:	46c0      	nop			; (mov r8, r8)
    4ba6:	4b05      	ldr	r3, [pc, #20]	; (4bbc <system_voltage_regulator_set_config+0xb8>)
    4ba8:	68da      	ldr	r2, [r3, #12]
    4baa:	2380      	movs	r3, #128	; 0x80
    4bac:	005b      	lsls	r3, r3, #1
    4bae:	4013      	ands	r3, r2
    4bb0:	d0f9      	beq.n	4ba6 <system_voltage_regulator_set_config+0xa2>
}
    4bb2:	46c0      	nop			; (mov r8, r8)
    4bb4:	46bd      	mov	sp, r7
    4bb6:	b002      	add	sp, #8
    4bb8:	bd80      	pop	{r7, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	40001400 	.word	0x40001400
    4bc0:	fff0ffff 	.word	0xfff0ffff
    4bc4:	fffffeff 	.word	0xfffffeff

00004bc8 <system_switch_performance_level>:
{
    4bc8:	b580      	push	{r7, lr}
    4bca:	b082      	sub	sp, #8
    4bcc:	af00      	add	r7, sp, #0
    4bce:	0002      	movs	r2, r0
    4bd0:	1dfb      	adds	r3, r7, #7
    4bd2:	701a      	strb	r2, [r3, #0]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    4bd4:	2380      	movs	r3, #128	; 0x80
    4bd6:	05db      	lsls	r3, r3, #23
    4bd8:	789b      	ldrb	r3, [r3, #2]
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	1dfa      	adds	r2, r7, #7
    4bde:	7812      	ldrb	r2, [r2, #0]
    4be0:	429a      	cmp	r2, r3
    4be2:	d101      	bne.n	4be8 <system_switch_performance_level+0x20>
		return STATUS_OK;
    4be4:	2300      	movs	r3, #0
    4be6:	e019      	b.n	4c1c <system_switch_performance_level+0x54>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    4be8:	2380      	movs	r3, #128	; 0x80
    4bea:	05db      	lsls	r3, r3, #23
    4bec:	789b      	ldrb	r3, [r3, #2]
    4bee:	b2db      	uxtb	r3, r3
    4bf0:	b25b      	sxtb	r3, r3
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	da01      	bge.n	4bfa <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    4bf6:	2317      	movs	r3, #23
    4bf8:	e010      	b.n	4c1c <system_switch_performance_level+0x54>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    4bfa:	2380      	movs	r3, #128	; 0x80
    4bfc:	05db      	lsls	r3, r3, #23
    4bfe:	2201      	movs	r2, #1
    4c00:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    4c02:	2380      	movs	r3, #128	; 0x80
    4c04:	05db      	lsls	r3, r3, #23
    4c06:	1dfa      	adds	r2, r7, #7
    4c08:	7812      	ldrb	r2, [r2, #0]
    4c0a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    4c0c:	46c0      	nop			; (mov r8, r8)
    4c0e:	2380      	movs	r3, #128	; 0x80
    4c10:	05db      	lsls	r3, r3, #23
    4c12:	799b      	ldrb	r3, [r3, #6]
    4c14:	b2db      	uxtb	r3, r3
    4c16:	2b00      	cmp	r3, #0
    4c18:	d0f9      	beq.n	4c0e <system_switch_performance_level+0x46>
	return STATUS_OK;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b002      	add	sp, #8
    4c22:	bd80      	pop	{r7, pc}

00004c24 <system_performance_level_disable>:
 * \brief Disable performance level switch.
 *
 * Disable performance level switch.
 */
static inline void system_performance_level_disable(void)
{
    4c24:	b580      	push	{r7, lr}
    4c26:	af00      	add	r7, sp, #0
	PM->PLCFG.reg |= PM_PLCFG_PLDIS;
    4c28:	2380      	movs	r3, #128	; 0x80
    4c2a:	05db      	lsls	r3, r3, #23
    4c2c:	2280      	movs	r2, #128	; 0x80
    4c2e:	05d2      	lsls	r2, r2, #23
    4c30:	7892      	ldrb	r2, [r2, #2]
    4c32:	b2d2      	uxtb	r2, r2
    4c34:	2180      	movs	r1, #128	; 0x80
    4c36:	4249      	negs	r1, r1
    4c38:	430a      	orrs	r2, r1
    4c3a:	b2d2      	uxtb	r2, r2
    4c3c:	709a      	strb	r2, [r3, #2]
}
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	46bd      	mov	sp, r7
    4c42:	bd80      	pop	{r7, pc}

00004c44 <system_interrupt_enable_global>:
{
    4c44:	b580      	push	{r7, lr}
    4c46:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4c48:	4b04      	ldr	r3, [pc, #16]	; (4c5c <system_interrupt_enable_global+0x18>)
    4c4a:	2201      	movs	r2, #1
    4c4c:	701a      	strb	r2, [r3, #0]
    4c4e:	f3bf 8f5f 	dmb	sy
    4c52:	b662      	cpsie	i
}
    4c54:	46c0      	nop			; (mov r8, r8)
    4c56:	46bd      	mov	sp, r7
    4c58:	bd80      	pop	{r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	2000000c 	.word	0x2000000c

00004c60 <bod33_disable>:
 * \return Error code indicating the status of the disable operation.
 *
 * \retval STATUS_OK               If the BOD33 was successfully disabled
 */
static inline enum status_code bod33_disable(void)
{
    4c60:	b580      	push	{r7, lr}
    4c62:	af00      	add	r7, sp, #0
	SUPC->INTENCLR.reg = SUPC_INTENCLR_BOD33RDY | SUPC_INTENCLR_BOD33DET | SUPC_INTENCLR_B33SRDY;
    4c64:	4b07      	ldr	r3, [pc, #28]	; (4c84 <bod33_disable+0x24>)
    4c66:	2207      	movs	r2, #7
    4c68:	601a      	str	r2, [r3, #0]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET | SUPC_INTFLAG_B33SRDY;
    4c6a:	4b06      	ldr	r3, [pc, #24]	; (4c84 <bod33_disable+0x24>)
    4c6c:	2207      	movs	r2, #7
    4c6e:	609a      	str	r2, [r3, #8]
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    4c70:	4b04      	ldr	r3, [pc, #16]	; (4c84 <bod33_disable+0x24>)
    4c72:	4a04      	ldr	r2, [pc, #16]	; (4c84 <bod33_disable+0x24>)
    4c74:	6912      	ldr	r2, [r2, #16]
    4c76:	2102      	movs	r1, #2
    4c78:	438a      	bics	r2, r1
    4c7a:	611a      	str	r2, [r3, #16]
	return STATUS_OK;
    4c7c:	2300      	movs	r3, #0
}
    4c7e:	0018      	movs	r0, r3
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	40001400 	.word	0x40001400

00004c88 <bod12_disable>:
 * \return Error code indicating the status of the disable operation.
 *
 * \retval STATUS_OK               If the BOD12 was successfully disabled
 */
static inline enum status_code bod12_disable(void)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	af00      	add	r7, sp, #0
	SUPC->INTENCLR.reg = SUPC_INTENCLR_BOD12RDY | SUPC_INTENCLR_BOD12DET | SUPC_INTENCLR_B12SRDY;
    4c8c:	4b07      	ldr	r3, [pc, #28]	; (4cac <bod12_disable+0x24>)
    4c8e:	2238      	movs	r2, #56	; 0x38
    4c90:	601a      	str	r2, [r3, #0]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD12RDY | SUPC_INTFLAG_BOD12DET | SUPC_INTFLAG_B12SRDY;
    4c92:	4b06      	ldr	r3, [pc, #24]	; (4cac <bod12_disable+0x24>)
    4c94:	2238      	movs	r2, #56	; 0x38
    4c96:	609a      	str	r2, [r3, #8]
	SUPC->BOD12.reg &= ~SUPC_BOD12_ENABLE;
    4c98:	4b04      	ldr	r3, [pc, #16]	; (4cac <bod12_disable+0x24>)
    4c9a:	4a04      	ldr	r2, [pc, #16]	; (4cac <bod12_disable+0x24>)
    4c9c:	6952      	ldr	r2, [r2, #20]
    4c9e:	2102      	movs	r1, #2
    4ca0:	438a      	bics	r2, r1
    4ca2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4ca4:	2300      	movs	r3, #0
}
    4ca6:	0018      	movs	r0, r3
    4ca8:	46bd      	mov	sp, r7
    4caa:	bd80      	pop	{r7, pc}
    4cac:	40001400 	.word	0x40001400

00004cb0 <flash_led>:
#include "lib/rtc_interface.h"
#include "lib/adc_interface.h"
#include "lib/pwm_interface.h"

static inline void flash_led(void)
{
    4cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cb2:	af00      	add	r7, sp, #0
	pwm_write(80);
    4cb4:	2050      	movs	r0, #80	; 0x50
    4cb6:	4b14      	ldr	r3, [pc, #80]	; (4d08 <flash_led+0x58>)
    4cb8:	4798      	blx	r3
	delay_us(100);
    4cba:	2000      	movs	r0, #0
    4cbc:	4b13      	ldr	r3, [pc, #76]	; (4d0c <flash_led+0x5c>)
    4cbe:	4798      	blx	r3
    4cc0:	0003      	movs	r3, r0
    4cc2:	001d      	movs	r5, r3
    4cc4:	2300      	movs	r3, #0
    4cc6:	001e      	movs	r6, r3
    4cc8:	4c11      	ldr	r4, [pc, #68]	; (4d10 <flash_led+0x60>)
    4cca:	2264      	movs	r2, #100	; 0x64
    4ccc:	2300      	movs	r3, #0
    4cce:	0028      	movs	r0, r5
    4cd0:	0031      	movs	r1, r6
    4cd2:	47a0      	blx	r4
    4cd4:	0003      	movs	r3, r0
    4cd6:	000c      	movs	r4, r1
    4cd8:	0019      	movs	r1, r3
    4cda:	0022      	movs	r2, r4
    4cdc:	4b0d      	ldr	r3, [pc, #52]	; (4d14 <flash_led+0x64>)
    4cde:	2400      	movs	r4, #0
    4ce0:	18c9      	adds	r1, r1, r3
    4ce2:	4162      	adcs	r2, r4
    4ce4:	0008      	movs	r0, r1
    4ce6:	0011      	movs	r1, r2
    4ce8:	4c0b      	ldr	r4, [pc, #44]	; (4d18 <flash_led+0x68>)
    4cea:	4a0c      	ldr	r2, [pc, #48]	; (4d1c <flash_led+0x6c>)
    4cec:	2300      	movs	r3, #0
    4cee:	47a0      	blx	r4
    4cf0:	0003      	movs	r3, r0
    4cf2:	000c      	movs	r4, r1
    4cf4:	0018      	movs	r0, r3
    4cf6:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <flash_led+0x70>)
    4cf8:	4798      	blx	r3
	pwm_write(0);
    4cfa:	2000      	movs	r0, #0
    4cfc:	4b02      	ldr	r3, [pc, #8]	; (4d08 <flash_led+0x58>)
    4cfe:	4798      	blx	r3
}
    4d00:	46c0      	nop			; (mov r8, r8)
    4d02:	46bd      	mov	sp, r7
    4d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	00002c55 	.word	0x00002c55
    4d0c:	00004639 	.word	0x00004639
    4d10:	000052e5 	.word	0x000052e5
    4d14:	006acfbf 	.word	0x006acfbf
    4d18:	000052a5 	.word	0x000052a5
    4d1c:	006acfc0 	.word	0x006acfc0
    4d20:	20000001 	.word	0x20000001

00004d24 <main>:

int main (void)
{
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	b091      	sub	sp, #68	; 0x44
    4d28:	af00      	add	r7, sp, #0
	int32_t i;

	system_init();
    4d2a:	4b72      	ldr	r3, [pc, #456]	; (4ef4 <main+0x1d0>)
    4d2c:	4798      	blx	r3
	delay_init();
    4d2e:	4b72      	ldr	r3, [pc, #456]	; (4ef8 <main+0x1d4>)
    4d30:	4798      	blx	r3
	system_interrupt_enable_global();
    4d32:	4b72      	ldr	r3, [pc, #456]	; (4efc <main+0x1d8>)
    4d34:	4798      	blx	r3

	delay_ms(50);
    4d36:	2000      	movs	r0, #0
    4d38:	4b71      	ldr	r3, [pc, #452]	; (4f00 <main+0x1dc>)
    4d3a:	4798      	blx	r3
    4d3c:	0003      	movs	r3, r0
    4d3e:	613b      	str	r3, [r7, #16]
    4d40:	2300      	movs	r3, #0
    4d42:	617b      	str	r3, [r7, #20]
    4d44:	4c6f      	ldr	r4, [pc, #444]	; (4f04 <main+0x1e0>)
    4d46:	2232      	movs	r2, #50	; 0x32
    4d48:	2300      	movs	r3, #0
    4d4a:	6938      	ldr	r0, [r7, #16]
    4d4c:	6979      	ldr	r1, [r7, #20]
    4d4e:	47a0      	blx	r4
    4d50:	0003      	movs	r3, r0
    4d52:	000c      	movs	r4, r1
    4d54:	0019      	movs	r1, r3
    4d56:	0022      	movs	r2, r4
    4d58:	4b6b      	ldr	r3, [pc, #428]	; (4f08 <main+0x1e4>)
    4d5a:	2400      	movs	r4, #0
    4d5c:	18c9      	adds	r1, r1, r3
    4d5e:	4162      	adcs	r2, r4
    4d60:	0008      	movs	r0, r1
    4d62:	0011      	movs	r1, r2
    4d64:	4c69      	ldr	r4, [pc, #420]	; (4f0c <main+0x1e8>)
    4d66:	4a6a      	ldr	r2, [pc, #424]	; (4f10 <main+0x1ec>)
    4d68:	2300      	movs	r3, #0
    4d6a:	47a0      	blx	r4
    4d6c:	0003      	movs	r3, r0
    4d6e:	000c      	movs	r4, r1
    4d70:	0018      	movs	r0, r3
    4d72:	4b68      	ldr	r3, [pc, #416]	; (4f14 <main+0x1f0>)
    4d74:	4798      	blx	r3

	// Set up to performance level 0, buck converter
	// Clock must be <12MHz, other clocks must meet specs in datasheet
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    4d76:	2000      	movs	r0, #0
    4d78:	4b67      	ldr	r3, [pc, #412]	; (4f18 <main+0x1f4>)
    4d7a:	4798      	blx	r3
	system_performance_level_disable(); // Lock into PL0
    4d7c:	4b67      	ldr	r3, [pc, #412]	; (4f1c <main+0x1f8>)
    4d7e:	4798      	blx	r3

	struct system_voltage_regulator_config vreg_config;
	system_voltage_regulator_get_config_defaults(&vreg_config);
    4d80:	2318      	movs	r3, #24
    4d82:	2218      	movs	r2, #24
    4d84:	4694      	mov	ip, r2
    4d86:	44bc      	add	ip, r7
    4d88:	4463      	add	r3, ip
    4d8a:	0018      	movs	r0, r3
    4d8c:	4b64      	ldr	r3, [pc, #400]	; (4f20 <main+0x1fc>)
    4d8e:	4798      	blx	r3
	vreg_config.regulator_sel = SYSTEM_VOLTAGE_REGULATOR_BUCK;
    4d90:	2318      	movs	r3, #24
    4d92:	2218      	movs	r2, #24
    4d94:	4694      	mov	ip, r2
    4d96:	44bc      	add	ip, r7
    4d98:	4463      	add	r3, ip
    4d9a:	2201      	movs	r2, #1
    4d9c:	70da      	strb	r2, [r3, #3]
	vreg_config.low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_HIGHTEST; // Higher efficiency, runs 2.5-3.6V only
    4d9e:	2318      	movs	r3, #24
    4da0:	2218      	movs	r2, #24
    4da2:	4694      	mov	ip, r2
    4da4:	44bc      	add	ip, r7
    4da6:	4463      	add	r3, ip
    4da8:	2201      	movs	r2, #1
    4daa:	711a      	strb	r2, [r3, #4]
	vreg_config.run_in_standby_pl0 = true;
    4dac:	2318      	movs	r3, #24
    4dae:	2218      	movs	r2, #24
    4db0:	4694      	mov	ip, r2
    4db2:	44bc      	add	ip, r7
    4db4:	4463      	add	r3, ip
    4db6:	2201      	movs	r2, #1
    4db8:	715a      	strb	r2, [r3, #5]
	system_voltage_regulator_set_config(&vreg_config);
    4dba:	2318      	movs	r3, #24
    4dbc:	2218      	movs	r2, #24
    4dbe:	4694      	mov	ip, r2
    4dc0:	44bc      	add	ip, r7
    4dc2:	4463      	add	r3, ip
    4dc4:	0018      	movs	r0, r3
    4dc6:	4b57      	ldr	r3, [pc, #348]	; (4f24 <main+0x200>)
    4dc8:	4798      	blx	r3

	bod33_disable();
    4dca:	4b57      	ldr	r3, [pc, #348]	; (4f28 <main+0x204>)
    4dcc:	4798      	blx	r3
	bod12_disable();
    4dce:	4b57      	ldr	r3, [pc, #348]	; (4f2c <main+0x208>)
    4dd0:	4798      	blx	r3
	rtc_init();
    4dd2:	4b57      	ldr	r3, [pc, #348]	; (4f30 <main+0x20c>)
    4dd4:	4798      	blx	r3
	adc_interface_init();
    4dd6:	4b57      	ldr	r3, [pc, #348]	; (4f34 <main+0x210>)
    4dd8:	4798      	blx	r3
	pwm_interface_init();
    4dda:	4b57      	ldr	r3, [pc, #348]	; (4f38 <main+0x214>)
    4ddc:	4798      	blx	r3

	i2c_interface_init();
    4dde:	4b57      	ldr	r3, [pc, #348]	; (4f3c <main+0x218>)
    4de0:	4798      	blx	r3
	init_lis3dh();
    4de2:	4b57      	ldr	r3, [pc, #348]	; (4f40 <main+0x21c>)
    4de4:	4798      	blx	r3
	init_bmp280();
    4de6:	4b57      	ldr	r3, [pc, #348]	; (4f44 <main+0x220>)
    4de8:	4798      	blx	r3

	for(i=0;i<3;i++)
    4dea:	2300      	movs	r3, #0
    4dec:	63fb      	str	r3, [r7, #60]	; 0x3c
    4dee:	e007      	b.n	4e00 <main+0xdc>
	{
		rtc_idle_delay(200);
    4df0:	20c8      	movs	r0, #200	; 0xc8
    4df2:	4b55      	ldr	r3, [pc, #340]	; (4f48 <main+0x224>)
    4df4:	4798      	blx	r3
		flash_led();
    4df6:	4b55      	ldr	r3, [pc, #340]	; (4f4c <main+0x228>)
    4df8:	4798      	blx	r3
	for(i=0;i<3;i++)
    4dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4dfc:	3301      	adds	r3, #1
    4dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    4e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e02:	2b02      	cmp	r3, #2
    4e04:	ddf4      	ble.n	4df0 <main+0xcc>
	}
	
	for(;;)
	{	
		uint32_t delay_time = 5000;
    4e06:	4b52      	ldr	r3, [pc, #328]	; (4f50 <main+0x22c>)
    4e08:	63bb      	str	r3, [r7, #56]	; 0x38
		if((i+1) % 3 == 0)
    4e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e0c:	1c5a      	adds	r2, r3, #1
    4e0e:	4b51      	ldr	r3, [pc, #324]	; (4f54 <main+0x230>)
    4e10:	2103      	movs	r1, #3
    4e12:	0010      	movs	r0, r2
    4e14:	4798      	blx	r3
    4e16:	1e0b      	subs	r3, r1, #0
    4e18:	d104      	bne.n	4e24 <main+0x100>
		{
			rtc_standby_delay(delay_time);
    4e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e1c:	0018      	movs	r0, r3
    4e1e:	4b4e      	ldr	r3, [pc, #312]	; (4f58 <main+0x234>)
    4e20:	4798      	blx	r3
    4e22:	e04a      	b.n	4eba <main+0x196>
		}
		else if((i+2) % 3 == 0)
    4e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e26:	1c9a      	adds	r2, r3, #2
    4e28:	4b4a      	ldr	r3, [pc, #296]	; (4f54 <main+0x230>)
    4e2a:	2103      	movs	r1, #3
    4e2c:	0010      	movs	r0, r2
    4e2e:	4798      	blx	r3
    4e30:	1e0b      	subs	r3, r1, #0
    4e32:	d104      	bne.n	4e3e <main+0x11a>
		{
			rtc_idle_delay(delay_time);
    4e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e36:	0018      	movs	r0, r3
    4e38:	4b43      	ldr	r3, [pc, #268]	; (4f48 <main+0x224>)
    4e3a:	4798      	blx	r3
    4e3c:	e03d      	b.n	4eba <main+0x196>
		}
		else
		{
			delay_ms(delay_time);
    4e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e40:	2b00      	cmp	r3, #0
    4e42:	d024      	beq.n	4e8e <main+0x16a>
    4e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e46:	60bb      	str	r3, [r7, #8]
    4e48:	2300      	movs	r3, #0
    4e4a:	60fb      	str	r3, [r7, #12]
    4e4c:	2000      	movs	r0, #0
    4e4e:	4b2c      	ldr	r3, [pc, #176]	; (4f00 <main+0x1dc>)
    4e50:	4798      	blx	r3
    4e52:	0003      	movs	r3, r0
    4e54:	603b      	str	r3, [r7, #0]
    4e56:	2300      	movs	r3, #0
    4e58:	607b      	str	r3, [r7, #4]
    4e5a:	4c2a      	ldr	r4, [pc, #168]	; (4f04 <main+0x1e0>)
    4e5c:	683a      	ldr	r2, [r7, #0]
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	68b8      	ldr	r0, [r7, #8]
    4e62:	68f9      	ldr	r1, [r7, #12]
    4e64:	47a0      	blx	r4
    4e66:	0003      	movs	r3, r0
    4e68:	000c      	movs	r4, r1
    4e6a:	0019      	movs	r1, r3
    4e6c:	0022      	movs	r2, r4
    4e6e:	4b26      	ldr	r3, [pc, #152]	; (4f08 <main+0x1e4>)
    4e70:	2400      	movs	r4, #0
    4e72:	18c9      	adds	r1, r1, r3
    4e74:	4162      	adcs	r2, r4
    4e76:	0008      	movs	r0, r1
    4e78:	0011      	movs	r1, r2
    4e7a:	4c24      	ldr	r4, [pc, #144]	; (4f0c <main+0x1e8>)
    4e7c:	4a24      	ldr	r2, [pc, #144]	; (4f10 <main+0x1ec>)
    4e7e:	2300      	movs	r3, #0
    4e80:	47a0      	blx	r4
    4e82:	0003      	movs	r3, r0
    4e84:	000c      	movs	r4, r1
    4e86:	0018      	movs	r0, r3
    4e88:	4b22      	ldr	r3, [pc, #136]	; (4f14 <main+0x1f0>)
    4e8a:	4798      	blx	r3
    4e8c:	e015      	b.n	4eba <main+0x196>
    4e8e:	2000      	movs	r0, #0
    4e90:	4b1b      	ldr	r3, [pc, #108]	; (4f00 <main+0x1dc>)
    4e92:	4798      	blx	r3
    4e94:	0003      	movs	r3, r0
    4e96:	001d      	movs	r5, r3
    4e98:	2300      	movs	r3, #0
    4e9a:	001e      	movs	r6, r3
    4e9c:	4b2f      	ldr	r3, [pc, #188]	; (4f5c <main+0x238>)
    4e9e:	2400      	movs	r4, #0
    4ea0:	195b      	adds	r3, r3, r5
    4ea2:	4174      	adcs	r4, r6
    4ea4:	0018      	movs	r0, r3
    4ea6:	0021      	movs	r1, r4
    4ea8:	4c18      	ldr	r4, [pc, #96]	; (4f0c <main+0x1e8>)
    4eaa:	4a2d      	ldr	r2, [pc, #180]	; (4f60 <main+0x23c>)
    4eac:	2300      	movs	r3, #0
    4eae:	47a0      	blx	r4
    4eb0:	0003      	movs	r3, r0
    4eb2:	000c      	movs	r4, r1
    4eb4:	0018      	movs	r0, r3
    4eb6:	4b17      	ldr	r3, [pc, #92]	; (4f14 <main+0x1f0>)
    4eb8:	4798      	blx	r3
		}
		lis3dh_data_g_t accel_data;
		read_lis3dh_g(&accel_data);
    4eba:	230c      	movs	r3, #12
    4ebc:	2218      	movs	r2, #24
    4ebe:	4694      	mov	ip, r2
    4ec0:	44bc      	add	ip, r7
    4ec2:	4463      	add	r3, ip
    4ec4:	0018      	movs	r0, r3
    4ec6:	4b27      	ldr	r3, [pc, #156]	; (4f64 <main+0x240>)
    4ec8:	4798      	blx	r3

		bmp280_meas_t baro_data;
		read_bmp280(&baro_data);
    4eca:	231c      	movs	r3, #28
    4ecc:	18fb      	adds	r3, r7, r3
    4ece:	0018      	movs	r0, r3
    4ed0:	4b25      	ldr	r3, [pc, #148]	; (4f68 <main+0x244>)
    4ed2:	4798      	blx	r3

		uint16_t adc_value = adc_interface_read_pin(A0_PIN);
    4ed4:	231e      	movs	r3, #30
    4ed6:	2218      	movs	r2, #24
    4ed8:	18ba      	adds	r2, r7, r2
    4eda:	18d4      	adds	r4, r2, r3
    4edc:	2002      	movs	r0, #2
    4ede:	4b23      	ldr	r3, [pc, #140]	; (4f6c <main+0x248>)
    4ee0:	4798      	blx	r3
    4ee2:	0003      	movs	r3, r0
    4ee4:	8023      	strh	r3, [r4, #0]

		flash_led();
    4ee6:	4b19      	ldr	r3, [pc, #100]	; (4f4c <main+0x228>)
    4ee8:	4798      	blx	r3

		i++;
    4eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4eec:	3301      	adds	r3, #1
    4eee:	63fb      	str	r3, [r7, #60]	; 0x3c
	{	
    4ef0:	e789      	b.n	4e06 <main+0xe2>
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	00004a01 	.word	0x00004a01
    4ef8:	00003e21 	.word	0x00003e21
    4efc:	00004c45 	.word	0x00004c45
    4f00:	00004639 	.word	0x00004639
    4f04:	000052e5 	.word	0x000052e5
    4f08:	00001b57 	.word	0x00001b57
    4f0c:	000052a5 	.word	0x000052a5
    4f10:	00001b58 	.word	0x00001b58
    4f14:	20000001 	.word	0x20000001
    4f18:	00004bc9 	.word	0x00004bc9
    4f1c:	00004c25 	.word	0x00004c25
    4f20:	00004acf 	.word	0x00004acf
    4f24:	00004b05 	.word	0x00004b05
    4f28:	00004c61 	.word	0x00004c61
    4f2c:	00004c89 	.word	0x00004c89
    4f30:	00002d31 	.word	0x00002d31
    4f34:	00002965 	.word	0x00002965
    4f38:	00002bd1 	.word	0x00002bd1
    4f3c:	00003739 	.word	0x00003739
    4f40:	00003991 	.word	0x00003991
    4f44:	00002f91 	.word	0x00002f91
    4f48:	00002d99 	.word	0x00002d99
    4f4c:	00004cb1 	.word	0x00004cb1
    4f50:	00001388 	.word	0x00001388
    4f54:	00005251 	.word	0x00005251
    4f58:	00002df5 	.word	0x00002df5
    4f5c:	006acfbf 	.word	0x006acfbf
    4f60:	006acfc0 	.word	0x006acfc0
    4f64:	00003a79 	.word	0x00003a79
    4f68:	000034c5 	.word	0x000034c5
    4f6c:	000029c5 	.word	0x000029c5

00004f70 <__udivsi3>:
    4f70:	2200      	movs	r2, #0
    4f72:	0843      	lsrs	r3, r0, #1
    4f74:	428b      	cmp	r3, r1
    4f76:	d374      	bcc.n	5062 <__udivsi3+0xf2>
    4f78:	0903      	lsrs	r3, r0, #4
    4f7a:	428b      	cmp	r3, r1
    4f7c:	d35f      	bcc.n	503e <__udivsi3+0xce>
    4f7e:	0a03      	lsrs	r3, r0, #8
    4f80:	428b      	cmp	r3, r1
    4f82:	d344      	bcc.n	500e <__udivsi3+0x9e>
    4f84:	0b03      	lsrs	r3, r0, #12
    4f86:	428b      	cmp	r3, r1
    4f88:	d328      	bcc.n	4fdc <__udivsi3+0x6c>
    4f8a:	0c03      	lsrs	r3, r0, #16
    4f8c:	428b      	cmp	r3, r1
    4f8e:	d30d      	bcc.n	4fac <__udivsi3+0x3c>
    4f90:	22ff      	movs	r2, #255	; 0xff
    4f92:	0209      	lsls	r1, r1, #8
    4f94:	ba12      	rev	r2, r2
    4f96:	0c03      	lsrs	r3, r0, #16
    4f98:	428b      	cmp	r3, r1
    4f9a:	d302      	bcc.n	4fa2 <__udivsi3+0x32>
    4f9c:	1212      	asrs	r2, r2, #8
    4f9e:	0209      	lsls	r1, r1, #8
    4fa0:	d065      	beq.n	506e <__udivsi3+0xfe>
    4fa2:	0b03      	lsrs	r3, r0, #12
    4fa4:	428b      	cmp	r3, r1
    4fa6:	d319      	bcc.n	4fdc <__udivsi3+0x6c>
    4fa8:	e000      	b.n	4fac <__udivsi3+0x3c>
    4faa:	0a09      	lsrs	r1, r1, #8
    4fac:	0bc3      	lsrs	r3, r0, #15
    4fae:	428b      	cmp	r3, r1
    4fb0:	d301      	bcc.n	4fb6 <__udivsi3+0x46>
    4fb2:	03cb      	lsls	r3, r1, #15
    4fb4:	1ac0      	subs	r0, r0, r3
    4fb6:	4152      	adcs	r2, r2
    4fb8:	0b83      	lsrs	r3, r0, #14
    4fba:	428b      	cmp	r3, r1
    4fbc:	d301      	bcc.n	4fc2 <__udivsi3+0x52>
    4fbe:	038b      	lsls	r3, r1, #14
    4fc0:	1ac0      	subs	r0, r0, r3
    4fc2:	4152      	adcs	r2, r2
    4fc4:	0b43      	lsrs	r3, r0, #13
    4fc6:	428b      	cmp	r3, r1
    4fc8:	d301      	bcc.n	4fce <__udivsi3+0x5e>
    4fca:	034b      	lsls	r3, r1, #13
    4fcc:	1ac0      	subs	r0, r0, r3
    4fce:	4152      	adcs	r2, r2
    4fd0:	0b03      	lsrs	r3, r0, #12
    4fd2:	428b      	cmp	r3, r1
    4fd4:	d301      	bcc.n	4fda <__udivsi3+0x6a>
    4fd6:	030b      	lsls	r3, r1, #12
    4fd8:	1ac0      	subs	r0, r0, r3
    4fda:	4152      	adcs	r2, r2
    4fdc:	0ac3      	lsrs	r3, r0, #11
    4fde:	428b      	cmp	r3, r1
    4fe0:	d301      	bcc.n	4fe6 <__udivsi3+0x76>
    4fe2:	02cb      	lsls	r3, r1, #11
    4fe4:	1ac0      	subs	r0, r0, r3
    4fe6:	4152      	adcs	r2, r2
    4fe8:	0a83      	lsrs	r3, r0, #10
    4fea:	428b      	cmp	r3, r1
    4fec:	d301      	bcc.n	4ff2 <__udivsi3+0x82>
    4fee:	028b      	lsls	r3, r1, #10
    4ff0:	1ac0      	subs	r0, r0, r3
    4ff2:	4152      	adcs	r2, r2
    4ff4:	0a43      	lsrs	r3, r0, #9
    4ff6:	428b      	cmp	r3, r1
    4ff8:	d301      	bcc.n	4ffe <__udivsi3+0x8e>
    4ffa:	024b      	lsls	r3, r1, #9
    4ffc:	1ac0      	subs	r0, r0, r3
    4ffe:	4152      	adcs	r2, r2
    5000:	0a03      	lsrs	r3, r0, #8
    5002:	428b      	cmp	r3, r1
    5004:	d301      	bcc.n	500a <__udivsi3+0x9a>
    5006:	020b      	lsls	r3, r1, #8
    5008:	1ac0      	subs	r0, r0, r3
    500a:	4152      	adcs	r2, r2
    500c:	d2cd      	bcs.n	4faa <__udivsi3+0x3a>
    500e:	09c3      	lsrs	r3, r0, #7
    5010:	428b      	cmp	r3, r1
    5012:	d301      	bcc.n	5018 <__udivsi3+0xa8>
    5014:	01cb      	lsls	r3, r1, #7
    5016:	1ac0      	subs	r0, r0, r3
    5018:	4152      	adcs	r2, r2
    501a:	0983      	lsrs	r3, r0, #6
    501c:	428b      	cmp	r3, r1
    501e:	d301      	bcc.n	5024 <__udivsi3+0xb4>
    5020:	018b      	lsls	r3, r1, #6
    5022:	1ac0      	subs	r0, r0, r3
    5024:	4152      	adcs	r2, r2
    5026:	0943      	lsrs	r3, r0, #5
    5028:	428b      	cmp	r3, r1
    502a:	d301      	bcc.n	5030 <__udivsi3+0xc0>
    502c:	014b      	lsls	r3, r1, #5
    502e:	1ac0      	subs	r0, r0, r3
    5030:	4152      	adcs	r2, r2
    5032:	0903      	lsrs	r3, r0, #4
    5034:	428b      	cmp	r3, r1
    5036:	d301      	bcc.n	503c <__udivsi3+0xcc>
    5038:	010b      	lsls	r3, r1, #4
    503a:	1ac0      	subs	r0, r0, r3
    503c:	4152      	adcs	r2, r2
    503e:	08c3      	lsrs	r3, r0, #3
    5040:	428b      	cmp	r3, r1
    5042:	d301      	bcc.n	5048 <__udivsi3+0xd8>
    5044:	00cb      	lsls	r3, r1, #3
    5046:	1ac0      	subs	r0, r0, r3
    5048:	4152      	adcs	r2, r2
    504a:	0883      	lsrs	r3, r0, #2
    504c:	428b      	cmp	r3, r1
    504e:	d301      	bcc.n	5054 <__udivsi3+0xe4>
    5050:	008b      	lsls	r3, r1, #2
    5052:	1ac0      	subs	r0, r0, r3
    5054:	4152      	adcs	r2, r2
    5056:	0843      	lsrs	r3, r0, #1
    5058:	428b      	cmp	r3, r1
    505a:	d301      	bcc.n	5060 <__udivsi3+0xf0>
    505c:	004b      	lsls	r3, r1, #1
    505e:	1ac0      	subs	r0, r0, r3
    5060:	4152      	adcs	r2, r2
    5062:	1a41      	subs	r1, r0, r1
    5064:	d200      	bcs.n	5068 <__udivsi3+0xf8>
    5066:	4601      	mov	r1, r0
    5068:	4152      	adcs	r2, r2
    506a:	4610      	mov	r0, r2
    506c:	4770      	bx	lr
    506e:	e7ff      	b.n	5070 <__udivsi3+0x100>
    5070:	b501      	push	{r0, lr}
    5072:	2000      	movs	r0, #0
    5074:	f000 f8f0 	bl	5258 <__aeabi_idiv0>
    5078:	bd02      	pop	{r1, pc}
    507a:	46c0      	nop			; (mov r8, r8)

0000507c <__aeabi_uidivmod>:
    507c:	2900      	cmp	r1, #0
    507e:	d0f7      	beq.n	5070 <__udivsi3+0x100>
    5080:	e776      	b.n	4f70 <__udivsi3>
    5082:	4770      	bx	lr

00005084 <__divsi3>:
    5084:	4603      	mov	r3, r0
    5086:	430b      	orrs	r3, r1
    5088:	d47f      	bmi.n	518a <__divsi3+0x106>
    508a:	2200      	movs	r2, #0
    508c:	0843      	lsrs	r3, r0, #1
    508e:	428b      	cmp	r3, r1
    5090:	d374      	bcc.n	517c <__divsi3+0xf8>
    5092:	0903      	lsrs	r3, r0, #4
    5094:	428b      	cmp	r3, r1
    5096:	d35f      	bcc.n	5158 <__divsi3+0xd4>
    5098:	0a03      	lsrs	r3, r0, #8
    509a:	428b      	cmp	r3, r1
    509c:	d344      	bcc.n	5128 <__divsi3+0xa4>
    509e:	0b03      	lsrs	r3, r0, #12
    50a0:	428b      	cmp	r3, r1
    50a2:	d328      	bcc.n	50f6 <__divsi3+0x72>
    50a4:	0c03      	lsrs	r3, r0, #16
    50a6:	428b      	cmp	r3, r1
    50a8:	d30d      	bcc.n	50c6 <__divsi3+0x42>
    50aa:	22ff      	movs	r2, #255	; 0xff
    50ac:	0209      	lsls	r1, r1, #8
    50ae:	ba12      	rev	r2, r2
    50b0:	0c03      	lsrs	r3, r0, #16
    50b2:	428b      	cmp	r3, r1
    50b4:	d302      	bcc.n	50bc <__divsi3+0x38>
    50b6:	1212      	asrs	r2, r2, #8
    50b8:	0209      	lsls	r1, r1, #8
    50ba:	d065      	beq.n	5188 <__divsi3+0x104>
    50bc:	0b03      	lsrs	r3, r0, #12
    50be:	428b      	cmp	r3, r1
    50c0:	d319      	bcc.n	50f6 <__divsi3+0x72>
    50c2:	e000      	b.n	50c6 <__divsi3+0x42>
    50c4:	0a09      	lsrs	r1, r1, #8
    50c6:	0bc3      	lsrs	r3, r0, #15
    50c8:	428b      	cmp	r3, r1
    50ca:	d301      	bcc.n	50d0 <__divsi3+0x4c>
    50cc:	03cb      	lsls	r3, r1, #15
    50ce:	1ac0      	subs	r0, r0, r3
    50d0:	4152      	adcs	r2, r2
    50d2:	0b83      	lsrs	r3, r0, #14
    50d4:	428b      	cmp	r3, r1
    50d6:	d301      	bcc.n	50dc <__divsi3+0x58>
    50d8:	038b      	lsls	r3, r1, #14
    50da:	1ac0      	subs	r0, r0, r3
    50dc:	4152      	adcs	r2, r2
    50de:	0b43      	lsrs	r3, r0, #13
    50e0:	428b      	cmp	r3, r1
    50e2:	d301      	bcc.n	50e8 <__divsi3+0x64>
    50e4:	034b      	lsls	r3, r1, #13
    50e6:	1ac0      	subs	r0, r0, r3
    50e8:	4152      	adcs	r2, r2
    50ea:	0b03      	lsrs	r3, r0, #12
    50ec:	428b      	cmp	r3, r1
    50ee:	d301      	bcc.n	50f4 <__divsi3+0x70>
    50f0:	030b      	lsls	r3, r1, #12
    50f2:	1ac0      	subs	r0, r0, r3
    50f4:	4152      	adcs	r2, r2
    50f6:	0ac3      	lsrs	r3, r0, #11
    50f8:	428b      	cmp	r3, r1
    50fa:	d301      	bcc.n	5100 <__divsi3+0x7c>
    50fc:	02cb      	lsls	r3, r1, #11
    50fe:	1ac0      	subs	r0, r0, r3
    5100:	4152      	adcs	r2, r2
    5102:	0a83      	lsrs	r3, r0, #10
    5104:	428b      	cmp	r3, r1
    5106:	d301      	bcc.n	510c <__divsi3+0x88>
    5108:	028b      	lsls	r3, r1, #10
    510a:	1ac0      	subs	r0, r0, r3
    510c:	4152      	adcs	r2, r2
    510e:	0a43      	lsrs	r3, r0, #9
    5110:	428b      	cmp	r3, r1
    5112:	d301      	bcc.n	5118 <__divsi3+0x94>
    5114:	024b      	lsls	r3, r1, #9
    5116:	1ac0      	subs	r0, r0, r3
    5118:	4152      	adcs	r2, r2
    511a:	0a03      	lsrs	r3, r0, #8
    511c:	428b      	cmp	r3, r1
    511e:	d301      	bcc.n	5124 <__divsi3+0xa0>
    5120:	020b      	lsls	r3, r1, #8
    5122:	1ac0      	subs	r0, r0, r3
    5124:	4152      	adcs	r2, r2
    5126:	d2cd      	bcs.n	50c4 <__divsi3+0x40>
    5128:	09c3      	lsrs	r3, r0, #7
    512a:	428b      	cmp	r3, r1
    512c:	d301      	bcc.n	5132 <__divsi3+0xae>
    512e:	01cb      	lsls	r3, r1, #7
    5130:	1ac0      	subs	r0, r0, r3
    5132:	4152      	adcs	r2, r2
    5134:	0983      	lsrs	r3, r0, #6
    5136:	428b      	cmp	r3, r1
    5138:	d301      	bcc.n	513e <__divsi3+0xba>
    513a:	018b      	lsls	r3, r1, #6
    513c:	1ac0      	subs	r0, r0, r3
    513e:	4152      	adcs	r2, r2
    5140:	0943      	lsrs	r3, r0, #5
    5142:	428b      	cmp	r3, r1
    5144:	d301      	bcc.n	514a <__divsi3+0xc6>
    5146:	014b      	lsls	r3, r1, #5
    5148:	1ac0      	subs	r0, r0, r3
    514a:	4152      	adcs	r2, r2
    514c:	0903      	lsrs	r3, r0, #4
    514e:	428b      	cmp	r3, r1
    5150:	d301      	bcc.n	5156 <__divsi3+0xd2>
    5152:	010b      	lsls	r3, r1, #4
    5154:	1ac0      	subs	r0, r0, r3
    5156:	4152      	adcs	r2, r2
    5158:	08c3      	lsrs	r3, r0, #3
    515a:	428b      	cmp	r3, r1
    515c:	d301      	bcc.n	5162 <__divsi3+0xde>
    515e:	00cb      	lsls	r3, r1, #3
    5160:	1ac0      	subs	r0, r0, r3
    5162:	4152      	adcs	r2, r2
    5164:	0883      	lsrs	r3, r0, #2
    5166:	428b      	cmp	r3, r1
    5168:	d301      	bcc.n	516e <__divsi3+0xea>
    516a:	008b      	lsls	r3, r1, #2
    516c:	1ac0      	subs	r0, r0, r3
    516e:	4152      	adcs	r2, r2
    5170:	0843      	lsrs	r3, r0, #1
    5172:	428b      	cmp	r3, r1
    5174:	d301      	bcc.n	517a <__divsi3+0xf6>
    5176:	004b      	lsls	r3, r1, #1
    5178:	1ac0      	subs	r0, r0, r3
    517a:	4152      	adcs	r2, r2
    517c:	1a41      	subs	r1, r0, r1
    517e:	d200      	bcs.n	5182 <__divsi3+0xfe>
    5180:	4601      	mov	r1, r0
    5182:	4152      	adcs	r2, r2
    5184:	4610      	mov	r0, r2
    5186:	4770      	bx	lr
    5188:	e05d      	b.n	5246 <__divsi3+0x1c2>
    518a:	0fca      	lsrs	r2, r1, #31
    518c:	d000      	beq.n	5190 <__divsi3+0x10c>
    518e:	4249      	negs	r1, r1
    5190:	1003      	asrs	r3, r0, #32
    5192:	d300      	bcc.n	5196 <__divsi3+0x112>
    5194:	4240      	negs	r0, r0
    5196:	4053      	eors	r3, r2
    5198:	2200      	movs	r2, #0
    519a:	469c      	mov	ip, r3
    519c:	0903      	lsrs	r3, r0, #4
    519e:	428b      	cmp	r3, r1
    51a0:	d32d      	bcc.n	51fe <__divsi3+0x17a>
    51a2:	0a03      	lsrs	r3, r0, #8
    51a4:	428b      	cmp	r3, r1
    51a6:	d312      	bcc.n	51ce <__divsi3+0x14a>
    51a8:	22fc      	movs	r2, #252	; 0xfc
    51aa:	0189      	lsls	r1, r1, #6
    51ac:	ba12      	rev	r2, r2
    51ae:	0a03      	lsrs	r3, r0, #8
    51b0:	428b      	cmp	r3, r1
    51b2:	d30c      	bcc.n	51ce <__divsi3+0x14a>
    51b4:	0189      	lsls	r1, r1, #6
    51b6:	1192      	asrs	r2, r2, #6
    51b8:	428b      	cmp	r3, r1
    51ba:	d308      	bcc.n	51ce <__divsi3+0x14a>
    51bc:	0189      	lsls	r1, r1, #6
    51be:	1192      	asrs	r2, r2, #6
    51c0:	428b      	cmp	r3, r1
    51c2:	d304      	bcc.n	51ce <__divsi3+0x14a>
    51c4:	0189      	lsls	r1, r1, #6
    51c6:	d03a      	beq.n	523e <__divsi3+0x1ba>
    51c8:	1192      	asrs	r2, r2, #6
    51ca:	e000      	b.n	51ce <__divsi3+0x14a>
    51cc:	0989      	lsrs	r1, r1, #6
    51ce:	09c3      	lsrs	r3, r0, #7
    51d0:	428b      	cmp	r3, r1
    51d2:	d301      	bcc.n	51d8 <__divsi3+0x154>
    51d4:	01cb      	lsls	r3, r1, #7
    51d6:	1ac0      	subs	r0, r0, r3
    51d8:	4152      	adcs	r2, r2
    51da:	0983      	lsrs	r3, r0, #6
    51dc:	428b      	cmp	r3, r1
    51de:	d301      	bcc.n	51e4 <__divsi3+0x160>
    51e0:	018b      	lsls	r3, r1, #6
    51e2:	1ac0      	subs	r0, r0, r3
    51e4:	4152      	adcs	r2, r2
    51e6:	0943      	lsrs	r3, r0, #5
    51e8:	428b      	cmp	r3, r1
    51ea:	d301      	bcc.n	51f0 <__divsi3+0x16c>
    51ec:	014b      	lsls	r3, r1, #5
    51ee:	1ac0      	subs	r0, r0, r3
    51f0:	4152      	adcs	r2, r2
    51f2:	0903      	lsrs	r3, r0, #4
    51f4:	428b      	cmp	r3, r1
    51f6:	d301      	bcc.n	51fc <__divsi3+0x178>
    51f8:	010b      	lsls	r3, r1, #4
    51fa:	1ac0      	subs	r0, r0, r3
    51fc:	4152      	adcs	r2, r2
    51fe:	08c3      	lsrs	r3, r0, #3
    5200:	428b      	cmp	r3, r1
    5202:	d301      	bcc.n	5208 <__divsi3+0x184>
    5204:	00cb      	lsls	r3, r1, #3
    5206:	1ac0      	subs	r0, r0, r3
    5208:	4152      	adcs	r2, r2
    520a:	0883      	lsrs	r3, r0, #2
    520c:	428b      	cmp	r3, r1
    520e:	d301      	bcc.n	5214 <__divsi3+0x190>
    5210:	008b      	lsls	r3, r1, #2
    5212:	1ac0      	subs	r0, r0, r3
    5214:	4152      	adcs	r2, r2
    5216:	d2d9      	bcs.n	51cc <__divsi3+0x148>
    5218:	0843      	lsrs	r3, r0, #1
    521a:	428b      	cmp	r3, r1
    521c:	d301      	bcc.n	5222 <__divsi3+0x19e>
    521e:	004b      	lsls	r3, r1, #1
    5220:	1ac0      	subs	r0, r0, r3
    5222:	4152      	adcs	r2, r2
    5224:	1a41      	subs	r1, r0, r1
    5226:	d200      	bcs.n	522a <__divsi3+0x1a6>
    5228:	4601      	mov	r1, r0
    522a:	4663      	mov	r3, ip
    522c:	4152      	adcs	r2, r2
    522e:	105b      	asrs	r3, r3, #1
    5230:	4610      	mov	r0, r2
    5232:	d301      	bcc.n	5238 <__divsi3+0x1b4>
    5234:	4240      	negs	r0, r0
    5236:	2b00      	cmp	r3, #0
    5238:	d500      	bpl.n	523c <__divsi3+0x1b8>
    523a:	4249      	negs	r1, r1
    523c:	4770      	bx	lr
    523e:	4663      	mov	r3, ip
    5240:	105b      	asrs	r3, r3, #1
    5242:	d300      	bcc.n	5246 <__divsi3+0x1c2>
    5244:	4240      	negs	r0, r0
    5246:	b501      	push	{r0, lr}
    5248:	2000      	movs	r0, #0
    524a:	f000 f805 	bl	5258 <__aeabi_idiv0>
    524e:	bd02      	pop	{r1, pc}

00005250 <__aeabi_idivmod>:
    5250:	2900      	cmp	r1, #0
    5252:	d0f8      	beq.n	5246 <__divsi3+0x1c2>
    5254:	e716      	b.n	5084 <__divsi3>
    5256:	4770      	bx	lr

00005258 <__aeabi_idiv0>:
    5258:	4770      	bx	lr
    525a:	46c0      	nop			; (mov r8, r8)

0000525c <__aeabi_ldivmod>:
    525c:	2b00      	cmp	r3, #0
    525e:	d115      	bne.n	528c <__aeabi_ldivmod+0x30>
    5260:	2a00      	cmp	r2, #0
    5262:	d113      	bne.n	528c <__aeabi_ldivmod+0x30>
    5264:	2900      	cmp	r1, #0
    5266:	db06      	blt.n	5276 <__aeabi_ldivmod+0x1a>
    5268:	dc01      	bgt.n	526e <__aeabi_ldivmod+0x12>
    526a:	2800      	cmp	r0, #0
    526c:	d006      	beq.n	527c <__aeabi_ldivmod+0x20>
    526e:	2000      	movs	r0, #0
    5270:	43c0      	mvns	r0, r0
    5272:	0841      	lsrs	r1, r0, #1
    5274:	e002      	b.n	527c <__aeabi_ldivmod+0x20>
    5276:	2180      	movs	r1, #128	; 0x80
    5278:	0609      	lsls	r1, r1, #24
    527a:	2000      	movs	r0, #0
    527c:	b407      	push	{r0, r1, r2}
    527e:	4802      	ldr	r0, [pc, #8]	; (5288 <__aeabi_ldivmod+0x2c>)
    5280:	a101      	add	r1, pc, #4	; (adr r1, 5288 <__aeabi_ldivmod+0x2c>)
    5282:	1840      	adds	r0, r0, r1
    5284:	9002      	str	r0, [sp, #8]
    5286:	bd03      	pop	{r0, r1, pc}
    5288:	ffffffd1 	.word	0xffffffd1
    528c:	b403      	push	{r0, r1}
    528e:	4668      	mov	r0, sp
    5290:	b501      	push	{r0, lr}
    5292:	9802      	ldr	r0, [sp, #8]
    5294:	f000 f910 	bl	54b8 <__gnu_ldivmod_helper>
    5298:	9b01      	ldr	r3, [sp, #4]
    529a:	469e      	mov	lr, r3
    529c:	b002      	add	sp, #8
    529e:	bc0c      	pop	{r2, r3}
    52a0:	4770      	bx	lr
    52a2:	46c0      	nop			; (mov r8, r8)

000052a4 <__aeabi_uldivmod>:
    52a4:	2b00      	cmp	r3, #0
    52a6:	d111      	bne.n	52cc <__aeabi_uldivmod+0x28>
    52a8:	2a00      	cmp	r2, #0
    52aa:	d10f      	bne.n	52cc <__aeabi_uldivmod+0x28>
    52ac:	2900      	cmp	r1, #0
    52ae:	d100      	bne.n	52b2 <__aeabi_uldivmod+0xe>
    52b0:	2800      	cmp	r0, #0
    52b2:	d002      	beq.n	52ba <__aeabi_uldivmod+0x16>
    52b4:	2100      	movs	r1, #0
    52b6:	43c9      	mvns	r1, r1
    52b8:	1c08      	adds	r0, r1, #0
    52ba:	b407      	push	{r0, r1, r2}
    52bc:	4802      	ldr	r0, [pc, #8]	; (52c8 <__aeabi_uldivmod+0x24>)
    52be:	a102      	add	r1, pc, #8	; (adr r1, 52c8 <__aeabi_uldivmod+0x24>)
    52c0:	1840      	adds	r0, r0, r1
    52c2:	9002      	str	r0, [sp, #8]
    52c4:	bd03      	pop	{r0, r1, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	ffffff91 	.word	0xffffff91
    52cc:	b403      	push	{r0, r1}
    52ce:	4668      	mov	r0, sp
    52d0:	b501      	push	{r0, lr}
    52d2:	9802      	ldr	r0, [sp, #8]
    52d4:	f000 f830 	bl	5338 <__udivmoddi4>
    52d8:	9b01      	ldr	r3, [sp, #4]
    52da:	469e      	mov	lr, r3
    52dc:	b002      	add	sp, #8
    52de:	bc0c      	pop	{r2, r3}
    52e0:	4770      	bx	lr
    52e2:	46c0      	nop			; (mov r8, r8)

000052e4 <__aeabi_lmul>:
    52e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52e6:	46ce      	mov	lr, r9
    52e8:	4647      	mov	r7, r8
    52ea:	0415      	lsls	r5, r2, #16
    52ec:	0c2d      	lsrs	r5, r5, #16
    52ee:	002e      	movs	r6, r5
    52f0:	b580      	push	{r7, lr}
    52f2:	0407      	lsls	r7, r0, #16
    52f4:	0c14      	lsrs	r4, r2, #16
    52f6:	0c3f      	lsrs	r7, r7, #16
    52f8:	4699      	mov	r9, r3
    52fa:	0c03      	lsrs	r3, r0, #16
    52fc:	437e      	muls	r6, r7
    52fe:	435d      	muls	r5, r3
    5300:	4367      	muls	r7, r4
    5302:	4363      	muls	r3, r4
    5304:	197f      	adds	r7, r7, r5
    5306:	0c34      	lsrs	r4, r6, #16
    5308:	19e4      	adds	r4, r4, r7
    530a:	469c      	mov	ip, r3
    530c:	42a5      	cmp	r5, r4
    530e:	d903      	bls.n	5318 <__aeabi_lmul+0x34>
    5310:	2380      	movs	r3, #128	; 0x80
    5312:	025b      	lsls	r3, r3, #9
    5314:	4698      	mov	r8, r3
    5316:	44c4      	add	ip, r8
    5318:	464b      	mov	r3, r9
    531a:	4351      	muls	r1, r2
    531c:	4343      	muls	r3, r0
    531e:	0436      	lsls	r6, r6, #16
    5320:	0c36      	lsrs	r6, r6, #16
    5322:	0c25      	lsrs	r5, r4, #16
    5324:	0424      	lsls	r4, r4, #16
    5326:	4465      	add	r5, ip
    5328:	19a4      	adds	r4, r4, r6
    532a:	1859      	adds	r1, r3, r1
    532c:	1949      	adds	r1, r1, r5
    532e:	0020      	movs	r0, r4
    5330:	bc0c      	pop	{r2, r3}
    5332:	4690      	mov	r8, r2
    5334:	4699      	mov	r9, r3
    5336:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005338 <__udivmoddi4>:
    5338:	b5f0      	push	{r4, r5, r6, r7, lr}
    533a:	4657      	mov	r7, sl
    533c:	464e      	mov	r6, r9
    533e:	4645      	mov	r5, r8
    5340:	46de      	mov	lr, fp
    5342:	b5e0      	push	{r5, r6, r7, lr}
    5344:	0004      	movs	r4, r0
    5346:	b083      	sub	sp, #12
    5348:	000d      	movs	r5, r1
    534a:	4692      	mov	sl, r2
    534c:	4699      	mov	r9, r3
    534e:	428b      	cmp	r3, r1
    5350:	d82f      	bhi.n	53b2 <__udivmoddi4+0x7a>
    5352:	d02c      	beq.n	53ae <__udivmoddi4+0x76>
    5354:	4649      	mov	r1, r9
    5356:	4650      	mov	r0, sl
    5358:	f001 fdfa 	bl	6f50 <__clzdi2>
    535c:	0029      	movs	r1, r5
    535e:	0006      	movs	r6, r0
    5360:	0020      	movs	r0, r4
    5362:	f001 fdf5 	bl	6f50 <__clzdi2>
    5366:	1a33      	subs	r3, r6, r0
    5368:	4698      	mov	r8, r3
    536a:	3b20      	subs	r3, #32
    536c:	469b      	mov	fp, r3
    536e:	d500      	bpl.n	5372 <__udivmoddi4+0x3a>
    5370:	e074      	b.n	545c <__udivmoddi4+0x124>
    5372:	4653      	mov	r3, sl
    5374:	465a      	mov	r2, fp
    5376:	4093      	lsls	r3, r2
    5378:	001f      	movs	r7, r3
    537a:	4653      	mov	r3, sl
    537c:	4642      	mov	r2, r8
    537e:	4093      	lsls	r3, r2
    5380:	001e      	movs	r6, r3
    5382:	42af      	cmp	r7, r5
    5384:	d829      	bhi.n	53da <__udivmoddi4+0xa2>
    5386:	d026      	beq.n	53d6 <__udivmoddi4+0x9e>
    5388:	465b      	mov	r3, fp
    538a:	1ba4      	subs	r4, r4, r6
    538c:	41bd      	sbcs	r5, r7
    538e:	2b00      	cmp	r3, #0
    5390:	da00      	bge.n	5394 <__udivmoddi4+0x5c>
    5392:	e079      	b.n	5488 <__udivmoddi4+0x150>
    5394:	2200      	movs	r2, #0
    5396:	2300      	movs	r3, #0
    5398:	9200      	str	r2, [sp, #0]
    539a:	9301      	str	r3, [sp, #4]
    539c:	2301      	movs	r3, #1
    539e:	465a      	mov	r2, fp
    53a0:	4093      	lsls	r3, r2
    53a2:	9301      	str	r3, [sp, #4]
    53a4:	2301      	movs	r3, #1
    53a6:	4642      	mov	r2, r8
    53a8:	4093      	lsls	r3, r2
    53aa:	9300      	str	r3, [sp, #0]
    53ac:	e019      	b.n	53e2 <__udivmoddi4+0xaa>
    53ae:	4282      	cmp	r2, r0
    53b0:	d9d0      	bls.n	5354 <__udivmoddi4+0x1c>
    53b2:	2200      	movs	r2, #0
    53b4:	2300      	movs	r3, #0
    53b6:	9200      	str	r2, [sp, #0]
    53b8:	9301      	str	r3, [sp, #4]
    53ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    53bc:	2b00      	cmp	r3, #0
    53be:	d001      	beq.n	53c4 <__udivmoddi4+0x8c>
    53c0:	601c      	str	r4, [r3, #0]
    53c2:	605d      	str	r5, [r3, #4]
    53c4:	9800      	ldr	r0, [sp, #0]
    53c6:	9901      	ldr	r1, [sp, #4]
    53c8:	b003      	add	sp, #12
    53ca:	bc3c      	pop	{r2, r3, r4, r5}
    53cc:	4690      	mov	r8, r2
    53ce:	4699      	mov	r9, r3
    53d0:	46a2      	mov	sl, r4
    53d2:	46ab      	mov	fp, r5
    53d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d6:	42a3      	cmp	r3, r4
    53d8:	d9d6      	bls.n	5388 <__udivmoddi4+0x50>
    53da:	2200      	movs	r2, #0
    53dc:	2300      	movs	r3, #0
    53de:	9200      	str	r2, [sp, #0]
    53e0:	9301      	str	r3, [sp, #4]
    53e2:	4643      	mov	r3, r8
    53e4:	2b00      	cmp	r3, #0
    53e6:	d0e8      	beq.n	53ba <__udivmoddi4+0x82>
    53e8:	07fb      	lsls	r3, r7, #31
    53ea:	0872      	lsrs	r2, r6, #1
    53ec:	431a      	orrs	r2, r3
    53ee:	4646      	mov	r6, r8
    53f0:	087b      	lsrs	r3, r7, #1
    53f2:	e00e      	b.n	5412 <__udivmoddi4+0xda>
    53f4:	42ab      	cmp	r3, r5
    53f6:	d101      	bne.n	53fc <__udivmoddi4+0xc4>
    53f8:	42a2      	cmp	r2, r4
    53fa:	d80c      	bhi.n	5416 <__udivmoddi4+0xde>
    53fc:	1aa4      	subs	r4, r4, r2
    53fe:	419d      	sbcs	r5, r3
    5400:	2001      	movs	r0, #1
    5402:	1924      	adds	r4, r4, r4
    5404:	416d      	adcs	r5, r5
    5406:	2100      	movs	r1, #0
    5408:	3e01      	subs	r6, #1
    540a:	1824      	adds	r4, r4, r0
    540c:	414d      	adcs	r5, r1
    540e:	2e00      	cmp	r6, #0
    5410:	d006      	beq.n	5420 <__udivmoddi4+0xe8>
    5412:	42ab      	cmp	r3, r5
    5414:	d9ee      	bls.n	53f4 <__udivmoddi4+0xbc>
    5416:	3e01      	subs	r6, #1
    5418:	1924      	adds	r4, r4, r4
    541a:	416d      	adcs	r5, r5
    541c:	2e00      	cmp	r6, #0
    541e:	d1f8      	bne.n	5412 <__udivmoddi4+0xda>
    5420:	465b      	mov	r3, fp
    5422:	9800      	ldr	r0, [sp, #0]
    5424:	9901      	ldr	r1, [sp, #4]
    5426:	1900      	adds	r0, r0, r4
    5428:	4169      	adcs	r1, r5
    542a:	2b00      	cmp	r3, #0
    542c:	db22      	blt.n	5474 <__udivmoddi4+0x13c>
    542e:	002b      	movs	r3, r5
    5430:	465a      	mov	r2, fp
    5432:	40d3      	lsrs	r3, r2
    5434:	002a      	movs	r2, r5
    5436:	4644      	mov	r4, r8
    5438:	40e2      	lsrs	r2, r4
    543a:	001c      	movs	r4, r3
    543c:	465b      	mov	r3, fp
    543e:	0015      	movs	r5, r2
    5440:	2b00      	cmp	r3, #0
    5442:	db2c      	blt.n	549e <__udivmoddi4+0x166>
    5444:	0026      	movs	r6, r4
    5446:	409e      	lsls	r6, r3
    5448:	0033      	movs	r3, r6
    544a:	0026      	movs	r6, r4
    544c:	4647      	mov	r7, r8
    544e:	40be      	lsls	r6, r7
    5450:	0032      	movs	r2, r6
    5452:	1a80      	subs	r0, r0, r2
    5454:	4199      	sbcs	r1, r3
    5456:	9000      	str	r0, [sp, #0]
    5458:	9101      	str	r1, [sp, #4]
    545a:	e7ae      	b.n	53ba <__udivmoddi4+0x82>
    545c:	4642      	mov	r2, r8
    545e:	2320      	movs	r3, #32
    5460:	1a9b      	subs	r3, r3, r2
    5462:	4652      	mov	r2, sl
    5464:	40da      	lsrs	r2, r3
    5466:	4641      	mov	r1, r8
    5468:	0013      	movs	r3, r2
    546a:	464a      	mov	r2, r9
    546c:	408a      	lsls	r2, r1
    546e:	0017      	movs	r7, r2
    5470:	431f      	orrs	r7, r3
    5472:	e782      	b.n	537a <__udivmoddi4+0x42>
    5474:	4642      	mov	r2, r8
    5476:	2320      	movs	r3, #32
    5478:	1a9b      	subs	r3, r3, r2
    547a:	002a      	movs	r2, r5
    547c:	4646      	mov	r6, r8
    547e:	409a      	lsls	r2, r3
    5480:	0023      	movs	r3, r4
    5482:	40f3      	lsrs	r3, r6
    5484:	4313      	orrs	r3, r2
    5486:	e7d5      	b.n	5434 <__udivmoddi4+0xfc>
    5488:	4642      	mov	r2, r8
    548a:	2320      	movs	r3, #32
    548c:	2100      	movs	r1, #0
    548e:	1a9b      	subs	r3, r3, r2
    5490:	2200      	movs	r2, #0
    5492:	9100      	str	r1, [sp, #0]
    5494:	9201      	str	r2, [sp, #4]
    5496:	2201      	movs	r2, #1
    5498:	40da      	lsrs	r2, r3
    549a:	9201      	str	r2, [sp, #4]
    549c:	e782      	b.n	53a4 <__udivmoddi4+0x6c>
    549e:	4642      	mov	r2, r8
    54a0:	2320      	movs	r3, #32
    54a2:	0026      	movs	r6, r4
    54a4:	1a9b      	subs	r3, r3, r2
    54a6:	40de      	lsrs	r6, r3
    54a8:	002f      	movs	r7, r5
    54aa:	46b4      	mov	ip, r6
    54ac:	4097      	lsls	r7, r2
    54ae:	4666      	mov	r6, ip
    54b0:	003b      	movs	r3, r7
    54b2:	4333      	orrs	r3, r6
    54b4:	e7c9      	b.n	544a <__udivmoddi4+0x112>
    54b6:	46c0      	nop			; (mov r8, r8)

000054b8 <__gnu_ldivmod_helper>:
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	b083      	sub	sp, #12
    54bc:	0016      	movs	r6, r2
    54be:	001f      	movs	r7, r3
    54c0:	9000      	str	r0, [sp, #0]
    54c2:	9101      	str	r1, [sp, #4]
    54c4:	f001 fd50 	bl	6f68 <__divdi3>
    54c8:	0004      	movs	r4, r0
    54ca:	000d      	movs	r5, r1
    54cc:	0002      	movs	r2, r0
    54ce:	000b      	movs	r3, r1
    54d0:	0030      	movs	r0, r6
    54d2:	0039      	movs	r1, r7
    54d4:	f7ff ff06 	bl	52e4 <__aeabi_lmul>
    54d8:	9a00      	ldr	r2, [sp, #0]
    54da:	9b01      	ldr	r3, [sp, #4]
    54dc:	1a12      	subs	r2, r2, r0
    54de:	418b      	sbcs	r3, r1
    54e0:	9908      	ldr	r1, [sp, #32]
    54e2:	0020      	movs	r0, r4
    54e4:	600a      	str	r2, [r1, #0]
    54e6:	604b      	str	r3, [r1, #4]
    54e8:	0029      	movs	r1, r5
    54ea:	b003      	add	sp, #12
    54ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ee:	46c0      	nop			; (mov r8, r8)

000054f0 <__aeabi_dadd>:
    54f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54f2:	4645      	mov	r5, r8
    54f4:	46de      	mov	lr, fp
    54f6:	4657      	mov	r7, sl
    54f8:	464e      	mov	r6, r9
    54fa:	030c      	lsls	r4, r1, #12
    54fc:	b5e0      	push	{r5, r6, r7, lr}
    54fe:	004e      	lsls	r6, r1, #1
    5500:	0fc9      	lsrs	r1, r1, #31
    5502:	4688      	mov	r8, r1
    5504:	000d      	movs	r5, r1
    5506:	0a61      	lsrs	r1, r4, #9
    5508:	0f44      	lsrs	r4, r0, #29
    550a:	430c      	orrs	r4, r1
    550c:	00c7      	lsls	r7, r0, #3
    550e:	0319      	lsls	r1, r3, #12
    5510:	0058      	lsls	r0, r3, #1
    5512:	0fdb      	lsrs	r3, r3, #31
    5514:	469b      	mov	fp, r3
    5516:	0a4b      	lsrs	r3, r1, #9
    5518:	0f51      	lsrs	r1, r2, #29
    551a:	430b      	orrs	r3, r1
    551c:	0d76      	lsrs	r6, r6, #21
    551e:	0d40      	lsrs	r0, r0, #21
    5520:	0019      	movs	r1, r3
    5522:	00d2      	lsls	r2, r2, #3
    5524:	45d8      	cmp	r8, fp
    5526:	d100      	bne.n	552a <__aeabi_dadd+0x3a>
    5528:	e0ae      	b.n	5688 <__aeabi_dadd+0x198>
    552a:	1a35      	subs	r5, r6, r0
    552c:	2d00      	cmp	r5, #0
    552e:	dc00      	bgt.n	5532 <__aeabi_dadd+0x42>
    5530:	e0f6      	b.n	5720 <__aeabi_dadd+0x230>
    5532:	2800      	cmp	r0, #0
    5534:	d10f      	bne.n	5556 <__aeabi_dadd+0x66>
    5536:	4313      	orrs	r3, r2
    5538:	d100      	bne.n	553c <__aeabi_dadd+0x4c>
    553a:	e0db      	b.n	56f4 <__aeabi_dadd+0x204>
    553c:	1e6b      	subs	r3, r5, #1
    553e:	2b00      	cmp	r3, #0
    5540:	d000      	beq.n	5544 <__aeabi_dadd+0x54>
    5542:	e137      	b.n	57b4 <__aeabi_dadd+0x2c4>
    5544:	1aba      	subs	r2, r7, r2
    5546:	4297      	cmp	r7, r2
    5548:	41bf      	sbcs	r7, r7
    554a:	1a64      	subs	r4, r4, r1
    554c:	427f      	negs	r7, r7
    554e:	1be4      	subs	r4, r4, r7
    5550:	2601      	movs	r6, #1
    5552:	0017      	movs	r7, r2
    5554:	e024      	b.n	55a0 <__aeabi_dadd+0xb0>
    5556:	4bc6      	ldr	r3, [pc, #792]	; (5870 <__aeabi_dadd+0x380>)
    5558:	429e      	cmp	r6, r3
    555a:	d04d      	beq.n	55f8 <__aeabi_dadd+0x108>
    555c:	2380      	movs	r3, #128	; 0x80
    555e:	041b      	lsls	r3, r3, #16
    5560:	4319      	orrs	r1, r3
    5562:	2d38      	cmp	r5, #56	; 0x38
    5564:	dd00      	ble.n	5568 <__aeabi_dadd+0x78>
    5566:	e107      	b.n	5778 <__aeabi_dadd+0x288>
    5568:	2d1f      	cmp	r5, #31
    556a:	dd00      	ble.n	556e <__aeabi_dadd+0x7e>
    556c:	e138      	b.n	57e0 <__aeabi_dadd+0x2f0>
    556e:	2020      	movs	r0, #32
    5570:	1b43      	subs	r3, r0, r5
    5572:	469a      	mov	sl, r3
    5574:	000b      	movs	r3, r1
    5576:	4650      	mov	r0, sl
    5578:	4083      	lsls	r3, r0
    557a:	4699      	mov	r9, r3
    557c:	0013      	movs	r3, r2
    557e:	4648      	mov	r0, r9
    5580:	40eb      	lsrs	r3, r5
    5582:	4318      	orrs	r0, r3
    5584:	0003      	movs	r3, r0
    5586:	4650      	mov	r0, sl
    5588:	4082      	lsls	r2, r0
    558a:	1e50      	subs	r0, r2, #1
    558c:	4182      	sbcs	r2, r0
    558e:	40e9      	lsrs	r1, r5
    5590:	431a      	orrs	r2, r3
    5592:	1aba      	subs	r2, r7, r2
    5594:	1a61      	subs	r1, r4, r1
    5596:	4297      	cmp	r7, r2
    5598:	41a4      	sbcs	r4, r4
    559a:	0017      	movs	r7, r2
    559c:	4264      	negs	r4, r4
    559e:	1b0c      	subs	r4, r1, r4
    55a0:	0223      	lsls	r3, r4, #8
    55a2:	d562      	bpl.n	566a <__aeabi_dadd+0x17a>
    55a4:	0264      	lsls	r4, r4, #9
    55a6:	0a65      	lsrs	r5, r4, #9
    55a8:	2d00      	cmp	r5, #0
    55aa:	d100      	bne.n	55ae <__aeabi_dadd+0xbe>
    55ac:	e0df      	b.n	576e <__aeabi_dadd+0x27e>
    55ae:	0028      	movs	r0, r5
    55b0:	f001 fcb0 	bl	6f14 <__clzsi2>
    55b4:	0003      	movs	r3, r0
    55b6:	3b08      	subs	r3, #8
    55b8:	2b1f      	cmp	r3, #31
    55ba:	dd00      	ble.n	55be <__aeabi_dadd+0xce>
    55bc:	e0d2      	b.n	5764 <__aeabi_dadd+0x274>
    55be:	2220      	movs	r2, #32
    55c0:	003c      	movs	r4, r7
    55c2:	1ad2      	subs	r2, r2, r3
    55c4:	409d      	lsls	r5, r3
    55c6:	40d4      	lsrs	r4, r2
    55c8:	409f      	lsls	r7, r3
    55ca:	4325      	orrs	r5, r4
    55cc:	429e      	cmp	r6, r3
    55ce:	dd00      	ble.n	55d2 <__aeabi_dadd+0xe2>
    55d0:	e0c4      	b.n	575c <__aeabi_dadd+0x26c>
    55d2:	1b9e      	subs	r6, r3, r6
    55d4:	1c73      	adds	r3, r6, #1
    55d6:	2b1f      	cmp	r3, #31
    55d8:	dd00      	ble.n	55dc <__aeabi_dadd+0xec>
    55da:	e0f1      	b.n	57c0 <__aeabi_dadd+0x2d0>
    55dc:	2220      	movs	r2, #32
    55de:	0038      	movs	r0, r7
    55e0:	0029      	movs	r1, r5
    55e2:	1ad2      	subs	r2, r2, r3
    55e4:	40d8      	lsrs	r0, r3
    55e6:	4091      	lsls	r1, r2
    55e8:	4097      	lsls	r7, r2
    55ea:	002c      	movs	r4, r5
    55ec:	4301      	orrs	r1, r0
    55ee:	1e78      	subs	r0, r7, #1
    55f0:	4187      	sbcs	r7, r0
    55f2:	40dc      	lsrs	r4, r3
    55f4:	2600      	movs	r6, #0
    55f6:	430f      	orrs	r7, r1
    55f8:	077b      	lsls	r3, r7, #29
    55fa:	d009      	beq.n	5610 <__aeabi_dadd+0x120>
    55fc:	230f      	movs	r3, #15
    55fe:	403b      	ands	r3, r7
    5600:	2b04      	cmp	r3, #4
    5602:	d005      	beq.n	5610 <__aeabi_dadd+0x120>
    5604:	1d3b      	adds	r3, r7, #4
    5606:	42bb      	cmp	r3, r7
    5608:	41bf      	sbcs	r7, r7
    560a:	427f      	negs	r7, r7
    560c:	19e4      	adds	r4, r4, r7
    560e:	001f      	movs	r7, r3
    5610:	0223      	lsls	r3, r4, #8
    5612:	d52c      	bpl.n	566e <__aeabi_dadd+0x17e>
    5614:	4b96      	ldr	r3, [pc, #600]	; (5870 <__aeabi_dadd+0x380>)
    5616:	3601      	adds	r6, #1
    5618:	429e      	cmp	r6, r3
    561a:	d100      	bne.n	561e <__aeabi_dadd+0x12e>
    561c:	e09a      	b.n	5754 <__aeabi_dadd+0x264>
    561e:	4645      	mov	r5, r8
    5620:	4b94      	ldr	r3, [pc, #592]	; (5874 <__aeabi_dadd+0x384>)
    5622:	08ff      	lsrs	r7, r7, #3
    5624:	401c      	ands	r4, r3
    5626:	0760      	lsls	r0, r4, #29
    5628:	0576      	lsls	r6, r6, #21
    562a:	0264      	lsls	r4, r4, #9
    562c:	4307      	orrs	r7, r0
    562e:	0b24      	lsrs	r4, r4, #12
    5630:	0d76      	lsrs	r6, r6, #21
    5632:	2100      	movs	r1, #0
    5634:	0324      	lsls	r4, r4, #12
    5636:	0b23      	lsrs	r3, r4, #12
    5638:	0d0c      	lsrs	r4, r1, #20
    563a:	4a8f      	ldr	r2, [pc, #572]	; (5878 <__aeabi_dadd+0x388>)
    563c:	0524      	lsls	r4, r4, #20
    563e:	431c      	orrs	r4, r3
    5640:	4014      	ands	r4, r2
    5642:	0533      	lsls	r3, r6, #20
    5644:	4323      	orrs	r3, r4
    5646:	005b      	lsls	r3, r3, #1
    5648:	07ed      	lsls	r5, r5, #31
    564a:	085b      	lsrs	r3, r3, #1
    564c:	432b      	orrs	r3, r5
    564e:	0038      	movs	r0, r7
    5650:	0019      	movs	r1, r3
    5652:	bc3c      	pop	{r2, r3, r4, r5}
    5654:	4690      	mov	r8, r2
    5656:	4699      	mov	r9, r3
    5658:	46a2      	mov	sl, r4
    565a:	46ab      	mov	fp, r5
    565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    565e:	4664      	mov	r4, ip
    5660:	4304      	orrs	r4, r0
    5662:	d100      	bne.n	5666 <__aeabi_dadd+0x176>
    5664:	e211      	b.n	5a8a <__aeabi_dadd+0x59a>
    5666:	0004      	movs	r4, r0
    5668:	4667      	mov	r7, ip
    566a:	077b      	lsls	r3, r7, #29
    566c:	d1c6      	bne.n	55fc <__aeabi_dadd+0x10c>
    566e:	4645      	mov	r5, r8
    5670:	0760      	lsls	r0, r4, #29
    5672:	08ff      	lsrs	r7, r7, #3
    5674:	4307      	orrs	r7, r0
    5676:	08e4      	lsrs	r4, r4, #3
    5678:	4b7d      	ldr	r3, [pc, #500]	; (5870 <__aeabi_dadd+0x380>)
    567a:	429e      	cmp	r6, r3
    567c:	d030      	beq.n	56e0 <__aeabi_dadd+0x1f0>
    567e:	0324      	lsls	r4, r4, #12
    5680:	0576      	lsls	r6, r6, #21
    5682:	0b24      	lsrs	r4, r4, #12
    5684:	0d76      	lsrs	r6, r6, #21
    5686:	e7d4      	b.n	5632 <__aeabi_dadd+0x142>
    5688:	1a33      	subs	r3, r6, r0
    568a:	469a      	mov	sl, r3
    568c:	2b00      	cmp	r3, #0
    568e:	dd78      	ble.n	5782 <__aeabi_dadd+0x292>
    5690:	2800      	cmp	r0, #0
    5692:	d031      	beq.n	56f8 <__aeabi_dadd+0x208>
    5694:	4876      	ldr	r0, [pc, #472]	; (5870 <__aeabi_dadd+0x380>)
    5696:	4286      	cmp	r6, r0
    5698:	d0ae      	beq.n	55f8 <__aeabi_dadd+0x108>
    569a:	2080      	movs	r0, #128	; 0x80
    569c:	0400      	lsls	r0, r0, #16
    569e:	4301      	orrs	r1, r0
    56a0:	4653      	mov	r3, sl
    56a2:	2b38      	cmp	r3, #56	; 0x38
    56a4:	dc00      	bgt.n	56a8 <__aeabi_dadd+0x1b8>
    56a6:	e0e9      	b.n	587c <__aeabi_dadd+0x38c>
    56a8:	430a      	orrs	r2, r1
    56aa:	1e51      	subs	r1, r2, #1
    56ac:	418a      	sbcs	r2, r1
    56ae:	2100      	movs	r1, #0
    56b0:	19d2      	adds	r2, r2, r7
    56b2:	42ba      	cmp	r2, r7
    56b4:	41bf      	sbcs	r7, r7
    56b6:	1909      	adds	r1, r1, r4
    56b8:	427c      	negs	r4, r7
    56ba:	0017      	movs	r7, r2
    56bc:	190c      	adds	r4, r1, r4
    56be:	0223      	lsls	r3, r4, #8
    56c0:	d5d3      	bpl.n	566a <__aeabi_dadd+0x17a>
    56c2:	4b6b      	ldr	r3, [pc, #428]	; (5870 <__aeabi_dadd+0x380>)
    56c4:	3601      	adds	r6, #1
    56c6:	429e      	cmp	r6, r3
    56c8:	d100      	bne.n	56cc <__aeabi_dadd+0x1dc>
    56ca:	e13a      	b.n	5942 <__aeabi_dadd+0x452>
    56cc:	2001      	movs	r0, #1
    56ce:	4b69      	ldr	r3, [pc, #420]	; (5874 <__aeabi_dadd+0x384>)
    56d0:	401c      	ands	r4, r3
    56d2:	087b      	lsrs	r3, r7, #1
    56d4:	4007      	ands	r7, r0
    56d6:	431f      	orrs	r7, r3
    56d8:	07e0      	lsls	r0, r4, #31
    56da:	4307      	orrs	r7, r0
    56dc:	0864      	lsrs	r4, r4, #1
    56de:	e78b      	b.n	55f8 <__aeabi_dadd+0x108>
    56e0:	0023      	movs	r3, r4
    56e2:	433b      	orrs	r3, r7
    56e4:	d100      	bne.n	56e8 <__aeabi_dadd+0x1f8>
    56e6:	e1cb      	b.n	5a80 <__aeabi_dadd+0x590>
    56e8:	2280      	movs	r2, #128	; 0x80
    56ea:	0312      	lsls	r2, r2, #12
    56ec:	4314      	orrs	r4, r2
    56ee:	0324      	lsls	r4, r4, #12
    56f0:	0b24      	lsrs	r4, r4, #12
    56f2:	e79e      	b.n	5632 <__aeabi_dadd+0x142>
    56f4:	002e      	movs	r6, r5
    56f6:	e77f      	b.n	55f8 <__aeabi_dadd+0x108>
    56f8:	0008      	movs	r0, r1
    56fa:	4310      	orrs	r0, r2
    56fc:	d100      	bne.n	5700 <__aeabi_dadd+0x210>
    56fe:	e0b4      	b.n	586a <__aeabi_dadd+0x37a>
    5700:	1e58      	subs	r0, r3, #1
    5702:	2800      	cmp	r0, #0
    5704:	d000      	beq.n	5708 <__aeabi_dadd+0x218>
    5706:	e0de      	b.n	58c6 <__aeabi_dadd+0x3d6>
    5708:	18ba      	adds	r2, r7, r2
    570a:	42ba      	cmp	r2, r7
    570c:	419b      	sbcs	r3, r3
    570e:	1864      	adds	r4, r4, r1
    5710:	425b      	negs	r3, r3
    5712:	18e4      	adds	r4, r4, r3
    5714:	0017      	movs	r7, r2
    5716:	2601      	movs	r6, #1
    5718:	0223      	lsls	r3, r4, #8
    571a:	d5a6      	bpl.n	566a <__aeabi_dadd+0x17a>
    571c:	2602      	movs	r6, #2
    571e:	e7d5      	b.n	56cc <__aeabi_dadd+0x1dc>
    5720:	2d00      	cmp	r5, #0
    5722:	d16e      	bne.n	5802 <__aeabi_dadd+0x312>
    5724:	1c70      	adds	r0, r6, #1
    5726:	0540      	lsls	r0, r0, #21
    5728:	0d40      	lsrs	r0, r0, #21
    572a:	2801      	cmp	r0, #1
    572c:	dc00      	bgt.n	5730 <__aeabi_dadd+0x240>
    572e:	e0f9      	b.n	5924 <__aeabi_dadd+0x434>
    5730:	1ab8      	subs	r0, r7, r2
    5732:	4684      	mov	ip, r0
    5734:	4287      	cmp	r7, r0
    5736:	4180      	sbcs	r0, r0
    5738:	1ae5      	subs	r5, r4, r3
    573a:	4240      	negs	r0, r0
    573c:	1a2d      	subs	r5, r5, r0
    573e:	0228      	lsls	r0, r5, #8
    5740:	d400      	bmi.n	5744 <__aeabi_dadd+0x254>
    5742:	e089      	b.n	5858 <__aeabi_dadd+0x368>
    5744:	1bd7      	subs	r7, r2, r7
    5746:	42ba      	cmp	r2, r7
    5748:	4192      	sbcs	r2, r2
    574a:	1b1c      	subs	r4, r3, r4
    574c:	4252      	negs	r2, r2
    574e:	1aa5      	subs	r5, r4, r2
    5750:	46d8      	mov	r8, fp
    5752:	e729      	b.n	55a8 <__aeabi_dadd+0xb8>
    5754:	4645      	mov	r5, r8
    5756:	2400      	movs	r4, #0
    5758:	2700      	movs	r7, #0
    575a:	e76a      	b.n	5632 <__aeabi_dadd+0x142>
    575c:	4c45      	ldr	r4, [pc, #276]	; (5874 <__aeabi_dadd+0x384>)
    575e:	1af6      	subs	r6, r6, r3
    5760:	402c      	ands	r4, r5
    5762:	e749      	b.n	55f8 <__aeabi_dadd+0x108>
    5764:	003d      	movs	r5, r7
    5766:	3828      	subs	r0, #40	; 0x28
    5768:	4085      	lsls	r5, r0
    576a:	2700      	movs	r7, #0
    576c:	e72e      	b.n	55cc <__aeabi_dadd+0xdc>
    576e:	0038      	movs	r0, r7
    5770:	f001 fbd0 	bl	6f14 <__clzsi2>
    5774:	3020      	adds	r0, #32
    5776:	e71d      	b.n	55b4 <__aeabi_dadd+0xc4>
    5778:	430a      	orrs	r2, r1
    577a:	1e51      	subs	r1, r2, #1
    577c:	418a      	sbcs	r2, r1
    577e:	2100      	movs	r1, #0
    5780:	e707      	b.n	5592 <__aeabi_dadd+0xa2>
    5782:	2b00      	cmp	r3, #0
    5784:	d000      	beq.n	5788 <__aeabi_dadd+0x298>
    5786:	e0f3      	b.n	5970 <__aeabi_dadd+0x480>
    5788:	1c70      	adds	r0, r6, #1
    578a:	0543      	lsls	r3, r0, #21
    578c:	0d5b      	lsrs	r3, r3, #21
    578e:	2b01      	cmp	r3, #1
    5790:	dc00      	bgt.n	5794 <__aeabi_dadd+0x2a4>
    5792:	e0ad      	b.n	58f0 <__aeabi_dadd+0x400>
    5794:	4b36      	ldr	r3, [pc, #216]	; (5870 <__aeabi_dadd+0x380>)
    5796:	4298      	cmp	r0, r3
    5798:	d100      	bne.n	579c <__aeabi_dadd+0x2ac>
    579a:	e0d1      	b.n	5940 <__aeabi_dadd+0x450>
    579c:	18ba      	adds	r2, r7, r2
    579e:	42ba      	cmp	r2, r7
    57a0:	41bf      	sbcs	r7, r7
    57a2:	1864      	adds	r4, r4, r1
    57a4:	427f      	negs	r7, r7
    57a6:	19e4      	adds	r4, r4, r7
    57a8:	07e7      	lsls	r7, r4, #31
    57aa:	0852      	lsrs	r2, r2, #1
    57ac:	4317      	orrs	r7, r2
    57ae:	0864      	lsrs	r4, r4, #1
    57b0:	0006      	movs	r6, r0
    57b2:	e721      	b.n	55f8 <__aeabi_dadd+0x108>
    57b4:	482e      	ldr	r0, [pc, #184]	; (5870 <__aeabi_dadd+0x380>)
    57b6:	4285      	cmp	r5, r0
    57b8:	d100      	bne.n	57bc <__aeabi_dadd+0x2cc>
    57ba:	e093      	b.n	58e4 <__aeabi_dadd+0x3f4>
    57bc:	001d      	movs	r5, r3
    57be:	e6d0      	b.n	5562 <__aeabi_dadd+0x72>
    57c0:	0029      	movs	r1, r5
    57c2:	3e1f      	subs	r6, #31
    57c4:	40f1      	lsrs	r1, r6
    57c6:	2b20      	cmp	r3, #32
    57c8:	d100      	bne.n	57cc <__aeabi_dadd+0x2dc>
    57ca:	e08d      	b.n	58e8 <__aeabi_dadd+0x3f8>
    57cc:	2240      	movs	r2, #64	; 0x40
    57ce:	1ad3      	subs	r3, r2, r3
    57d0:	409d      	lsls	r5, r3
    57d2:	432f      	orrs	r7, r5
    57d4:	1e7d      	subs	r5, r7, #1
    57d6:	41af      	sbcs	r7, r5
    57d8:	2400      	movs	r4, #0
    57da:	430f      	orrs	r7, r1
    57dc:	2600      	movs	r6, #0
    57de:	e744      	b.n	566a <__aeabi_dadd+0x17a>
    57e0:	002b      	movs	r3, r5
    57e2:	0008      	movs	r0, r1
    57e4:	3b20      	subs	r3, #32
    57e6:	40d8      	lsrs	r0, r3
    57e8:	0003      	movs	r3, r0
    57ea:	2d20      	cmp	r5, #32
    57ec:	d100      	bne.n	57f0 <__aeabi_dadd+0x300>
    57ee:	e07d      	b.n	58ec <__aeabi_dadd+0x3fc>
    57f0:	2040      	movs	r0, #64	; 0x40
    57f2:	1b45      	subs	r5, r0, r5
    57f4:	40a9      	lsls	r1, r5
    57f6:	430a      	orrs	r2, r1
    57f8:	1e51      	subs	r1, r2, #1
    57fa:	418a      	sbcs	r2, r1
    57fc:	2100      	movs	r1, #0
    57fe:	431a      	orrs	r2, r3
    5800:	e6c7      	b.n	5592 <__aeabi_dadd+0xa2>
    5802:	2e00      	cmp	r6, #0
    5804:	d050      	beq.n	58a8 <__aeabi_dadd+0x3b8>
    5806:	4e1a      	ldr	r6, [pc, #104]	; (5870 <__aeabi_dadd+0x380>)
    5808:	42b0      	cmp	r0, r6
    580a:	d057      	beq.n	58bc <__aeabi_dadd+0x3cc>
    580c:	2680      	movs	r6, #128	; 0x80
    580e:	426b      	negs	r3, r5
    5810:	4699      	mov	r9, r3
    5812:	0436      	lsls	r6, r6, #16
    5814:	4334      	orrs	r4, r6
    5816:	464b      	mov	r3, r9
    5818:	2b38      	cmp	r3, #56	; 0x38
    581a:	dd00      	ble.n	581e <__aeabi_dadd+0x32e>
    581c:	e0d6      	b.n	59cc <__aeabi_dadd+0x4dc>
    581e:	2b1f      	cmp	r3, #31
    5820:	dd00      	ble.n	5824 <__aeabi_dadd+0x334>
    5822:	e135      	b.n	5a90 <__aeabi_dadd+0x5a0>
    5824:	2620      	movs	r6, #32
    5826:	1af5      	subs	r5, r6, r3
    5828:	0026      	movs	r6, r4
    582a:	40ae      	lsls	r6, r5
    582c:	46b2      	mov	sl, r6
    582e:	003e      	movs	r6, r7
    5830:	40de      	lsrs	r6, r3
    5832:	46ac      	mov	ip, r5
    5834:	0035      	movs	r5, r6
    5836:	4656      	mov	r6, sl
    5838:	432e      	orrs	r6, r5
    583a:	4665      	mov	r5, ip
    583c:	40af      	lsls	r7, r5
    583e:	1e7d      	subs	r5, r7, #1
    5840:	41af      	sbcs	r7, r5
    5842:	40dc      	lsrs	r4, r3
    5844:	4337      	orrs	r7, r6
    5846:	1bd7      	subs	r7, r2, r7
    5848:	42ba      	cmp	r2, r7
    584a:	4192      	sbcs	r2, r2
    584c:	1b0c      	subs	r4, r1, r4
    584e:	4252      	negs	r2, r2
    5850:	1aa4      	subs	r4, r4, r2
    5852:	0006      	movs	r6, r0
    5854:	46d8      	mov	r8, fp
    5856:	e6a3      	b.n	55a0 <__aeabi_dadd+0xb0>
    5858:	4664      	mov	r4, ip
    585a:	4667      	mov	r7, ip
    585c:	432c      	orrs	r4, r5
    585e:	d000      	beq.n	5862 <__aeabi_dadd+0x372>
    5860:	e6a2      	b.n	55a8 <__aeabi_dadd+0xb8>
    5862:	2500      	movs	r5, #0
    5864:	2600      	movs	r6, #0
    5866:	2700      	movs	r7, #0
    5868:	e706      	b.n	5678 <__aeabi_dadd+0x188>
    586a:	001e      	movs	r6, r3
    586c:	e6c4      	b.n	55f8 <__aeabi_dadd+0x108>
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	000007ff 	.word	0x000007ff
    5874:	ff7fffff 	.word	0xff7fffff
    5878:	800fffff 	.word	0x800fffff
    587c:	2b1f      	cmp	r3, #31
    587e:	dc63      	bgt.n	5948 <__aeabi_dadd+0x458>
    5880:	2020      	movs	r0, #32
    5882:	1ac3      	subs	r3, r0, r3
    5884:	0008      	movs	r0, r1
    5886:	4098      	lsls	r0, r3
    5888:	469c      	mov	ip, r3
    588a:	4683      	mov	fp, r0
    588c:	4653      	mov	r3, sl
    588e:	0010      	movs	r0, r2
    5890:	40d8      	lsrs	r0, r3
    5892:	0003      	movs	r3, r0
    5894:	4658      	mov	r0, fp
    5896:	4318      	orrs	r0, r3
    5898:	4663      	mov	r3, ip
    589a:	409a      	lsls	r2, r3
    589c:	1e53      	subs	r3, r2, #1
    589e:	419a      	sbcs	r2, r3
    58a0:	4653      	mov	r3, sl
    58a2:	4302      	orrs	r2, r0
    58a4:	40d9      	lsrs	r1, r3
    58a6:	e703      	b.n	56b0 <__aeabi_dadd+0x1c0>
    58a8:	0026      	movs	r6, r4
    58aa:	433e      	orrs	r6, r7
    58ac:	d006      	beq.n	58bc <__aeabi_dadd+0x3cc>
    58ae:	43eb      	mvns	r3, r5
    58b0:	4699      	mov	r9, r3
    58b2:	2b00      	cmp	r3, #0
    58b4:	d0c7      	beq.n	5846 <__aeabi_dadd+0x356>
    58b6:	4e94      	ldr	r6, [pc, #592]	; (5b08 <__aeabi_dadd+0x618>)
    58b8:	42b0      	cmp	r0, r6
    58ba:	d1ac      	bne.n	5816 <__aeabi_dadd+0x326>
    58bc:	000c      	movs	r4, r1
    58be:	0017      	movs	r7, r2
    58c0:	0006      	movs	r6, r0
    58c2:	46d8      	mov	r8, fp
    58c4:	e698      	b.n	55f8 <__aeabi_dadd+0x108>
    58c6:	4b90      	ldr	r3, [pc, #576]	; (5b08 <__aeabi_dadd+0x618>)
    58c8:	459a      	cmp	sl, r3
    58ca:	d00b      	beq.n	58e4 <__aeabi_dadd+0x3f4>
    58cc:	4682      	mov	sl, r0
    58ce:	e6e7      	b.n	56a0 <__aeabi_dadd+0x1b0>
    58d0:	2800      	cmp	r0, #0
    58d2:	d000      	beq.n	58d6 <__aeabi_dadd+0x3e6>
    58d4:	e09e      	b.n	5a14 <__aeabi_dadd+0x524>
    58d6:	0018      	movs	r0, r3
    58d8:	4310      	orrs	r0, r2
    58da:	d100      	bne.n	58de <__aeabi_dadd+0x3ee>
    58dc:	e0e9      	b.n	5ab2 <__aeabi_dadd+0x5c2>
    58de:	001c      	movs	r4, r3
    58e0:	0017      	movs	r7, r2
    58e2:	46d8      	mov	r8, fp
    58e4:	4e88      	ldr	r6, [pc, #544]	; (5b08 <__aeabi_dadd+0x618>)
    58e6:	e687      	b.n	55f8 <__aeabi_dadd+0x108>
    58e8:	2500      	movs	r5, #0
    58ea:	e772      	b.n	57d2 <__aeabi_dadd+0x2e2>
    58ec:	2100      	movs	r1, #0
    58ee:	e782      	b.n	57f6 <__aeabi_dadd+0x306>
    58f0:	0023      	movs	r3, r4
    58f2:	433b      	orrs	r3, r7
    58f4:	2e00      	cmp	r6, #0
    58f6:	d000      	beq.n	58fa <__aeabi_dadd+0x40a>
    58f8:	e0ab      	b.n	5a52 <__aeabi_dadd+0x562>
    58fa:	2b00      	cmp	r3, #0
    58fc:	d100      	bne.n	5900 <__aeabi_dadd+0x410>
    58fe:	e0e7      	b.n	5ad0 <__aeabi_dadd+0x5e0>
    5900:	000b      	movs	r3, r1
    5902:	4313      	orrs	r3, r2
    5904:	d100      	bne.n	5908 <__aeabi_dadd+0x418>
    5906:	e677      	b.n	55f8 <__aeabi_dadd+0x108>
    5908:	18ba      	adds	r2, r7, r2
    590a:	42ba      	cmp	r2, r7
    590c:	41bf      	sbcs	r7, r7
    590e:	1864      	adds	r4, r4, r1
    5910:	427f      	negs	r7, r7
    5912:	19e4      	adds	r4, r4, r7
    5914:	0223      	lsls	r3, r4, #8
    5916:	d400      	bmi.n	591a <__aeabi_dadd+0x42a>
    5918:	e0f2      	b.n	5b00 <__aeabi_dadd+0x610>
    591a:	4b7c      	ldr	r3, [pc, #496]	; (5b0c <__aeabi_dadd+0x61c>)
    591c:	0017      	movs	r7, r2
    591e:	401c      	ands	r4, r3
    5920:	0006      	movs	r6, r0
    5922:	e669      	b.n	55f8 <__aeabi_dadd+0x108>
    5924:	0020      	movs	r0, r4
    5926:	4338      	orrs	r0, r7
    5928:	2e00      	cmp	r6, #0
    592a:	d1d1      	bne.n	58d0 <__aeabi_dadd+0x3e0>
    592c:	2800      	cmp	r0, #0
    592e:	d15b      	bne.n	59e8 <__aeabi_dadd+0x4f8>
    5930:	001c      	movs	r4, r3
    5932:	4314      	orrs	r4, r2
    5934:	d100      	bne.n	5938 <__aeabi_dadd+0x448>
    5936:	e0a8      	b.n	5a8a <__aeabi_dadd+0x59a>
    5938:	001c      	movs	r4, r3
    593a:	0017      	movs	r7, r2
    593c:	46d8      	mov	r8, fp
    593e:	e65b      	b.n	55f8 <__aeabi_dadd+0x108>
    5940:	0006      	movs	r6, r0
    5942:	2400      	movs	r4, #0
    5944:	2700      	movs	r7, #0
    5946:	e697      	b.n	5678 <__aeabi_dadd+0x188>
    5948:	4650      	mov	r0, sl
    594a:	000b      	movs	r3, r1
    594c:	3820      	subs	r0, #32
    594e:	40c3      	lsrs	r3, r0
    5950:	4699      	mov	r9, r3
    5952:	4653      	mov	r3, sl
    5954:	2b20      	cmp	r3, #32
    5956:	d100      	bne.n	595a <__aeabi_dadd+0x46a>
    5958:	e095      	b.n	5a86 <__aeabi_dadd+0x596>
    595a:	2340      	movs	r3, #64	; 0x40
    595c:	4650      	mov	r0, sl
    595e:	1a1b      	subs	r3, r3, r0
    5960:	4099      	lsls	r1, r3
    5962:	430a      	orrs	r2, r1
    5964:	1e51      	subs	r1, r2, #1
    5966:	418a      	sbcs	r2, r1
    5968:	464b      	mov	r3, r9
    596a:	2100      	movs	r1, #0
    596c:	431a      	orrs	r2, r3
    596e:	e69f      	b.n	56b0 <__aeabi_dadd+0x1c0>
    5970:	2e00      	cmp	r6, #0
    5972:	d130      	bne.n	59d6 <__aeabi_dadd+0x4e6>
    5974:	0026      	movs	r6, r4
    5976:	433e      	orrs	r6, r7
    5978:	d067      	beq.n	5a4a <__aeabi_dadd+0x55a>
    597a:	43db      	mvns	r3, r3
    597c:	469a      	mov	sl, r3
    597e:	2b00      	cmp	r3, #0
    5980:	d01c      	beq.n	59bc <__aeabi_dadd+0x4cc>
    5982:	4e61      	ldr	r6, [pc, #388]	; (5b08 <__aeabi_dadd+0x618>)
    5984:	42b0      	cmp	r0, r6
    5986:	d060      	beq.n	5a4a <__aeabi_dadd+0x55a>
    5988:	4653      	mov	r3, sl
    598a:	2b38      	cmp	r3, #56	; 0x38
    598c:	dd00      	ble.n	5990 <__aeabi_dadd+0x4a0>
    598e:	e096      	b.n	5abe <__aeabi_dadd+0x5ce>
    5990:	2b1f      	cmp	r3, #31
    5992:	dd00      	ble.n	5996 <__aeabi_dadd+0x4a6>
    5994:	e09f      	b.n	5ad6 <__aeabi_dadd+0x5e6>
    5996:	2620      	movs	r6, #32
    5998:	1af3      	subs	r3, r6, r3
    599a:	0026      	movs	r6, r4
    599c:	409e      	lsls	r6, r3
    599e:	469c      	mov	ip, r3
    59a0:	46b3      	mov	fp, r6
    59a2:	4653      	mov	r3, sl
    59a4:	003e      	movs	r6, r7
    59a6:	40de      	lsrs	r6, r3
    59a8:	0033      	movs	r3, r6
    59aa:	465e      	mov	r6, fp
    59ac:	431e      	orrs	r6, r3
    59ae:	4663      	mov	r3, ip
    59b0:	409f      	lsls	r7, r3
    59b2:	1e7b      	subs	r3, r7, #1
    59b4:	419f      	sbcs	r7, r3
    59b6:	4653      	mov	r3, sl
    59b8:	40dc      	lsrs	r4, r3
    59ba:	4337      	orrs	r7, r6
    59bc:	18bf      	adds	r7, r7, r2
    59be:	4297      	cmp	r7, r2
    59c0:	4192      	sbcs	r2, r2
    59c2:	1864      	adds	r4, r4, r1
    59c4:	4252      	negs	r2, r2
    59c6:	18a4      	adds	r4, r4, r2
    59c8:	0006      	movs	r6, r0
    59ca:	e678      	b.n	56be <__aeabi_dadd+0x1ce>
    59cc:	4327      	orrs	r7, r4
    59ce:	1e7c      	subs	r4, r7, #1
    59d0:	41a7      	sbcs	r7, r4
    59d2:	2400      	movs	r4, #0
    59d4:	e737      	b.n	5846 <__aeabi_dadd+0x356>
    59d6:	4e4c      	ldr	r6, [pc, #304]	; (5b08 <__aeabi_dadd+0x618>)
    59d8:	42b0      	cmp	r0, r6
    59da:	d036      	beq.n	5a4a <__aeabi_dadd+0x55a>
    59dc:	2680      	movs	r6, #128	; 0x80
    59de:	425b      	negs	r3, r3
    59e0:	0436      	lsls	r6, r6, #16
    59e2:	469a      	mov	sl, r3
    59e4:	4334      	orrs	r4, r6
    59e6:	e7cf      	b.n	5988 <__aeabi_dadd+0x498>
    59e8:	0018      	movs	r0, r3
    59ea:	4310      	orrs	r0, r2
    59ec:	d100      	bne.n	59f0 <__aeabi_dadd+0x500>
    59ee:	e603      	b.n	55f8 <__aeabi_dadd+0x108>
    59f0:	1ab8      	subs	r0, r7, r2
    59f2:	4684      	mov	ip, r0
    59f4:	4567      	cmp	r7, ip
    59f6:	41ad      	sbcs	r5, r5
    59f8:	1ae0      	subs	r0, r4, r3
    59fa:	426d      	negs	r5, r5
    59fc:	1b40      	subs	r0, r0, r5
    59fe:	0205      	lsls	r5, r0, #8
    5a00:	d400      	bmi.n	5a04 <__aeabi_dadd+0x514>
    5a02:	e62c      	b.n	565e <__aeabi_dadd+0x16e>
    5a04:	1bd7      	subs	r7, r2, r7
    5a06:	42ba      	cmp	r2, r7
    5a08:	4192      	sbcs	r2, r2
    5a0a:	1b1c      	subs	r4, r3, r4
    5a0c:	4252      	negs	r2, r2
    5a0e:	1aa4      	subs	r4, r4, r2
    5a10:	46d8      	mov	r8, fp
    5a12:	e5f1      	b.n	55f8 <__aeabi_dadd+0x108>
    5a14:	0018      	movs	r0, r3
    5a16:	4310      	orrs	r0, r2
    5a18:	d100      	bne.n	5a1c <__aeabi_dadd+0x52c>
    5a1a:	e763      	b.n	58e4 <__aeabi_dadd+0x3f4>
    5a1c:	08f8      	lsrs	r0, r7, #3
    5a1e:	0767      	lsls	r7, r4, #29
    5a20:	4307      	orrs	r7, r0
    5a22:	2080      	movs	r0, #128	; 0x80
    5a24:	08e4      	lsrs	r4, r4, #3
    5a26:	0300      	lsls	r0, r0, #12
    5a28:	4204      	tst	r4, r0
    5a2a:	d008      	beq.n	5a3e <__aeabi_dadd+0x54e>
    5a2c:	08dd      	lsrs	r5, r3, #3
    5a2e:	4205      	tst	r5, r0
    5a30:	d105      	bne.n	5a3e <__aeabi_dadd+0x54e>
    5a32:	08d2      	lsrs	r2, r2, #3
    5a34:	0759      	lsls	r1, r3, #29
    5a36:	4311      	orrs	r1, r2
    5a38:	000f      	movs	r7, r1
    5a3a:	002c      	movs	r4, r5
    5a3c:	46d8      	mov	r8, fp
    5a3e:	0f7b      	lsrs	r3, r7, #29
    5a40:	00e4      	lsls	r4, r4, #3
    5a42:	431c      	orrs	r4, r3
    5a44:	00ff      	lsls	r7, r7, #3
    5a46:	4e30      	ldr	r6, [pc, #192]	; (5b08 <__aeabi_dadd+0x618>)
    5a48:	e5d6      	b.n	55f8 <__aeabi_dadd+0x108>
    5a4a:	000c      	movs	r4, r1
    5a4c:	0017      	movs	r7, r2
    5a4e:	0006      	movs	r6, r0
    5a50:	e5d2      	b.n	55f8 <__aeabi_dadd+0x108>
    5a52:	2b00      	cmp	r3, #0
    5a54:	d038      	beq.n	5ac8 <__aeabi_dadd+0x5d8>
    5a56:	000b      	movs	r3, r1
    5a58:	4313      	orrs	r3, r2
    5a5a:	d100      	bne.n	5a5e <__aeabi_dadd+0x56e>
    5a5c:	e742      	b.n	58e4 <__aeabi_dadd+0x3f4>
    5a5e:	08f8      	lsrs	r0, r7, #3
    5a60:	0767      	lsls	r7, r4, #29
    5a62:	4307      	orrs	r7, r0
    5a64:	2080      	movs	r0, #128	; 0x80
    5a66:	08e4      	lsrs	r4, r4, #3
    5a68:	0300      	lsls	r0, r0, #12
    5a6a:	4204      	tst	r4, r0
    5a6c:	d0e7      	beq.n	5a3e <__aeabi_dadd+0x54e>
    5a6e:	08cb      	lsrs	r3, r1, #3
    5a70:	4203      	tst	r3, r0
    5a72:	d1e4      	bne.n	5a3e <__aeabi_dadd+0x54e>
    5a74:	08d2      	lsrs	r2, r2, #3
    5a76:	0749      	lsls	r1, r1, #29
    5a78:	4311      	orrs	r1, r2
    5a7a:	000f      	movs	r7, r1
    5a7c:	001c      	movs	r4, r3
    5a7e:	e7de      	b.n	5a3e <__aeabi_dadd+0x54e>
    5a80:	2700      	movs	r7, #0
    5a82:	2400      	movs	r4, #0
    5a84:	e5d5      	b.n	5632 <__aeabi_dadd+0x142>
    5a86:	2100      	movs	r1, #0
    5a88:	e76b      	b.n	5962 <__aeabi_dadd+0x472>
    5a8a:	2500      	movs	r5, #0
    5a8c:	2700      	movs	r7, #0
    5a8e:	e5f3      	b.n	5678 <__aeabi_dadd+0x188>
    5a90:	464e      	mov	r6, r9
    5a92:	0025      	movs	r5, r4
    5a94:	3e20      	subs	r6, #32
    5a96:	40f5      	lsrs	r5, r6
    5a98:	464b      	mov	r3, r9
    5a9a:	002e      	movs	r6, r5
    5a9c:	2b20      	cmp	r3, #32
    5a9e:	d02d      	beq.n	5afc <__aeabi_dadd+0x60c>
    5aa0:	2540      	movs	r5, #64	; 0x40
    5aa2:	1aed      	subs	r5, r5, r3
    5aa4:	40ac      	lsls	r4, r5
    5aa6:	4327      	orrs	r7, r4
    5aa8:	1e7c      	subs	r4, r7, #1
    5aaa:	41a7      	sbcs	r7, r4
    5aac:	2400      	movs	r4, #0
    5aae:	4337      	orrs	r7, r6
    5ab0:	e6c9      	b.n	5846 <__aeabi_dadd+0x356>
    5ab2:	2480      	movs	r4, #128	; 0x80
    5ab4:	2500      	movs	r5, #0
    5ab6:	0324      	lsls	r4, r4, #12
    5ab8:	4e13      	ldr	r6, [pc, #76]	; (5b08 <__aeabi_dadd+0x618>)
    5aba:	2700      	movs	r7, #0
    5abc:	e5dc      	b.n	5678 <__aeabi_dadd+0x188>
    5abe:	4327      	orrs	r7, r4
    5ac0:	1e7c      	subs	r4, r7, #1
    5ac2:	41a7      	sbcs	r7, r4
    5ac4:	2400      	movs	r4, #0
    5ac6:	e779      	b.n	59bc <__aeabi_dadd+0x4cc>
    5ac8:	000c      	movs	r4, r1
    5aca:	0017      	movs	r7, r2
    5acc:	4e0e      	ldr	r6, [pc, #56]	; (5b08 <__aeabi_dadd+0x618>)
    5ace:	e593      	b.n	55f8 <__aeabi_dadd+0x108>
    5ad0:	000c      	movs	r4, r1
    5ad2:	0017      	movs	r7, r2
    5ad4:	e590      	b.n	55f8 <__aeabi_dadd+0x108>
    5ad6:	4656      	mov	r6, sl
    5ad8:	0023      	movs	r3, r4
    5ada:	3e20      	subs	r6, #32
    5adc:	40f3      	lsrs	r3, r6
    5ade:	4699      	mov	r9, r3
    5ae0:	4653      	mov	r3, sl
    5ae2:	2b20      	cmp	r3, #32
    5ae4:	d00e      	beq.n	5b04 <__aeabi_dadd+0x614>
    5ae6:	2340      	movs	r3, #64	; 0x40
    5ae8:	4656      	mov	r6, sl
    5aea:	1b9b      	subs	r3, r3, r6
    5aec:	409c      	lsls	r4, r3
    5aee:	4327      	orrs	r7, r4
    5af0:	1e7c      	subs	r4, r7, #1
    5af2:	41a7      	sbcs	r7, r4
    5af4:	464b      	mov	r3, r9
    5af6:	2400      	movs	r4, #0
    5af8:	431f      	orrs	r7, r3
    5afa:	e75f      	b.n	59bc <__aeabi_dadd+0x4cc>
    5afc:	2400      	movs	r4, #0
    5afe:	e7d2      	b.n	5aa6 <__aeabi_dadd+0x5b6>
    5b00:	0017      	movs	r7, r2
    5b02:	e5b2      	b.n	566a <__aeabi_dadd+0x17a>
    5b04:	2400      	movs	r4, #0
    5b06:	e7f2      	b.n	5aee <__aeabi_dadd+0x5fe>
    5b08:	000007ff 	.word	0x000007ff
    5b0c:	ff7fffff 	.word	0xff7fffff

00005b10 <__aeabi_ddiv>:
    5b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b12:	4657      	mov	r7, sl
    5b14:	4645      	mov	r5, r8
    5b16:	46de      	mov	lr, fp
    5b18:	464e      	mov	r6, r9
    5b1a:	b5e0      	push	{r5, r6, r7, lr}
    5b1c:	004c      	lsls	r4, r1, #1
    5b1e:	030e      	lsls	r6, r1, #12
    5b20:	b087      	sub	sp, #28
    5b22:	4683      	mov	fp, r0
    5b24:	4692      	mov	sl, r2
    5b26:	001d      	movs	r5, r3
    5b28:	4680      	mov	r8, r0
    5b2a:	0b36      	lsrs	r6, r6, #12
    5b2c:	0d64      	lsrs	r4, r4, #21
    5b2e:	0fcf      	lsrs	r7, r1, #31
    5b30:	2c00      	cmp	r4, #0
    5b32:	d04f      	beq.n	5bd4 <__aeabi_ddiv+0xc4>
    5b34:	4b6f      	ldr	r3, [pc, #444]	; (5cf4 <__aeabi_ddiv+0x1e4>)
    5b36:	429c      	cmp	r4, r3
    5b38:	d035      	beq.n	5ba6 <__aeabi_ddiv+0x96>
    5b3a:	2380      	movs	r3, #128	; 0x80
    5b3c:	0f42      	lsrs	r2, r0, #29
    5b3e:	041b      	lsls	r3, r3, #16
    5b40:	00f6      	lsls	r6, r6, #3
    5b42:	4313      	orrs	r3, r2
    5b44:	4333      	orrs	r3, r6
    5b46:	4699      	mov	r9, r3
    5b48:	00c3      	lsls	r3, r0, #3
    5b4a:	4698      	mov	r8, r3
    5b4c:	4b6a      	ldr	r3, [pc, #424]	; (5cf8 <__aeabi_ddiv+0x1e8>)
    5b4e:	2600      	movs	r6, #0
    5b50:	469c      	mov	ip, r3
    5b52:	2300      	movs	r3, #0
    5b54:	4464      	add	r4, ip
    5b56:	9303      	str	r3, [sp, #12]
    5b58:	032b      	lsls	r3, r5, #12
    5b5a:	0b1b      	lsrs	r3, r3, #12
    5b5c:	469b      	mov	fp, r3
    5b5e:	006b      	lsls	r3, r5, #1
    5b60:	0fed      	lsrs	r5, r5, #31
    5b62:	4650      	mov	r0, sl
    5b64:	0d5b      	lsrs	r3, r3, #21
    5b66:	9501      	str	r5, [sp, #4]
    5b68:	d05e      	beq.n	5c28 <__aeabi_ddiv+0x118>
    5b6a:	4a62      	ldr	r2, [pc, #392]	; (5cf4 <__aeabi_ddiv+0x1e4>)
    5b6c:	4293      	cmp	r3, r2
    5b6e:	d053      	beq.n	5c18 <__aeabi_ddiv+0x108>
    5b70:	465a      	mov	r2, fp
    5b72:	00d1      	lsls	r1, r2, #3
    5b74:	2280      	movs	r2, #128	; 0x80
    5b76:	0f40      	lsrs	r0, r0, #29
    5b78:	0412      	lsls	r2, r2, #16
    5b7a:	4302      	orrs	r2, r0
    5b7c:	430a      	orrs	r2, r1
    5b7e:	4693      	mov	fp, r2
    5b80:	4652      	mov	r2, sl
    5b82:	00d1      	lsls	r1, r2, #3
    5b84:	4a5c      	ldr	r2, [pc, #368]	; (5cf8 <__aeabi_ddiv+0x1e8>)
    5b86:	4694      	mov	ip, r2
    5b88:	2200      	movs	r2, #0
    5b8a:	4463      	add	r3, ip
    5b8c:	0038      	movs	r0, r7
    5b8e:	4068      	eors	r0, r5
    5b90:	4684      	mov	ip, r0
    5b92:	9002      	str	r0, [sp, #8]
    5b94:	1ae4      	subs	r4, r4, r3
    5b96:	4316      	orrs	r6, r2
    5b98:	2e0f      	cmp	r6, #15
    5b9a:	d900      	bls.n	5b9e <__aeabi_ddiv+0x8e>
    5b9c:	e0b4      	b.n	5d08 <__aeabi_ddiv+0x1f8>
    5b9e:	4b57      	ldr	r3, [pc, #348]	; (5cfc <__aeabi_ddiv+0x1ec>)
    5ba0:	00b6      	lsls	r6, r6, #2
    5ba2:	599b      	ldr	r3, [r3, r6]
    5ba4:	469f      	mov	pc, r3
    5ba6:	0003      	movs	r3, r0
    5ba8:	4333      	orrs	r3, r6
    5baa:	4699      	mov	r9, r3
    5bac:	d16c      	bne.n	5c88 <__aeabi_ddiv+0x178>
    5bae:	2300      	movs	r3, #0
    5bb0:	4698      	mov	r8, r3
    5bb2:	3302      	adds	r3, #2
    5bb4:	2608      	movs	r6, #8
    5bb6:	9303      	str	r3, [sp, #12]
    5bb8:	e7ce      	b.n	5b58 <__aeabi_ddiv+0x48>
    5bba:	46cb      	mov	fp, r9
    5bbc:	4641      	mov	r1, r8
    5bbe:	9a03      	ldr	r2, [sp, #12]
    5bc0:	9701      	str	r7, [sp, #4]
    5bc2:	2a02      	cmp	r2, #2
    5bc4:	d165      	bne.n	5c92 <__aeabi_ddiv+0x182>
    5bc6:	9b01      	ldr	r3, [sp, #4]
    5bc8:	4c4a      	ldr	r4, [pc, #296]	; (5cf4 <__aeabi_ddiv+0x1e4>)
    5bca:	469c      	mov	ip, r3
    5bcc:	2300      	movs	r3, #0
    5bce:	2200      	movs	r2, #0
    5bd0:	4698      	mov	r8, r3
    5bd2:	e06b      	b.n	5cac <__aeabi_ddiv+0x19c>
    5bd4:	0003      	movs	r3, r0
    5bd6:	4333      	orrs	r3, r6
    5bd8:	4699      	mov	r9, r3
    5bda:	d04e      	beq.n	5c7a <__aeabi_ddiv+0x16a>
    5bdc:	2e00      	cmp	r6, #0
    5bde:	d100      	bne.n	5be2 <__aeabi_ddiv+0xd2>
    5be0:	e1bc      	b.n	5f5c <__aeabi_ddiv+0x44c>
    5be2:	0030      	movs	r0, r6
    5be4:	f001 f996 	bl	6f14 <__clzsi2>
    5be8:	0003      	movs	r3, r0
    5bea:	3b0b      	subs	r3, #11
    5bec:	2b1c      	cmp	r3, #28
    5bee:	dd00      	ble.n	5bf2 <__aeabi_ddiv+0xe2>
    5bf0:	e1ac      	b.n	5f4c <__aeabi_ddiv+0x43c>
    5bf2:	221d      	movs	r2, #29
    5bf4:	1ad3      	subs	r3, r2, r3
    5bf6:	465a      	mov	r2, fp
    5bf8:	0001      	movs	r1, r0
    5bfa:	40da      	lsrs	r2, r3
    5bfc:	3908      	subs	r1, #8
    5bfe:	408e      	lsls	r6, r1
    5c00:	0013      	movs	r3, r2
    5c02:	4333      	orrs	r3, r6
    5c04:	4699      	mov	r9, r3
    5c06:	465b      	mov	r3, fp
    5c08:	408b      	lsls	r3, r1
    5c0a:	4698      	mov	r8, r3
    5c0c:	2300      	movs	r3, #0
    5c0e:	4c3c      	ldr	r4, [pc, #240]	; (5d00 <__aeabi_ddiv+0x1f0>)
    5c10:	2600      	movs	r6, #0
    5c12:	1a24      	subs	r4, r4, r0
    5c14:	9303      	str	r3, [sp, #12]
    5c16:	e79f      	b.n	5b58 <__aeabi_ddiv+0x48>
    5c18:	4651      	mov	r1, sl
    5c1a:	465a      	mov	r2, fp
    5c1c:	4311      	orrs	r1, r2
    5c1e:	d129      	bne.n	5c74 <__aeabi_ddiv+0x164>
    5c20:	2200      	movs	r2, #0
    5c22:	4693      	mov	fp, r2
    5c24:	3202      	adds	r2, #2
    5c26:	e7b1      	b.n	5b8c <__aeabi_ddiv+0x7c>
    5c28:	4659      	mov	r1, fp
    5c2a:	4301      	orrs	r1, r0
    5c2c:	d01e      	beq.n	5c6c <__aeabi_ddiv+0x15c>
    5c2e:	465b      	mov	r3, fp
    5c30:	2b00      	cmp	r3, #0
    5c32:	d100      	bne.n	5c36 <__aeabi_ddiv+0x126>
    5c34:	e19e      	b.n	5f74 <__aeabi_ddiv+0x464>
    5c36:	4658      	mov	r0, fp
    5c38:	f001 f96c 	bl	6f14 <__clzsi2>
    5c3c:	0003      	movs	r3, r0
    5c3e:	3b0b      	subs	r3, #11
    5c40:	2b1c      	cmp	r3, #28
    5c42:	dd00      	ble.n	5c46 <__aeabi_ddiv+0x136>
    5c44:	e18f      	b.n	5f66 <__aeabi_ddiv+0x456>
    5c46:	0002      	movs	r2, r0
    5c48:	4659      	mov	r1, fp
    5c4a:	3a08      	subs	r2, #8
    5c4c:	4091      	lsls	r1, r2
    5c4e:	468b      	mov	fp, r1
    5c50:	211d      	movs	r1, #29
    5c52:	1acb      	subs	r3, r1, r3
    5c54:	4651      	mov	r1, sl
    5c56:	40d9      	lsrs	r1, r3
    5c58:	000b      	movs	r3, r1
    5c5a:	4659      	mov	r1, fp
    5c5c:	430b      	orrs	r3, r1
    5c5e:	4651      	mov	r1, sl
    5c60:	469b      	mov	fp, r3
    5c62:	4091      	lsls	r1, r2
    5c64:	4b26      	ldr	r3, [pc, #152]	; (5d00 <__aeabi_ddiv+0x1f0>)
    5c66:	2200      	movs	r2, #0
    5c68:	1a1b      	subs	r3, r3, r0
    5c6a:	e78f      	b.n	5b8c <__aeabi_ddiv+0x7c>
    5c6c:	2300      	movs	r3, #0
    5c6e:	2201      	movs	r2, #1
    5c70:	469b      	mov	fp, r3
    5c72:	e78b      	b.n	5b8c <__aeabi_ddiv+0x7c>
    5c74:	4651      	mov	r1, sl
    5c76:	2203      	movs	r2, #3
    5c78:	e788      	b.n	5b8c <__aeabi_ddiv+0x7c>
    5c7a:	2300      	movs	r3, #0
    5c7c:	4698      	mov	r8, r3
    5c7e:	3301      	adds	r3, #1
    5c80:	2604      	movs	r6, #4
    5c82:	2400      	movs	r4, #0
    5c84:	9303      	str	r3, [sp, #12]
    5c86:	e767      	b.n	5b58 <__aeabi_ddiv+0x48>
    5c88:	2303      	movs	r3, #3
    5c8a:	46b1      	mov	r9, r6
    5c8c:	9303      	str	r3, [sp, #12]
    5c8e:	260c      	movs	r6, #12
    5c90:	e762      	b.n	5b58 <__aeabi_ddiv+0x48>
    5c92:	2a03      	cmp	r2, #3
    5c94:	d100      	bne.n	5c98 <__aeabi_ddiv+0x188>
    5c96:	e25c      	b.n	6152 <__aeabi_ddiv+0x642>
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	2a01      	cmp	r2, #1
    5c9c:	d000      	beq.n	5ca0 <__aeabi_ddiv+0x190>
    5c9e:	e1e4      	b.n	606a <__aeabi_ddiv+0x55a>
    5ca0:	4013      	ands	r3, r2
    5ca2:	469c      	mov	ip, r3
    5ca4:	2300      	movs	r3, #0
    5ca6:	2400      	movs	r4, #0
    5ca8:	2200      	movs	r2, #0
    5caa:	4698      	mov	r8, r3
    5cac:	2100      	movs	r1, #0
    5cae:	0312      	lsls	r2, r2, #12
    5cb0:	0b13      	lsrs	r3, r2, #12
    5cb2:	0d0a      	lsrs	r2, r1, #20
    5cb4:	0512      	lsls	r2, r2, #20
    5cb6:	431a      	orrs	r2, r3
    5cb8:	0523      	lsls	r3, r4, #20
    5cba:	4c12      	ldr	r4, [pc, #72]	; (5d04 <__aeabi_ddiv+0x1f4>)
    5cbc:	4640      	mov	r0, r8
    5cbe:	4022      	ands	r2, r4
    5cc0:	4313      	orrs	r3, r2
    5cc2:	4662      	mov	r2, ip
    5cc4:	005b      	lsls	r3, r3, #1
    5cc6:	07d2      	lsls	r2, r2, #31
    5cc8:	085b      	lsrs	r3, r3, #1
    5cca:	4313      	orrs	r3, r2
    5ccc:	0019      	movs	r1, r3
    5cce:	b007      	add	sp, #28
    5cd0:	bc3c      	pop	{r2, r3, r4, r5}
    5cd2:	4690      	mov	r8, r2
    5cd4:	4699      	mov	r9, r3
    5cd6:	46a2      	mov	sl, r4
    5cd8:	46ab      	mov	fp, r5
    5cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cdc:	2300      	movs	r3, #0
    5cde:	2280      	movs	r2, #128	; 0x80
    5ce0:	469c      	mov	ip, r3
    5ce2:	0312      	lsls	r2, r2, #12
    5ce4:	4698      	mov	r8, r3
    5ce6:	4c03      	ldr	r4, [pc, #12]	; (5cf4 <__aeabi_ddiv+0x1e4>)
    5ce8:	e7e0      	b.n	5cac <__aeabi_ddiv+0x19c>
    5cea:	2300      	movs	r3, #0
    5cec:	4c01      	ldr	r4, [pc, #4]	; (5cf4 <__aeabi_ddiv+0x1e4>)
    5cee:	2200      	movs	r2, #0
    5cf0:	4698      	mov	r8, r3
    5cf2:	e7db      	b.n	5cac <__aeabi_ddiv+0x19c>
    5cf4:	000007ff 	.word	0x000007ff
    5cf8:	fffffc01 	.word	0xfffffc01
    5cfc:	00007454 	.word	0x00007454
    5d00:	fffffc0d 	.word	0xfffffc0d
    5d04:	800fffff 	.word	0x800fffff
    5d08:	45d9      	cmp	r9, fp
    5d0a:	d900      	bls.n	5d0e <__aeabi_ddiv+0x1fe>
    5d0c:	e139      	b.n	5f82 <__aeabi_ddiv+0x472>
    5d0e:	d100      	bne.n	5d12 <__aeabi_ddiv+0x202>
    5d10:	e134      	b.n	5f7c <__aeabi_ddiv+0x46c>
    5d12:	2300      	movs	r3, #0
    5d14:	4646      	mov	r6, r8
    5d16:	464d      	mov	r5, r9
    5d18:	469a      	mov	sl, r3
    5d1a:	3c01      	subs	r4, #1
    5d1c:	465b      	mov	r3, fp
    5d1e:	0e0a      	lsrs	r2, r1, #24
    5d20:	021b      	lsls	r3, r3, #8
    5d22:	431a      	orrs	r2, r3
    5d24:	020b      	lsls	r3, r1, #8
    5d26:	0c17      	lsrs	r7, r2, #16
    5d28:	9303      	str	r3, [sp, #12]
    5d2a:	0413      	lsls	r3, r2, #16
    5d2c:	0c1b      	lsrs	r3, r3, #16
    5d2e:	0039      	movs	r1, r7
    5d30:	0028      	movs	r0, r5
    5d32:	4690      	mov	r8, r2
    5d34:	9301      	str	r3, [sp, #4]
    5d36:	f7ff f91b 	bl	4f70 <__udivsi3>
    5d3a:	0002      	movs	r2, r0
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	4683      	mov	fp, r0
    5d40:	435a      	muls	r2, r3
    5d42:	0028      	movs	r0, r5
    5d44:	0039      	movs	r1, r7
    5d46:	4691      	mov	r9, r2
    5d48:	f7ff f998 	bl	507c <__aeabi_uidivmod>
    5d4c:	0c35      	lsrs	r5, r6, #16
    5d4e:	0409      	lsls	r1, r1, #16
    5d50:	430d      	orrs	r5, r1
    5d52:	45a9      	cmp	r9, r5
    5d54:	d90d      	bls.n	5d72 <__aeabi_ddiv+0x262>
    5d56:	465b      	mov	r3, fp
    5d58:	4445      	add	r5, r8
    5d5a:	3b01      	subs	r3, #1
    5d5c:	45a8      	cmp	r8, r5
    5d5e:	d900      	bls.n	5d62 <__aeabi_ddiv+0x252>
    5d60:	e13a      	b.n	5fd8 <__aeabi_ddiv+0x4c8>
    5d62:	45a9      	cmp	r9, r5
    5d64:	d800      	bhi.n	5d68 <__aeabi_ddiv+0x258>
    5d66:	e137      	b.n	5fd8 <__aeabi_ddiv+0x4c8>
    5d68:	2302      	movs	r3, #2
    5d6a:	425b      	negs	r3, r3
    5d6c:	469c      	mov	ip, r3
    5d6e:	4445      	add	r5, r8
    5d70:	44e3      	add	fp, ip
    5d72:	464b      	mov	r3, r9
    5d74:	1aeb      	subs	r3, r5, r3
    5d76:	0039      	movs	r1, r7
    5d78:	0018      	movs	r0, r3
    5d7a:	9304      	str	r3, [sp, #16]
    5d7c:	f7ff f8f8 	bl	4f70 <__udivsi3>
    5d80:	9b01      	ldr	r3, [sp, #4]
    5d82:	0005      	movs	r5, r0
    5d84:	4343      	muls	r3, r0
    5d86:	0039      	movs	r1, r7
    5d88:	9804      	ldr	r0, [sp, #16]
    5d8a:	4699      	mov	r9, r3
    5d8c:	f7ff f976 	bl	507c <__aeabi_uidivmod>
    5d90:	0433      	lsls	r3, r6, #16
    5d92:	0409      	lsls	r1, r1, #16
    5d94:	0c1b      	lsrs	r3, r3, #16
    5d96:	430b      	orrs	r3, r1
    5d98:	4599      	cmp	r9, r3
    5d9a:	d909      	bls.n	5db0 <__aeabi_ddiv+0x2a0>
    5d9c:	4443      	add	r3, r8
    5d9e:	1e6a      	subs	r2, r5, #1
    5da0:	4598      	cmp	r8, r3
    5da2:	d900      	bls.n	5da6 <__aeabi_ddiv+0x296>
    5da4:	e11a      	b.n	5fdc <__aeabi_ddiv+0x4cc>
    5da6:	4599      	cmp	r9, r3
    5da8:	d800      	bhi.n	5dac <__aeabi_ddiv+0x29c>
    5daa:	e117      	b.n	5fdc <__aeabi_ddiv+0x4cc>
    5dac:	3d02      	subs	r5, #2
    5dae:	4443      	add	r3, r8
    5db0:	464a      	mov	r2, r9
    5db2:	1a9b      	subs	r3, r3, r2
    5db4:	465a      	mov	r2, fp
    5db6:	0412      	lsls	r2, r2, #16
    5db8:	432a      	orrs	r2, r5
    5dba:	9903      	ldr	r1, [sp, #12]
    5dbc:	4693      	mov	fp, r2
    5dbe:	0c10      	lsrs	r0, r2, #16
    5dc0:	0c0a      	lsrs	r2, r1, #16
    5dc2:	4691      	mov	r9, r2
    5dc4:	0409      	lsls	r1, r1, #16
    5dc6:	465a      	mov	r2, fp
    5dc8:	0c09      	lsrs	r1, r1, #16
    5dca:	464e      	mov	r6, r9
    5dcc:	000d      	movs	r5, r1
    5dce:	0412      	lsls	r2, r2, #16
    5dd0:	0c12      	lsrs	r2, r2, #16
    5dd2:	4345      	muls	r5, r0
    5dd4:	9105      	str	r1, [sp, #20]
    5dd6:	4351      	muls	r1, r2
    5dd8:	4372      	muls	r2, r6
    5dda:	4370      	muls	r0, r6
    5ddc:	1952      	adds	r2, r2, r5
    5dde:	0c0e      	lsrs	r6, r1, #16
    5de0:	18b2      	adds	r2, r6, r2
    5de2:	4295      	cmp	r5, r2
    5de4:	d903      	bls.n	5dee <__aeabi_ddiv+0x2de>
    5de6:	2580      	movs	r5, #128	; 0x80
    5de8:	026d      	lsls	r5, r5, #9
    5dea:	46ac      	mov	ip, r5
    5dec:	4460      	add	r0, ip
    5dee:	0c15      	lsrs	r5, r2, #16
    5df0:	0409      	lsls	r1, r1, #16
    5df2:	0412      	lsls	r2, r2, #16
    5df4:	0c09      	lsrs	r1, r1, #16
    5df6:	1828      	adds	r0, r5, r0
    5df8:	1852      	adds	r2, r2, r1
    5dfa:	4283      	cmp	r3, r0
    5dfc:	d200      	bcs.n	5e00 <__aeabi_ddiv+0x2f0>
    5dfe:	e0ce      	b.n	5f9e <__aeabi_ddiv+0x48e>
    5e00:	d100      	bne.n	5e04 <__aeabi_ddiv+0x2f4>
    5e02:	e0c8      	b.n	5f96 <__aeabi_ddiv+0x486>
    5e04:	1a1d      	subs	r5, r3, r0
    5e06:	4653      	mov	r3, sl
    5e08:	1a9e      	subs	r6, r3, r2
    5e0a:	45b2      	cmp	sl, r6
    5e0c:	4192      	sbcs	r2, r2
    5e0e:	4252      	negs	r2, r2
    5e10:	1aab      	subs	r3, r5, r2
    5e12:	469a      	mov	sl, r3
    5e14:	4598      	cmp	r8, r3
    5e16:	d100      	bne.n	5e1a <__aeabi_ddiv+0x30a>
    5e18:	e117      	b.n	604a <__aeabi_ddiv+0x53a>
    5e1a:	0039      	movs	r1, r7
    5e1c:	0018      	movs	r0, r3
    5e1e:	f7ff f8a7 	bl	4f70 <__udivsi3>
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	0005      	movs	r5, r0
    5e26:	4343      	muls	r3, r0
    5e28:	0039      	movs	r1, r7
    5e2a:	4650      	mov	r0, sl
    5e2c:	9304      	str	r3, [sp, #16]
    5e2e:	f7ff f925 	bl	507c <__aeabi_uidivmod>
    5e32:	9804      	ldr	r0, [sp, #16]
    5e34:	040b      	lsls	r3, r1, #16
    5e36:	0c31      	lsrs	r1, r6, #16
    5e38:	4319      	orrs	r1, r3
    5e3a:	4288      	cmp	r0, r1
    5e3c:	d909      	bls.n	5e52 <__aeabi_ddiv+0x342>
    5e3e:	4441      	add	r1, r8
    5e40:	1e6b      	subs	r3, r5, #1
    5e42:	4588      	cmp	r8, r1
    5e44:	d900      	bls.n	5e48 <__aeabi_ddiv+0x338>
    5e46:	e107      	b.n	6058 <__aeabi_ddiv+0x548>
    5e48:	4288      	cmp	r0, r1
    5e4a:	d800      	bhi.n	5e4e <__aeabi_ddiv+0x33e>
    5e4c:	e104      	b.n	6058 <__aeabi_ddiv+0x548>
    5e4e:	3d02      	subs	r5, #2
    5e50:	4441      	add	r1, r8
    5e52:	9b04      	ldr	r3, [sp, #16]
    5e54:	1acb      	subs	r3, r1, r3
    5e56:	0018      	movs	r0, r3
    5e58:	0039      	movs	r1, r7
    5e5a:	9304      	str	r3, [sp, #16]
    5e5c:	f7ff f888 	bl	4f70 <__udivsi3>
    5e60:	9b01      	ldr	r3, [sp, #4]
    5e62:	4682      	mov	sl, r0
    5e64:	4343      	muls	r3, r0
    5e66:	0039      	movs	r1, r7
    5e68:	9804      	ldr	r0, [sp, #16]
    5e6a:	9301      	str	r3, [sp, #4]
    5e6c:	f7ff f906 	bl	507c <__aeabi_uidivmod>
    5e70:	9801      	ldr	r0, [sp, #4]
    5e72:	040b      	lsls	r3, r1, #16
    5e74:	0431      	lsls	r1, r6, #16
    5e76:	0c09      	lsrs	r1, r1, #16
    5e78:	4319      	orrs	r1, r3
    5e7a:	4288      	cmp	r0, r1
    5e7c:	d90d      	bls.n	5e9a <__aeabi_ddiv+0x38a>
    5e7e:	4653      	mov	r3, sl
    5e80:	4441      	add	r1, r8
    5e82:	3b01      	subs	r3, #1
    5e84:	4588      	cmp	r8, r1
    5e86:	d900      	bls.n	5e8a <__aeabi_ddiv+0x37a>
    5e88:	e0e8      	b.n	605c <__aeabi_ddiv+0x54c>
    5e8a:	4288      	cmp	r0, r1
    5e8c:	d800      	bhi.n	5e90 <__aeabi_ddiv+0x380>
    5e8e:	e0e5      	b.n	605c <__aeabi_ddiv+0x54c>
    5e90:	2302      	movs	r3, #2
    5e92:	425b      	negs	r3, r3
    5e94:	469c      	mov	ip, r3
    5e96:	4441      	add	r1, r8
    5e98:	44e2      	add	sl, ip
    5e9a:	9b01      	ldr	r3, [sp, #4]
    5e9c:	042d      	lsls	r5, r5, #16
    5e9e:	1ace      	subs	r6, r1, r3
    5ea0:	4651      	mov	r1, sl
    5ea2:	4329      	orrs	r1, r5
    5ea4:	9d05      	ldr	r5, [sp, #20]
    5ea6:	464f      	mov	r7, r9
    5ea8:	002a      	movs	r2, r5
    5eaa:	040b      	lsls	r3, r1, #16
    5eac:	0c08      	lsrs	r0, r1, #16
    5eae:	0c1b      	lsrs	r3, r3, #16
    5eb0:	435a      	muls	r2, r3
    5eb2:	4345      	muls	r5, r0
    5eb4:	437b      	muls	r3, r7
    5eb6:	4378      	muls	r0, r7
    5eb8:	195b      	adds	r3, r3, r5
    5eba:	0c17      	lsrs	r7, r2, #16
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	429d      	cmp	r5, r3
    5ec0:	d903      	bls.n	5eca <__aeabi_ddiv+0x3ba>
    5ec2:	2580      	movs	r5, #128	; 0x80
    5ec4:	026d      	lsls	r5, r5, #9
    5ec6:	46ac      	mov	ip, r5
    5ec8:	4460      	add	r0, ip
    5eca:	0c1d      	lsrs	r5, r3, #16
    5ecc:	0412      	lsls	r2, r2, #16
    5ece:	041b      	lsls	r3, r3, #16
    5ed0:	0c12      	lsrs	r2, r2, #16
    5ed2:	1828      	adds	r0, r5, r0
    5ed4:	189b      	adds	r3, r3, r2
    5ed6:	4286      	cmp	r6, r0
    5ed8:	d200      	bcs.n	5edc <__aeabi_ddiv+0x3cc>
    5eda:	e093      	b.n	6004 <__aeabi_ddiv+0x4f4>
    5edc:	d100      	bne.n	5ee0 <__aeabi_ddiv+0x3d0>
    5ede:	e08e      	b.n	5ffe <__aeabi_ddiv+0x4ee>
    5ee0:	2301      	movs	r3, #1
    5ee2:	4319      	orrs	r1, r3
    5ee4:	4ba0      	ldr	r3, [pc, #640]	; (6168 <__aeabi_ddiv+0x658>)
    5ee6:	18e3      	adds	r3, r4, r3
    5ee8:	2b00      	cmp	r3, #0
    5eea:	dc00      	bgt.n	5eee <__aeabi_ddiv+0x3de>
    5eec:	e099      	b.n	6022 <__aeabi_ddiv+0x512>
    5eee:	074a      	lsls	r2, r1, #29
    5ef0:	d000      	beq.n	5ef4 <__aeabi_ddiv+0x3e4>
    5ef2:	e09e      	b.n	6032 <__aeabi_ddiv+0x522>
    5ef4:	465a      	mov	r2, fp
    5ef6:	01d2      	lsls	r2, r2, #7
    5ef8:	d506      	bpl.n	5f08 <__aeabi_ddiv+0x3f8>
    5efa:	465a      	mov	r2, fp
    5efc:	4b9b      	ldr	r3, [pc, #620]	; (616c <__aeabi_ddiv+0x65c>)
    5efe:	401a      	ands	r2, r3
    5f00:	2380      	movs	r3, #128	; 0x80
    5f02:	4693      	mov	fp, r2
    5f04:	00db      	lsls	r3, r3, #3
    5f06:	18e3      	adds	r3, r4, r3
    5f08:	4a99      	ldr	r2, [pc, #612]	; (6170 <__aeabi_ddiv+0x660>)
    5f0a:	4293      	cmp	r3, r2
    5f0c:	dd68      	ble.n	5fe0 <__aeabi_ddiv+0x4d0>
    5f0e:	2301      	movs	r3, #1
    5f10:	9a02      	ldr	r2, [sp, #8]
    5f12:	4c98      	ldr	r4, [pc, #608]	; (6174 <__aeabi_ddiv+0x664>)
    5f14:	401a      	ands	r2, r3
    5f16:	2300      	movs	r3, #0
    5f18:	4694      	mov	ip, r2
    5f1a:	4698      	mov	r8, r3
    5f1c:	2200      	movs	r2, #0
    5f1e:	e6c5      	b.n	5cac <__aeabi_ddiv+0x19c>
    5f20:	2280      	movs	r2, #128	; 0x80
    5f22:	464b      	mov	r3, r9
    5f24:	0312      	lsls	r2, r2, #12
    5f26:	4213      	tst	r3, r2
    5f28:	d00a      	beq.n	5f40 <__aeabi_ddiv+0x430>
    5f2a:	465b      	mov	r3, fp
    5f2c:	4213      	tst	r3, r2
    5f2e:	d106      	bne.n	5f3e <__aeabi_ddiv+0x42e>
    5f30:	431a      	orrs	r2, r3
    5f32:	0312      	lsls	r2, r2, #12
    5f34:	0b12      	lsrs	r2, r2, #12
    5f36:	46ac      	mov	ip, r5
    5f38:	4688      	mov	r8, r1
    5f3a:	4c8e      	ldr	r4, [pc, #568]	; (6174 <__aeabi_ddiv+0x664>)
    5f3c:	e6b6      	b.n	5cac <__aeabi_ddiv+0x19c>
    5f3e:	464b      	mov	r3, r9
    5f40:	431a      	orrs	r2, r3
    5f42:	0312      	lsls	r2, r2, #12
    5f44:	0b12      	lsrs	r2, r2, #12
    5f46:	46bc      	mov	ip, r7
    5f48:	4c8a      	ldr	r4, [pc, #552]	; (6174 <__aeabi_ddiv+0x664>)
    5f4a:	e6af      	b.n	5cac <__aeabi_ddiv+0x19c>
    5f4c:	0003      	movs	r3, r0
    5f4e:	465a      	mov	r2, fp
    5f50:	3b28      	subs	r3, #40	; 0x28
    5f52:	409a      	lsls	r2, r3
    5f54:	2300      	movs	r3, #0
    5f56:	4691      	mov	r9, r2
    5f58:	4698      	mov	r8, r3
    5f5a:	e657      	b.n	5c0c <__aeabi_ddiv+0xfc>
    5f5c:	4658      	mov	r0, fp
    5f5e:	f000 ffd9 	bl	6f14 <__clzsi2>
    5f62:	3020      	adds	r0, #32
    5f64:	e640      	b.n	5be8 <__aeabi_ddiv+0xd8>
    5f66:	0003      	movs	r3, r0
    5f68:	4652      	mov	r2, sl
    5f6a:	3b28      	subs	r3, #40	; 0x28
    5f6c:	409a      	lsls	r2, r3
    5f6e:	2100      	movs	r1, #0
    5f70:	4693      	mov	fp, r2
    5f72:	e677      	b.n	5c64 <__aeabi_ddiv+0x154>
    5f74:	f000 ffce 	bl	6f14 <__clzsi2>
    5f78:	3020      	adds	r0, #32
    5f7a:	e65f      	b.n	5c3c <__aeabi_ddiv+0x12c>
    5f7c:	4588      	cmp	r8, r1
    5f7e:	d200      	bcs.n	5f82 <__aeabi_ddiv+0x472>
    5f80:	e6c7      	b.n	5d12 <__aeabi_ddiv+0x202>
    5f82:	464b      	mov	r3, r9
    5f84:	07de      	lsls	r6, r3, #31
    5f86:	085d      	lsrs	r5, r3, #1
    5f88:	4643      	mov	r3, r8
    5f8a:	085b      	lsrs	r3, r3, #1
    5f8c:	431e      	orrs	r6, r3
    5f8e:	4643      	mov	r3, r8
    5f90:	07db      	lsls	r3, r3, #31
    5f92:	469a      	mov	sl, r3
    5f94:	e6c2      	b.n	5d1c <__aeabi_ddiv+0x20c>
    5f96:	2500      	movs	r5, #0
    5f98:	4592      	cmp	sl, r2
    5f9a:	d300      	bcc.n	5f9e <__aeabi_ddiv+0x48e>
    5f9c:	e733      	b.n	5e06 <__aeabi_ddiv+0x2f6>
    5f9e:	9e03      	ldr	r6, [sp, #12]
    5fa0:	4659      	mov	r1, fp
    5fa2:	46b4      	mov	ip, r6
    5fa4:	44e2      	add	sl, ip
    5fa6:	45b2      	cmp	sl, r6
    5fa8:	41ad      	sbcs	r5, r5
    5faa:	426d      	negs	r5, r5
    5fac:	4445      	add	r5, r8
    5fae:	18eb      	adds	r3, r5, r3
    5fb0:	3901      	subs	r1, #1
    5fb2:	4598      	cmp	r8, r3
    5fb4:	d207      	bcs.n	5fc6 <__aeabi_ddiv+0x4b6>
    5fb6:	4298      	cmp	r0, r3
    5fb8:	d900      	bls.n	5fbc <__aeabi_ddiv+0x4ac>
    5fba:	e07f      	b.n	60bc <__aeabi_ddiv+0x5ac>
    5fbc:	d100      	bne.n	5fc0 <__aeabi_ddiv+0x4b0>
    5fbe:	e0bc      	b.n	613a <__aeabi_ddiv+0x62a>
    5fc0:	1a1d      	subs	r5, r3, r0
    5fc2:	468b      	mov	fp, r1
    5fc4:	e71f      	b.n	5e06 <__aeabi_ddiv+0x2f6>
    5fc6:	4598      	cmp	r8, r3
    5fc8:	d1fa      	bne.n	5fc0 <__aeabi_ddiv+0x4b0>
    5fca:	9d03      	ldr	r5, [sp, #12]
    5fcc:	4555      	cmp	r5, sl
    5fce:	d9f2      	bls.n	5fb6 <__aeabi_ddiv+0x4a6>
    5fd0:	4643      	mov	r3, r8
    5fd2:	468b      	mov	fp, r1
    5fd4:	1a1d      	subs	r5, r3, r0
    5fd6:	e716      	b.n	5e06 <__aeabi_ddiv+0x2f6>
    5fd8:	469b      	mov	fp, r3
    5fda:	e6ca      	b.n	5d72 <__aeabi_ddiv+0x262>
    5fdc:	0015      	movs	r5, r2
    5fde:	e6e7      	b.n	5db0 <__aeabi_ddiv+0x2a0>
    5fe0:	465a      	mov	r2, fp
    5fe2:	08c9      	lsrs	r1, r1, #3
    5fe4:	0752      	lsls	r2, r2, #29
    5fe6:	430a      	orrs	r2, r1
    5fe8:	055b      	lsls	r3, r3, #21
    5fea:	4690      	mov	r8, r2
    5fec:	0d5c      	lsrs	r4, r3, #21
    5fee:	465a      	mov	r2, fp
    5ff0:	2301      	movs	r3, #1
    5ff2:	9902      	ldr	r1, [sp, #8]
    5ff4:	0252      	lsls	r2, r2, #9
    5ff6:	4019      	ands	r1, r3
    5ff8:	0b12      	lsrs	r2, r2, #12
    5ffa:	468c      	mov	ip, r1
    5ffc:	e656      	b.n	5cac <__aeabi_ddiv+0x19c>
    5ffe:	2b00      	cmp	r3, #0
    6000:	d100      	bne.n	6004 <__aeabi_ddiv+0x4f4>
    6002:	e76f      	b.n	5ee4 <__aeabi_ddiv+0x3d4>
    6004:	4446      	add	r6, r8
    6006:	1e4a      	subs	r2, r1, #1
    6008:	45b0      	cmp	r8, r6
    600a:	d929      	bls.n	6060 <__aeabi_ddiv+0x550>
    600c:	0011      	movs	r1, r2
    600e:	4286      	cmp	r6, r0
    6010:	d000      	beq.n	6014 <__aeabi_ddiv+0x504>
    6012:	e765      	b.n	5ee0 <__aeabi_ddiv+0x3d0>
    6014:	9a03      	ldr	r2, [sp, #12]
    6016:	4293      	cmp	r3, r2
    6018:	d000      	beq.n	601c <__aeabi_ddiv+0x50c>
    601a:	e761      	b.n	5ee0 <__aeabi_ddiv+0x3d0>
    601c:	e762      	b.n	5ee4 <__aeabi_ddiv+0x3d4>
    601e:	2101      	movs	r1, #1
    6020:	4249      	negs	r1, r1
    6022:	2001      	movs	r0, #1
    6024:	1ac2      	subs	r2, r0, r3
    6026:	2a38      	cmp	r2, #56	; 0x38
    6028:	dd21      	ble.n	606e <__aeabi_ddiv+0x55e>
    602a:	9b02      	ldr	r3, [sp, #8]
    602c:	4003      	ands	r3, r0
    602e:	469c      	mov	ip, r3
    6030:	e638      	b.n	5ca4 <__aeabi_ddiv+0x194>
    6032:	220f      	movs	r2, #15
    6034:	400a      	ands	r2, r1
    6036:	2a04      	cmp	r2, #4
    6038:	d100      	bne.n	603c <__aeabi_ddiv+0x52c>
    603a:	e75b      	b.n	5ef4 <__aeabi_ddiv+0x3e4>
    603c:	000a      	movs	r2, r1
    603e:	1d11      	adds	r1, r2, #4
    6040:	4291      	cmp	r1, r2
    6042:	4192      	sbcs	r2, r2
    6044:	4252      	negs	r2, r2
    6046:	4493      	add	fp, r2
    6048:	e754      	b.n	5ef4 <__aeabi_ddiv+0x3e4>
    604a:	4b47      	ldr	r3, [pc, #284]	; (6168 <__aeabi_ddiv+0x658>)
    604c:	18e3      	adds	r3, r4, r3
    604e:	2b00      	cmp	r3, #0
    6050:	dde5      	ble.n	601e <__aeabi_ddiv+0x50e>
    6052:	2201      	movs	r2, #1
    6054:	4252      	negs	r2, r2
    6056:	e7f2      	b.n	603e <__aeabi_ddiv+0x52e>
    6058:	001d      	movs	r5, r3
    605a:	e6fa      	b.n	5e52 <__aeabi_ddiv+0x342>
    605c:	469a      	mov	sl, r3
    605e:	e71c      	b.n	5e9a <__aeabi_ddiv+0x38a>
    6060:	42b0      	cmp	r0, r6
    6062:	d839      	bhi.n	60d8 <__aeabi_ddiv+0x5c8>
    6064:	d06e      	beq.n	6144 <__aeabi_ddiv+0x634>
    6066:	0011      	movs	r1, r2
    6068:	e73a      	b.n	5ee0 <__aeabi_ddiv+0x3d0>
    606a:	9302      	str	r3, [sp, #8]
    606c:	e73a      	b.n	5ee4 <__aeabi_ddiv+0x3d4>
    606e:	2a1f      	cmp	r2, #31
    6070:	dc3c      	bgt.n	60ec <__aeabi_ddiv+0x5dc>
    6072:	2320      	movs	r3, #32
    6074:	1a9b      	subs	r3, r3, r2
    6076:	000c      	movs	r4, r1
    6078:	4658      	mov	r0, fp
    607a:	4099      	lsls	r1, r3
    607c:	4098      	lsls	r0, r3
    607e:	1e4b      	subs	r3, r1, #1
    6080:	4199      	sbcs	r1, r3
    6082:	465b      	mov	r3, fp
    6084:	40d4      	lsrs	r4, r2
    6086:	40d3      	lsrs	r3, r2
    6088:	4320      	orrs	r0, r4
    608a:	4308      	orrs	r0, r1
    608c:	001a      	movs	r2, r3
    608e:	0743      	lsls	r3, r0, #29
    6090:	d009      	beq.n	60a6 <__aeabi_ddiv+0x596>
    6092:	230f      	movs	r3, #15
    6094:	4003      	ands	r3, r0
    6096:	2b04      	cmp	r3, #4
    6098:	d005      	beq.n	60a6 <__aeabi_ddiv+0x596>
    609a:	0001      	movs	r1, r0
    609c:	1d08      	adds	r0, r1, #4
    609e:	4288      	cmp	r0, r1
    60a0:	419b      	sbcs	r3, r3
    60a2:	425b      	negs	r3, r3
    60a4:	18d2      	adds	r2, r2, r3
    60a6:	0213      	lsls	r3, r2, #8
    60a8:	d53a      	bpl.n	6120 <__aeabi_ddiv+0x610>
    60aa:	2301      	movs	r3, #1
    60ac:	9a02      	ldr	r2, [sp, #8]
    60ae:	2401      	movs	r4, #1
    60b0:	401a      	ands	r2, r3
    60b2:	2300      	movs	r3, #0
    60b4:	4694      	mov	ip, r2
    60b6:	4698      	mov	r8, r3
    60b8:	2200      	movs	r2, #0
    60ba:	e5f7      	b.n	5cac <__aeabi_ddiv+0x19c>
    60bc:	2102      	movs	r1, #2
    60be:	4249      	negs	r1, r1
    60c0:	468c      	mov	ip, r1
    60c2:	9d03      	ldr	r5, [sp, #12]
    60c4:	44e3      	add	fp, ip
    60c6:	46ac      	mov	ip, r5
    60c8:	44e2      	add	sl, ip
    60ca:	45aa      	cmp	sl, r5
    60cc:	41ad      	sbcs	r5, r5
    60ce:	426d      	negs	r5, r5
    60d0:	4445      	add	r5, r8
    60d2:	18ed      	adds	r5, r5, r3
    60d4:	1a2d      	subs	r5, r5, r0
    60d6:	e696      	b.n	5e06 <__aeabi_ddiv+0x2f6>
    60d8:	1e8a      	subs	r2, r1, #2
    60da:	9903      	ldr	r1, [sp, #12]
    60dc:	004d      	lsls	r5, r1, #1
    60de:	428d      	cmp	r5, r1
    60e0:	4189      	sbcs	r1, r1
    60e2:	4249      	negs	r1, r1
    60e4:	4441      	add	r1, r8
    60e6:	1876      	adds	r6, r6, r1
    60e8:	9503      	str	r5, [sp, #12]
    60ea:	e78f      	b.n	600c <__aeabi_ddiv+0x4fc>
    60ec:	201f      	movs	r0, #31
    60ee:	4240      	negs	r0, r0
    60f0:	1ac3      	subs	r3, r0, r3
    60f2:	4658      	mov	r0, fp
    60f4:	40d8      	lsrs	r0, r3
    60f6:	0003      	movs	r3, r0
    60f8:	2a20      	cmp	r2, #32
    60fa:	d028      	beq.n	614e <__aeabi_ddiv+0x63e>
    60fc:	2040      	movs	r0, #64	; 0x40
    60fe:	465d      	mov	r5, fp
    6100:	1a82      	subs	r2, r0, r2
    6102:	4095      	lsls	r5, r2
    6104:	4329      	orrs	r1, r5
    6106:	1e4a      	subs	r2, r1, #1
    6108:	4191      	sbcs	r1, r2
    610a:	4319      	orrs	r1, r3
    610c:	2307      	movs	r3, #7
    610e:	2200      	movs	r2, #0
    6110:	400b      	ands	r3, r1
    6112:	d009      	beq.n	6128 <__aeabi_ddiv+0x618>
    6114:	230f      	movs	r3, #15
    6116:	2200      	movs	r2, #0
    6118:	400b      	ands	r3, r1
    611a:	0008      	movs	r0, r1
    611c:	2b04      	cmp	r3, #4
    611e:	d1bd      	bne.n	609c <__aeabi_ddiv+0x58c>
    6120:	0001      	movs	r1, r0
    6122:	0753      	lsls	r3, r2, #29
    6124:	0252      	lsls	r2, r2, #9
    6126:	0b12      	lsrs	r2, r2, #12
    6128:	08c9      	lsrs	r1, r1, #3
    612a:	4319      	orrs	r1, r3
    612c:	2301      	movs	r3, #1
    612e:	4688      	mov	r8, r1
    6130:	9902      	ldr	r1, [sp, #8]
    6132:	2400      	movs	r4, #0
    6134:	4019      	ands	r1, r3
    6136:	468c      	mov	ip, r1
    6138:	e5b8      	b.n	5cac <__aeabi_ddiv+0x19c>
    613a:	4552      	cmp	r2, sl
    613c:	d8be      	bhi.n	60bc <__aeabi_ddiv+0x5ac>
    613e:	468b      	mov	fp, r1
    6140:	2500      	movs	r5, #0
    6142:	e660      	b.n	5e06 <__aeabi_ddiv+0x2f6>
    6144:	9d03      	ldr	r5, [sp, #12]
    6146:	429d      	cmp	r5, r3
    6148:	d3c6      	bcc.n	60d8 <__aeabi_ddiv+0x5c8>
    614a:	0011      	movs	r1, r2
    614c:	e762      	b.n	6014 <__aeabi_ddiv+0x504>
    614e:	2500      	movs	r5, #0
    6150:	e7d8      	b.n	6104 <__aeabi_ddiv+0x5f4>
    6152:	2280      	movs	r2, #128	; 0x80
    6154:	465b      	mov	r3, fp
    6156:	0312      	lsls	r2, r2, #12
    6158:	431a      	orrs	r2, r3
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	0312      	lsls	r2, r2, #12
    615e:	0b12      	lsrs	r2, r2, #12
    6160:	469c      	mov	ip, r3
    6162:	4688      	mov	r8, r1
    6164:	4c03      	ldr	r4, [pc, #12]	; (6174 <__aeabi_ddiv+0x664>)
    6166:	e5a1      	b.n	5cac <__aeabi_ddiv+0x19c>
    6168:	000003ff 	.word	0x000003ff
    616c:	feffffff 	.word	0xfeffffff
    6170:	000007fe 	.word	0x000007fe
    6174:	000007ff 	.word	0x000007ff

00006178 <__aeabi_dmul>:
    6178:	b5f0      	push	{r4, r5, r6, r7, lr}
    617a:	4657      	mov	r7, sl
    617c:	4645      	mov	r5, r8
    617e:	46de      	mov	lr, fp
    6180:	464e      	mov	r6, r9
    6182:	b5e0      	push	{r5, r6, r7, lr}
    6184:	030c      	lsls	r4, r1, #12
    6186:	4698      	mov	r8, r3
    6188:	004e      	lsls	r6, r1, #1
    618a:	0b23      	lsrs	r3, r4, #12
    618c:	b087      	sub	sp, #28
    618e:	0007      	movs	r7, r0
    6190:	4692      	mov	sl, r2
    6192:	469b      	mov	fp, r3
    6194:	0d76      	lsrs	r6, r6, #21
    6196:	0fcd      	lsrs	r5, r1, #31
    6198:	2e00      	cmp	r6, #0
    619a:	d06b      	beq.n	6274 <__aeabi_dmul+0xfc>
    619c:	4b6d      	ldr	r3, [pc, #436]	; (6354 <__aeabi_dmul+0x1dc>)
    619e:	429e      	cmp	r6, r3
    61a0:	d035      	beq.n	620e <__aeabi_dmul+0x96>
    61a2:	2480      	movs	r4, #128	; 0x80
    61a4:	465b      	mov	r3, fp
    61a6:	0f42      	lsrs	r2, r0, #29
    61a8:	0424      	lsls	r4, r4, #16
    61aa:	00db      	lsls	r3, r3, #3
    61ac:	4314      	orrs	r4, r2
    61ae:	431c      	orrs	r4, r3
    61b0:	00c3      	lsls	r3, r0, #3
    61b2:	4699      	mov	r9, r3
    61b4:	4b68      	ldr	r3, [pc, #416]	; (6358 <__aeabi_dmul+0x1e0>)
    61b6:	46a3      	mov	fp, r4
    61b8:	469c      	mov	ip, r3
    61ba:	2300      	movs	r3, #0
    61bc:	2700      	movs	r7, #0
    61be:	4466      	add	r6, ip
    61c0:	9302      	str	r3, [sp, #8]
    61c2:	4643      	mov	r3, r8
    61c4:	031c      	lsls	r4, r3, #12
    61c6:	005a      	lsls	r2, r3, #1
    61c8:	0fdb      	lsrs	r3, r3, #31
    61ca:	4650      	mov	r0, sl
    61cc:	0b24      	lsrs	r4, r4, #12
    61ce:	0d52      	lsrs	r2, r2, #21
    61d0:	4698      	mov	r8, r3
    61d2:	d100      	bne.n	61d6 <__aeabi_dmul+0x5e>
    61d4:	e076      	b.n	62c4 <__aeabi_dmul+0x14c>
    61d6:	4b5f      	ldr	r3, [pc, #380]	; (6354 <__aeabi_dmul+0x1dc>)
    61d8:	429a      	cmp	r2, r3
    61da:	d06d      	beq.n	62b8 <__aeabi_dmul+0x140>
    61dc:	2380      	movs	r3, #128	; 0x80
    61de:	0f41      	lsrs	r1, r0, #29
    61e0:	041b      	lsls	r3, r3, #16
    61e2:	430b      	orrs	r3, r1
    61e4:	495c      	ldr	r1, [pc, #368]	; (6358 <__aeabi_dmul+0x1e0>)
    61e6:	00e4      	lsls	r4, r4, #3
    61e8:	468c      	mov	ip, r1
    61ea:	431c      	orrs	r4, r3
    61ec:	00c3      	lsls	r3, r0, #3
    61ee:	2000      	movs	r0, #0
    61f0:	4462      	add	r2, ip
    61f2:	4641      	mov	r1, r8
    61f4:	18b6      	adds	r6, r6, r2
    61f6:	4069      	eors	r1, r5
    61f8:	1c72      	adds	r2, r6, #1
    61fa:	9101      	str	r1, [sp, #4]
    61fc:	4694      	mov	ip, r2
    61fe:	4307      	orrs	r7, r0
    6200:	2f0f      	cmp	r7, #15
    6202:	d900      	bls.n	6206 <__aeabi_dmul+0x8e>
    6204:	e0b0      	b.n	6368 <__aeabi_dmul+0x1f0>
    6206:	4a55      	ldr	r2, [pc, #340]	; (635c <__aeabi_dmul+0x1e4>)
    6208:	00bf      	lsls	r7, r7, #2
    620a:	59d2      	ldr	r2, [r2, r7]
    620c:	4697      	mov	pc, r2
    620e:	465b      	mov	r3, fp
    6210:	4303      	orrs	r3, r0
    6212:	4699      	mov	r9, r3
    6214:	d000      	beq.n	6218 <__aeabi_dmul+0xa0>
    6216:	e087      	b.n	6328 <__aeabi_dmul+0x1b0>
    6218:	2300      	movs	r3, #0
    621a:	469b      	mov	fp, r3
    621c:	3302      	adds	r3, #2
    621e:	2708      	movs	r7, #8
    6220:	9302      	str	r3, [sp, #8]
    6222:	e7ce      	b.n	61c2 <__aeabi_dmul+0x4a>
    6224:	4642      	mov	r2, r8
    6226:	9201      	str	r2, [sp, #4]
    6228:	2802      	cmp	r0, #2
    622a:	d067      	beq.n	62fc <__aeabi_dmul+0x184>
    622c:	2803      	cmp	r0, #3
    622e:	d100      	bne.n	6232 <__aeabi_dmul+0xba>
    6230:	e20e      	b.n	6650 <__aeabi_dmul+0x4d8>
    6232:	2801      	cmp	r0, #1
    6234:	d000      	beq.n	6238 <__aeabi_dmul+0xc0>
    6236:	e162      	b.n	64fe <__aeabi_dmul+0x386>
    6238:	2300      	movs	r3, #0
    623a:	2400      	movs	r4, #0
    623c:	2200      	movs	r2, #0
    623e:	4699      	mov	r9, r3
    6240:	9901      	ldr	r1, [sp, #4]
    6242:	4001      	ands	r1, r0
    6244:	b2cd      	uxtb	r5, r1
    6246:	2100      	movs	r1, #0
    6248:	0312      	lsls	r2, r2, #12
    624a:	0d0b      	lsrs	r3, r1, #20
    624c:	0b12      	lsrs	r2, r2, #12
    624e:	051b      	lsls	r3, r3, #20
    6250:	4313      	orrs	r3, r2
    6252:	4a43      	ldr	r2, [pc, #268]	; (6360 <__aeabi_dmul+0x1e8>)
    6254:	0524      	lsls	r4, r4, #20
    6256:	4013      	ands	r3, r2
    6258:	431c      	orrs	r4, r3
    625a:	0064      	lsls	r4, r4, #1
    625c:	07ed      	lsls	r5, r5, #31
    625e:	0864      	lsrs	r4, r4, #1
    6260:	432c      	orrs	r4, r5
    6262:	4648      	mov	r0, r9
    6264:	0021      	movs	r1, r4
    6266:	b007      	add	sp, #28
    6268:	bc3c      	pop	{r2, r3, r4, r5}
    626a:	4690      	mov	r8, r2
    626c:	4699      	mov	r9, r3
    626e:	46a2      	mov	sl, r4
    6270:	46ab      	mov	fp, r5
    6272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6274:	4303      	orrs	r3, r0
    6276:	4699      	mov	r9, r3
    6278:	d04f      	beq.n	631a <__aeabi_dmul+0x1a2>
    627a:	465b      	mov	r3, fp
    627c:	2b00      	cmp	r3, #0
    627e:	d100      	bne.n	6282 <__aeabi_dmul+0x10a>
    6280:	e189      	b.n	6596 <__aeabi_dmul+0x41e>
    6282:	4658      	mov	r0, fp
    6284:	f000 fe46 	bl	6f14 <__clzsi2>
    6288:	0003      	movs	r3, r0
    628a:	3b0b      	subs	r3, #11
    628c:	2b1c      	cmp	r3, #28
    628e:	dd00      	ble.n	6292 <__aeabi_dmul+0x11a>
    6290:	e17a      	b.n	6588 <__aeabi_dmul+0x410>
    6292:	221d      	movs	r2, #29
    6294:	1ad3      	subs	r3, r2, r3
    6296:	003a      	movs	r2, r7
    6298:	0001      	movs	r1, r0
    629a:	465c      	mov	r4, fp
    629c:	40da      	lsrs	r2, r3
    629e:	3908      	subs	r1, #8
    62a0:	408c      	lsls	r4, r1
    62a2:	0013      	movs	r3, r2
    62a4:	408f      	lsls	r7, r1
    62a6:	4323      	orrs	r3, r4
    62a8:	469b      	mov	fp, r3
    62aa:	46b9      	mov	r9, r7
    62ac:	2300      	movs	r3, #0
    62ae:	4e2d      	ldr	r6, [pc, #180]	; (6364 <__aeabi_dmul+0x1ec>)
    62b0:	2700      	movs	r7, #0
    62b2:	1a36      	subs	r6, r6, r0
    62b4:	9302      	str	r3, [sp, #8]
    62b6:	e784      	b.n	61c2 <__aeabi_dmul+0x4a>
    62b8:	4653      	mov	r3, sl
    62ba:	4323      	orrs	r3, r4
    62bc:	d12a      	bne.n	6314 <__aeabi_dmul+0x19c>
    62be:	2400      	movs	r4, #0
    62c0:	2002      	movs	r0, #2
    62c2:	e796      	b.n	61f2 <__aeabi_dmul+0x7a>
    62c4:	4653      	mov	r3, sl
    62c6:	4323      	orrs	r3, r4
    62c8:	d020      	beq.n	630c <__aeabi_dmul+0x194>
    62ca:	2c00      	cmp	r4, #0
    62cc:	d100      	bne.n	62d0 <__aeabi_dmul+0x158>
    62ce:	e157      	b.n	6580 <__aeabi_dmul+0x408>
    62d0:	0020      	movs	r0, r4
    62d2:	f000 fe1f 	bl	6f14 <__clzsi2>
    62d6:	0003      	movs	r3, r0
    62d8:	3b0b      	subs	r3, #11
    62da:	2b1c      	cmp	r3, #28
    62dc:	dd00      	ble.n	62e0 <__aeabi_dmul+0x168>
    62de:	e149      	b.n	6574 <__aeabi_dmul+0x3fc>
    62e0:	211d      	movs	r1, #29
    62e2:	1acb      	subs	r3, r1, r3
    62e4:	4651      	mov	r1, sl
    62e6:	0002      	movs	r2, r0
    62e8:	40d9      	lsrs	r1, r3
    62ea:	4653      	mov	r3, sl
    62ec:	3a08      	subs	r2, #8
    62ee:	4094      	lsls	r4, r2
    62f0:	4093      	lsls	r3, r2
    62f2:	430c      	orrs	r4, r1
    62f4:	4a1b      	ldr	r2, [pc, #108]	; (6364 <__aeabi_dmul+0x1ec>)
    62f6:	1a12      	subs	r2, r2, r0
    62f8:	2000      	movs	r0, #0
    62fa:	e77a      	b.n	61f2 <__aeabi_dmul+0x7a>
    62fc:	2501      	movs	r5, #1
    62fe:	9b01      	ldr	r3, [sp, #4]
    6300:	4c14      	ldr	r4, [pc, #80]	; (6354 <__aeabi_dmul+0x1dc>)
    6302:	401d      	ands	r5, r3
    6304:	2300      	movs	r3, #0
    6306:	2200      	movs	r2, #0
    6308:	4699      	mov	r9, r3
    630a:	e79c      	b.n	6246 <__aeabi_dmul+0xce>
    630c:	2400      	movs	r4, #0
    630e:	2200      	movs	r2, #0
    6310:	2001      	movs	r0, #1
    6312:	e76e      	b.n	61f2 <__aeabi_dmul+0x7a>
    6314:	4653      	mov	r3, sl
    6316:	2003      	movs	r0, #3
    6318:	e76b      	b.n	61f2 <__aeabi_dmul+0x7a>
    631a:	2300      	movs	r3, #0
    631c:	469b      	mov	fp, r3
    631e:	3301      	adds	r3, #1
    6320:	2704      	movs	r7, #4
    6322:	2600      	movs	r6, #0
    6324:	9302      	str	r3, [sp, #8]
    6326:	e74c      	b.n	61c2 <__aeabi_dmul+0x4a>
    6328:	2303      	movs	r3, #3
    632a:	4681      	mov	r9, r0
    632c:	270c      	movs	r7, #12
    632e:	9302      	str	r3, [sp, #8]
    6330:	e747      	b.n	61c2 <__aeabi_dmul+0x4a>
    6332:	2280      	movs	r2, #128	; 0x80
    6334:	2300      	movs	r3, #0
    6336:	2500      	movs	r5, #0
    6338:	0312      	lsls	r2, r2, #12
    633a:	4699      	mov	r9, r3
    633c:	4c05      	ldr	r4, [pc, #20]	; (6354 <__aeabi_dmul+0x1dc>)
    633e:	e782      	b.n	6246 <__aeabi_dmul+0xce>
    6340:	465c      	mov	r4, fp
    6342:	464b      	mov	r3, r9
    6344:	9802      	ldr	r0, [sp, #8]
    6346:	e76f      	b.n	6228 <__aeabi_dmul+0xb0>
    6348:	465c      	mov	r4, fp
    634a:	464b      	mov	r3, r9
    634c:	9501      	str	r5, [sp, #4]
    634e:	9802      	ldr	r0, [sp, #8]
    6350:	e76a      	b.n	6228 <__aeabi_dmul+0xb0>
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	000007ff 	.word	0x000007ff
    6358:	fffffc01 	.word	0xfffffc01
    635c:	00007494 	.word	0x00007494
    6360:	800fffff 	.word	0x800fffff
    6364:	fffffc0d 	.word	0xfffffc0d
    6368:	464a      	mov	r2, r9
    636a:	4649      	mov	r1, r9
    636c:	0c17      	lsrs	r7, r2, #16
    636e:	0c1a      	lsrs	r2, r3, #16
    6370:	041b      	lsls	r3, r3, #16
    6372:	0c1b      	lsrs	r3, r3, #16
    6374:	0408      	lsls	r0, r1, #16
    6376:	0019      	movs	r1, r3
    6378:	0c00      	lsrs	r0, r0, #16
    637a:	4341      	muls	r1, r0
    637c:	0015      	movs	r5, r2
    637e:	4688      	mov	r8, r1
    6380:	0019      	movs	r1, r3
    6382:	437d      	muls	r5, r7
    6384:	4379      	muls	r1, r7
    6386:	9503      	str	r5, [sp, #12]
    6388:	4689      	mov	r9, r1
    638a:	0029      	movs	r1, r5
    638c:	0015      	movs	r5, r2
    638e:	4345      	muls	r5, r0
    6390:	444d      	add	r5, r9
    6392:	9502      	str	r5, [sp, #8]
    6394:	4645      	mov	r5, r8
    6396:	0c2d      	lsrs	r5, r5, #16
    6398:	46aa      	mov	sl, r5
    639a:	9d02      	ldr	r5, [sp, #8]
    639c:	4455      	add	r5, sl
    639e:	45a9      	cmp	r9, r5
    63a0:	d906      	bls.n	63b0 <__aeabi_dmul+0x238>
    63a2:	468a      	mov	sl, r1
    63a4:	2180      	movs	r1, #128	; 0x80
    63a6:	0249      	lsls	r1, r1, #9
    63a8:	4689      	mov	r9, r1
    63aa:	44ca      	add	sl, r9
    63ac:	4651      	mov	r1, sl
    63ae:	9103      	str	r1, [sp, #12]
    63b0:	0c29      	lsrs	r1, r5, #16
    63b2:	9104      	str	r1, [sp, #16]
    63b4:	4641      	mov	r1, r8
    63b6:	0409      	lsls	r1, r1, #16
    63b8:	042d      	lsls	r5, r5, #16
    63ba:	0c09      	lsrs	r1, r1, #16
    63bc:	4688      	mov	r8, r1
    63be:	0029      	movs	r1, r5
    63c0:	0c25      	lsrs	r5, r4, #16
    63c2:	0424      	lsls	r4, r4, #16
    63c4:	4441      	add	r1, r8
    63c6:	0c24      	lsrs	r4, r4, #16
    63c8:	9105      	str	r1, [sp, #20]
    63ca:	0021      	movs	r1, r4
    63cc:	4341      	muls	r1, r0
    63ce:	4688      	mov	r8, r1
    63d0:	0021      	movs	r1, r4
    63d2:	4379      	muls	r1, r7
    63d4:	468a      	mov	sl, r1
    63d6:	4368      	muls	r0, r5
    63d8:	4641      	mov	r1, r8
    63da:	4450      	add	r0, sl
    63dc:	4681      	mov	r9, r0
    63de:	0c08      	lsrs	r0, r1, #16
    63e0:	4448      	add	r0, r9
    63e2:	436f      	muls	r7, r5
    63e4:	4582      	cmp	sl, r0
    63e6:	d903      	bls.n	63f0 <__aeabi_dmul+0x278>
    63e8:	2180      	movs	r1, #128	; 0x80
    63ea:	0249      	lsls	r1, r1, #9
    63ec:	4689      	mov	r9, r1
    63ee:	444f      	add	r7, r9
    63f0:	0c01      	lsrs	r1, r0, #16
    63f2:	4689      	mov	r9, r1
    63f4:	0039      	movs	r1, r7
    63f6:	4449      	add	r1, r9
    63f8:	9102      	str	r1, [sp, #8]
    63fa:	4641      	mov	r1, r8
    63fc:	040f      	lsls	r7, r1, #16
    63fe:	9904      	ldr	r1, [sp, #16]
    6400:	0c3f      	lsrs	r7, r7, #16
    6402:	4688      	mov	r8, r1
    6404:	0400      	lsls	r0, r0, #16
    6406:	19c0      	adds	r0, r0, r7
    6408:	4480      	add	r8, r0
    640a:	4641      	mov	r1, r8
    640c:	9104      	str	r1, [sp, #16]
    640e:	4659      	mov	r1, fp
    6410:	0c0f      	lsrs	r7, r1, #16
    6412:	0409      	lsls	r1, r1, #16
    6414:	0c09      	lsrs	r1, r1, #16
    6416:	4688      	mov	r8, r1
    6418:	4359      	muls	r1, r3
    641a:	468a      	mov	sl, r1
    641c:	0039      	movs	r1, r7
    641e:	4351      	muls	r1, r2
    6420:	4689      	mov	r9, r1
    6422:	4641      	mov	r1, r8
    6424:	434a      	muls	r2, r1
    6426:	4651      	mov	r1, sl
    6428:	0c09      	lsrs	r1, r1, #16
    642a:	468b      	mov	fp, r1
    642c:	437b      	muls	r3, r7
    642e:	18d2      	adds	r2, r2, r3
    6430:	445a      	add	r2, fp
    6432:	4293      	cmp	r3, r2
    6434:	d903      	bls.n	643e <__aeabi_dmul+0x2c6>
    6436:	2380      	movs	r3, #128	; 0x80
    6438:	025b      	lsls	r3, r3, #9
    643a:	469b      	mov	fp, r3
    643c:	44d9      	add	r9, fp
    643e:	4651      	mov	r1, sl
    6440:	0409      	lsls	r1, r1, #16
    6442:	0c09      	lsrs	r1, r1, #16
    6444:	468a      	mov	sl, r1
    6446:	4641      	mov	r1, r8
    6448:	4361      	muls	r1, r4
    644a:	437c      	muls	r4, r7
    644c:	0c13      	lsrs	r3, r2, #16
    644e:	0412      	lsls	r2, r2, #16
    6450:	444b      	add	r3, r9
    6452:	4452      	add	r2, sl
    6454:	46a1      	mov	r9, r4
    6456:	468a      	mov	sl, r1
    6458:	003c      	movs	r4, r7
    645a:	4641      	mov	r1, r8
    645c:	436c      	muls	r4, r5
    645e:	434d      	muls	r5, r1
    6460:	4651      	mov	r1, sl
    6462:	444d      	add	r5, r9
    6464:	0c0f      	lsrs	r7, r1, #16
    6466:	197d      	adds	r5, r7, r5
    6468:	45a9      	cmp	r9, r5
    646a:	d903      	bls.n	6474 <__aeabi_dmul+0x2fc>
    646c:	2180      	movs	r1, #128	; 0x80
    646e:	0249      	lsls	r1, r1, #9
    6470:	4688      	mov	r8, r1
    6472:	4444      	add	r4, r8
    6474:	9f04      	ldr	r7, [sp, #16]
    6476:	9903      	ldr	r1, [sp, #12]
    6478:	46b8      	mov	r8, r7
    647a:	4441      	add	r1, r8
    647c:	468b      	mov	fp, r1
    647e:	4583      	cmp	fp, r0
    6480:	4180      	sbcs	r0, r0
    6482:	4241      	negs	r1, r0
    6484:	4688      	mov	r8, r1
    6486:	4651      	mov	r1, sl
    6488:	0408      	lsls	r0, r1, #16
    648a:	042f      	lsls	r7, r5, #16
    648c:	0c00      	lsrs	r0, r0, #16
    648e:	183f      	adds	r7, r7, r0
    6490:	4658      	mov	r0, fp
    6492:	9902      	ldr	r1, [sp, #8]
    6494:	1810      	adds	r0, r2, r0
    6496:	4689      	mov	r9, r1
    6498:	4290      	cmp	r0, r2
    649a:	4192      	sbcs	r2, r2
    649c:	444f      	add	r7, r9
    649e:	46ba      	mov	sl, r7
    64a0:	4252      	negs	r2, r2
    64a2:	4699      	mov	r9, r3
    64a4:	4693      	mov	fp, r2
    64a6:	44c2      	add	sl, r8
    64a8:	44d1      	add	r9, sl
    64aa:	44cb      	add	fp, r9
    64ac:	428f      	cmp	r7, r1
    64ae:	41bf      	sbcs	r7, r7
    64b0:	45c2      	cmp	sl, r8
    64b2:	4189      	sbcs	r1, r1
    64b4:	4599      	cmp	r9, r3
    64b6:	419b      	sbcs	r3, r3
    64b8:	4593      	cmp	fp, r2
    64ba:	4192      	sbcs	r2, r2
    64bc:	427f      	negs	r7, r7
    64be:	4249      	negs	r1, r1
    64c0:	0c2d      	lsrs	r5, r5, #16
    64c2:	4252      	negs	r2, r2
    64c4:	430f      	orrs	r7, r1
    64c6:	425b      	negs	r3, r3
    64c8:	4313      	orrs	r3, r2
    64ca:	197f      	adds	r7, r7, r5
    64cc:	18ff      	adds	r7, r7, r3
    64ce:	465b      	mov	r3, fp
    64d0:	193c      	adds	r4, r7, r4
    64d2:	0ddb      	lsrs	r3, r3, #23
    64d4:	9a05      	ldr	r2, [sp, #20]
    64d6:	0264      	lsls	r4, r4, #9
    64d8:	431c      	orrs	r4, r3
    64da:	0243      	lsls	r3, r0, #9
    64dc:	4313      	orrs	r3, r2
    64de:	1e5d      	subs	r5, r3, #1
    64e0:	41ab      	sbcs	r3, r5
    64e2:	465a      	mov	r2, fp
    64e4:	0dc0      	lsrs	r0, r0, #23
    64e6:	4303      	orrs	r3, r0
    64e8:	0252      	lsls	r2, r2, #9
    64ea:	4313      	orrs	r3, r2
    64ec:	01e2      	lsls	r2, r4, #7
    64ee:	d556      	bpl.n	659e <__aeabi_dmul+0x426>
    64f0:	2001      	movs	r0, #1
    64f2:	085a      	lsrs	r2, r3, #1
    64f4:	4003      	ands	r3, r0
    64f6:	4313      	orrs	r3, r2
    64f8:	07e2      	lsls	r2, r4, #31
    64fa:	4313      	orrs	r3, r2
    64fc:	0864      	lsrs	r4, r4, #1
    64fe:	485a      	ldr	r0, [pc, #360]	; (6668 <__aeabi_dmul+0x4f0>)
    6500:	4460      	add	r0, ip
    6502:	2800      	cmp	r0, #0
    6504:	dd4d      	ble.n	65a2 <__aeabi_dmul+0x42a>
    6506:	075a      	lsls	r2, r3, #29
    6508:	d009      	beq.n	651e <__aeabi_dmul+0x3a6>
    650a:	220f      	movs	r2, #15
    650c:	401a      	ands	r2, r3
    650e:	2a04      	cmp	r2, #4
    6510:	d005      	beq.n	651e <__aeabi_dmul+0x3a6>
    6512:	1d1a      	adds	r2, r3, #4
    6514:	429a      	cmp	r2, r3
    6516:	419b      	sbcs	r3, r3
    6518:	425b      	negs	r3, r3
    651a:	18e4      	adds	r4, r4, r3
    651c:	0013      	movs	r3, r2
    651e:	01e2      	lsls	r2, r4, #7
    6520:	d504      	bpl.n	652c <__aeabi_dmul+0x3b4>
    6522:	2080      	movs	r0, #128	; 0x80
    6524:	4a51      	ldr	r2, [pc, #324]	; (666c <__aeabi_dmul+0x4f4>)
    6526:	00c0      	lsls	r0, r0, #3
    6528:	4014      	ands	r4, r2
    652a:	4460      	add	r0, ip
    652c:	4a50      	ldr	r2, [pc, #320]	; (6670 <__aeabi_dmul+0x4f8>)
    652e:	4290      	cmp	r0, r2
    6530:	dd00      	ble.n	6534 <__aeabi_dmul+0x3bc>
    6532:	e6e3      	b.n	62fc <__aeabi_dmul+0x184>
    6534:	2501      	movs	r5, #1
    6536:	08db      	lsrs	r3, r3, #3
    6538:	0762      	lsls	r2, r4, #29
    653a:	431a      	orrs	r2, r3
    653c:	0264      	lsls	r4, r4, #9
    653e:	9b01      	ldr	r3, [sp, #4]
    6540:	4691      	mov	r9, r2
    6542:	0b22      	lsrs	r2, r4, #12
    6544:	0544      	lsls	r4, r0, #21
    6546:	0d64      	lsrs	r4, r4, #21
    6548:	401d      	ands	r5, r3
    654a:	e67c      	b.n	6246 <__aeabi_dmul+0xce>
    654c:	2280      	movs	r2, #128	; 0x80
    654e:	4659      	mov	r1, fp
    6550:	0312      	lsls	r2, r2, #12
    6552:	4211      	tst	r1, r2
    6554:	d008      	beq.n	6568 <__aeabi_dmul+0x3f0>
    6556:	4214      	tst	r4, r2
    6558:	d106      	bne.n	6568 <__aeabi_dmul+0x3f0>
    655a:	4322      	orrs	r2, r4
    655c:	0312      	lsls	r2, r2, #12
    655e:	0b12      	lsrs	r2, r2, #12
    6560:	4645      	mov	r5, r8
    6562:	4699      	mov	r9, r3
    6564:	4c43      	ldr	r4, [pc, #268]	; (6674 <__aeabi_dmul+0x4fc>)
    6566:	e66e      	b.n	6246 <__aeabi_dmul+0xce>
    6568:	465b      	mov	r3, fp
    656a:	431a      	orrs	r2, r3
    656c:	0312      	lsls	r2, r2, #12
    656e:	0b12      	lsrs	r2, r2, #12
    6570:	4c40      	ldr	r4, [pc, #256]	; (6674 <__aeabi_dmul+0x4fc>)
    6572:	e668      	b.n	6246 <__aeabi_dmul+0xce>
    6574:	0003      	movs	r3, r0
    6576:	4654      	mov	r4, sl
    6578:	3b28      	subs	r3, #40	; 0x28
    657a:	409c      	lsls	r4, r3
    657c:	2300      	movs	r3, #0
    657e:	e6b9      	b.n	62f4 <__aeabi_dmul+0x17c>
    6580:	f000 fcc8 	bl	6f14 <__clzsi2>
    6584:	3020      	adds	r0, #32
    6586:	e6a6      	b.n	62d6 <__aeabi_dmul+0x15e>
    6588:	0003      	movs	r3, r0
    658a:	3b28      	subs	r3, #40	; 0x28
    658c:	409f      	lsls	r7, r3
    658e:	2300      	movs	r3, #0
    6590:	46bb      	mov	fp, r7
    6592:	4699      	mov	r9, r3
    6594:	e68a      	b.n	62ac <__aeabi_dmul+0x134>
    6596:	f000 fcbd 	bl	6f14 <__clzsi2>
    659a:	3020      	adds	r0, #32
    659c:	e674      	b.n	6288 <__aeabi_dmul+0x110>
    659e:	46b4      	mov	ip, r6
    65a0:	e7ad      	b.n	64fe <__aeabi_dmul+0x386>
    65a2:	2501      	movs	r5, #1
    65a4:	1a2a      	subs	r2, r5, r0
    65a6:	2a38      	cmp	r2, #56	; 0x38
    65a8:	dd06      	ble.n	65b8 <__aeabi_dmul+0x440>
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	2400      	movs	r4, #0
    65ae:	401d      	ands	r5, r3
    65b0:	2300      	movs	r3, #0
    65b2:	2200      	movs	r2, #0
    65b4:	4699      	mov	r9, r3
    65b6:	e646      	b.n	6246 <__aeabi_dmul+0xce>
    65b8:	2a1f      	cmp	r2, #31
    65ba:	dc21      	bgt.n	6600 <__aeabi_dmul+0x488>
    65bc:	2520      	movs	r5, #32
    65be:	0020      	movs	r0, r4
    65c0:	1aad      	subs	r5, r5, r2
    65c2:	001e      	movs	r6, r3
    65c4:	40ab      	lsls	r3, r5
    65c6:	40a8      	lsls	r0, r5
    65c8:	40d6      	lsrs	r6, r2
    65ca:	1e5d      	subs	r5, r3, #1
    65cc:	41ab      	sbcs	r3, r5
    65ce:	4330      	orrs	r0, r6
    65d0:	4318      	orrs	r0, r3
    65d2:	40d4      	lsrs	r4, r2
    65d4:	0743      	lsls	r3, r0, #29
    65d6:	d009      	beq.n	65ec <__aeabi_dmul+0x474>
    65d8:	230f      	movs	r3, #15
    65da:	4003      	ands	r3, r0
    65dc:	2b04      	cmp	r3, #4
    65de:	d005      	beq.n	65ec <__aeabi_dmul+0x474>
    65e0:	0003      	movs	r3, r0
    65e2:	1d18      	adds	r0, r3, #4
    65e4:	4298      	cmp	r0, r3
    65e6:	419b      	sbcs	r3, r3
    65e8:	425b      	negs	r3, r3
    65ea:	18e4      	adds	r4, r4, r3
    65ec:	0223      	lsls	r3, r4, #8
    65ee:	d521      	bpl.n	6634 <__aeabi_dmul+0x4bc>
    65f0:	2501      	movs	r5, #1
    65f2:	9b01      	ldr	r3, [sp, #4]
    65f4:	2401      	movs	r4, #1
    65f6:	401d      	ands	r5, r3
    65f8:	2300      	movs	r3, #0
    65fa:	2200      	movs	r2, #0
    65fc:	4699      	mov	r9, r3
    65fe:	e622      	b.n	6246 <__aeabi_dmul+0xce>
    6600:	251f      	movs	r5, #31
    6602:	0021      	movs	r1, r4
    6604:	426d      	negs	r5, r5
    6606:	1a28      	subs	r0, r5, r0
    6608:	40c1      	lsrs	r1, r0
    660a:	0008      	movs	r0, r1
    660c:	2a20      	cmp	r2, #32
    660e:	d01d      	beq.n	664c <__aeabi_dmul+0x4d4>
    6610:	355f      	adds	r5, #95	; 0x5f
    6612:	1aaa      	subs	r2, r5, r2
    6614:	4094      	lsls	r4, r2
    6616:	4323      	orrs	r3, r4
    6618:	1e5c      	subs	r4, r3, #1
    661a:	41a3      	sbcs	r3, r4
    661c:	2507      	movs	r5, #7
    661e:	4303      	orrs	r3, r0
    6620:	401d      	ands	r5, r3
    6622:	2200      	movs	r2, #0
    6624:	2d00      	cmp	r5, #0
    6626:	d009      	beq.n	663c <__aeabi_dmul+0x4c4>
    6628:	220f      	movs	r2, #15
    662a:	2400      	movs	r4, #0
    662c:	401a      	ands	r2, r3
    662e:	0018      	movs	r0, r3
    6630:	2a04      	cmp	r2, #4
    6632:	d1d6      	bne.n	65e2 <__aeabi_dmul+0x46a>
    6634:	0003      	movs	r3, r0
    6636:	0765      	lsls	r5, r4, #29
    6638:	0264      	lsls	r4, r4, #9
    663a:	0b22      	lsrs	r2, r4, #12
    663c:	08db      	lsrs	r3, r3, #3
    663e:	432b      	orrs	r3, r5
    6640:	2501      	movs	r5, #1
    6642:	4699      	mov	r9, r3
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	2400      	movs	r4, #0
    6648:	401d      	ands	r5, r3
    664a:	e5fc      	b.n	6246 <__aeabi_dmul+0xce>
    664c:	2400      	movs	r4, #0
    664e:	e7e2      	b.n	6616 <__aeabi_dmul+0x49e>
    6650:	2280      	movs	r2, #128	; 0x80
    6652:	2501      	movs	r5, #1
    6654:	0312      	lsls	r2, r2, #12
    6656:	4322      	orrs	r2, r4
    6658:	9901      	ldr	r1, [sp, #4]
    665a:	0312      	lsls	r2, r2, #12
    665c:	0b12      	lsrs	r2, r2, #12
    665e:	400d      	ands	r5, r1
    6660:	4699      	mov	r9, r3
    6662:	4c04      	ldr	r4, [pc, #16]	; (6674 <__aeabi_dmul+0x4fc>)
    6664:	e5ef      	b.n	6246 <__aeabi_dmul+0xce>
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	000003ff 	.word	0x000003ff
    666c:	feffffff 	.word	0xfeffffff
    6670:	000007fe 	.word	0x000007fe
    6674:	000007ff 	.word	0x000007ff

00006678 <__aeabi_dsub>:
    6678:	b5f0      	push	{r4, r5, r6, r7, lr}
    667a:	4646      	mov	r6, r8
    667c:	46d6      	mov	lr, sl
    667e:	464f      	mov	r7, r9
    6680:	030c      	lsls	r4, r1, #12
    6682:	b5c0      	push	{r6, r7, lr}
    6684:	0fcd      	lsrs	r5, r1, #31
    6686:	004e      	lsls	r6, r1, #1
    6688:	0a61      	lsrs	r1, r4, #9
    668a:	0f44      	lsrs	r4, r0, #29
    668c:	430c      	orrs	r4, r1
    668e:	00c1      	lsls	r1, r0, #3
    6690:	0058      	lsls	r0, r3, #1
    6692:	0d40      	lsrs	r0, r0, #21
    6694:	4684      	mov	ip, r0
    6696:	468a      	mov	sl, r1
    6698:	000f      	movs	r7, r1
    669a:	0319      	lsls	r1, r3, #12
    669c:	0f50      	lsrs	r0, r2, #29
    669e:	0a49      	lsrs	r1, r1, #9
    66a0:	4301      	orrs	r1, r0
    66a2:	48c6      	ldr	r0, [pc, #792]	; (69bc <__aeabi_dsub+0x344>)
    66a4:	0d76      	lsrs	r6, r6, #21
    66a6:	46a8      	mov	r8, r5
    66a8:	0fdb      	lsrs	r3, r3, #31
    66aa:	00d2      	lsls	r2, r2, #3
    66ac:	4584      	cmp	ip, r0
    66ae:	d100      	bne.n	66b2 <__aeabi_dsub+0x3a>
    66b0:	e0d8      	b.n	6864 <__aeabi_dsub+0x1ec>
    66b2:	2001      	movs	r0, #1
    66b4:	4043      	eors	r3, r0
    66b6:	42ab      	cmp	r3, r5
    66b8:	d100      	bne.n	66bc <__aeabi_dsub+0x44>
    66ba:	e0a6      	b.n	680a <__aeabi_dsub+0x192>
    66bc:	4660      	mov	r0, ip
    66be:	1a35      	subs	r5, r6, r0
    66c0:	2d00      	cmp	r5, #0
    66c2:	dc00      	bgt.n	66c6 <__aeabi_dsub+0x4e>
    66c4:	e105      	b.n	68d2 <__aeabi_dsub+0x25a>
    66c6:	2800      	cmp	r0, #0
    66c8:	d110      	bne.n	66ec <__aeabi_dsub+0x74>
    66ca:	000b      	movs	r3, r1
    66cc:	4313      	orrs	r3, r2
    66ce:	d100      	bne.n	66d2 <__aeabi_dsub+0x5a>
    66d0:	e0d7      	b.n	6882 <__aeabi_dsub+0x20a>
    66d2:	1e6b      	subs	r3, r5, #1
    66d4:	2b00      	cmp	r3, #0
    66d6:	d000      	beq.n	66da <__aeabi_dsub+0x62>
    66d8:	e14b      	b.n	6972 <__aeabi_dsub+0x2fa>
    66da:	4653      	mov	r3, sl
    66dc:	1a9f      	subs	r7, r3, r2
    66de:	45ba      	cmp	sl, r7
    66e0:	4180      	sbcs	r0, r0
    66e2:	1a64      	subs	r4, r4, r1
    66e4:	4240      	negs	r0, r0
    66e6:	1a24      	subs	r4, r4, r0
    66e8:	2601      	movs	r6, #1
    66ea:	e01e      	b.n	672a <__aeabi_dsub+0xb2>
    66ec:	4bb3      	ldr	r3, [pc, #716]	; (69bc <__aeabi_dsub+0x344>)
    66ee:	429e      	cmp	r6, r3
    66f0:	d048      	beq.n	6784 <__aeabi_dsub+0x10c>
    66f2:	2380      	movs	r3, #128	; 0x80
    66f4:	041b      	lsls	r3, r3, #16
    66f6:	4319      	orrs	r1, r3
    66f8:	2d38      	cmp	r5, #56	; 0x38
    66fa:	dd00      	ble.n	66fe <__aeabi_dsub+0x86>
    66fc:	e119      	b.n	6932 <__aeabi_dsub+0x2ba>
    66fe:	2d1f      	cmp	r5, #31
    6700:	dd00      	ble.n	6704 <__aeabi_dsub+0x8c>
    6702:	e14c      	b.n	699e <__aeabi_dsub+0x326>
    6704:	2320      	movs	r3, #32
    6706:	000f      	movs	r7, r1
    6708:	1b5b      	subs	r3, r3, r5
    670a:	0010      	movs	r0, r2
    670c:	409a      	lsls	r2, r3
    670e:	409f      	lsls	r7, r3
    6710:	40e8      	lsrs	r0, r5
    6712:	1e53      	subs	r3, r2, #1
    6714:	419a      	sbcs	r2, r3
    6716:	40e9      	lsrs	r1, r5
    6718:	4307      	orrs	r7, r0
    671a:	4317      	orrs	r7, r2
    671c:	4653      	mov	r3, sl
    671e:	1bdf      	subs	r7, r3, r7
    6720:	1a61      	subs	r1, r4, r1
    6722:	45ba      	cmp	sl, r7
    6724:	41a4      	sbcs	r4, r4
    6726:	4264      	negs	r4, r4
    6728:	1b0c      	subs	r4, r1, r4
    672a:	0223      	lsls	r3, r4, #8
    672c:	d400      	bmi.n	6730 <__aeabi_dsub+0xb8>
    672e:	e0c5      	b.n	68bc <__aeabi_dsub+0x244>
    6730:	0264      	lsls	r4, r4, #9
    6732:	0a65      	lsrs	r5, r4, #9
    6734:	2d00      	cmp	r5, #0
    6736:	d100      	bne.n	673a <__aeabi_dsub+0xc2>
    6738:	e0f6      	b.n	6928 <__aeabi_dsub+0x2b0>
    673a:	0028      	movs	r0, r5
    673c:	f000 fbea 	bl	6f14 <__clzsi2>
    6740:	0003      	movs	r3, r0
    6742:	3b08      	subs	r3, #8
    6744:	2b1f      	cmp	r3, #31
    6746:	dd00      	ble.n	674a <__aeabi_dsub+0xd2>
    6748:	e0e9      	b.n	691e <__aeabi_dsub+0x2a6>
    674a:	2220      	movs	r2, #32
    674c:	003c      	movs	r4, r7
    674e:	1ad2      	subs	r2, r2, r3
    6750:	409d      	lsls	r5, r3
    6752:	40d4      	lsrs	r4, r2
    6754:	409f      	lsls	r7, r3
    6756:	4325      	orrs	r5, r4
    6758:	429e      	cmp	r6, r3
    675a:	dd00      	ble.n	675e <__aeabi_dsub+0xe6>
    675c:	e0db      	b.n	6916 <__aeabi_dsub+0x29e>
    675e:	1b9e      	subs	r6, r3, r6
    6760:	1c73      	adds	r3, r6, #1
    6762:	2b1f      	cmp	r3, #31
    6764:	dd00      	ble.n	6768 <__aeabi_dsub+0xf0>
    6766:	e10a      	b.n	697e <__aeabi_dsub+0x306>
    6768:	2220      	movs	r2, #32
    676a:	0038      	movs	r0, r7
    676c:	1ad2      	subs	r2, r2, r3
    676e:	0029      	movs	r1, r5
    6770:	4097      	lsls	r7, r2
    6772:	002c      	movs	r4, r5
    6774:	4091      	lsls	r1, r2
    6776:	40d8      	lsrs	r0, r3
    6778:	1e7a      	subs	r2, r7, #1
    677a:	4197      	sbcs	r7, r2
    677c:	40dc      	lsrs	r4, r3
    677e:	2600      	movs	r6, #0
    6780:	4301      	orrs	r1, r0
    6782:	430f      	orrs	r7, r1
    6784:	077b      	lsls	r3, r7, #29
    6786:	d009      	beq.n	679c <__aeabi_dsub+0x124>
    6788:	230f      	movs	r3, #15
    678a:	403b      	ands	r3, r7
    678c:	2b04      	cmp	r3, #4
    678e:	d005      	beq.n	679c <__aeabi_dsub+0x124>
    6790:	1d3b      	adds	r3, r7, #4
    6792:	42bb      	cmp	r3, r7
    6794:	41bf      	sbcs	r7, r7
    6796:	427f      	negs	r7, r7
    6798:	19e4      	adds	r4, r4, r7
    679a:	001f      	movs	r7, r3
    679c:	0223      	lsls	r3, r4, #8
    679e:	d525      	bpl.n	67ec <__aeabi_dsub+0x174>
    67a0:	4b86      	ldr	r3, [pc, #536]	; (69bc <__aeabi_dsub+0x344>)
    67a2:	3601      	adds	r6, #1
    67a4:	429e      	cmp	r6, r3
    67a6:	d100      	bne.n	67aa <__aeabi_dsub+0x132>
    67a8:	e0af      	b.n	690a <__aeabi_dsub+0x292>
    67aa:	4b85      	ldr	r3, [pc, #532]	; (69c0 <__aeabi_dsub+0x348>)
    67ac:	2501      	movs	r5, #1
    67ae:	401c      	ands	r4, r3
    67b0:	4643      	mov	r3, r8
    67b2:	0762      	lsls	r2, r4, #29
    67b4:	08ff      	lsrs	r7, r7, #3
    67b6:	0264      	lsls	r4, r4, #9
    67b8:	0576      	lsls	r6, r6, #21
    67ba:	4317      	orrs	r7, r2
    67bc:	0b24      	lsrs	r4, r4, #12
    67be:	0d76      	lsrs	r6, r6, #21
    67c0:	401d      	ands	r5, r3
    67c2:	2100      	movs	r1, #0
    67c4:	0324      	lsls	r4, r4, #12
    67c6:	0b23      	lsrs	r3, r4, #12
    67c8:	0d0c      	lsrs	r4, r1, #20
    67ca:	4a7e      	ldr	r2, [pc, #504]	; (69c4 <__aeabi_dsub+0x34c>)
    67cc:	0524      	lsls	r4, r4, #20
    67ce:	431c      	orrs	r4, r3
    67d0:	4014      	ands	r4, r2
    67d2:	0533      	lsls	r3, r6, #20
    67d4:	4323      	orrs	r3, r4
    67d6:	005b      	lsls	r3, r3, #1
    67d8:	07ed      	lsls	r5, r5, #31
    67da:	085b      	lsrs	r3, r3, #1
    67dc:	432b      	orrs	r3, r5
    67de:	0038      	movs	r0, r7
    67e0:	0019      	movs	r1, r3
    67e2:	bc1c      	pop	{r2, r3, r4}
    67e4:	4690      	mov	r8, r2
    67e6:	4699      	mov	r9, r3
    67e8:	46a2      	mov	sl, r4
    67ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ec:	2501      	movs	r5, #1
    67ee:	4643      	mov	r3, r8
    67f0:	0762      	lsls	r2, r4, #29
    67f2:	08ff      	lsrs	r7, r7, #3
    67f4:	4317      	orrs	r7, r2
    67f6:	08e4      	lsrs	r4, r4, #3
    67f8:	401d      	ands	r5, r3
    67fa:	4b70      	ldr	r3, [pc, #448]	; (69bc <__aeabi_dsub+0x344>)
    67fc:	429e      	cmp	r6, r3
    67fe:	d036      	beq.n	686e <__aeabi_dsub+0x1f6>
    6800:	0324      	lsls	r4, r4, #12
    6802:	0576      	lsls	r6, r6, #21
    6804:	0b24      	lsrs	r4, r4, #12
    6806:	0d76      	lsrs	r6, r6, #21
    6808:	e7db      	b.n	67c2 <__aeabi_dsub+0x14a>
    680a:	4663      	mov	r3, ip
    680c:	1af3      	subs	r3, r6, r3
    680e:	2b00      	cmp	r3, #0
    6810:	dc00      	bgt.n	6814 <__aeabi_dsub+0x19c>
    6812:	e094      	b.n	693e <__aeabi_dsub+0x2c6>
    6814:	4660      	mov	r0, ip
    6816:	2800      	cmp	r0, #0
    6818:	d035      	beq.n	6886 <__aeabi_dsub+0x20e>
    681a:	4868      	ldr	r0, [pc, #416]	; (69bc <__aeabi_dsub+0x344>)
    681c:	4286      	cmp	r6, r0
    681e:	d0b1      	beq.n	6784 <__aeabi_dsub+0x10c>
    6820:	2780      	movs	r7, #128	; 0x80
    6822:	043f      	lsls	r7, r7, #16
    6824:	4339      	orrs	r1, r7
    6826:	2b38      	cmp	r3, #56	; 0x38
    6828:	dc00      	bgt.n	682c <__aeabi_dsub+0x1b4>
    682a:	e0fd      	b.n	6a28 <__aeabi_dsub+0x3b0>
    682c:	430a      	orrs	r2, r1
    682e:	0017      	movs	r7, r2
    6830:	2100      	movs	r1, #0
    6832:	1e7a      	subs	r2, r7, #1
    6834:	4197      	sbcs	r7, r2
    6836:	4457      	add	r7, sl
    6838:	4557      	cmp	r7, sl
    683a:	4180      	sbcs	r0, r0
    683c:	1909      	adds	r1, r1, r4
    683e:	4244      	negs	r4, r0
    6840:	190c      	adds	r4, r1, r4
    6842:	0223      	lsls	r3, r4, #8
    6844:	d53a      	bpl.n	68bc <__aeabi_dsub+0x244>
    6846:	4b5d      	ldr	r3, [pc, #372]	; (69bc <__aeabi_dsub+0x344>)
    6848:	3601      	adds	r6, #1
    684a:	429e      	cmp	r6, r3
    684c:	d100      	bne.n	6850 <__aeabi_dsub+0x1d8>
    684e:	e14b      	b.n	6ae8 <__aeabi_dsub+0x470>
    6850:	2201      	movs	r2, #1
    6852:	4b5b      	ldr	r3, [pc, #364]	; (69c0 <__aeabi_dsub+0x348>)
    6854:	401c      	ands	r4, r3
    6856:	087b      	lsrs	r3, r7, #1
    6858:	4017      	ands	r7, r2
    685a:	431f      	orrs	r7, r3
    685c:	07e2      	lsls	r2, r4, #31
    685e:	4317      	orrs	r7, r2
    6860:	0864      	lsrs	r4, r4, #1
    6862:	e78f      	b.n	6784 <__aeabi_dsub+0x10c>
    6864:	0008      	movs	r0, r1
    6866:	4310      	orrs	r0, r2
    6868:	d000      	beq.n	686c <__aeabi_dsub+0x1f4>
    686a:	e724      	b.n	66b6 <__aeabi_dsub+0x3e>
    686c:	e721      	b.n	66b2 <__aeabi_dsub+0x3a>
    686e:	0023      	movs	r3, r4
    6870:	433b      	orrs	r3, r7
    6872:	d100      	bne.n	6876 <__aeabi_dsub+0x1fe>
    6874:	e1b9      	b.n	6bea <__aeabi_dsub+0x572>
    6876:	2280      	movs	r2, #128	; 0x80
    6878:	0312      	lsls	r2, r2, #12
    687a:	4314      	orrs	r4, r2
    687c:	0324      	lsls	r4, r4, #12
    687e:	0b24      	lsrs	r4, r4, #12
    6880:	e79f      	b.n	67c2 <__aeabi_dsub+0x14a>
    6882:	002e      	movs	r6, r5
    6884:	e77e      	b.n	6784 <__aeabi_dsub+0x10c>
    6886:	0008      	movs	r0, r1
    6888:	4310      	orrs	r0, r2
    688a:	d100      	bne.n	688e <__aeabi_dsub+0x216>
    688c:	e0ca      	b.n	6a24 <__aeabi_dsub+0x3ac>
    688e:	1e58      	subs	r0, r3, #1
    6890:	4684      	mov	ip, r0
    6892:	2800      	cmp	r0, #0
    6894:	d000      	beq.n	6898 <__aeabi_dsub+0x220>
    6896:	e0e7      	b.n	6a68 <__aeabi_dsub+0x3f0>
    6898:	4452      	add	r2, sl
    689a:	4552      	cmp	r2, sl
    689c:	4180      	sbcs	r0, r0
    689e:	1864      	adds	r4, r4, r1
    68a0:	4240      	negs	r0, r0
    68a2:	1824      	adds	r4, r4, r0
    68a4:	0017      	movs	r7, r2
    68a6:	2601      	movs	r6, #1
    68a8:	0223      	lsls	r3, r4, #8
    68aa:	d507      	bpl.n	68bc <__aeabi_dsub+0x244>
    68ac:	2602      	movs	r6, #2
    68ae:	e7cf      	b.n	6850 <__aeabi_dsub+0x1d8>
    68b0:	4664      	mov	r4, ip
    68b2:	432c      	orrs	r4, r5
    68b4:	d100      	bne.n	68b8 <__aeabi_dsub+0x240>
    68b6:	e1b3      	b.n	6c20 <__aeabi_dsub+0x5a8>
    68b8:	002c      	movs	r4, r5
    68ba:	4667      	mov	r7, ip
    68bc:	077b      	lsls	r3, r7, #29
    68be:	d000      	beq.n	68c2 <__aeabi_dsub+0x24a>
    68c0:	e762      	b.n	6788 <__aeabi_dsub+0x110>
    68c2:	0763      	lsls	r3, r4, #29
    68c4:	08ff      	lsrs	r7, r7, #3
    68c6:	431f      	orrs	r7, r3
    68c8:	2501      	movs	r5, #1
    68ca:	4643      	mov	r3, r8
    68cc:	08e4      	lsrs	r4, r4, #3
    68ce:	401d      	ands	r5, r3
    68d0:	e793      	b.n	67fa <__aeabi_dsub+0x182>
    68d2:	2d00      	cmp	r5, #0
    68d4:	d178      	bne.n	69c8 <__aeabi_dsub+0x350>
    68d6:	1c75      	adds	r5, r6, #1
    68d8:	056d      	lsls	r5, r5, #21
    68da:	0d6d      	lsrs	r5, r5, #21
    68dc:	2d01      	cmp	r5, #1
    68de:	dc00      	bgt.n	68e2 <__aeabi_dsub+0x26a>
    68e0:	e0f2      	b.n	6ac8 <__aeabi_dsub+0x450>
    68e2:	4650      	mov	r0, sl
    68e4:	1a80      	subs	r0, r0, r2
    68e6:	4582      	cmp	sl, r0
    68e8:	41bf      	sbcs	r7, r7
    68ea:	1a65      	subs	r5, r4, r1
    68ec:	427f      	negs	r7, r7
    68ee:	1bed      	subs	r5, r5, r7
    68f0:	4684      	mov	ip, r0
    68f2:	0228      	lsls	r0, r5, #8
    68f4:	d400      	bmi.n	68f8 <__aeabi_dsub+0x280>
    68f6:	e08c      	b.n	6a12 <__aeabi_dsub+0x39a>
    68f8:	4650      	mov	r0, sl
    68fa:	1a17      	subs	r7, r2, r0
    68fc:	42ba      	cmp	r2, r7
    68fe:	4192      	sbcs	r2, r2
    6900:	1b0c      	subs	r4, r1, r4
    6902:	4255      	negs	r5, r2
    6904:	1b65      	subs	r5, r4, r5
    6906:	4698      	mov	r8, r3
    6908:	e714      	b.n	6734 <__aeabi_dsub+0xbc>
    690a:	2501      	movs	r5, #1
    690c:	4643      	mov	r3, r8
    690e:	2400      	movs	r4, #0
    6910:	401d      	ands	r5, r3
    6912:	2700      	movs	r7, #0
    6914:	e755      	b.n	67c2 <__aeabi_dsub+0x14a>
    6916:	4c2a      	ldr	r4, [pc, #168]	; (69c0 <__aeabi_dsub+0x348>)
    6918:	1af6      	subs	r6, r6, r3
    691a:	402c      	ands	r4, r5
    691c:	e732      	b.n	6784 <__aeabi_dsub+0x10c>
    691e:	003d      	movs	r5, r7
    6920:	3828      	subs	r0, #40	; 0x28
    6922:	4085      	lsls	r5, r0
    6924:	2700      	movs	r7, #0
    6926:	e717      	b.n	6758 <__aeabi_dsub+0xe0>
    6928:	0038      	movs	r0, r7
    692a:	f000 faf3 	bl	6f14 <__clzsi2>
    692e:	3020      	adds	r0, #32
    6930:	e706      	b.n	6740 <__aeabi_dsub+0xc8>
    6932:	430a      	orrs	r2, r1
    6934:	0017      	movs	r7, r2
    6936:	2100      	movs	r1, #0
    6938:	1e7a      	subs	r2, r7, #1
    693a:	4197      	sbcs	r7, r2
    693c:	e6ee      	b.n	671c <__aeabi_dsub+0xa4>
    693e:	2b00      	cmp	r3, #0
    6940:	d000      	beq.n	6944 <__aeabi_dsub+0x2cc>
    6942:	e0e5      	b.n	6b10 <__aeabi_dsub+0x498>
    6944:	1c73      	adds	r3, r6, #1
    6946:	469c      	mov	ip, r3
    6948:	055b      	lsls	r3, r3, #21
    694a:	0d5b      	lsrs	r3, r3, #21
    694c:	2b01      	cmp	r3, #1
    694e:	dc00      	bgt.n	6952 <__aeabi_dsub+0x2da>
    6950:	e09f      	b.n	6a92 <__aeabi_dsub+0x41a>
    6952:	4b1a      	ldr	r3, [pc, #104]	; (69bc <__aeabi_dsub+0x344>)
    6954:	459c      	cmp	ip, r3
    6956:	d100      	bne.n	695a <__aeabi_dsub+0x2e2>
    6958:	e0c5      	b.n	6ae6 <__aeabi_dsub+0x46e>
    695a:	4452      	add	r2, sl
    695c:	4552      	cmp	r2, sl
    695e:	4180      	sbcs	r0, r0
    6960:	1864      	adds	r4, r4, r1
    6962:	4240      	negs	r0, r0
    6964:	1824      	adds	r4, r4, r0
    6966:	07e7      	lsls	r7, r4, #31
    6968:	0852      	lsrs	r2, r2, #1
    696a:	4317      	orrs	r7, r2
    696c:	0864      	lsrs	r4, r4, #1
    696e:	4666      	mov	r6, ip
    6970:	e708      	b.n	6784 <__aeabi_dsub+0x10c>
    6972:	4812      	ldr	r0, [pc, #72]	; (69bc <__aeabi_dsub+0x344>)
    6974:	4285      	cmp	r5, r0
    6976:	d100      	bne.n	697a <__aeabi_dsub+0x302>
    6978:	e085      	b.n	6a86 <__aeabi_dsub+0x40e>
    697a:	001d      	movs	r5, r3
    697c:	e6bc      	b.n	66f8 <__aeabi_dsub+0x80>
    697e:	0029      	movs	r1, r5
    6980:	3e1f      	subs	r6, #31
    6982:	40f1      	lsrs	r1, r6
    6984:	2b20      	cmp	r3, #32
    6986:	d100      	bne.n	698a <__aeabi_dsub+0x312>
    6988:	e07f      	b.n	6a8a <__aeabi_dsub+0x412>
    698a:	2240      	movs	r2, #64	; 0x40
    698c:	1ad3      	subs	r3, r2, r3
    698e:	409d      	lsls	r5, r3
    6990:	432f      	orrs	r7, r5
    6992:	1e7d      	subs	r5, r7, #1
    6994:	41af      	sbcs	r7, r5
    6996:	2400      	movs	r4, #0
    6998:	430f      	orrs	r7, r1
    699a:	2600      	movs	r6, #0
    699c:	e78e      	b.n	68bc <__aeabi_dsub+0x244>
    699e:	002b      	movs	r3, r5
    69a0:	000f      	movs	r7, r1
    69a2:	3b20      	subs	r3, #32
    69a4:	40df      	lsrs	r7, r3
    69a6:	2d20      	cmp	r5, #32
    69a8:	d071      	beq.n	6a8e <__aeabi_dsub+0x416>
    69aa:	2340      	movs	r3, #64	; 0x40
    69ac:	1b5d      	subs	r5, r3, r5
    69ae:	40a9      	lsls	r1, r5
    69b0:	430a      	orrs	r2, r1
    69b2:	1e51      	subs	r1, r2, #1
    69b4:	418a      	sbcs	r2, r1
    69b6:	2100      	movs	r1, #0
    69b8:	4317      	orrs	r7, r2
    69ba:	e6af      	b.n	671c <__aeabi_dsub+0xa4>
    69bc:	000007ff 	.word	0x000007ff
    69c0:	ff7fffff 	.word	0xff7fffff
    69c4:	800fffff 	.word	0x800fffff
    69c8:	2e00      	cmp	r6, #0
    69ca:	d03e      	beq.n	6a4a <__aeabi_dsub+0x3d2>
    69cc:	4eb3      	ldr	r6, [pc, #716]	; (6c9c <__aeabi_dsub+0x624>)
    69ce:	45b4      	cmp	ip, r6
    69d0:	d045      	beq.n	6a5e <__aeabi_dsub+0x3e6>
    69d2:	2680      	movs	r6, #128	; 0x80
    69d4:	0436      	lsls	r6, r6, #16
    69d6:	426d      	negs	r5, r5
    69d8:	4334      	orrs	r4, r6
    69da:	2d38      	cmp	r5, #56	; 0x38
    69dc:	dd00      	ble.n	69e0 <__aeabi_dsub+0x368>
    69de:	e0a8      	b.n	6b32 <__aeabi_dsub+0x4ba>
    69e0:	2d1f      	cmp	r5, #31
    69e2:	dd00      	ble.n	69e6 <__aeabi_dsub+0x36e>
    69e4:	e11f      	b.n	6c26 <__aeabi_dsub+0x5ae>
    69e6:	2620      	movs	r6, #32
    69e8:	0027      	movs	r7, r4
    69ea:	4650      	mov	r0, sl
    69ec:	1b76      	subs	r6, r6, r5
    69ee:	40b7      	lsls	r7, r6
    69f0:	40e8      	lsrs	r0, r5
    69f2:	4307      	orrs	r7, r0
    69f4:	4650      	mov	r0, sl
    69f6:	40b0      	lsls	r0, r6
    69f8:	1e46      	subs	r6, r0, #1
    69fa:	41b0      	sbcs	r0, r6
    69fc:	40ec      	lsrs	r4, r5
    69fe:	4338      	orrs	r0, r7
    6a00:	1a17      	subs	r7, r2, r0
    6a02:	42ba      	cmp	r2, r7
    6a04:	4192      	sbcs	r2, r2
    6a06:	1b0c      	subs	r4, r1, r4
    6a08:	4252      	negs	r2, r2
    6a0a:	1aa4      	subs	r4, r4, r2
    6a0c:	4666      	mov	r6, ip
    6a0e:	4698      	mov	r8, r3
    6a10:	e68b      	b.n	672a <__aeabi_dsub+0xb2>
    6a12:	4664      	mov	r4, ip
    6a14:	4667      	mov	r7, ip
    6a16:	432c      	orrs	r4, r5
    6a18:	d000      	beq.n	6a1c <__aeabi_dsub+0x3a4>
    6a1a:	e68b      	b.n	6734 <__aeabi_dsub+0xbc>
    6a1c:	2500      	movs	r5, #0
    6a1e:	2600      	movs	r6, #0
    6a20:	2700      	movs	r7, #0
    6a22:	e6ea      	b.n	67fa <__aeabi_dsub+0x182>
    6a24:	001e      	movs	r6, r3
    6a26:	e6ad      	b.n	6784 <__aeabi_dsub+0x10c>
    6a28:	2b1f      	cmp	r3, #31
    6a2a:	dc60      	bgt.n	6aee <__aeabi_dsub+0x476>
    6a2c:	2720      	movs	r7, #32
    6a2e:	1af8      	subs	r0, r7, r3
    6a30:	000f      	movs	r7, r1
    6a32:	4684      	mov	ip, r0
    6a34:	4087      	lsls	r7, r0
    6a36:	0010      	movs	r0, r2
    6a38:	40d8      	lsrs	r0, r3
    6a3a:	4307      	orrs	r7, r0
    6a3c:	4660      	mov	r0, ip
    6a3e:	4082      	lsls	r2, r0
    6a40:	1e50      	subs	r0, r2, #1
    6a42:	4182      	sbcs	r2, r0
    6a44:	40d9      	lsrs	r1, r3
    6a46:	4317      	orrs	r7, r2
    6a48:	e6f5      	b.n	6836 <__aeabi_dsub+0x1be>
    6a4a:	0026      	movs	r6, r4
    6a4c:	4650      	mov	r0, sl
    6a4e:	4306      	orrs	r6, r0
    6a50:	d005      	beq.n	6a5e <__aeabi_dsub+0x3e6>
    6a52:	43ed      	mvns	r5, r5
    6a54:	2d00      	cmp	r5, #0
    6a56:	d0d3      	beq.n	6a00 <__aeabi_dsub+0x388>
    6a58:	4e90      	ldr	r6, [pc, #576]	; (6c9c <__aeabi_dsub+0x624>)
    6a5a:	45b4      	cmp	ip, r6
    6a5c:	d1bd      	bne.n	69da <__aeabi_dsub+0x362>
    6a5e:	000c      	movs	r4, r1
    6a60:	0017      	movs	r7, r2
    6a62:	4666      	mov	r6, ip
    6a64:	4698      	mov	r8, r3
    6a66:	e68d      	b.n	6784 <__aeabi_dsub+0x10c>
    6a68:	488c      	ldr	r0, [pc, #560]	; (6c9c <__aeabi_dsub+0x624>)
    6a6a:	4283      	cmp	r3, r0
    6a6c:	d00b      	beq.n	6a86 <__aeabi_dsub+0x40e>
    6a6e:	4663      	mov	r3, ip
    6a70:	e6d9      	b.n	6826 <__aeabi_dsub+0x1ae>
    6a72:	2d00      	cmp	r5, #0
    6a74:	d000      	beq.n	6a78 <__aeabi_dsub+0x400>
    6a76:	e096      	b.n	6ba6 <__aeabi_dsub+0x52e>
    6a78:	0008      	movs	r0, r1
    6a7a:	4310      	orrs	r0, r2
    6a7c:	d100      	bne.n	6a80 <__aeabi_dsub+0x408>
    6a7e:	e0e2      	b.n	6c46 <__aeabi_dsub+0x5ce>
    6a80:	000c      	movs	r4, r1
    6a82:	0017      	movs	r7, r2
    6a84:	4698      	mov	r8, r3
    6a86:	4e85      	ldr	r6, [pc, #532]	; (6c9c <__aeabi_dsub+0x624>)
    6a88:	e67c      	b.n	6784 <__aeabi_dsub+0x10c>
    6a8a:	2500      	movs	r5, #0
    6a8c:	e780      	b.n	6990 <__aeabi_dsub+0x318>
    6a8e:	2100      	movs	r1, #0
    6a90:	e78e      	b.n	69b0 <__aeabi_dsub+0x338>
    6a92:	0023      	movs	r3, r4
    6a94:	4650      	mov	r0, sl
    6a96:	4303      	orrs	r3, r0
    6a98:	2e00      	cmp	r6, #0
    6a9a:	d000      	beq.n	6a9e <__aeabi_dsub+0x426>
    6a9c:	e0a8      	b.n	6bf0 <__aeabi_dsub+0x578>
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d100      	bne.n	6aa4 <__aeabi_dsub+0x42c>
    6aa2:	e0de      	b.n	6c62 <__aeabi_dsub+0x5ea>
    6aa4:	000b      	movs	r3, r1
    6aa6:	4313      	orrs	r3, r2
    6aa8:	d100      	bne.n	6aac <__aeabi_dsub+0x434>
    6aaa:	e66b      	b.n	6784 <__aeabi_dsub+0x10c>
    6aac:	4452      	add	r2, sl
    6aae:	4552      	cmp	r2, sl
    6ab0:	4180      	sbcs	r0, r0
    6ab2:	1864      	adds	r4, r4, r1
    6ab4:	4240      	negs	r0, r0
    6ab6:	1824      	adds	r4, r4, r0
    6ab8:	0017      	movs	r7, r2
    6aba:	0223      	lsls	r3, r4, #8
    6abc:	d400      	bmi.n	6ac0 <__aeabi_dsub+0x448>
    6abe:	e6fd      	b.n	68bc <__aeabi_dsub+0x244>
    6ac0:	4b77      	ldr	r3, [pc, #476]	; (6ca0 <__aeabi_dsub+0x628>)
    6ac2:	4666      	mov	r6, ip
    6ac4:	401c      	ands	r4, r3
    6ac6:	e65d      	b.n	6784 <__aeabi_dsub+0x10c>
    6ac8:	0025      	movs	r5, r4
    6aca:	4650      	mov	r0, sl
    6acc:	4305      	orrs	r5, r0
    6ace:	2e00      	cmp	r6, #0
    6ad0:	d1cf      	bne.n	6a72 <__aeabi_dsub+0x3fa>
    6ad2:	2d00      	cmp	r5, #0
    6ad4:	d14f      	bne.n	6b76 <__aeabi_dsub+0x4fe>
    6ad6:	000c      	movs	r4, r1
    6ad8:	4314      	orrs	r4, r2
    6ada:	d100      	bne.n	6ade <__aeabi_dsub+0x466>
    6adc:	e0a0      	b.n	6c20 <__aeabi_dsub+0x5a8>
    6ade:	000c      	movs	r4, r1
    6ae0:	0017      	movs	r7, r2
    6ae2:	4698      	mov	r8, r3
    6ae4:	e64e      	b.n	6784 <__aeabi_dsub+0x10c>
    6ae6:	4666      	mov	r6, ip
    6ae8:	2400      	movs	r4, #0
    6aea:	2700      	movs	r7, #0
    6aec:	e685      	b.n	67fa <__aeabi_dsub+0x182>
    6aee:	001f      	movs	r7, r3
    6af0:	0008      	movs	r0, r1
    6af2:	3f20      	subs	r7, #32
    6af4:	40f8      	lsrs	r0, r7
    6af6:	0007      	movs	r7, r0
    6af8:	2b20      	cmp	r3, #32
    6afa:	d100      	bne.n	6afe <__aeabi_dsub+0x486>
    6afc:	e08e      	b.n	6c1c <__aeabi_dsub+0x5a4>
    6afe:	2040      	movs	r0, #64	; 0x40
    6b00:	1ac3      	subs	r3, r0, r3
    6b02:	4099      	lsls	r1, r3
    6b04:	430a      	orrs	r2, r1
    6b06:	1e51      	subs	r1, r2, #1
    6b08:	418a      	sbcs	r2, r1
    6b0a:	2100      	movs	r1, #0
    6b0c:	4317      	orrs	r7, r2
    6b0e:	e692      	b.n	6836 <__aeabi_dsub+0x1be>
    6b10:	2e00      	cmp	r6, #0
    6b12:	d114      	bne.n	6b3e <__aeabi_dsub+0x4c6>
    6b14:	0026      	movs	r6, r4
    6b16:	4650      	mov	r0, sl
    6b18:	4306      	orrs	r6, r0
    6b1a:	d062      	beq.n	6be2 <__aeabi_dsub+0x56a>
    6b1c:	43db      	mvns	r3, r3
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d15c      	bne.n	6bdc <__aeabi_dsub+0x564>
    6b22:	1887      	adds	r7, r0, r2
    6b24:	4297      	cmp	r7, r2
    6b26:	4192      	sbcs	r2, r2
    6b28:	1864      	adds	r4, r4, r1
    6b2a:	4252      	negs	r2, r2
    6b2c:	18a4      	adds	r4, r4, r2
    6b2e:	4666      	mov	r6, ip
    6b30:	e687      	b.n	6842 <__aeabi_dsub+0x1ca>
    6b32:	4650      	mov	r0, sl
    6b34:	4320      	orrs	r0, r4
    6b36:	1e44      	subs	r4, r0, #1
    6b38:	41a0      	sbcs	r0, r4
    6b3a:	2400      	movs	r4, #0
    6b3c:	e760      	b.n	6a00 <__aeabi_dsub+0x388>
    6b3e:	4e57      	ldr	r6, [pc, #348]	; (6c9c <__aeabi_dsub+0x624>)
    6b40:	45b4      	cmp	ip, r6
    6b42:	d04e      	beq.n	6be2 <__aeabi_dsub+0x56a>
    6b44:	2680      	movs	r6, #128	; 0x80
    6b46:	0436      	lsls	r6, r6, #16
    6b48:	425b      	negs	r3, r3
    6b4a:	4334      	orrs	r4, r6
    6b4c:	2b38      	cmp	r3, #56	; 0x38
    6b4e:	dd00      	ble.n	6b52 <__aeabi_dsub+0x4da>
    6b50:	e07f      	b.n	6c52 <__aeabi_dsub+0x5da>
    6b52:	2b1f      	cmp	r3, #31
    6b54:	dd00      	ble.n	6b58 <__aeabi_dsub+0x4e0>
    6b56:	e08b      	b.n	6c70 <__aeabi_dsub+0x5f8>
    6b58:	2620      	movs	r6, #32
    6b5a:	0027      	movs	r7, r4
    6b5c:	4650      	mov	r0, sl
    6b5e:	1af6      	subs	r6, r6, r3
    6b60:	40b7      	lsls	r7, r6
    6b62:	40d8      	lsrs	r0, r3
    6b64:	4307      	orrs	r7, r0
    6b66:	4650      	mov	r0, sl
    6b68:	40b0      	lsls	r0, r6
    6b6a:	1e46      	subs	r6, r0, #1
    6b6c:	41b0      	sbcs	r0, r6
    6b6e:	4307      	orrs	r7, r0
    6b70:	40dc      	lsrs	r4, r3
    6b72:	18bf      	adds	r7, r7, r2
    6b74:	e7d6      	b.n	6b24 <__aeabi_dsub+0x4ac>
    6b76:	000d      	movs	r5, r1
    6b78:	4315      	orrs	r5, r2
    6b7a:	d100      	bne.n	6b7e <__aeabi_dsub+0x506>
    6b7c:	e602      	b.n	6784 <__aeabi_dsub+0x10c>
    6b7e:	4650      	mov	r0, sl
    6b80:	1a80      	subs	r0, r0, r2
    6b82:	4582      	cmp	sl, r0
    6b84:	41bf      	sbcs	r7, r7
    6b86:	1a65      	subs	r5, r4, r1
    6b88:	427f      	negs	r7, r7
    6b8a:	1bed      	subs	r5, r5, r7
    6b8c:	4684      	mov	ip, r0
    6b8e:	0228      	lsls	r0, r5, #8
    6b90:	d400      	bmi.n	6b94 <__aeabi_dsub+0x51c>
    6b92:	e68d      	b.n	68b0 <__aeabi_dsub+0x238>
    6b94:	4650      	mov	r0, sl
    6b96:	1a17      	subs	r7, r2, r0
    6b98:	42ba      	cmp	r2, r7
    6b9a:	4192      	sbcs	r2, r2
    6b9c:	1b0c      	subs	r4, r1, r4
    6b9e:	4252      	negs	r2, r2
    6ba0:	1aa4      	subs	r4, r4, r2
    6ba2:	4698      	mov	r8, r3
    6ba4:	e5ee      	b.n	6784 <__aeabi_dsub+0x10c>
    6ba6:	000d      	movs	r5, r1
    6ba8:	4315      	orrs	r5, r2
    6baa:	d100      	bne.n	6bae <__aeabi_dsub+0x536>
    6bac:	e76b      	b.n	6a86 <__aeabi_dsub+0x40e>
    6bae:	4650      	mov	r0, sl
    6bb0:	0767      	lsls	r7, r4, #29
    6bb2:	08c0      	lsrs	r0, r0, #3
    6bb4:	4307      	orrs	r7, r0
    6bb6:	2080      	movs	r0, #128	; 0x80
    6bb8:	08e4      	lsrs	r4, r4, #3
    6bba:	0300      	lsls	r0, r0, #12
    6bbc:	4204      	tst	r4, r0
    6bbe:	d007      	beq.n	6bd0 <__aeabi_dsub+0x558>
    6bc0:	08cd      	lsrs	r5, r1, #3
    6bc2:	4205      	tst	r5, r0
    6bc4:	d104      	bne.n	6bd0 <__aeabi_dsub+0x558>
    6bc6:	002c      	movs	r4, r5
    6bc8:	4698      	mov	r8, r3
    6bca:	08d7      	lsrs	r7, r2, #3
    6bcc:	0749      	lsls	r1, r1, #29
    6bce:	430f      	orrs	r7, r1
    6bd0:	0f7b      	lsrs	r3, r7, #29
    6bd2:	00e4      	lsls	r4, r4, #3
    6bd4:	431c      	orrs	r4, r3
    6bd6:	00ff      	lsls	r7, r7, #3
    6bd8:	4e30      	ldr	r6, [pc, #192]	; (6c9c <__aeabi_dsub+0x624>)
    6bda:	e5d3      	b.n	6784 <__aeabi_dsub+0x10c>
    6bdc:	4e2f      	ldr	r6, [pc, #188]	; (6c9c <__aeabi_dsub+0x624>)
    6bde:	45b4      	cmp	ip, r6
    6be0:	d1b4      	bne.n	6b4c <__aeabi_dsub+0x4d4>
    6be2:	000c      	movs	r4, r1
    6be4:	0017      	movs	r7, r2
    6be6:	4666      	mov	r6, ip
    6be8:	e5cc      	b.n	6784 <__aeabi_dsub+0x10c>
    6bea:	2700      	movs	r7, #0
    6bec:	2400      	movs	r4, #0
    6bee:	e5e8      	b.n	67c2 <__aeabi_dsub+0x14a>
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d039      	beq.n	6c68 <__aeabi_dsub+0x5f0>
    6bf4:	000b      	movs	r3, r1
    6bf6:	4313      	orrs	r3, r2
    6bf8:	d100      	bne.n	6bfc <__aeabi_dsub+0x584>
    6bfa:	e744      	b.n	6a86 <__aeabi_dsub+0x40e>
    6bfc:	08c0      	lsrs	r0, r0, #3
    6bfe:	0767      	lsls	r7, r4, #29
    6c00:	4307      	orrs	r7, r0
    6c02:	2080      	movs	r0, #128	; 0x80
    6c04:	08e4      	lsrs	r4, r4, #3
    6c06:	0300      	lsls	r0, r0, #12
    6c08:	4204      	tst	r4, r0
    6c0a:	d0e1      	beq.n	6bd0 <__aeabi_dsub+0x558>
    6c0c:	08cb      	lsrs	r3, r1, #3
    6c0e:	4203      	tst	r3, r0
    6c10:	d1de      	bne.n	6bd0 <__aeabi_dsub+0x558>
    6c12:	08d7      	lsrs	r7, r2, #3
    6c14:	0749      	lsls	r1, r1, #29
    6c16:	430f      	orrs	r7, r1
    6c18:	001c      	movs	r4, r3
    6c1a:	e7d9      	b.n	6bd0 <__aeabi_dsub+0x558>
    6c1c:	2100      	movs	r1, #0
    6c1e:	e771      	b.n	6b04 <__aeabi_dsub+0x48c>
    6c20:	2500      	movs	r5, #0
    6c22:	2700      	movs	r7, #0
    6c24:	e5e9      	b.n	67fa <__aeabi_dsub+0x182>
    6c26:	002e      	movs	r6, r5
    6c28:	0027      	movs	r7, r4
    6c2a:	3e20      	subs	r6, #32
    6c2c:	40f7      	lsrs	r7, r6
    6c2e:	2d20      	cmp	r5, #32
    6c30:	d02f      	beq.n	6c92 <__aeabi_dsub+0x61a>
    6c32:	2640      	movs	r6, #64	; 0x40
    6c34:	1b75      	subs	r5, r6, r5
    6c36:	40ac      	lsls	r4, r5
    6c38:	4650      	mov	r0, sl
    6c3a:	4320      	orrs	r0, r4
    6c3c:	1e44      	subs	r4, r0, #1
    6c3e:	41a0      	sbcs	r0, r4
    6c40:	2400      	movs	r4, #0
    6c42:	4338      	orrs	r0, r7
    6c44:	e6dc      	b.n	6a00 <__aeabi_dsub+0x388>
    6c46:	2480      	movs	r4, #128	; 0x80
    6c48:	2500      	movs	r5, #0
    6c4a:	0324      	lsls	r4, r4, #12
    6c4c:	4e13      	ldr	r6, [pc, #76]	; (6c9c <__aeabi_dsub+0x624>)
    6c4e:	2700      	movs	r7, #0
    6c50:	e5d3      	b.n	67fa <__aeabi_dsub+0x182>
    6c52:	4650      	mov	r0, sl
    6c54:	4320      	orrs	r0, r4
    6c56:	0007      	movs	r7, r0
    6c58:	1e78      	subs	r0, r7, #1
    6c5a:	4187      	sbcs	r7, r0
    6c5c:	2400      	movs	r4, #0
    6c5e:	18bf      	adds	r7, r7, r2
    6c60:	e760      	b.n	6b24 <__aeabi_dsub+0x4ac>
    6c62:	000c      	movs	r4, r1
    6c64:	0017      	movs	r7, r2
    6c66:	e58d      	b.n	6784 <__aeabi_dsub+0x10c>
    6c68:	000c      	movs	r4, r1
    6c6a:	0017      	movs	r7, r2
    6c6c:	4e0b      	ldr	r6, [pc, #44]	; (6c9c <__aeabi_dsub+0x624>)
    6c6e:	e589      	b.n	6784 <__aeabi_dsub+0x10c>
    6c70:	001e      	movs	r6, r3
    6c72:	0027      	movs	r7, r4
    6c74:	3e20      	subs	r6, #32
    6c76:	40f7      	lsrs	r7, r6
    6c78:	2b20      	cmp	r3, #32
    6c7a:	d00c      	beq.n	6c96 <__aeabi_dsub+0x61e>
    6c7c:	2640      	movs	r6, #64	; 0x40
    6c7e:	1af3      	subs	r3, r6, r3
    6c80:	409c      	lsls	r4, r3
    6c82:	4650      	mov	r0, sl
    6c84:	4320      	orrs	r0, r4
    6c86:	1e44      	subs	r4, r0, #1
    6c88:	41a0      	sbcs	r0, r4
    6c8a:	4307      	orrs	r7, r0
    6c8c:	2400      	movs	r4, #0
    6c8e:	18bf      	adds	r7, r7, r2
    6c90:	e748      	b.n	6b24 <__aeabi_dsub+0x4ac>
    6c92:	2400      	movs	r4, #0
    6c94:	e7d0      	b.n	6c38 <__aeabi_dsub+0x5c0>
    6c96:	2400      	movs	r4, #0
    6c98:	e7f3      	b.n	6c82 <__aeabi_dsub+0x60a>
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	000007ff 	.word	0x000007ff
    6ca0:	ff7fffff 	.word	0xff7fffff

00006ca4 <__aeabi_d2iz>:
    6ca4:	b530      	push	{r4, r5, lr}
    6ca6:	4d13      	ldr	r5, [pc, #76]	; (6cf4 <__aeabi_d2iz+0x50>)
    6ca8:	030a      	lsls	r2, r1, #12
    6caa:	004b      	lsls	r3, r1, #1
    6cac:	0b12      	lsrs	r2, r2, #12
    6cae:	0d5b      	lsrs	r3, r3, #21
    6cb0:	0fc9      	lsrs	r1, r1, #31
    6cb2:	2400      	movs	r4, #0
    6cb4:	42ab      	cmp	r3, r5
    6cb6:	dd10      	ble.n	6cda <__aeabi_d2iz+0x36>
    6cb8:	4c0f      	ldr	r4, [pc, #60]	; (6cf8 <__aeabi_d2iz+0x54>)
    6cba:	42a3      	cmp	r3, r4
    6cbc:	dc0f      	bgt.n	6cde <__aeabi_d2iz+0x3a>
    6cbe:	2480      	movs	r4, #128	; 0x80
    6cc0:	4d0e      	ldr	r5, [pc, #56]	; (6cfc <__aeabi_d2iz+0x58>)
    6cc2:	0364      	lsls	r4, r4, #13
    6cc4:	4322      	orrs	r2, r4
    6cc6:	1aed      	subs	r5, r5, r3
    6cc8:	2d1f      	cmp	r5, #31
    6cca:	dd0b      	ble.n	6ce4 <__aeabi_d2iz+0x40>
    6ccc:	480c      	ldr	r0, [pc, #48]	; (6d00 <__aeabi_d2iz+0x5c>)
    6cce:	1ac3      	subs	r3, r0, r3
    6cd0:	40da      	lsrs	r2, r3
    6cd2:	4254      	negs	r4, r2
    6cd4:	2900      	cmp	r1, #0
    6cd6:	d100      	bne.n	6cda <__aeabi_d2iz+0x36>
    6cd8:	0014      	movs	r4, r2
    6cda:	0020      	movs	r0, r4
    6cdc:	bd30      	pop	{r4, r5, pc}
    6cde:	4b09      	ldr	r3, [pc, #36]	; (6d04 <__aeabi_d2iz+0x60>)
    6ce0:	18cc      	adds	r4, r1, r3
    6ce2:	e7fa      	b.n	6cda <__aeabi_d2iz+0x36>
    6ce4:	4c08      	ldr	r4, [pc, #32]	; (6d08 <__aeabi_d2iz+0x64>)
    6ce6:	40e8      	lsrs	r0, r5
    6ce8:	46a4      	mov	ip, r4
    6cea:	4463      	add	r3, ip
    6cec:	409a      	lsls	r2, r3
    6cee:	4302      	orrs	r2, r0
    6cf0:	e7ef      	b.n	6cd2 <__aeabi_d2iz+0x2e>
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	000003fe 	.word	0x000003fe
    6cf8:	0000041d 	.word	0x0000041d
    6cfc:	00000433 	.word	0x00000433
    6d00:	00000413 	.word	0x00000413
    6d04:	7fffffff 	.word	0x7fffffff
    6d08:	fffffbed 	.word	0xfffffbed

00006d0c <__aeabi_i2d>:
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	2800      	cmp	r0, #0
    6d10:	d030      	beq.n	6d74 <__aeabi_i2d+0x68>
    6d12:	17c3      	asrs	r3, r0, #31
    6d14:	18c4      	adds	r4, r0, r3
    6d16:	405c      	eors	r4, r3
    6d18:	0fc5      	lsrs	r5, r0, #31
    6d1a:	0020      	movs	r0, r4
    6d1c:	f000 f8fa 	bl	6f14 <__clzsi2>
    6d20:	4b17      	ldr	r3, [pc, #92]	; (6d80 <__aeabi_i2d+0x74>)
    6d22:	4a18      	ldr	r2, [pc, #96]	; (6d84 <__aeabi_i2d+0x78>)
    6d24:	1a1b      	subs	r3, r3, r0
    6d26:	1ad2      	subs	r2, r2, r3
    6d28:	2a1f      	cmp	r2, #31
    6d2a:	dd18      	ble.n	6d5e <__aeabi_i2d+0x52>
    6d2c:	4a16      	ldr	r2, [pc, #88]	; (6d88 <__aeabi_i2d+0x7c>)
    6d2e:	1ad2      	subs	r2, r2, r3
    6d30:	4094      	lsls	r4, r2
    6d32:	2200      	movs	r2, #0
    6d34:	0324      	lsls	r4, r4, #12
    6d36:	055b      	lsls	r3, r3, #21
    6d38:	0b24      	lsrs	r4, r4, #12
    6d3a:	0d5b      	lsrs	r3, r3, #21
    6d3c:	2100      	movs	r1, #0
    6d3e:	0010      	movs	r0, r2
    6d40:	0324      	lsls	r4, r4, #12
    6d42:	0d0a      	lsrs	r2, r1, #20
    6d44:	0b24      	lsrs	r4, r4, #12
    6d46:	0512      	lsls	r2, r2, #20
    6d48:	4322      	orrs	r2, r4
    6d4a:	4c10      	ldr	r4, [pc, #64]	; (6d8c <__aeabi_i2d+0x80>)
    6d4c:	051b      	lsls	r3, r3, #20
    6d4e:	4022      	ands	r2, r4
    6d50:	4313      	orrs	r3, r2
    6d52:	005b      	lsls	r3, r3, #1
    6d54:	07ed      	lsls	r5, r5, #31
    6d56:	085b      	lsrs	r3, r3, #1
    6d58:	432b      	orrs	r3, r5
    6d5a:	0019      	movs	r1, r3
    6d5c:	bd70      	pop	{r4, r5, r6, pc}
    6d5e:	0021      	movs	r1, r4
    6d60:	4091      	lsls	r1, r2
    6d62:	000a      	movs	r2, r1
    6d64:	210b      	movs	r1, #11
    6d66:	1a08      	subs	r0, r1, r0
    6d68:	40c4      	lsrs	r4, r0
    6d6a:	055b      	lsls	r3, r3, #21
    6d6c:	0324      	lsls	r4, r4, #12
    6d6e:	0b24      	lsrs	r4, r4, #12
    6d70:	0d5b      	lsrs	r3, r3, #21
    6d72:	e7e3      	b.n	6d3c <__aeabi_i2d+0x30>
    6d74:	2500      	movs	r5, #0
    6d76:	2300      	movs	r3, #0
    6d78:	2400      	movs	r4, #0
    6d7a:	2200      	movs	r2, #0
    6d7c:	e7de      	b.n	6d3c <__aeabi_i2d+0x30>
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	0000041e 	.word	0x0000041e
    6d84:	00000433 	.word	0x00000433
    6d88:	00000413 	.word	0x00000413
    6d8c:	800fffff 	.word	0x800fffff

00006d90 <__aeabi_ui2d>:
    6d90:	b510      	push	{r4, lr}
    6d92:	1e04      	subs	r4, r0, #0
    6d94:	d028      	beq.n	6de8 <__aeabi_ui2d+0x58>
    6d96:	f000 f8bd 	bl	6f14 <__clzsi2>
    6d9a:	4b15      	ldr	r3, [pc, #84]	; (6df0 <__aeabi_ui2d+0x60>)
    6d9c:	4a15      	ldr	r2, [pc, #84]	; (6df4 <__aeabi_ui2d+0x64>)
    6d9e:	1a1b      	subs	r3, r3, r0
    6da0:	1ad2      	subs	r2, r2, r3
    6da2:	2a1f      	cmp	r2, #31
    6da4:	dd15      	ble.n	6dd2 <__aeabi_ui2d+0x42>
    6da6:	4a14      	ldr	r2, [pc, #80]	; (6df8 <__aeabi_ui2d+0x68>)
    6da8:	1ad2      	subs	r2, r2, r3
    6daa:	4094      	lsls	r4, r2
    6dac:	2200      	movs	r2, #0
    6dae:	0324      	lsls	r4, r4, #12
    6db0:	055b      	lsls	r3, r3, #21
    6db2:	0b24      	lsrs	r4, r4, #12
    6db4:	0d5b      	lsrs	r3, r3, #21
    6db6:	2100      	movs	r1, #0
    6db8:	0010      	movs	r0, r2
    6dba:	0324      	lsls	r4, r4, #12
    6dbc:	0d0a      	lsrs	r2, r1, #20
    6dbe:	0b24      	lsrs	r4, r4, #12
    6dc0:	0512      	lsls	r2, r2, #20
    6dc2:	4322      	orrs	r2, r4
    6dc4:	4c0d      	ldr	r4, [pc, #52]	; (6dfc <__aeabi_ui2d+0x6c>)
    6dc6:	051b      	lsls	r3, r3, #20
    6dc8:	4022      	ands	r2, r4
    6dca:	4313      	orrs	r3, r2
    6dcc:	005b      	lsls	r3, r3, #1
    6dce:	0859      	lsrs	r1, r3, #1
    6dd0:	bd10      	pop	{r4, pc}
    6dd2:	0021      	movs	r1, r4
    6dd4:	4091      	lsls	r1, r2
    6dd6:	000a      	movs	r2, r1
    6dd8:	210b      	movs	r1, #11
    6dda:	1a08      	subs	r0, r1, r0
    6ddc:	40c4      	lsrs	r4, r0
    6dde:	055b      	lsls	r3, r3, #21
    6de0:	0324      	lsls	r4, r4, #12
    6de2:	0b24      	lsrs	r4, r4, #12
    6de4:	0d5b      	lsrs	r3, r3, #21
    6de6:	e7e6      	b.n	6db6 <__aeabi_ui2d+0x26>
    6de8:	2300      	movs	r3, #0
    6dea:	2400      	movs	r4, #0
    6dec:	2200      	movs	r2, #0
    6dee:	e7e2      	b.n	6db6 <__aeabi_ui2d+0x26>
    6df0:	0000041e 	.word	0x0000041e
    6df4:	00000433 	.word	0x00000433
    6df8:	00000413 	.word	0x00000413
    6dfc:	800fffff 	.word	0x800fffff

00006e00 <__aeabi_d2f>:
    6e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e02:	004c      	lsls	r4, r1, #1
    6e04:	0d64      	lsrs	r4, r4, #21
    6e06:	030b      	lsls	r3, r1, #12
    6e08:	1c62      	adds	r2, r4, #1
    6e0a:	0f45      	lsrs	r5, r0, #29
    6e0c:	0a5b      	lsrs	r3, r3, #9
    6e0e:	0552      	lsls	r2, r2, #21
    6e10:	432b      	orrs	r3, r5
    6e12:	0fc9      	lsrs	r1, r1, #31
    6e14:	00c5      	lsls	r5, r0, #3
    6e16:	0d52      	lsrs	r2, r2, #21
    6e18:	2a01      	cmp	r2, #1
    6e1a:	dd28      	ble.n	6e6e <__aeabi_d2f+0x6e>
    6e1c:	4a3a      	ldr	r2, [pc, #232]	; (6f08 <__aeabi_d2f+0x108>)
    6e1e:	18a6      	adds	r6, r4, r2
    6e20:	2efe      	cmp	r6, #254	; 0xfe
    6e22:	dc1b      	bgt.n	6e5c <__aeabi_d2f+0x5c>
    6e24:	2e00      	cmp	r6, #0
    6e26:	dd3e      	ble.n	6ea6 <__aeabi_d2f+0xa6>
    6e28:	0180      	lsls	r0, r0, #6
    6e2a:	0002      	movs	r2, r0
    6e2c:	1e50      	subs	r0, r2, #1
    6e2e:	4182      	sbcs	r2, r0
    6e30:	0f6d      	lsrs	r5, r5, #29
    6e32:	432a      	orrs	r2, r5
    6e34:	00db      	lsls	r3, r3, #3
    6e36:	4313      	orrs	r3, r2
    6e38:	075a      	lsls	r2, r3, #29
    6e3a:	d004      	beq.n	6e46 <__aeabi_d2f+0x46>
    6e3c:	220f      	movs	r2, #15
    6e3e:	401a      	ands	r2, r3
    6e40:	2a04      	cmp	r2, #4
    6e42:	d000      	beq.n	6e46 <__aeabi_d2f+0x46>
    6e44:	3304      	adds	r3, #4
    6e46:	2280      	movs	r2, #128	; 0x80
    6e48:	04d2      	lsls	r2, r2, #19
    6e4a:	401a      	ands	r2, r3
    6e4c:	d05a      	beq.n	6f04 <__aeabi_d2f+0x104>
    6e4e:	3601      	adds	r6, #1
    6e50:	2eff      	cmp	r6, #255	; 0xff
    6e52:	d003      	beq.n	6e5c <__aeabi_d2f+0x5c>
    6e54:	019b      	lsls	r3, r3, #6
    6e56:	0a5b      	lsrs	r3, r3, #9
    6e58:	b2f4      	uxtb	r4, r6
    6e5a:	e001      	b.n	6e60 <__aeabi_d2f+0x60>
    6e5c:	24ff      	movs	r4, #255	; 0xff
    6e5e:	2300      	movs	r3, #0
    6e60:	0258      	lsls	r0, r3, #9
    6e62:	05e4      	lsls	r4, r4, #23
    6e64:	0a40      	lsrs	r0, r0, #9
    6e66:	07c9      	lsls	r1, r1, #31
    6e68:	4320      	orrs	r0, r4
    6e6a:	4308      	orrs	r0, r1
    6e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e6e:	2c00      	cmp	r4, #0
    6e70:	d007      	beq.n	6e82 <__aeabi_d2f+0x82>
    6e72:	431d      	orrs	r5, r3
    6e74:	d0f2      	beq.n	6e5c <__aeabi_d2f+0x5c>
    6e76:	2080      	movs	r0, #128	; 0x80
    6e78:	00db      	lsls	r3, r3, #3
    6e7a:	0480      	lsls	r0, r0, #18
    6e7c:	4303      	orrs	r3, r0
    6e7e:	26ff      	movs	r6, #255	; 0xff
    6e80:	e7da      	b.n	6e38 <__aeabi_d2f+0x38>
    6e82:	432b      	orrs	r3, r5
    6e84:	d003      	beq.n	6e8e <__aeabi_d2f+0x8e>
    6e86:	2305      	movs	r3, #5
    6e88:	08db      	lsrs	r3, r3, #3
    6e8a:	2cff      	cmp	r4, #255	; 0xff
    6e8c:	d003      	beq.n	6e96 <__aeabi_d2f+0x96>
    6e8e:	025b      	lsls	r3, r3, #9
    6e90:	0a5b      	lsrs	r3, r3, #9
    6e92:	b2e4      	uxtb	r4, r4
    6e94:	e7e4      	b.n	6e60 <__aeabi_d2f+0x60>
    6e96:	2b00      	cmp	r3, #0
    6e98:	d032      	beq.n	6f00 <__aeabi_d2f+0x100>
    6e9a:	2080      	movs	r0, #128	; 0x80
    6e9c:	03c0      	lsls	r0, r0, #15
    6e9e:	4303      	orrs	r3, r0
    6ea0:	025b      	lsls	r3, r3, #9
    6ea2:	0a5b      	lsrs	r3, r3, #9
    6ea4:	e7dc      	b.n	6e60 <__aeabi_d2f+0x60>
    6ea6:	0032      	movs	r2, r6
    6ea8:	3217      	adds	r2, #23
    6eaa:	db14      	blt.n	6ed6 <__aeabi_d2f+0xd6>
    6eac:	2280      	movs	r2, #128	; 0x80
    6eae:	271e      	movs	r7, #30
    6eb0:	0412      	lsls	r2, r2, #16
    6eb2:	4313      	orrs	r3, r2
    6eb4:	1bbf      	subs	r7, r7, r6
    6eb6:	2f1f      	cmp	r7, #31
    6eb8:	dc0f      	bgt.n	6eda <__aeabi_d2f+0xda>
    6eba:	4a14      	ldr	r2, [pc, #80]	; (6f0c <__aeabi_d2f+0x10c>)
    6ebc:	4694      	mov	ip, r2
    6ebe:	4464      	add	r4, ip
    6ec0:	002a      	movs	r2, r5
    6ec2:	40a5      	lsls	r5, r4
    6ec4:	002e      	movs	r6, r5
    6ec6:	40a3      	lsls	r3, r4
    6ec8:	1e75      	subs	r5, r6, #1
    6eca:	41ae      	sbcs	r6, r5
    6ecc:	40fa      	lsrs	r2, r7
    6ece:	4333      	orrs	r3, r6
    6ed0:	4313      	orrs	r3, r2
    6ed2:	2600      	movs	r6, #0
    6ed4:	e7b0      	b.n	6e38 <__aeabi_d2f+0x38>
    6ed6:	2400      	movs	r4, #0
    6ed8:	e7d5      	b.n	6e86 <__aeabi_d2f+0x86>
    6eda:	2202      	movs	r2, #2
    6edc:	4252      	negs	r2, r2
    6ede:	1b96      	subs	r6, r2, r6
    6ee0:	001a      	movs	r2, r3
    6ee2:	40f2      	lsrs	r2, r6
    6ee4:	2f20      	cmp	r7, #32
    6ee6:	d009      	beq.n	6efc <__aeabi_d2f+0xfc>
    6ee8:	4809      	ldr	r0, [pc, #36]	; (6f10 <__aeabi_d2f+0x110>)
    6eea:	4684      	mov	ip, r0
    6eec:	4464      	add	r4, ip
    6eee:	40a3      	lsls	r3, r4
    6ef0:	432b      	orrs	r3, r5
    6ef2:	1e5d      	subs	r5, r3, #1
    6ef4:	41ab      	sbcs	r3, r5
    6ef6:	2600      	movs	r6, #0
    6ef8:	4313      	orrs	r3, r2
    6efa:	e79d      	b.n	6e38 <__aeabi_d2f+0x38>
    6efc:	2300      	movs	r3, #0
    6efe:	e7f7      	b.n	6ef0 <__aeabi_d2f+0xf0>
    6f00:	2300      	movs	r3, #0
    6f02:	e7ad      	b.n	6e60 <__aeabi_d2f+0x60>
    6f04:	0034      	movs	r4, r6
    6f06:	e7bf      	b.n	6e88 <__aeabi_d2f+0x88>
    6f08:	fffffc80 	.word	0xfffffc80
    6f0c:	fffffc82 	.word	0xfffffc82
    6f10:	fffffca2 	.word	0xfffffca2

00006f14 <__clzsi2>:
    6f14:	211c      	movs	r1, #28
    6f16:	2301      	movs	r3, #1
    6f18:	041b      	lsls	r3, r3, #16
    6f1a:	4298      	cmp	r0, r3
    6f1c:	d301      	bcc.n	6f22 <__clzsi2+0xe>
    6f1e:	0c00      	lsrs	r0, r0, #16
    6f20:	3910      	subs	r1, #16
    6f22:	0a1b      	lsrs	r3, r3, #8
    6f24:	4298      	cmp	r0, r3
    6f26:	d301      	bcc.n	6f2c <__clzsi2+0x18>
    6f28:	0a00      	lsrs	r0, r0, #8
    6f2a:	3908      	subs	r1, #8
    6f2c:	091b      	lsrs	r3, r3, #4
    6f2e:	4298      	cmp	r0, r3
    6f30:	d301      	bcc.n	6f36 <__clzsi2+0x22>
    6f32:	0900      	lsrs	r0, r0, #4
    6f34:	3904      	subs	r1, #4
    6f36:	a202      	add	r2, pc, #8	; (adr r2, 6f40 <__clzsi2+0x2c>)
    6f38:	5c10      	ldrb	r0, [r2, r0]
    6f3a:	1840      	adds	r0, r0, r1
    6f3c:	4770      	bx	lr
    6f3e:	46c0      	nop			; (mov r8, r8)
    6f40:	02020304 	.word	0x02020304
    6f44:	01010101 	.word	0x01010101
	...

00006f50 <__clzdi2>:
    6f50:	b510      	push	{r4, lr}
    6f52:	2900      	cmp	r1, #0
    6f54:	d103      	bne.n	6f5e <__clzdi2+0xe>
    6f56:	f7ff ffdd 	bl	6f14 <__clzsi2>
    6f5a:	3020      	adds	r0, #32
    6f5c:	e002      	b.n	6f64 <__clzdi2+0x14>
    6f5e:	1c08      	adds	r0, r1, #0
    6f60:	f7ff ffd8 	bl	6f14 <__clzsi2>
    6f64:	bd10      	pop	{r4, pc}
    6f66:	46c0      	nop			; (mov r8, r8)

00006f68 <__divdi3>:
    6f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f6a:	464e      	mov	r6, r9
    6f6c:	4657      	mov	r7, sl
    6f6e:	46de      	mov	lr, fp
    6f70:	4645      	mov	r5, r8
    6f72:	b5e0      	push	{r5, r6, r7, lr}
    6f74:	0006      	movs	r6, r0
    6f76:	2000      	movs	r0, #0
    6f78:	000f      	movs	r7, r1
    6f7a:	b083      	sub	sp, #12
    6f7c:	0019      	movs	r1, r3
    6f7e:	4681      	mov	r9, r0
    6f80:	2f00      	cmp	r7, #0
    6f82:	da00      	bge.n	6f86 <__divdi3+0x1e>
    6f84:	e08c      	b.n	70a0 <__divdi3+0x138>
    6f86:	2900      	cmp	r1, #0
    6f88:	da00      	bge.n	6f8c <__divdi3+0x24>
    6f8a:	e080      	b.n	708e <__divdi3+0x126>
    6f8c:	0034      	movs	r4, r6
    6f8e:	003d      	movs	r5, r7
    6f90:	4692      	mov	sl, r2
    6f92:	4698      	mov	r8, r3
    6f94:	42bb      	cmp	r3, r7
    6f96:	d869      	bhi.n	706c <__divdi3+0x104>
    6f98:	d066      	beq.n	7068 <__divdi3+0x100>
    6f9a:	4641      	mov	r1, r8
    6f9c:	4650      	mov	r0, sl
    6f9e:	f7ff ffd7 	bl	6f50 <__clzdi2>
    6fa2:	4683      	mov	fp, r0
    6fa4:	0039      	movs	r1, r7
    6fa6:	0030      	movs	r0, r6
    6fa8:	f7ff ffd2 	bl	6f50 <__clzdi2>
    6fac:	465b      	mov	r3, fp
    6fae:	1a1b      	subs	r3, r3, r0
    6fb0:	469c      	mov	ip, r3
    6fb2:	3b20      	subs	r3, #32
    6fb4:	469b      	mov	fp, r3
    6fb6:	d500      	bpl.n	6fba <__divdi3+0x52>
    6fb8:	e087      	b.n	70ca <__divdi3+0x162>
    6fba:	4651      	mov	r1, sl
    6fbc:	4658      	mov	r0, fp
    6fbe:	4081      	lsls	r1, r0
    6fc0:	000b      	movs	r3, r1
    6fc2:	4651      	mov	r1, sl
    6fc4:	4660      	mov	r0, ip
    6fc6:	4081      	lsls	r1, r0
    6fc8:	000a      	movs	r2, r1
    6fca:	42bb      	cmp	r3, r7
    6fcc:	d900      	bls.n	6fd0 <__divdi3+0x68>
    6fce:	e072      	b.n	70b6 <__divdi3+0x14e>
    6fd0:	d06e      	beq.n	70b0 <__divdi3+0x148>
    6fd2:	0034      	movs	r4, r6
    6fd4:	003d      	movs	r5, r7
    6fd6:	4659      	mov	r1, fp
    6fd8:	1aa4      	subs	r4, r4, r2
    6fda:	419d      	sbcs	r5, r3
    6fdc:	2900      	cmp	r1, #0
    6fde:	da00      	bge.n	6fe2 <__divdi3+0x7a>
    6fe0:	e08a      	b.n	70f8 <__divdi3+0x190>
    6fe2:	2100      	movs	r1, #0
    6fe4:	2000      	movs	r0, #0
    6fe6:	2601      	movs	r6, #1
    6fe8:	9000      	str	r0, [sp, #0]
    6fea:	9101      	str	r1, [sp, #4]
    6fec:	4659      	mov	r1, fp
    6fee:	408e      	lsls	r6, r1
    6ff0:	9601      	str	r6, [sp, #4]
    6ff2:	4661      	mov	r1, ip
    6ff4:	2601      	movs	r6, #1
    6ff6:	408e      	lsls	r6, r1
    6ff8:	4661      	mov	r1, ip
    6ffa:	9600      	str	r6, [sp, #0]
    6ffc:	2900      	cmp	r1, #0
    6ffe:	d061      	beq.n	70c4 <__divdi3+0x15c>
    7000:	07d9      	lsls	r1, r3, #31
    7002:	0856      	lsrs	r6, r2, #1
    7004:	430e      	orrs	r6, r1
    7006:	085f      	lsrs	r7, r3, #1
    7008:	4661      	mov	r1, ip
    700a:	2201      	movs	r2, #1
    700c:	2300      	movs	r3, #0
    700e:	e00c      	b.n	702a <__divdi3+0xc2>
    7010:	42af      	cmp	r7, r5
    7012:	d101      	bne.n	7018 <__divdi3+0xb0>
    7014:	42a6      	cmp	r6, r4
    7016:	d80a      	bhi.n	702e <__divdi3+0xc6>
    7018:	1ba4      	subs	r4, r4, r6
    701a:	41bd      	sbcs	r5, r7
    701c:	1924      	adds	r4, r4, r4
    701e:	416d      	adcs	r5, r5
    7020:	3901      	subs	r1, #1
    7022:	18a4      	adds	r4, r4, r2
    7024:	415d      	adcs	r5, r3
    7026:	2900      	cmp	r1, #0
    7028:	d006      	beq.n	7038 <__divdi3+0xd0>
    702a:	42af      	cmp	r7, r5
    702c:	d9f0      	bls.n	7010 <__divdi3+0xa8>
    702e:	3901      	subs	r1, #1
    7030:	1924      	adds	r4, r4, r4
    7032:	416d      	adcs	r5, r5
    7034:	2900      	cmp	r1, #0
    7036:	d1f8      	bne.n	702a <__divdi3+0xc2>
    7038:	465b      	mov	r3, fp
    703a:	9800      	ldr	r0, [sp, #0]
    703c:	9901      	ldr	r1, [sp, #4]
    703e:	1900      	adds	r0, r0, r4
    7040:	4169      	adcs	r1, r5
    7042:	2b00      	cmp	r3, #0
    7044:	db4d      	blt.n	70e2 <__divdi3+0x17a>
    7046:	002e      	movs	r6, r5
    7048:	40de      	lsrs	r6, r3
    704a:	4663      	mov	r3, ip
    704c:	002c      	movs	r4, r5
    704e:	40dc      	lsrs	r4, r3
    7050:	465b      	mov	r3, fp
    7052:	2b00      	cmp	r3, #0
    7054:	db5b      	blt.n	710e <__divdi3+0x1a6>
    7056:	0034      	movs	r4, r6
    7058:	409c      	lsls	r4, r3
    705a:	0023      	movs	r3, r4
    705c:	4664      	mov	r4, ip
    705e:	40a6      	lsls	r6, r4
    7060:	0032      	movs	r2, r6
    7062:	1a80      	subs	r0, r0, r2
    7064:	4199      	sbcs	r1, r3
    7066:	e003      	b.n	7070 <__divdi3+0x108>
    7068:	42b2      	cmp	r2, r6
    706a:	d996      	bls.n	6f9a <__divdi3+0x32>
    706c:	2000      	movs	r0, #0
    706e:	2100      	movs	r1, #0
    7070:	464b      	mov	r3, r9
    7072:	2b00      	cmp	r3, #0
    7074:	d004      	beq.n	7080 <__divdi3+0x118>
    7076:	0003      	movs	r3, r0
    7078:	000c      	movs	r4, r1
    707a:	2100      	movs	r1, #0
    707c:	4258      	negs	r0, r3
    707e:	41a1      	sbcs	r1, r4
    7080:	b003      	add	sp, #12
    7082:	bc3c      	pop	{r2, r3, r4, r5}
    7084:	4690      	mov	r8, r2
    7086:	4699      	mov	r9, r3
    7088:	46a2      	mov	sl, r4
    708a:	46ab      	mov	fp, r5
    708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    708e:	4649      	mov	r1, r9
    7090:	43c9      	mvns	r1, r1
    7092:	0010      	movs	r0, r2
    7094:	4689      	mov	r9, r1
    7096:	0019      	movs	r1, r3
    7098:	2300      	movs	r3, #0
    709a:	4242      	negs	r2, r0
    709c:	418b      	sbcs	r3, r1
    709e:	e775      	b.n	6f8c <__divdi3+0x24>
    70a0:	0034      	movs	r4, r6
    70a2:	003d      	movs	r5, r7
    70a4:	3801      	subs	r0, #1
    70a6:	2700      	movs	r7, #0
    70a8:	4266      	negs	r6, r4
    70aa:	41af      	sbcs	r7, r5
    70ac:	4681      	mov	r9, r0
    70ae:	e76a      	b.n	6f86 <__divdi3+0x1e>
    70b0:	42b1      	cmp	r1, r6
    70b2:	d800      	bhi.n	70b6 <__divdi3+0x14e>
    70b4:	e78d      	b.n	6fd2 <__divdi3+0x6a>
    70b6:	2100      	movs	r1, #0
    70b8:	2000      	movs	r0, #0
    70ba:	9000      	str	r0, [sp, #0]
    70bc:	9101      	str	r1, [sp, #4]
    70be:	4661      	mov	r1, ip
    70c0:	2900      	cmp	r1, #0
    70c2:	d19d      	bne.n	7000 <__divdi3+0x98>
    70c4:	9800      	ldr	r0, [sp, #0]
    70c6:	9901      	ldr	r1, [sp, #4]
    70c8:	e7d2      	b.n	7070 <__divdi3+0x108>
    70ca:	4662      	mov	r2, ip
    70cc:	4640      	mov	r0, r8
    70ce:	2320      	movs	r3, #32
    70d0:	4651      	mov	r1, sl
    70d2:	4090      	lsls	r0, r2
    70d4:	1a9b      	subs	r3, r3, r2
    70d6:	40d9      	lsrs	r1, r3
    70d8:	0003      	movs	r3, r0
    70da:	9100      	str	r1, [sp, #0]
    70dc:	9900      	ldr	r1, [sp, #0]
    70de:	430b      	orrs	r3, r1
    70e0:	e76f      	b.n	6fc2 <__divdi3+0x5a>
    70e2:	4662      	mov	r2, ip
    70e4:	2320      	movs	r3, #32
    70e6:	1a9b      	subs	r3, r3, r2
    70e8:	002a      	movs	r2, r5
    70ea:	409a      	lsls	r2, r3
    70ec:	0026      	movs	r6, r4
    70ee:	0013      	movs	r3, r2
    70f0:	4662      	mov	r2, ip
    70f2:	40d6      	lsrs	r6, r2
    70f4:	431e      	orrs	r6, r3
    70f6:	e7a8      	b.n	704a <__divdi3+0xe2>
    70f8:	4661      	mov	r1, ip
    70fa:	2620      	movs	r6, #32
    70fc:	2701      	movs	r7, #1
    70fe:	1a76      	subs	r6, r6, r1
    7100:	2000      	movs	r0, #0
    7102:	2100      	movs	r1, #0
    7104:	40f7      	lsrs	r7, r6
    7106:	9000      	str	r0, [sp, #0]
    7108:	9101      	str	r1, [sp, #4]
    710a:	9701      	str	r7, [sp, #4]
    710c:	e771      	b.n	6ff2 <__divdi3+0x8a>
    710e:	4662      	mov	r2, ip
    7110:	2320      	movs	r3, #32
    7112:	0035      	movs	r5, r6
    7114:	4094      	lsls	r4, r2
    7116:	1a9b      	subs	r3, r3, r2
    7118:	40dd      	lsrs	r5, r3
    711a:	0023      	movs	r3, r4
    711c:	432b      	orrs	r3, r5
    711e:	e79d      	b.n	705c <__divdi3+0xf4>

00007120 <__libc_init_array>:
    7120:	b570      	push	{r4, r5, r6, lr}
    7122:	2600      	movs	r6, #0
    7124:	4d0c      	ldr	r5, [pc, #48]	; (7158 <__libc_init_array+0x38>)
    7126:	4c0d      	ldr	r4, [pc, #52]	; (715c <__libc_init_array+0x3c>)
    7128:	1b64      	subs	r4, r4, r5
    712a:	10a4      	asrs	r4, r4, #2
    712c:	42a6      	cmp	r6, r4
    712e:	d109      	bne.n	7144 <__libc_init_array+0x24>
    7130:	2600      	movs	r6, #0
    7132:	f000 f9cf 	bl	74d4 <_init>
    7136:	4d0a      	ldr	r5, [pc, #40]	; (7160 <__libc_init_array+0x40>)
    7138:	4c0a      	ldr	r4, [pc, #40]	; (7164 <__libc_init_array+0x44>)
    713a:	1b64      	subs	r4, r4, r5
    713c:	10a4      	asrs	r4, r4, #2
    713e:	42a6      	cmp	r6, r4
    7140:	d105      	bne.n	714e <__libc_init_array+0x2e>
    7142:	bd70      	pop	{r4, r5, r6, pc}
    7144:	00b3      	lsls	r3, r6, #2
    7146:	58eb      	ldr	r3, [r5, r3]
    7148:	4798      	blx	r3
    714a:	3601      	adds	r6, #1
    714c:	e7ee      	b.n	712c <__libc_init_array+0xc>
    714e:	00b3      	lsls	r3, r6, #2
    7150:	58eb      	ldr	r3, [r5, r3]
    7152:	4798      	blx	r3
    7154:	3601      	adds	r6, #1
    7156:	e7f2      	b.n	713e <__libc_init_array+0x1e>
    7158:	000074e0 	.word	0x000074e0
    715c:	000074e0 	.word	0x000074e0
    7160:	000074e0 	.word	0x000074e0
    7164:	000074e4 	.word	0x000074e4

00007168 <memcpy>:
    7168:	2300      	movs	r3, #0
    716a:	b510      	push	{r4, lr}
    716c:	429a      	cmp	r2, r3
    716e:	d100      	bne.n	7172 <memcpy+0xa>
    7170:	bd10      	pop	{r4, pc}
    7172:	5ccc      	ldrb	r4, [r1, r3]
    7174:	54c4      	strb	r4, [r0, r3]
    7176:	3301      	adds	r3, #1
    7178:	e7f8      	b.n	716c <memcpy+0x4>

0000717a <memset>:
    717a:	0003      	movs	r3, r0
    717c:	1882      	adds	r2, r0, r2
    717e:	4293      	cmp	r3, r2
    7180:	d100      	bne.n	7184 <memset+0xa>
    7182:	4770      	bx	lr
    7184:	7019      	strb	r1, [r3, #0]
    7186:	3301      	adds	r3, #1
    7188:	e7f9      	b.n	717e <memset+0x4>
    718a:	0000      	movs	r0, r0
    718c:	0000014c 	.word	0x0000014c
    7190:	0000015a 	.word	0x0000015a
    7194:	00000168 	.word	0x00000168
    7198:	00000176 	.word	0x00000176
    719c:	00000184 	.word	0x00000184
    71a0:	00000002 	.word	0x00000002
    71a4:	00000003 	.word	0x00000003
    71a8:	00000028 	.word	0x00000028
    71ac:	00000029 	.word	0x00000029
    71b0:	00000004 	.word	0x00000004
    71b4:	00000005 	.word	0x00000005
    71b8:	00000006 	.word	0x00000006
    71bc:	00000007 	.word	0x00000007
    71c0:	00000020 	.word	0x00000020
    71c4:	00000021 	.word	0x00000021
    71c8:	00000022 	.word	0x00000022
    71cc:	00000023 	.word	0x00000023
    71d0:	00000024 	.word	0x00000024
    71d4:	00000025 	.word	0x00000025
    71d8:	00000026 	.word	0x00000026
    71dc:	00000027 	.word	0x00000027
    71e0:	00000008 	.word	0x00000008
    71e4:	00000009 	.word	0x00000009
    71e8:	0000000a 	.word	0x0000000a
    71ec:	0000000b 	.word	0x0000000b
    71f0:	0000ffff 	.word	0x0000ffff
    71f4:	0000ffff 	.word	0x0000ffff
    71f8:	0000ffff 	.word	0x0000ffff
    71fc:	0000ffff 	.word	0x0000ffff
    7200:	00000534 	.word	0x00000534
    7204:	0000053a 	.word	0x0000053a
    7208:	0000053a 	.word	0x0000053a
    720c:	0000053a 	.word	0x0000053a
    7210:	0000053a 	.word	0x0000053a
    7214:	0000053a 	.word	0x0000053a
    7218:	0000053a 	.word	0x0000053a
    721c:	0000053a 	.word	0x0000053a
    7220:	0000053a 	.word	0x0000053a
    7224:	0000053a 	.word	0x0000053a
    7228:	0000053a 	.word	0x0000053a
    722c:	0000053a 	.word	0x0000053a
    7230:	0000053a 	.word	0x0000053a
    7234:	0000053a 	.word	0x0000053a
    7238:	0000053a 	.word	0x0000053a
    723c:	0000053a 	.word	0x0000053a
    7240:	00000512 	.word	0x00000512
    7244:	0000053a 	.word	0x0000053a
    7248:	0000053a 	.word	0x0000053a
    724c:	0000053a 	.word	0x0000053a
    7250:	0000053a 	.word	0x0000053a
    7254:	0000053a 	.word	0x0000053a
    7258:	0000053a 	.word	0x0000053a
    725c:	0000053a 	.word	0x0000053a
    7260:	0000053a 	.word	0x0000053a
    7264:	0000053a 	.word	0x0000053a
    7268:	0000053a 	.word	0x0000053a
    726c:	0000053a 	.word	0x0000053a
    7270:	0000053a 	.word	0x0000053a
    7274:	0000053a 	.word	0x0000053a
    7278:	0000053a 	.word	0x0000053a
    727c:	0000053a 	.word	0x0000053a
    7280:	0000052e 	.word	0x0000052e
    7284:	0000053a 	.word	0x0000053a
    7288:	0000053a 	.word	0x0000053a
    728c:	0000053a 	.word	0x0000053a
    7290:	0000053a 	.word	0x0000053a
    7294:	0000053a 	.word	0x0000053a
    7298:	0000053a 	.word	0x0000053a
    729c:	0000053a 	.word	0x0000053a
    72a0:	0000053a 	.word	0x0000053a
    72a4:	0000053a 	.word	0x0000053a
    72a8:	0000053a 	.word	0x0000053a
    72ac:	0000053a 	.word	0x0000053a
    72b0:	0000053a 	.word	0x0000053a
    72b4:	0000053a 	.word	0x0000053a
    72b8:	0000053a 	.word	0x0000053a
    72bc:	0000053a 	.word	0x0000053a
    72c0:	00000528 	.word	0x00000528
    72c4:	000004d0 	.word	0x000004d0
    72c8:	000004e6 	.word	0x000004e6
    72cc:	000004fc 	.word	0x000004fc
    72d0:	000004b6 	.word	0x000004b6
    72d4:	00000be0 	.word	0x00000be0
    72d8:	00000bee 	.word	0x00000bee
    72dc:	00000bfc 	.word	0x00000bfc
    72e0:	00000c0a 	.word	0x00000c0a
    72e4:	00000c18 	.word	0x00000c18
    72e8:	00001418 	.word	0x00001418
    72ec:	00001426 	.word	0x00001426
    72f0:	00001434 	.word	0x00001434
    72f4:	00001442 	.word	0x00001442
    72f8:	00001450 	.word	0x00001450
    72fc:	000020bc 	.word	0x000020bc
    7300:	000020ca 	.word	0x000020ca
    7304:	000020d8 	.word	0x000020d8
    7308:	000020e6 	.word	0x000020e6
    730c:	000020f4 	.word	0x000020f4
    7310:	42002000 	.word	0x42002000
    7314:	42002400 	.word	0x42002400
    7318:	42002800 	.word	0x42002800
    731c:	42002c00 	.word	0x42002c00
    7320:	43000800 	.word	0x43000800
    7324:	1c1c1b1b 	.word	0x1c1c1b1b
    7328:	0000001d 	.word	0x0000001d
    732c:	00000002 	.word	0x00000002
    7330:	00000100 	.word	0x00000100
    7334:	00000002 	.word	0x00000002
    7338:	00000200 	.word	0x00000200
    733c:	00000002 	.word	0x00000002
    7340:	00000400 	.word	0x00000400
    7344:	00000002 	.word	0x00000002
    7348:	00000800 	.word	0x00000800
    734c:	00000003 	.word	0x00000003
    7350:	00000004 	.word	0x00000004
    7354:	00002a0e 	.word	0x00002a0e
    7358:	00002a0e 	.word	0x00002a0e
    735c:	000029de 	.word	0x000029de
    7360:	00002a0e 	.word	0x00002a0e
    7364:	000029f6 	.word	0x000029f6
    7368:	000029fe 	.word	0x000029fe
    736c:	00002a0e 	.word	0x00002a0e
    7370:	00002a0e 	.word	0x00002a0e
    7374:	00002a0e 	.word	0x00002a0e
    7378:	00002a0e 	.word	0x00002a0e
    737c:	00002a0e 	.word	0x00002a0e
    7380:	00002a0e 	.word	0x00002a0e
    7384:	00002a0e 	.word	0x00002a0e
    7388:	00002a0e 	.word	0x00002a0e
    738c:	00002a0e 	.word	0x00002a0e
    7390:	00002a0e 	.word	0x00002a0e
    7394:	00002a0e 	.word	0x00002a0e
    7398:	00002a0e 	.word	0x00002a0e
    739c:	00002a0e 	.word	0x00002a0e
    73a0:	00002a0e 	.word	0x00002a0e
    73a4:	00002a0e 	.word	0x00002a0e
    73a8:	00002a0e 	.word	0x00002a0e
    73ac:	00002a0e 	.word	0x00002a0e
    73b0:	00002a0e 	.word	0x00002a0e
    73b4:	00002a0e 	.word	0x00002a0e
    73b8:	00002a0e 	.word	0x00002a0e
    73bc:	00002a0e 	.word	0x00002a0e
    73c0:	00002a0e 	.word	0x00002a0e
    73c4:	00002a0e 	.word	0x00002a0e
    73c8:	00002a0e 	.word	0x00002a0e
    73cc:	00002a0e 	.word	0x00002a0e
    73d0:	00002a0e 	.word	0x00002a0e
    73d4:	00002a0e 	.word	0x00002a0e
    73d8:	00002a0e 	.word	0x00002a0e
    73dc:	00002a06 	.word	0x00002a06
    73e0:	00002a0e 	.word	0x00002a0e
    73e4:	00002a0e 	.word	0x00002a0e
    73e8:	00002a0e 	.word	0x00002a0e
    73ec:	00002a0e 	.word	0x00002a0e
    73f0:	00002a0e 	.word	0x00002a0e
    73f4:	000029e6 	.word	0x000029e6
    73f8:	000029ee 	.word	0x000029ee
    73fc:	00004905 	.word	0x00004905
    7400:	00000905 	.word	0x00000905
    7404:	42000000 	.word	0x42000000
    7408:	42000400 	.word	0x42000400
    740c:	42000800 	.word	0x42000800
    7410:	42000c00 	.word	0x42000c00
    7414:	42001000 	.word	0x42001000
    7418:	43000400 	.word	0x43000400
    741c:	00004242 	.word	0x00004242
    7420:	000042be 	.word	0x000042be
    7424:	000042be 	.word	0x000042be
    7428:	00004262 	.word	0x00004262
    742c:	0000425c 	.word	0x0000425c
    7430:	00004268 	.word	0x00004268
    7434:	00004248 	.word	0x00004248
    7438:	0000426e 	.word	0x0000426e
    743c:	000042a4 	.word	0x000042a4
    7440:	000043dc 	.word	0x000043dc
    7444:	000043ea 	.word	0x000043ea
    7448:	000043f8 	.word	0x000043f8
    744c:	00004406 	.word	0x00004406
    7450:	00004414 	.word	0x00004414
    7454:	00005d08 	.word	0x00005d08
    7458:	00005cea 	.word	0x00005cea
    745c:	00005ca4 	.word	0x00005ca4
    7460:	00005bc2 	.word	0x00005bc2
    7464:	00005ca4 	.word	0x00005ca4
    7468:	00005cdc 	.word	0x00005cdc
    746c:	00005ca4 	.word	0x00005ca4
    7470:	00005bc2 	.word	0x00005bc2
    7474:	00005cea 	.word	0x00005cea
    7478:	00005cea 	.word	0x00005cea
    747c:	00005cdc 	.word	0x00005cdc
    7480:	00005bc2 	.word	0x00005bc2
    7484:	00005bba 	.word	0x00005bba
    7488:	00005bba 	.word	0x00005bba
    748c:	00005bba 	.word	0x00005bba
    7490:	00005f20 	.word	0x00005f20
    7494:	00006368 	.word	0x00006368
    7498:	00006228 	.word	0x00006228
    749c:	00006228 	.word	0x00006228
    74a0:	00006224 	.word	0x00006224
    74a4:	00006340 	.word	0x00006340
    74a8:	00006340 	.word	0x00006340
    74ac:	00006332 	.word	0x00006332
    74b0:	00006224 	.word	0x00006224
    74b4:	00006340 	.word	0x00006340
    74b8:	00006332 	.word	0x00006332
    74bc:	00006340 	.word	0x00006340
    74c0:	00006224 	.word	0x00006224
    74c4:	00006348 	.word	0x00006348
    74c8:	00006348 	.word	0x00006348
    74cc:	00006348 	.word	0x00006348
    74d0:	0000654c 	.word	0x0000654c

000074d4 <_init>:
    74d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74d6:	46c0      	nop			; (mov r8, r8)
    74d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74da:	bc08      	pop	{r3}
    74dc:	469e      	mov	lr, r3
    74de:	4770      	bx	lr

000074e0 <__init_array_start>:
    74e0:	000000dd 	.word	0x000000dd

000074e4 <_fini>:
    74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74e6:	46c0      	nop			; (mov r8, r8)
    74e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74ea:	bc08      	pop	{r3}
    74ec:	469e      	mov	lr, r3
    74ee:	4770      	bx	lr

000074f0 <__fini_array_start>:
    74f0:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....
