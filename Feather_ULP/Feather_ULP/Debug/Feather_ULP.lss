
Feather_ULP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006a64  00006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  00006a6c  00020000  2**1
                  CONTENTS, ALLOC, LOAD, CODE
  3 .lpram        00000000  30000000  30000000  00020010  2**0
                  CONTENTS
  4 .bss          0000012c  20000010  00006a7c  00020010  2**2
                  ALLOC
  5 .stack        00002004  2000013c  00006ba8  00020010  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003b4eb  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e41  00000000  00000000  0005b57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b40  00000000  00000000  0005f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000858  00000000  00000000  00061efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  00062755  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008e00  00000000  00000000  00062e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000111ff  00000000  00000000  0006bc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009ad16  00000000  00000000  0007ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001da0  00000000  00000000  00117b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 21 00 20 9d 40 00 00 31 41 00 00 31 41 00 00     @!. .@..1A..1A..
	...
      2c:	31 41 00 00 00 00 00 00 00 00 00 00 31 41 00 00     1A..........1A..
      3c:	31 41 00 00 31 41 00 00 bd 31 00 00 cd 13 00 00     1A..1A...1......
      4c:	31 41 00 00 31 41 00 00 31 41 00 00 31 41 00 00     1A..1A..1A..1A..
      5c:	31 41 00 00 31 41 00 00 31 41 00 00 31 41 00 00     1A..1A..1A..1A..
      6c:	31 41 00 00 31 41 00 00 31 41 00 00 31 41 00 00     1A..1A..1A..1A..
      7c:	31 41 00 00 31 41 00 00 31 41 00 00 31 41 00 00     1A..1A..1A..1A..
      8c:	31 41 00 00 31 41 00 00 31 41 00 00 ad 0b 00 00     1A..1A..1A......
      9c:	31 41 00 00 31 41 00 00 31 41 00 00 31 41 00 00     1A..1A..1A..1A..
      ac:	31 41 00 00 00 00 00 00                             1A......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00006a6c 	.word	0x00006a6c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00006a6c 	.word	0x00006a6c
     10c:	00006a6c 	.word	0x00006a6c
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b04      	cmp	r3, #4
     140:	d827      	bhi.n	192 <system_apb_clock_set_mask+0x66>
     142:	009a      	lsls	r2, r3, #2
     144:	4b16      	ldr	r3, [pc, #88]	; (1a0 <system_apb_clock_set_mask+0x74>)
     146:	18d3      	adds	r3, r2, r3
     148:	681b      	ldr	r3, [r3, #0]
     14a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     14c:	4b15      	ldr	r3, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     150:	6951      	ldr	r1, [r2, #20]
     152:	683a      	ldr	r2, [r7, #0]
     154:	430a      	orrs	r2, r1
     156:	615a      	str	r2, [r3, #20]
			break;
     158:	e01d      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15c:	4a11      	ldr	r2, [pc, #68]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15e:	6991      	ldr	r1, [r2, #24]
     160:	683a      	ldr	r2, [r7, #0]
     162:	430a      	orrs	r2, r1
     164:	619a      	str	r2, [r3, #24]
			break;
     166:	e016      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     168:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16a:	4a0e      	ldr	r2, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16c:	69d1      	ldr	r1, [r2, #28]
     16e:	683a      	ldr	r2, [r7, #0]
     170:	430a      	orrs	r2, r1
     172:	61da      	str	r2, [r3, #28]
			break;
     174:	e00f      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     176:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <system_apb_clock_set_mask+0x78>)
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <system_apb_clock_set_mask+0x78>)
     17a:	6a11      	ldr	r1, [r2, #32]
     17c:	683a      	ldr	r2, [r7, #0]
     17e:	430a      	orrs	r2, r1
     180:	621a      	str	r2, [r3, #32]
			break;
     182:	e008      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     184:	4b07      	ldr	r3, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     186:	4a07      	ldr	r2, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     188:	6a51      	ldr	r1, [r2, #36]	; 0x24
     18a:	683a      	ldr	r2, [r7, #0]
     18c:	430a      	orrs	r2, r1
     18e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     190:	e001      	b.n	196 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     192:	2317      	movs	r3, #23
     194:	e000      	b.n	198 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     196:	2300      	movs	r3, #0
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}
     1a0:	00006754 	.word	0x00006754
     1a4:	40000400 	.word	0x40000400

000001a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2280      	movs	r2, #128	; 0x80
     1b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	2200      	movs	r2, #0
     1ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2201      	movs	r2, #1
     1c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	70da      	strb	r2, [r3, #3]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}

000001d0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	2b00      	cmp	r3, #0
     1e2:	d002      	beq.n	1ea <system_voltage_reference_enable+0x1a>
     1e4:	2b01      	cmp	r3, #1
     1e6:	d007      	beq.n	1f8 <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     1e8:	e00d      	b.n	206 <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     1ea:	4b08      	ldr	r3, [pc, #32]	; (20c <system_voltage_reference_enable+0x3c>)
     1ec:	4a07      	ldr	r2, [pc, #28]	; (20c <system_voltage_reference_enable+0x3c>)
     1ee:	69d2      	ldr	r2, [r2, #28]
     1f0:	2102      	movs	r1, #2
     1f2:	430a      	orrs	r2, r1
     1f4:	61da      	str	r2, [r3, #28]
			break;
     1f6:	e006      	b.n	206 <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1f8:	4b04      	ldr	r3, [pc, #16]	; (20c <system_voltage_reference_enable+0x3c>)
     1fa:	4a04      	ldr	r2, [pc, #16]	; (20c <system_voltage_reference_enable+0x3c>)
     1fc:	69d2      	ldr	r2, [r2, #28]
     1fe:	2104      	movs	r1, #4
     200:	430a      	orrs	r2, r1
     202:	61da      	str	r2, [r3, #28]
			break;
     204:	46c0      	nop			; (mov r8, r8)
	}
}
     206:	46bd      	mov	sp, r7
     208:	b002      	add	sp, #8
     20a:	bd80      	pop	{r7, pc}
     20c:	40001400 	.word	0x40001400

00000210 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     210:	b580      	push	{r7, lr}
     212:	b084      	sub	sp, #16
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     21e:	68fb      	ldr	r3, [r7, #12]
     220:	8c1b      	ldrh	r3, [r3, #32]
     222:	b29b      	uxth	r3, r3
     224:	2b00      	cmp	r3, #0
     226:	d001      	beq.n	22c <adc_is_syncing+0x1c>
		return true;
     228:	2301      	movs	r3, #1
     22a:	e000      	b.n	22e <adc_is_syncing+0x1e>
	}

	return false;
     22c:	2300      	movs	r3, #0
}
     22e:	0018      	movs	r0, r3
     230:	46bd      	mov	sp, r7
     232:	b004      	add	sp, #16
     234:	bd80      	pop	{r7, pc}
	...

00000238 <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     238:	b580      	push	{r7, lr}
     23a:	b084      	sub	sp, #16
     23c:	af00      	add	r7, sp, #0
     23e:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     240:	4b0e      	ldr	r3, [pc, #56]	; (27c <_adc_get_inst_index+0x44>)
     242:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     244:	2300      	movs	r3, #0
     246:	60fb      	str	r3, [r7, #12]
     248:	e010      	b.n	26c <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	009b      	lsls	r3, r3, #2
     24e:	2210      	movs	r2, #16
     250:	4694      	mov	ip, r2
     252:	44bc      	add	ip, r7
     254:	4463      	add	r3, ip
     256:	3b08      	subs	r3, #8
     258:	681a      	ldr	r2, [r3, #0]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	429a      	cmp	r2, r3
     25e:	d102      	bne.n	266 <_adc_get_inst_index+0x2e>
			return i;
     260:	68fb      	ldr	r3, [r7, #12]
     262:	b2db      	uxtb	r3, r3
     264:	e006      	b.n	274 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     266:	68fb      	ldr	r3, [r7, #12]
     268:	3301      	adds	r3, #1
     26a:	60fb      	str	r3, [r7, #12]
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	2b00      	cmp	r3, #0
     270:	d0eb      	beq.n	24a <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     272:	2300      	movs	r3, #0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b004      	add	sp, #16
     27a:	bd80      	pop	{r7, pc}
     27c:	43000c00 	.word	0x43000c00

00000280 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2200      	movs	r2, #0
     292:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	2200      	movs	r2, #0
     29e:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	2200      	movs	r2, #0
     2a4:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     2a6:	687b      	ldr	r3, [r7, #4]
     2a8:	2200      	movs	r2, #0
     2aa:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	2200      	movs	r2, #0
     2b0:	61da      	str	r2, [r3, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	2201      	movs	r2, #1
     2b6:	711a      	strb	r2, [r3, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	22c0      	movs	r2, #192	; 0xc0
     2bc:	0152      	lsls	r2, r2, #5
     2be:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	2200      	movs	r2, #0
     2c4:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	2200      	movs	r2, #0
     2ca:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	2200      	movs	r2, #0
     2d6:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2200      	movs	r2, #0
     2dc:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	222a      	movs	r2, #42	; 0x2a
     2e2:	2100      	movs	r1, #0
     2e4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	2200      	movs	r2, #0
     2ea:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2200      	movs	r2, #0
     2f0:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	2200      	movs	r2, #0
     2f6:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	2200      	movs	r2, #0
     2fc:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	2200      	movs	r2, #0
     302:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     304:	687b      	ldr	r3, [r7, #4]
     306:	2224      	movs	r2, #36	; 0x24
     308:	2100      	movs	r1, #0
     30a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	2200      	movs	r2, #0
     310:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     312:	687b      	ldr	r3, [r7, #4]
     314:	2200      	movs	r2, #0
     316:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     318:	687b      	ldr	r3, [r7, #4]
     31a:	2200      	movs	r2, #0
     31c:	755a      	strb	r2, [r3, #21]
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b002      	add	sp, #8
     324:	bd80      	pop	{r7, pc}
	...

00000328 <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     328:	b580      	push	{r7, lr}
     32a:	b09c      	sub	sp, #112	; 0x70
     32c:	af00      	add	r7, sp, #0
     32e:	0002      	movs	r2, r0
     330:	6039      	str	r1, [r7, #0]
     332:	1dfb      	adds	r3, r7, #7
     334:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30)
	const uint32_t pinmapping[] = {
     336:	230c      	movs	r3, #12
     338:	18fa      	adds	r2, r7, r3
     33a:	4b16      	ldr	r3, [pc, #88]	; (394 <_adc_configure_ain_pin+0x6c>)
     33c:	0010      	movs	r0, r2
     33e:	0019      	movs	r1, r3
     340:	2360      	movs	r3, #96	; 0x60
     342:	001a      	movs	r2, r3
     344:	4b14      	ldr	r3, [pc, #80]	; (398 <_adc_configure_ain_pin+0x70>)
     346:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     348:	4b14      	ldr	r3, [pc, #80]	; (39c <_adc_configure_ain_pin+0x74>)
     34a:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (pin <= _adc_extchannel_msb[index]) {
     34c:	2213      	movs	r2, #19
     34e:	683b      	ldr	r3, [r7, #0]
     350:	429a      	cmp	r2, r3
     352:	d31a      	bcc.n	38a <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     354:	230c      	movs	r3, #12
     356:	18fb      	adds	r3, r7, r3
     358:	683a      	ldr	r2, [r7, #0]
     35a:	0092      	lsls	r2, r2, #2
     35c:	58d3      	ldr	r3, [r2, r3]
     35e:	66fb      	str	r3, [r7, #108]	; 0x6c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     360:	2308      	movs	r3, #8
     362:	18fb      	adds	r3, r7, r3
     364:	0018      	movs	r0, r3
     366:	4b0e      	ldr	r3, [pc, #56]	; (3a0 <_adc_configure_ain_pin+0x78>)
     368:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     36a:	2308      	movs	r3, #8
     36c:	18fb      	adds	r3, r7, r3
     36e:	2200      	movs	r2, #0
     370:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     372:	2308      	movs	r3, #8
     374:	18fb      	adds	r3, r7, r3
     376:	2201      	movs	r2, #1
     378:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     37c:	b2db      	uxtb	r3, r3
     37e:	2208      	movs	r2, #8
     380:	18ba      	adds	r2, r7, r2
     382:	0011      	movs	r1, r2
     384:	0018      	movs	r0, r3
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <_adc_configure_ain_pin+0x7c>)
     388:	4798      	blx	r3
	}
}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	46bd      	mov	sp, r7
     38e:	b01c      	add	sp, #112	; 0x70
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	00006768 	.word	0x00006768
     398:	00006731 	.word	0x00006731
     39c:	0000ffff 	.word	0x0000ffff
     3a0:	000001a9 	.word	0x000001a9
     3a4:	00004015 	.word	0x00004015

000003a8 <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b08a      	sub	sp, #40	; 0x28
     3ac:	af00      	add	r7, sp, #0
     3ae:	60b9      	str	r1, [r7, #8]
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	230f      	movs	r3, #15
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	1c02      	adds	r2, r0, #0
     3b8:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     3ba:	2327      	movs	r3, #39	; 0x27
     3bc:	18fb      	adds	r3, r7, r3
     3be:	2200      	movs	r2, #0
     3c0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     3c2:	2310      	movs	r3, #16
     3c4:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3c6:	231f      	movs	r3, #31
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	2200      	movs	r2, #0
     3cc:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     3ce:	68bb      	ldr	r3, [r7, #8]
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3d4:	2314      	movs	r3, #20
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	0018      	movs	r0, r3
     3da:	4bc5      	ldr	r3, [pc, #788]	; (6f0 <_adc_set_config+0x348>)
     3dc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	2314      	movs	r3, #20
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     3e8:	221e      	movs	r2, #30
     3ea:	2314      	movs	r3, #20
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	0019      	movs	r1, r3
     3f0:	0010      	movs	r0, r2
     3f2:	4bc0      	ldr	r3, [pc, #768]	; (6f4 <_adc_set_config+0x34c>)
     3f4:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     3f6:	231e      	movs	r3, #30
     3f8:	0018      	movs	r0, r3
     3fa:	4bbf      	ldr	r3, [pc, #764]	; (6f8 <_adc_set_config+0x350>)
     3fc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	791b      	ldrb	r3, [r3, #4]
     402:	001a      	movs	r2, r3
     404:	230f      	movs	r3, #15
     406:	18fb      	adds	r3, r7, r3
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	0011      	movs	r1, r2
     40c:	0018      	movs	r0, r3
     40e:	4bbb      	ldr	r3, [pc, #748]	; (6fc <_adc_set_config+0x354>)
     410:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     412:	687b      	ldr	r3, [r7, #4]
     414:	88db      	ldrh	r3, [r3, #6]
     416:	001a      	movs	r2, r3
     418:	230f      	movs	r3, #15
     41a:	18fb      	adds	r3, r7, r3
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	0011      	movs	r1, r2
     420:	0018      	movs	r0, r3
     422:	4bb6      	ldr	r3, [pc, #728]	; (6fc <_adc_set_config+0x354>)
     424:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     426:	231e      	movs	r3, #30
     428:	18fb      	adds	r3, r7, r3
     42a:	2200      	movs	r2, #0
     42c:	701a      	strb	r2, [r3, #0]
     42e:	e01a      	b.n	466 <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     430:	687b      	ldr	r3, [r7, #4]
     432:	691b      	ldr	r3, [r3, #16]
     434:	221e      	movs	r2, #30
     436:	18ba      	adds	r2, r7, r2
     438:	7812      	ldrb	r2, [r2, #0]
     43a:	2101      	movs	r1, #1
     43c:	4091      	lsls	r1, r2
     43e:	000a      	movs	r2, r1
     440:	4013      	ands	r3, r2
     442:	d009      	beq.n	458 <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     444:	231e      	movs	r3, #30
     446:	18fb      	adds	r3, r7, r3
     448:	781a      	ldrb	r2, [r3, #0]
     44a:	230f      	movs	r3, #15
     44c:	18fb      	adds	r3, r7, r3
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	0011      	movs	r1, r2
     452:	0018      	movs	r0, r3
     454:	4ba9      	ldr	r3, [pc, #676]	; (6fc <_adc_set_config+0x354>)
     456:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     458:	231e      	movs	r3, #30
     45a:	18fb      	adds	r3, r7, r3
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	231e      	movs	r3, #30
     460:	18fb      	adds	r3, r7, r3
     462:	3201      	adds	r2, #1
     464:	701a      	strb	r2, [r3, #0]
     466:	231e      	movs	r3, #30
     468:	18fb      	adds	r3, r7, r3
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	2213      	movs	r2, #19
     46e:	4293      	cmp	r3, r2
     470:	d9de      	bls.n	430 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     472:	687b      	ldr	r3, [r7, #4]
     474:	7b5b      	ldrb	r3, [r3, #13]
     476:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     478:	b25a      	sxtb	r2, r3
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	7b9b      	ldrb	r3, [r3, #14]
     47e:	01db      	lsls	r3, r3, #7
     480:	b25b      	sxtb	r3, r3
     482:	4313      	orrs	r3, r2
     484:	b25b      	sxtb	r3, r3
     486:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     488:	69bb      	ldr	r3, [r7, #24]
     48a:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	7d1b      	ldrb	r3, [r3, #20]
     490:	01db      	lsls	r3, r3, #7
			| (config->reference);
     492:	b25a      	sxtb	r2, r3
     494:	687b      	ldr	r3, [r7, #4]
     496:	785b      	ldrb	r3, [r3, #1]
     498:	b25b      	sxtb	r3, r3
     49a:	4313      	orrs	r3, r2
     49c:	b25b      	sxtb	r3, r3
     49e:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     4a0:	69bb      	ldr	r3, [r7, #24]
     4a2:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	78db      	ldrb	r3, [r3, #3]
     4a8:	2b34      	cmp	r3, #52	; 0x34
     4aa:	d846      	bhi.n	53a <_adc_set_config+0x192>
     4ac:	009a      	lsls	r2, r3, #2
     4ae:	4b94      	ldr	r3, [pc, #592]	; (700 <_adc_set_config+0x358>)
     4b0:	18d3      	adds	r3, r2, r3
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4b6:	2327      	movs	r3, #39	; 0x27
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	687a      	ldr	r2, [r7, #4]
     4bc:	7a52      	ldrb	r2, [r2, #9]
     4be:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     4c0:	231f      	movs	r3, #31
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	687a      	ldr	r2, [r7, #4]
     4c6:	7a12      	ldrb	r2, [r2, #8]
     4c8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ca:	2310      	movs	r3, #16
     4cc:	623b      	str	r3, [r7, #32]
		break;
     4ce:	e036      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4d0:	2327      	movs	r3, #39	; 0x27
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	2201      	movs	r2, #1
     4d6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4d8:	231f      	movs	r3, #31
     4da:	18fb      	adds	r3, r7, r3
     4dc:	2202      	movs	r2, #2
     4de:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e0:	2310      	movs	r3, #16
     4e2:	623b      	str	r3, [r7, #32]
		break;
     4e4:	e02b      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     4e6:	2327      	movs	r3, #39	; 0x27
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	2202      	movs	r2, #2
     4ec:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     4ee:	231f      	movs	r3, #31
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	2204      	movs	r2, #4
     4f4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4f6:	2310      	movs	r3, #16
     4f8:	623b      	str	r3, [r7, #32]
		break;
     4fa:	e020      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4fc:	2327      	movs	r3, #39	; 0x27
     4fe:	18fb      	adds	r3, r7, r3
     500:	2201      	movs	r2, #1
     502:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     504:	231f      	movs	r3, #31
     506:	18fb      	adds	r3, r7, r3
     508:	2206      	movs	r2, #6
     50a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     50c:	2310      	movs	r3, #16
     50e:	623b      	str	r3, [r7, #32]
		break;
     510:	e015      	b.n	53e <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     512:	2327      	movs	r3, #39	; 0x27
     514:	18fb      	adds	r3, r7, r3
     516:	2200      	movs	r2, #0
     518:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     51a:	231f      	movs	r3, #31
     51c:	18fb      	adds	r3, r7, r3
     51e:	2208      	movs	r2, #8
     520:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     522:	2310      	movs	r3, #16
     524:	623b      	str	r3, [r7, #32]
		break;
     526:	e00a      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     528:	2330      	movs	r3, #48	; 0x30
     52a:	623b      	str	r3, [r7, #32]
		break;
     52c:	e007      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     52e:	2320      	movs	r3, #32
     530:	623b      	str	r3, [r7, #32]
		break;
     532:	e004      	b.n	53e <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     534:	2300      	movs	r3, #0
     536:	623b      	str	r3, [r7, #32]
		break;
     538:	e001      	b.n	53e <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     53a:	2317      	movs	r3, #23
     53c:	e1a7      	b.n	88e <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     53e:	2327      	movs	r3, #39	; 0x27
     540:	18fb      	adds	r3, r7, r3
     542:	781b      	ldrb	r3, [r3, #0]
     544:	011b      	lsls	r3, r3, #4
     546:	b2db      	uxtb	r3, r3
     548:	2270      	movs	r2, #112	; 0x70
     54a:	4013      	ands	r3, r2
     54c:	b2da      	uxtb	r2, r3
     54e:	231f      	movs	r3, #31
     550:	18fb      	adds	r3, r7, r3
     552:	781b      	ldrb	r3, [r3, #0]
     554:	4313      	orrs	r3, r2
     556:	b2da      	uxtb	r2, r3
     558:	69bb      	ldr	r3, [r7, #24]
     55a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	68bb      	ldr	r3, [r7, #8]
     560:	0018      	movs	r0, r3
     562:	4b68      	ldr	r3, [pc, #416]	; (704 <_adc_set_config+0x35c>)
     564:	4798      	blx	r3
     566:	1e03      	subs	r3, r0, #0
     568:	d1f9      	bne.n	55e <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	7d5b      	ldrb	r3, [r3, #21]
     56e:	2b3f      	cmp	r3, #63	; 0x3f
     570:	d901      	bls.n	576 <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     572:	2317      	movs	r3, #23
     574:	e18b      	b.n	88e <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     576:	687b      	ldr	r3, [r7, #4]
     578:	7d5b      	ldrb	r3, [r3, #21]
     57a:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	7bdb      	ldrb	r3, [r3, #15]
     580:	01db      	lsls	r3, r3, #7
     582:	b25b      	sxtb	r3, r3
     584:	4313      	orrs	r3, r2
     586:	b25b      	sxtb	r3, r3
     588:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     58a:	69bb      	ldr	r3, [r7, #24]
     58c:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     58e:	46c0      	nop			; (mov r8, r8)
     590:	68bb      	ldr	r3, [r7, #8]
     592:	0018      	movs	r0, r3
     594:	4b5b      	ldr	r3, [pc, #364]	; (704 <_adc_set_config+0x35c>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	d1f9      	bne.n	590 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     5a0:	69bb      	ldr	r3, [r7, #24]
     5a2:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	2224      	movs	r2, #36	; 0x24
     5a8:	5c9b      	ldrb	r3, [r3, r2]
     5aa:	b29b      	uxth	r3, r3
     5ac:	00db      	lsls	r3, r3, #3
     5ae:	b29a      	uxth	r2, r3
			resolution |
     5b0:	6a3b      	ldr	r3, [r7, #32]
     5b2:	b29b      	uxth	r3, r3
     5b4:	4313      	orrs	r3, r2
     5b6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	7b1b      	ldrb	r3, [r3, #12]
     5bc:	b29b      	uxth	r3, r3
     5be:	009b      	lsls	r3, r3, #2
     5c0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     5c2:	4313      	orrs	r3, r2
     5c4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	7a9b      	ldrb	r3, [r3, #10]
     5ca:	b29b      	uxth	r3, r3
     5cc:	18db      	adds	r3, r3, r3
     5ce:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     5d0:	4313      	orrs	r3, r2
     5d2:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	7adb      	ldrb	r3, [r3, #11]
     5d8:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     5da:	4313      	orrs	r3, r2
     5dc:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     5de:	69bb      	ldr	r3, [r7, #24]
     5e0:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	68bb      	ldr	r3, [r7, #8]
     5e6:	0018      	movs	r0, r3
     5e8:	4b46      	ldr	r3, [pc, #280]	; (704 <_adc_set_config+0x35c>)
     5ea:	4798      	blx	r3
     5ec:	1e03      	subs	r3, r0, #0
     5ee:	d1f9      	bne.n	5e4 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	8b1b      	ldrh	r3, [r3, #24]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d100      	bne.n	5fa <_adc_set_config+0x252>
     5f8:	e0bf      	b.n	77a <_adc_set_config+0x3d2>
		switch (resolution) {
     5fa:	6a3b      	ldr	r3, [r7, #32]
     5fc:	2b10      	cmp	r3, #16
     5fe:	d100      	bne.n	602 <_adc_set_config+0x25a>
     600:	e08e      	b.n	720 <_adc_set_config+0x378>
     602:	d802      	bhi.n	60a <_adc_set_config+0x262>
     604:	2b00      	cmp	r3, #0
     606:	d04d      	beq.n	6a4 <_adc_set_config+0x2fc>
     608:	e0b7      	b.n	77a <_adc_set_config+0x3d2>
     60a:	2b20      	cmp	r3, #32
     60c:	d023      	beq.n	656 <_adc_set_config+0x2ae>
     60e:	2b30      	cmp	r3, #48	; 0x30
     610:	d000      	beq.n	614 <_adc_set_config+0x26c>
     612:	e0b2      	b.n	77a <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     614:	687b      	ldr	r3, [r7, #4]
     616:	7adb      	ldrb	r3, [r3, #11]
     618:	2b00      	cmp	r3, #0
     61a:	d011      	beq.n	640 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     620:	2b7f      	cmp	r3, #127	; 0x7f
     622:	dc0b      	bgt.n	63c <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     624:	687b      	ldr	r3, [r7, #4]
     626:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     628:	3380      	adds	r3, #128	; 0x80
     62a:	db07      	blt.n	63c <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     630:	2b7f      	cmp	r3, #127	; 0x7f
     632:	dc03      	bgt.n	63c <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     634:	687b      	ldr	r3, [r7, #4]
     636:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     638:	3380      	adds	r3, #128	; 0x80
     63a:	da01      	bge.n	640 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     63c:	2317      	movs	r3, #23
     63e:	e126      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     640:	687b      	ldr	r3, [r7, #4]
     642:	69db      	ldr	r3, [r3, #28]
     644:	2bff      	cmp	r3, #255	; 0xff
     646:	dc04      	bgt.n	652 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     648:	687b      	ldr	r3, [r7, #4]
     64a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     64c:	2bff      	cmp	r3, #255	; 0xff
     64e:	dc00      	bgt.n	652 <_adc_set_config+0x2aa>
     650:	e08c      	b.n	76c <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     652:	2317      	movs	r3, #23
     654:	e11b      	b.n	88e <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     656:	687b      	ldr	r3, [r7, #4]
     658:	7adb      	ldrb	r3, [r3, #11]
     65a:	2b00      	cmp	r3, #0
     65c:	d015      	beq.n	68a <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     65e:	687b      	ldr	r3, [r7, #4]
     660:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     662:	4a29      	ldr	r2, [pc, #164]	; (708 <_adc_set_config+0x360>)
     664:	4293      	cmp	r3, r2
     666:	dc0e      	bgt.n	686 <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     668:	687b      	ldr	r3, [r7, #4]
     66a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     66c:	4a27      	ldr	r2, [pc, #156]	; (70c <_adc_set_config+0x364>)
     66e:	4293      	cmp	r3, r2
     670:	db09      	blt.n	686 <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     672:	687b      	ldr	r3, [r7, #4]
     674:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     676:	4a24      	ldr	r2, [pc, #144]	; (708 <_adc_set_config+0x360>)
     678:	4293      	cmp	r3, r2
     67a:	dc04      	bgt.n	686 <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     680:	4a22      	ldr	r2, [pc, #136]	; (70c <_adc_set_config+0x364>)
     682:	4293      	cmp	r3, r2
     684:	da01      	bge.n	68a <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     686:	2317      	movs	r3, #23
     688:	e101      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	69db      	ldr	r3, [r3, #28]
     68e:	4a20      	ldr	r2, [pc, #128]	; (710 <_adc_set_config+0x368>)
     690:	4293      	cmp	r3, r2
     692:	dc05      	bgt.n	6a0 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     694:	687b      	ldr	r3, [r7, #4]
     696:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     698:	4a1d      	ldr	r2, [pc, #116]	; (710 <_adc_set_config+0x368>)
     69a:	4293      	cmp	r3, r2
     69c:	dc00      	bgt.n	6a0 <_adc_set_config+0x2f8>
     69e:	e067      	b.n	770 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6a0:	2317      	movs	r3, #23
     6a2:	e0f4      	b.n	88e <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	7adb      	ldrb	r3, [r3, #11]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d015      	beq.n	6d8 <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6b0:	4a18      	ldr	r2, [pc, #96]	; (714 <_adc_set_config+0x36c>)
     6b2:	4293      	cmp	r3, r2
     6b4:	dc0e      	bgt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     6ba:	4a17      	ldr	r2, [pc, #92]	; (718 <_adc_set_config+0x370>)
     6bc:	4293      	cmp	r3, r2
     6be:	db09      	blt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     6c4:	4a13      	ldr	r2, [pc, #76]	; (714 <_adc_set_config+0x36c>)
     6c6:	4293      	cmp	r3, r2
     6c8:	dc04      	bgt.n	6d4 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     6ce:	4a12      	ldr	r2, [pc, #72]	; (718 <_adc_set_config+0x370>)
     6d0:	4293      	cmp	r3, r2
     6d2:	da01      	bge.n	6d8 <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6d4:	2317      	movs	r3, #23
     6d6:	e0da      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	69db      	ldr	r3, [r3, #28]
     6dc:	4a0f      	ldr	r2, [pc, #60]	; (71c <_adc_set_config+0x374>)
     6de:	4293      	cmp	r3, r2
     6e0:	dc04      	bgt.n	6ec <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     6e6:	4a0d      	ldr	r2, [pc, #52]	; (71c <_adc_set_config+0x374>)
     6e8:	4293      	cmp	r3, r2
     6ea:	dd43      	ble.n	774 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6ec:	2317      	movs	r3, #23
     6ee:	e0ce      	b.n	88e <_adc_set_config+0x4e6>
     6f0:	00000115 	.word	0x00000115
     6f4:	00003d61 	.word	0x00003d61
     6f8:	00003da1 	.word	0x00003da1
     6fc:	00000329 	.word	0x00000329
     700:	000067c8 	.word	0x000067c8
     704:	00000211 	.word	0x00000211
     708:	000001ff 	.word	0x000001ff
     70c:	fffffe00 	.word	0xfffffe00
     710:	000003ff 	.word	0x000003ff
     714:	000007ff 	.word	0x000007ff
     718:	fffff800 	.word	0xfffff800
     71c:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     720:	687b      	ldr	r3, [r7, #4]
     722:	7adb      	ldrb	r3, [r3, #11]
     724:	2b00      	cmp	r3, #0
     726:	d015      	beq.n	754 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     728:	687b      	ldr	r3, [r7, #4]
     72a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     72c:	4a5a      	ldr	r2, [pc, #360]	; (898 <_adc_set_config+0x4f0>)
     72e:	4293      	cmp	r3, r2
     730:	dc0e      	bgt.n	750 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     732:	687b      	ldr	r3, [r7, #4]
     734:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     736:	4a59      	ldr	r2, [pc, #356]	; (89c <_adc_set_config+0x4f4>)
     738:	4293      	cmp	r3, r2
     73a:	db09      	blt.n	750 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     740:	4a55      	ldr	r2, [pc, #340]	; (898 <_adc_set_config+0x4f0>)
     742:	4293      	cmp	r3, r2
     744:	dc04      	bgt.n	750 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     746:	687b      	ldr	r3, [r7, #4]
     748:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     74a:	4a54      	ldr	r2, [pc, #336]	; (89c <_adc_set_config+0x4f4>)
     74c:	4293      	cmp	r3, r2
     74e:	da01      	bge.n	754 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     750:	2317      	movs	r3, #23
     752:	e09c      	b.n	88e <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     754:	687b      	ldr	r3, [r7, #4]
     756:	69db      	ldr	r3, [r3, #28]
     758:	4a51      	ldr	r2, [pc, #324]	; (8a0 <_adc_set_config+0x4f8>)
     75a:	4293      	cmp	r3, r2
     75c:	dc04      	bgt.n	768 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     75e:	687b      	ldr	r3, [r7, #4]
     760:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     762:	4a4f      	ldr	r2, [pc, #316]	; (8a0 <_adc_set_config+0x4f8>)
     764:	4293      	cmp	r3, r2
     766:	dd07      	ble.n	778 <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     768:	2317      	movs	r3, #23
     76a:	e090      	b.n	88e <_adc_set_config+0x4e6>
			break;
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	e004      	b.n	77a <_adc_set_config+0x3d2>
			break;
     770:	46c0      	nop			; (mov r8, r8)
     772:	e002      	b.n	77a <_adc_set_config+0x3d2>
			break;
     774:	46c0      	nop			; (mov r8, r8)
     776:	e000      	b.n	77a <_adc_set_config+0x3d2>
			}
			break;
     778:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     77a:	69bb      	ldr	r3, [r7, #24]
     77c:	895b      	ldrh	r3, [r3, #10]
     77e:	b29a      	uxth	r2, r3
     780:	687b      	ldr	r3, [r7, #4]
     782:	8b1b      	ldrh	r3, [r3, #24]
     784:	4313      	orrs	r3, r2
     786:	b29a      	uxth	r2, r3
     788:	69bb      	ldr	r3, [r7, #24]
     78a:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	68bb      	ldr	r3, [r7, #8]
     790:	0018      	movs	r0, r3
     792:	4b44      	ldr	r3, [pc, #272]	; (8a4 <_adc_set_config+0x4fc>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     79e:	b29a      	uxth	r2, r3
     7a0:	69bb      	ldr	r3, [r7, #24]
     7a2:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     7a4:	46c0      	nop			; (mov r8, r8)
     7a6:	68bb      	ldr	r3, [r7, #8]
     7a8:	0018      	movs	r0, r3
     7aa:	4b3e      	ldr	r3, [pc, #248]	; (8a4 <_adc_set_config+0x4fc>)
     7ac:	4798      	blx	r3
     7ae:	1e03      	subs	r3, r0, #0
     7b0:	d1f9      	bne.n	7a6 <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	6a1b      	ldr	r3, [r3, #32]
     7b6:	b29a      	uxth	r2, r3
     7b8:	69bb      	ldr	r3, [r7, #24]
     7ba:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     7bc:	46c0      	nop			; (mov r8, r8)
     7be:	68bb      	ldr	r3, [r7, #8]
     7c0:	0018      	movs	r0, r3
     7c2:	4b38      	ldr	r3, [pc, #224]	; (8a4 <_adc_set_config+0x4fc>)
     7c4:	4798      	blx	r3
     7c6:	1e03      	subs	r3, r0, #0
     7c8:	d1f9      	bne.n	7be <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	791b      	ldrb	r3, [r3, #4]
     7d2:	b29b      	uxth	r3, r3
			config->negative_input |
     7d4:	4313      	orrs	r3, r2
     7d6:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     7d8:	69bb      	ldr	r3, [r7, #24]
     7da:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	68bb      	ldr	r3, [r7, #8]
     7e0:	0018      	movs	r0, r3
     7e2:	4b30      	ldr	r3, [pc, #192]	; (8a4 <_adc_set_config+0x4fc>)
     7e4:	4798      	blx	r3
     7e6:	1e03      	subs	r3, r0, #0
     7e8:	d1f9      	bne.n	7de <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	222a      	movs	r2, #42	; 0x2a
     7ee:	5c9a      	ldrb	r2, [r3, r2]
     7f0:	69bb      	ldr	r3, [r7, #24]
     7f2:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7f4:	69bb      	ldr	r3, [r7, #24]
     7f6:	2207      	movs	r2, #7
     7f8:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	2224      	movs	r2, #36	; 0x24
     7fe:	5c9b      	ldrb	r3, [r3, r2]
     800:	2b00      	cmp	r3, #0
     802:	d02c      	beq.n	85e <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     804:	687b      	ldr	r3, [r7, #4]
     806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     808:	4a27      	ldr	r2, [pc, #156]	; (8a8 <_adc_set_config+0x500>)
     80a:	4293      	cmp	r3, r2
     80c:	d901      	bls.n	812 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     80e:	2317      	movs	r3, #23
     810:	e03d      	b.n	88e <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     812:	687b      	ldr	r3, [r7, #4]
     814:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     816:	69bb      	ldr	r3, [r7, #24]
     818:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	68bb      	ldr	r3, [r7, #8]
     81e:	0018      	movs	r0, r3
     820:	4b20      	ldr	r3, [pc, #128]	; (8a4 <_adc_set_config+0x4fc>)
     822:	4798      	blx	r3
     824:	1e03      	subs	r3, r0, #0
     826:	d1f9      	bne.n	81c <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     828:	687b      	ldr	r3, [r7, #4]
     82a:	2228      	movs	r2, #40	; 0x28
     82c:	5e9b      	ldrsh	r3, [r3, r2]
     82e:	4a1f      	ldr	r2, [pc, #124]	; (8ac <_adc_set_config+0x504>)
     830:	4293      	cmp	r3, r2
     832:	dc05      	bgt.n	840 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     834:	687b      	ldr	r3, [r7, #4]
     836:	2228      	movs	r2, #40	; 0x28
     838:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     83a:	4a1d      	ldr	r2, [pc, #116]	; (8b0 <_adc_set_config+0x508>)
     83c:	4293      	cmp	r3, r2
     83e:	da01      	bge.n	844 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     840:	2317      	movs	r3, #23
     842:	e024      	b.n	88e <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     844:	687b      	ldr	r3, [r7, #4]
     846:	2228      	movs	r2, #40	; 0x28
     848:	5e9b      	ldrsh	r3, [r3, r2]
     84a:	b29a      	uxth	r2, r3
     84c:	69bb      	ldr	r3, [r7, #24]
     84e:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     850:	46c0      	nop			; (mov r8, r8)
     852:	68bb      	ldr	r3, [r7, #8]
     854:	0018      	movs	r0, r3
     856:	4b13      	ldr	r3, [pc, #76]	; (8a4 <_adc_set_config+0x4fc>)
     858:	4798      	blx	r3
     85a:	1e03      	subs	r3, r0, #0
     85c:	d1f9      	bne.n	852 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     85e:	4b15      	ldr	r3, [pc, #84]	; (8b4 <_adc_set_config+0x50c>)
     860:	681b      	ldr	r3, [r3, #0]
     862:	2200      	movs	r2, #0
     864:	40d3      	lsrs	r3, r2
     866:	b29b      	uxth	r3, r3
     868:	021b      	lsls	r3, r3, #8
     86a:	b29a      	uxth	r2, r3
     86c:	23e0      	movs	r3, #224	; 0xe0
     86e:	00db      	lsls	r3, r3, #3
     870:	4013      	ands	r3, r2
     872:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     874:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <_adc_set_config+0x50c>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	2103      	movs	r1, #3
     87a:	40cb      	lsrs	r3, r1
     87c:	b29b      	uxth	r3, r3
     87e:	2107      	movs	r1, #7
     880:	400b      	ands	r3, r1
     882:	b29b      	uxth	r3, r3
			) |
     884:	4313      	orrs	r3, r2
     886:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     888:	69bb      	ldr	r3, [r7, #24]
     88a:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     88c:	2300      	movs	r3, #0
}
     88e:	0018      	movs	r0, r3
     890:	46bd      	mov	sp, r7
     892:	b00a      	add	sp, #40	; 0x28
     894:	bd80      	pop	{r7, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00007fff 	.word	0x00007fff
     89c:	ffff8000 	.word	0xffff8000
     8a0:	0000ffff 	.word	0x0000ffff
     8a4:	00000211 	.word	0x00000211
     8a8:	00000fff 	.word	0x00000fff
     8ac:	000007ff 	.word	0x000007ff
     8b0:	fffff800 	.word	0xfffff800
     8b4:	00806020 	.word	0x00806020

000008b8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8b8:	b590      	push	{r4, r7, lr}
     8ba:	b087      	sub	sp, #28
     8bc:	af00      	add	r7, sp, #0
     8be:	60f8      	str	r0, [r7, #12]
     8c0:	60b9      	str	r1, [r7, #8]
     8c2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     8c4:	2316      	movs	r3, #22
     8c6:	18fc      	adds	r4, r7, r3
     8c8:	68bb      	ldr	r3, [r7, #8]
     8ca:	0018      	movs	r0, r3
     8cc:	4b3d      	ldr	r3, [pc, #244]	; (9c4 <adc_init+0x10c>)
     8ce:	4798      	blx	r3
     8d0:	0003      	movs	r3, r0
     8d2:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	68ba      	ldr	r2, [r7, #8]
     8d8:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     8da:	2108      	movs	r1, #8
     8dc:	2003      	movs	r0, #3
     8de:	4b3a      	ldr	r3, [pc, #232]	; (9c8 <adc_init+0x110>)
     8e0:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8e2:	68bb      	ldr	r3, [r7, #8]
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	b2db      	uxtb	r3, r3
     8e8:	001a      	movs	r2, r3
     8ea:	2301      	movs	r3, #1
     8ec:	4013      	ands	r3, r2
     8ee:	d001      	beq.n	8f4 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     8f0:	2305      	movs	r3, #5
     8f2:	e062      	b.n	9ba <adc_init+0x102>
	}

	while (adc_is_syncing(module_inst)) {
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	0018      	movs	r0, r3
     8fa:	4b34      	ldr	r3, [pc, #208]	; (9cc <adc_init+0x114>)
     8fc:	4798      	blx	r3
     8fe:	1e03      	subs	r3, r0, #0
     900:	d1f9      	bne.n	8f6 <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     902:	68bb      	ldr	r3, [r7, #8]
     904:	781b      	ldrb	r3, [r3, #0]
     906:	b2db      	uxtb	r3, r3
     908:	001a      	movs	r2, r3
     90a:	2302      	movs	r3, #2
     90c:	4013      	ands	r3, r2
     90e:	d001      	beq.n	914 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     910:	231c      	movs	r3, #28
     912:	e052      	b.n	9ba <adc_init+0x102>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     914:	687b      	ldr	r3, [r7, #4]
     916:	785a      	ldrb	r2, [r3, #1]
     918:	68fb      	ldr	r3, [r7, #12]
     91a:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	791b      	ldrb	r3, [r3, #4]
     920:	2b00      	cmp	r3, #0
     922:	d102      	bne.n	92a <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     924:	2001      	movs	r0, #1
     926:	4b2a      	ldr	r3, [pc, #168]	; (9d0 <adc_init+0x118>)
     928:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     92a:	2317      	movs	r3, #23
     92c:	18fb      	adds	r3, r7, r3
     92e:	2200      	movs	r2, #0
     930:	701a      	strb	r2, [r3, #0]
     932:	e00e      	b.n	952 <adc_init+0x9a>
		module_inst->callback[i] = NULL;
     934:	2317      	movs	r3, #23
     936:	18fb      	adds	r3, r7, r3
     938:	781a      	ldrb	r2, [r3, #0]
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	3202      	adds	r2, #2
     93e:	0092      	lsls	r2, r2, #2
     940:	2100      	movs	r1, #0
     942:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     944:	2317      	movs	r3, #23
     946:	18fb      	adds	r3, r7, r3
     948:	781a      	ldrb	r2, [r3, #0]
     94a:	2317      	movs	r3, #23
     94c:	18fb      	adds	r3, r7, r3
     94e:	3201      	adds	r2, #1
     950:	701a      	strb	r2, [r3, #0]
     952:	2317      	movs	r3, #23
     954:	18fb      	adds	r3, r7, r3
     956:	781b      	ldrb	r3, [r3, #0]
     958:	2b02      	cmp	r3, #2
     95a:	d9eb      	bls.n	934 <adc_init+0x7c>
	};

	module_inst->registered_callback_mask = 0;
     95c:	68fb      	ldr	r3, [r7, #12]
     95e:	2200      	movs	r2, #0
     960:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     962:	68fb      	ldr	r3, [r7, #12]
     964:	2200      	movs	r2, #0
     966:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	2200      	movs	r2, #0
     96c:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     96e:	68fb      	ldr	r3, [r7, #12]
     970:	2200      	movs	r2, #0
     972:	771a      	strb	r2, [r3, #28]

	_adc_instances[instance] = module_inst;
     974:	2316      	movs	r3, #22
     976:	18fb      	adds	r3, r7, r3
     978:	781a      	ldrb	r2, [r3, #0]
     97a:	4b16      	ldr	r3, [pc, #88]	; (9d4 <adc_init+0x11c>)
     97c:	0092      	lsls	r2, r2, #2
     97e:	68f9      	ldr	r1, [r7, #12]
     980:	50d1      	str	r1, [r2, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     982:	687b      	ldr	r3, [r7, #4]
     984:	222a      	movs	r2, #42	; 0x2a
     986:	5c9b      	ldrb	r3, [r3, r2]
     988:	2b00      	cmp	r3, #0
     98a:	d10a      	bne.n	9a2 <adc_init+0xea>
			!config->freerunning) {
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	7b1b      	ldrb	r3, [r3, #12]
     990:	2201      	movs	r2, #1
     992:	4053      	eors	r3, r2
     994:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     996:	2b00      	cmp	r3, #0
     998:	d003      	beq.n	9a2 <adc_init+0xea>
		module_inst->software_trigger = true;
     99a:	68fb      	ldr	r3, [r7, #12]
     99c:	2201      	movs	r2, #1
     99e:	775a      	strb	r2, [r3, #29]
     9a0:	e002      	b.n	9a8 <adc_init+0xf0>
	} else {
		module_inst->software_trigger = false;
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	2200      	movs	r2, #0
     9a6:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     9a8:	687a      	ldr	r2, [r7, #4]
     9aa:	68f9      	ldr	r1, [r7, #12]
     9ac:	2316      	movs	r3, #22
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	0018      	movs	r0, r3
     9b4:	4b08      	ldr	r3, [pc, #32]	; (9d8 <adc_init+0x120>)
     9b6:	4798      	blx	r3
     9b8:	0003      	movs	r3, r0
}
     9ba:	0018      	movs	r0, r3
     9bc:	46bd      	mov	sp, r7
     9be:	b007      	add	sp, #28
     9c0:	bd90      	pop	{r4, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	00000239 	.word	0x00000239
     9c8:	0000012d 	.word	0x0000012d
     9cc:	00000211 	.word	0x00000211
     9d0:	000001d1 	.word	0x000001d1
     9d4:	20000130 	.word	0x20000130
     9d8:	000003a9 	.word	0x000003a9

000009dc <adc_is_syncing>:
{
     9dc:	b580      	push	{r7, lr}
     9de:	b084      	sub	sp, #16
     9e0:	af00      	add	r7, sp, #0
     9e2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	8c1b      	ldrh	r3, [r3, #32]
     9ee:	b29b      	uxth	r3, r3
     9f0:	2b00      	cmp	r3, #0
     9f2:	d001      	beq.n	9f8 <adc_is_syncing+0x1c>
		return true;
     9f4:	2301      	movs	r3, #1
     9f6:	e000      	b.n	9fa <adc_is_syncing+0x1e>
	return false;
     9f8:	2300      	movs	r3, #0
}
     9fa:	0018      	movs	r0, r3
     9fc:	46bd      	mov	sp, r7
     9fe:	b004      	add	sp, #16
     a00:	bd80      	pop	{r7, pc}
	...

00000a04 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	0018      	movs	r0, r3
     a18:	4b0b      	ldr	r3, [pc, #44]	; (a48 <adc_start_conversion+0x44>)
     a1a:	4798      	blx	r3
     a1c:	1e03      	subs	r3, r0, #0
     a1e:	d1f9      	bne.n	a14 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	7e1b      	ldrb	r3, [r3, #24]
     a24:	b2db      	uxtb	r3, r3
     a26:	2202      	movs	r2, #2
     a28:	4313      	orrs	r3, r2
     a2a:	b2da      	uxtb	r2, r3
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     a30:	46c0      	nop			; (mov r8, r8)
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	0018      	movs	r0, r3
     a36:	4b04      	ldr	r3, [pc, #16]	; (a48 <adc_start_conversion+0x44>)
     a38:	4798      	blx	r3
     a3a:	1e03      	subs	r3, r0, #0
     a3c:	d1f9      	bne.n	a32 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	46bd      	mov	sp, r7
     a42:	b004      	add	sp, #16
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	000009dd 	.word	0x000009dd

00000a4c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b084      	sub	sp, #16
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
     a54:	000a      	movs	r2, r1
     a56:	1cfb      	adds	r3, r7, #3
     a58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	1cfa      	adds	r2, r7, #3
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	711a      	strb	r2, [r3, #4]
}
     a68:	46c0      	nop			; (mov r8, r8)
     a6a:	46bd      	mov	sp, r7
     a6c:	b004      	add	sp, #16
     a6e:	bd80      	pop	{r7, pc}

00000a70 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	0002      	movs	r2, r0
     a78:	1dfb      	adds	r3, r7, #7
     a7a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     a7c:	1dfb      	adds	r3, r7, #7
     a7e:	781a      	ldrb	r2, [r3, #0]
     a80:	4b47      	ldr	r3, [pc, #284]	; (ba0 <_adc_interrupt_handler+0x130>)
     a82:	0092      	lsls	r2, r2, #2
     a84:	58d3      	ldr	r3, [r2, r3]
     a86:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	799b      	ldrb	r3, [r3, #6]
     a8e:	b2da      	uxtb	r2, r3
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	795b      	ldrb	r3, [r3, #5]
     a96:	b2db      	uxtb	r3, r3
     a98:	4013      	ands	r3, r2
     a9a:	b2db      	uxtb	r3, r3
     a9c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     a9e:	68bb      	ldr	r3, [r7, #8]
     aa0:	2201      	movs	r2, #1
     aa2:	4013      	ands	r3, r2
     aa4:	d045      	beq.n	b32 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	2201      	movs	r2, #1
     aac:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	695b      	ldr	r3, [r3, #20]
     ab2:	1c99      	adds	r1, r3, #2
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	6151      	str	r1, [r2, #20]
     ab8:	68fa      	ldr	r2, [r7, #12]
     aba:	6812      	ldr	r2, [r2, #0]
     abc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     abe:	b292      	uxth	r2, r2
     ac0:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     ac2:	68fb      	ldr	r3, [r7, #12]
     ac4:	8b1b      	ldrh	r3, [r3, #24]
     ac6:	b29b      	uxth	r3, r3
     ac8:	3b01      	subs	r3, #1
     aca:	b29b      	uxth	r3, r3
     acc:	68fa      	ldr	r2, [r7, #12]
     ace:	1c19      	adds	r1, r3, #0
     ad0:	8311      	strh	r1, [r2, #24]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d00f      	beq.n	af6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     ad6:	68fb      	ldr	r3, [r7, #12]
     ad8:	7f5b      	ldrb	r3, [r3, #29]
     ada:	2b00      	cmp	r3, #0
     adc:	d029      	beq.n	b32 <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     ade:	68fb      	ldr	r3, [r7, #12]
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	79db      	ldrb	r3, [r3, #7]
     ae4:	b2db      	uxtb	r3, r3
     ae6:	b25b      	sxtb	r3, r3
     ae8:	2b00      	cmp	r3, #0
     aea:	db22      	blt.n	b32 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     aec:	68fb      	ldr	r3, [r7, #12]
     aee:	0018      	movs	r0, r3
     af0:	4b2c      	ldr	r3, [pc, #176]	; (ba4 <_adc_interrupt_handler+0x134>)
     af2:	4798      	blx	r3
     af4:	e01d      	b.n	b32 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	2101      	movs	r1, #1
     afa:	0018      	movs	r0, r3
     afc:	4b2a      	ldr	r3, [pc, #168]	; (ba8 <_adc_interrupt_handler+0x138>)
     afe:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	7f1b      	ldrb	r3, [r3, #28]
     b04:	b2db      	uxtb	r3, r3
     b06:	2b05      	cmp	r3, #5
     b08:	d113      	bne.n	b32 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     b0a:	68fb      	ldr	r3, [r7, #12]
     b0c:	2200      	movs	r2, #0
     b0e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	7edb      	ldrb	r3, [r3, #27]
     b14:	001a      	movs	r2, r3
     b16:	2301      	movs	r3, #1
     b18:	4013      	ands	r3, r2
     b1a:	d00a      	beq.n	b32 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	7e9b      	ldrb	r3, [r3, #26]
     b20:	001a      	movs	r2, r3
     b22:	2301      	movs	r3, #1
     b24:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     b26:	d004      	beq.n	b32 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	689b      	ldr	r3, [r3, #8]
     b2c:	68fa      	ldr	r2, [r7, #12]
     b2e:	0010      	movs	r0, r2
     b30:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     b32:	68bb      	ldr	r3, [r7, #8]
     b34:	2204      	movs	r2, #4
     b36:	4013      	ands	r3, r2
     b38:	d014      	beq.n	b64 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	2204      	movs	r2, #4
     b40:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	7edb      	ldrb	r3, [r3, #27]
     b46:	001a      	movs	r2, r3
     b48:	2302      	movs	r3, #2
     b4a:	4013      	ands	r3, r2
     b4c:	d00a      	beq.n	b64 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	7e9b      	ldrb	r3, [r3, #26]
     b52:	001a      	movs	r2, r3
     b54:	2302      	movs	r3, #2
     b56:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     b58:	d004      	beq.n	b64 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	68db      	ldr	r3, [r3, #12]
     b5e:	68fa      	ldr	r2, [r7, #12]
     b60:	0010      	movs	r0, r2
     b62:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     b64:	68bb      	ldr	r3, [r7, #8]
     b66:	2202      	movs	r2, #2
     b68:	4013      	ands	r3, r2
     b6a:	d014      	beq.n	b96 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	2202      	movs	r2, #2
     b72:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	7edb      	ldrb	r3, [r3, #27]
     b78:	001a      	movs	r2, r3
     b7a:	2304      	movs	r3, #4
     b7c:	4013      	ands	r3, r2
     b7e:	d00a      	beq.n	b96 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	7e9b      	ldrb	r3, [r3, #26]
     b84:	001a      	movs	r2, r3
     b86:	2304      	movs	r3, #4
     b88:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b8a:	d004      	beq.n	b96 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	691b      	ldr	r3, [r3, #16]
     b90:	68fa      	ldr	r2, [r7, #12]
     b92:	0010      	movs	r0, r2
     b94:	4798      	blx	r3
		}
	}
}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	46bd      	mov	sp, r7
     b9a:	b004      	add	sp, #16
     b9c:	bd80      	pop	{r7, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	20000130 	.word	0x20000130
     ba4:	00000a05 	.word	0x00000a05
     ba8:	00000a4d 	.word	0x00000a4d

00000bac <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     bac:	b580      	push	{r7, lr}
     bae:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     bb0:	2000      	movs	r0, #0
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <ADC_Handler+0x10>)
     bb4:	4798      	blx	r3
}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	46bd      	mov	sp, r7
     bba:	bd80      	pop	{r7, pc}
     bbc:	00000a71 	.word	0x00000a71

00000bc0 <system_apb_clock_set_mask>:
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	0002      	movs	r2, r0
     bc8:	6039      	str	r1, [r7, #0]
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     bce:	1dfb      	adds	r3, r7, #7
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b04      	cmp	r3, #4
     bd4:	d827      	bhi.n	c26 <system_apb_clock_set_mask+0x66>
     bd6:	009a      	lsls	r2, r3, #2
     bd8:	4b16      	ldr	r3, [pc, #88]	; (c34 <system_apb_clock_set_mask+0x74>)
     bda:	18d3      	adds	r3, r2, r3
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     be0:	4b15      	ldr	r3, [pc, #84]	; (c38 <system_apb_clock_set_mask+0x78>)
     be2:	4a15      	ldr	r2, [pc, #84]	; (c38 <system_apb_clock_set_mask+0x78>)
     be4:	6951      	ldr	r1, [r2, #20]
     be6:	683a      	ldr	r2, [r7, #0]
     be8:	430a      	orrs	r2, r1
     bea:	615a      	str	r2, [r3, #20]
			break;
     bec:	e01d      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     bee:	4b12      	ldr	r3, [pc, #72]	; (c38 <system_apb_clock_set_mask+0x78>)
     bf0:	4a11      	ldr	r2, [pc, #68]	; (c38 <system_apb_clock_set_mask+0x78>)
     bf2:	6991      	ldr	r1, [r2, #24]
     bf4:	683a      	ldr	r2, [r7, #0]
     bf6:	430a      	orrs	r2, r1
     bf8:	619a      	str	r2, [r3, #24]
			break;
     bfa:	e016      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     bfc:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_apb_clock_set_mask+0x78>)
     bfe:	4a0e      	ldr	r2, [pc, #56]	; (c38 <system_apb_clock_set_mask+0x78>)
     c00:	69d1      	ldr	r1, [r2, #28]
     c02:	683a      	ldr	r2, [r7, #0]
     c04:	430a      	orrs	r2, r1
     c06:	61da      	str	r2, [r3, #28]
			break;
     c08:	e00f      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <system_apb_clock_set_mask+0x78>)
     c0c:	4a0a      	ldr	r2, [pc, #40]	; (c38 <system_apb_clock_set_mask+0x78>)
     c0e:	6a11      	ldr	r1, [r2, #32]
     c10:	683a      	ldr	r2, [r7, #0]
     c12:	430a      	orrs	r2, r1
     c14:	621a      	str	r2, [r3, #32]
			break;
     c16:	e008      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <system_apb_clock_set_mask+0x78>)
     c1a:	4a07      	ldr	r2, [pc, #28]	; (c38 <system_apb_clock_set_mask+0x78>)
     c1c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     c1e:	683a      	ldr	r2, [r7, #0]
     c20:	430a      	orrs	r2, r1
     c22:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     c24:	e001      	b.n	c2a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     c26:	2317      	movs	r3, #23
     c28:	e000      	b.n	c2c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     c2a:	2300      	movs	r3, #0
}
     c2c:	0018      	movs	r0, r3
     c2e:	46bd      	mov	sp, r7
     c30:	b002      	add	sp, #8
     c32:	bd80      	pop	{r7, pc}
     c34:	0000689c 	.word	0x0000689c
     c38:	40000400 	.word	0x40000400

00000c3c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b082      	sub	sp, #8
     c40:	af00      	add	r7, sp, #0
     c42:	0002      	movs	r2, r0
     c44:	1dfb      	adds	r3, r7, #7
     c46:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c48:	4b06      	ldr	r3, [pc, #24]	; (c64 <system_interrupt_enable+0x28>)
     c4a:	1dfa      	adds	r2, r7, #7
     c4c:	7812      	ldrb	r2, [r2, #0]
     c4e:	0011      	movs	r1, r2
     c50:	221f      	movs	r2, #31
     c52:	400a      	ands	r2, r1
     c54:	2101      	movs	r1, #1
     c56:	4091      	lsls	r1, r2
     c58:	000a      	movs	r2, r1
     c5a:	601a      	str	r2, [r3, #0]
}
     c5c:	46c0      	nop			; (mov r8, r8)
     c5e:	46bd      	mov	sp, r7
     c60:	b002      	add	sp, #8
     c62:	bd80      	pop	{r7, pc}
     c64:	e000e100 	.word	0xe000e100

00000c68 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     c68:	b580      	push	{r7, lr}
     c6a:	b082      	sub	sp, #8
     c6c:	af00      	add	r7, sp, #0
     c6e:	0002      	movs	r2, r0
     c70:	1dfb      	adds	r3, r7, #7
     c72:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c74:	4a07      	ldr	r2, [pc, #28]	; (c94 <system_interrupt_disable+0x2c>)
     c76:	1dfb      	adds	r3, r7, #7
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	0019      	movs	r1, r3
     c7c:	231f      	movs	r3, #31
     c7e:	400b      	ands	r3, r1
     c80:	2101      	movs	r1, #1
     c82:	4099      	lsls	r1, r3
     c84:	000b      	movs	r3, r1
     c86:	0019      	movs	r1, r3
     c88:	2380      	movs	r3, #128	; 0x80
     c8a:	50d1      	str	r1, [r2, r3]
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	b002      	add	sp, #8
     c92:	bd80      	pop	{r7, pc}
     c94:	e000e100 	.word	0xe000e100

00000c98 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     c98:	b580      	push	{r7, lr}
     c9a:	b084      	sub	sp, #16
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     ca6:	68fb      	ldr	r3, [r7, #12]
     ca8:	691b      	ldr	r3, [r3, #16]
     caa:	2b00      	cmp	r3, #0
     cac:	d001      	beq.n	cb2 <rtc_count_is_syncing+0x1a>
		return true;
     cae:	2301      	movs	r3, #1
     cb0:	e000      	b.n	cb4 <rtc_count_is_syncing+0x1c>
	}

	return false;
     cb2:	2300      	movs	r3, #0
}
     cb4:	0018      	movs	r0, r3
     cb6:	46bd      	mov	sp, r7
     cb8:	b004      	add	sp, #16
     cba:	bd80      	pop	{r7, pc}

00000cbc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b084      	sub	sp, #16
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     cca:	2002      	movs	r0, #2
     ccc:	4b0d      	ldr	r3, [pc, #52]	; (d04 <rtc_count_enable+0x48>)
     cce:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	0018      	movs	r0, r3
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <rtc_count_enable+0x4c>)
     cd8:	4798      	blx	r3
     cda:	1e03      	subs	r3, r0, #0
     cdc:	d1f9      	bne.n	cd2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     cde:	68fb      	ldr	r3, [r7, #12]
     ce0:	881b      	ldrh	r3, [r3, #0]
     ce2:	b29b      	uxth	r3, r3
     ce4:	2202      	movs	r2, #2
     ce6:	4313      	orrs	r3, r2
     ce8:	b29a      	uxth	r2, r3
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	0018      	movs	r0, r3
     cf4:	4b04      	ldr	r3, [pc, #16]	; (d08 <rtc_count_enable+0x4c>)
     cf6:	4798      	blx	r3
     cf8:	1e03      	subs	r3, r0, #0
     cfa:	d1f9      	bne.n	cf0 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	46bd      	mov	sp, r7
     d00:	b004      	add	sp, #16
     d02:	bd80      	pop	{r7, pc}
     d04:	00000c3d 	.word	0x00000c3d
     d08:	00000c99 	.word	0x00000c99

00000d0c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	b084      	sub	sp, #16
     d10:	af00      	add	r7, sp, #0
     d12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     d1a:	2002      	movs	r0, #2
     d1c:	4b10      	ldr	r3, [pc, #64]	; (d60 <rtc_count_disable+0x54>)
     d1e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	0018      	movs	r0, r3
     d26:	4b0f      	ldr	r3, [pc, #60]	; (d64 <rtc_count_disable+0x58>)
     d28:	4798      	blx	r3
     d2a:	1e03      	subs	r3, r0, #0
     d2c:	d1f9      	bne.n	d22 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	4a0d      	ldr	r2, [pc, #52]	; (d68 <rtc_count_disable+0x5c>)
     d32:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	4a0c      	ldr	r2, [pc, #48]	; (d68 <rtc_count_disable+0x5c>)
     d38:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	881b      	ldrh	r3, [r3, #0]
     d3e:	b29b      	uxth	r3, r3
     d40:	2202      	movs	r2, #2
     d42:	4393      	bics	r3, r2
     d44:	b29a      	uxth	r2, r3
     d46:	68fb      	ldr	r3, [r7, #12]
     d48:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	0018      	movs	r0, r3
     d50:	4b04      	ldr	r3, [pc, #16]	; (d64 <rtc_count_disable+0x58>)
     d52:	4798      	blx	r3
     d54:	1e03      	subs	r3, r0, #0
     d56:	d1f9      	bne.n	d4c <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
     d58:	46c0      	nop			; (mov r8, r8)
     d5a:	46bd      	mov	sp, r7
     d5c:	b004      	add	sp, #16
     d5e:	bd80      	pop	{r7, pc}
     d60:	00000c69 	.word	0x00000c69
     d64:	00000c99 	.word	0x00000c99
     d68:	ffff81ff 	.word	0xffff81ff

00000d6c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	0018      	movs	r0, r3
     d7e:	4b11      	ldr	r3, [pc, #68]	; (dc4 <rtc_count_reset+0x58>)
     d80:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	2200      	movs	r2, #0
     d86:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	2200      	movs	r2, #0
     d8c:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	0018      	movs	r0, r3
     d94:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <rtc_count_reset+0x5c>)
     d96:	4798      	blx	r3
     d98:	1e03      	subs	r3, r0, #0
     d9a:	d1f9      	bne.n	d90 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	881b      	ldrh	r3, [r3, #0]
     da0:	b29b      	uxth	r3, r3
     da2:	2201      	movs	r2, #1
     da4:	4313      	orrs	r3, r2
     da6:	b29a      	uxth	r2, r3
     da8:	68fb      	ldr	r3, [r7, #12]
     daa:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     dac:	46c0      	nop			; (mov r8, r8)
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	0018      	movs	r0, r3
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <rtc_count_reset+0x5c>)
     db4:	4798      	blx	r3
     db6:	1e03      	subs	r3, r0, #0
     db8:	d1f9      	bne.n	dae <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	46bd      	mov	sp, r7
     dbe:	b004      	add	sp, #16
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	00000d0d 	.word	0x00000d0d
     dc8:	00000c99 	.word	0x00000c99

00000dcc <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     dcc:	b580      	push	{r7, lr}
     dce:	b084      	sub	sp, #16
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
     dd4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     ddc:	683b      	ldr	r3, [r7, #0]
     dde:	791b      	ldrb	r3, [r3, #4]
     de0:	b29b      	uxth	r3, r3
     de2:	03db      	lsls	r3, r3, #15
     de4:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
     de6:	683b      	ldr	r3, [r7, #0]
     de8:	881b      	ldrh	r3, [r3, #0]
     dea:	4313      	orrs	r3, r2
     dec:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     dee:	68bb      	ldr	r3, [r7, #8]
     df0:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     df2:	683b      	ldr	r3, [r7, #0]
     df4:	789b      	ldrb	r3, [r3, #2]
     df6:	2b00      	cmp	r3, #0
     df8:	d032      	beq.n	e60 <_rtc_count_set_config+0x94>
     dfa:	2b01      	cmp	r3, #1
     dfc:	d15e      	bne.n	ebc <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     dfe:	68bb      	ldr	r3, [r7, #8]
     e00:	881b      	ldrh	r3, [r3, #0]
     e02:	b29a      	uxth	r2, r3
     e04:	68bb      	ldr	r3, [r7, #8]
     e06:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     e08:	683b      	ldr	r3, [r7, #0]
     e0a:	78db      	ldrb	r3, [r3, #3]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d007      	beq.n	e20 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     e10:	68bb      	ldr	r3, [r7, #8]
     e12:	881b      	ldrh	r3, [r3, #0]
     e14:	b29b      	uxth	r3, r3
     e16:	2280      	movs	r2, #128	; 0x80
     e18:	4313      	orrs	r3, r2
     e1a:	b29a      	uxth	r2, r3
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     e20:	230f      	movs	r3, #15
     e22:	18fb      	adds	r3, r7, r3
     e24:	2200      	movs	r2, #0
     e26:	701a      	strb	r2, [r3, #0]
     e28:	e014      	b.n	e54 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
     e2a:	230f      	movs	r3, #15
     e2c:	18fb      	adds	r3, r7, r3
     e2e:	781a      	ldrb	r2, [r3, #0]
     e30:	683b      	ldr	r3, [r7, #0]
     e32:	3202      	adds	r2, #2
     e34:	0092      	lsls	r2, r2, #2
     e36:	58d1      	ldr	r1, [r2, r3]
     e38:	230f      	movs	r3, #15
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	781a      	ldrb	r2, [r3, #0]
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	0018      	movs	r0, r3
     e42:	4b22      	ldr	r3, [pc, #136]	; (ecc <_rtc_count_set_config+0x100>)
     e44:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     e46:	230f      	movs	r3, #15
     e48:	18fb      	adds	r3, r7, r3
     e4a:	781a      	ldrb	r2, [r3, #0]
     e4c:	230f      	movs	r3, #15
     e4e:	18fb      	adds	r3, r7, r3
     e50:	3201      	adds	r2, #1
     e52:	701a      	strb	r2, [r3, #0]
     e54:	230f      	movs	r3, #15
     e56:	18fb      	adds	r3, r7, r3
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d0e5      	beq.n	e2a <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
     e5e:	e02f      	b.n	ec0 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     e60:	68bb      	ldr	r3, [r7, #8]
     e62:	881b      	ldrh	r3, [r3, #0]
     e64:	b29b      	uxth	r3, r3
     e66:	2204      	movs	r2, #4
     e68:	4313      	orrs	r3, r2
     e6a:	b29a      	uxth	r2, r3
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     e70:	683b      	ldr	r3, [r7, #0]
     e72:	78db      	ldrb	r3, [r3, #3]
     e74:	2b00      	cmp	r3, #0
     e76:	d001      	beq.n	e7c <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     e78:	2317      	movs	r3, #23
     e7a:	e022      	b.n	ec2 <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     e7c:	230e      	movs	r3, #14
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e014      	b.n	eb0 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
     e86:	230e      	movs	r3, #14
     e88:	18fb      	adds	r3, r7, r3
     e8a:	781a      	ldrb	r2, [r3, #0]
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	3202      	adds	r2, #2
     e90:	0092      	lsls	r2, r2, #2
     e92:	58d1      	ldr	r1, [r2, r3]
     e94:	230e      	movs	r3, #14
     e96:	18fb      	adds	r3, r7, r3
     e98:	781a      	ldrb	r2, [r3, #0]
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	0018      	movs	r0, r3
     e9e:	4b0b      	ldr	r3, [pc, #44]	; (ecc <_rtc_count_set_config+0x100>)
     ea0:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     ea2:	230e      	movs	r3, #14
     ea4:	18fb      	adds	r3, r7, r3
     ea6:	781a      	ldrb	r2, [r3, #0]
     ea8:	230e      	movs	r3, #14
     eaa:	18fb      	adds	r3, r7, r3
     eac:	3201      	adds	r2, #1
     eae:	701a      	strb	r2, [r3, #0]
     eb0:	230e      	movs	r3, #14
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d9e5      	bls.n	e86 <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
     eba:	e001      	b.n	ec0 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ebc:	2317      	movs	r3, #23
     ebe:	e000      	b.n	ec2 <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     ec0:	2300      	movs	r3, #0
}
     ec2:	0018      	movs	r0, r3
     ec4:	46bd      	mov	sp, r7
     ec6:	b004      	add	sp, #16
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ff1 	.word	0x00000ff1

00000ed0 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	60f8      	str	r0, [r7, #12]
     ed8:	60b9      	str	r1, [r7, #8]
     eda:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	68ba      	ldr	r2, [r7, #8]
     ee0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	005b      	lsls	r3, r3, #1
     ee6:	0019      	movs	r1, r3
     ee8:	2000      	movs	r0, #0
     eea:	4b0d      	ldr	r3, [pc, #52]	; (f20 <rtc_count_init+0x50>)
     eec:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <rtc_count_init+0x54>)
     ef0:	2200      	movs	r2, #0
     ef2:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	0018      	movs	r0, r3
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <rtc_count_init+0x58>)
     efa:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	789a      	ldrb	r2, [r3, #2]
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     f04:	4b09      	ldr	r3, [pc, #36]	; (f2c <rtc_count_init+0x5c>)
     f06:	68fa      	ldr	r2, [r7, #12]
     f08:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     f0a:	687a      	ldr	r2, [r7, #4]
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	0011      	movs	r1, r2
     f10:	0018      	movs	r0, r3
     f12:	4b07      	ldr	r3, [pc, #28]	; (f30 <rtc_count_init+0x60>)
     f14:	4798      	blx	r3
     f16:	0003      	movs	r3, r0
}
     f18:	0018      	movs	r0, r3
     f1a:	46bd      	mov	sp, r7
     f1c:	b004      	add	sp, #16
     f1e:	bd80      	pop	{r7, pc}
     f20:	00000bc1 	.word	0x00000bc1
     f24:	40001000 	.word	0x40001000
     f28:	00000d6d 	.word	0x00000d6d
     f2c:	20000134 	.word	0x20000134
     f30:	00000dcd 	.word	0x00000dcd

00000f34 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]
     f3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     f44:	46c0      	nop			; (mov r8, r8)
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	0018      	movs	r0, r3
     f4a:	4b13      	ldr	r3, [pc, #76]	; (f98 <rtc_count_set_count+0x64>)
     f4c:	4798      	blx	r3
     f4e:	1e03      	subs	r3, r0, #0
     f50:	d1f9      	bne.n	f46 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	791b      	ldrb	r3, [r3, #4]
     f56:	2b00      	cmp	r3, #0
     f58:	d005      	beq.n	f66 <rtc_count_set_count+0x32>
     f5a:	2b01      	cmp	r3, #1
     f5c:	d10e      	bne.n	f7c <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	683a      	ldr	r2, [r7, #0]
     f62:	619a      	str	r2, [r3, #24]
			break;
     f64:	e00c      	b.n	f80 <rtc_count_set_count+0x4c>
		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     f66:	683b      	ldr	r3, [r7, #0]
     f68:	4a0c      	ldr	r2, [pc, #48]	; (f9c <rtc_count_set_count+0x68>)
     f6a:	4293      	cmp	r3, r2
     f6c:	d901      	bls.n	f72 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     f6e:	2317      	movs	r3, #23
     f70:	e00e      	b.n	f90 <rtc_count_set_count+0x5c>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     f72:	683b      	ldr	r3, [r7, #0]
     f74:	b29a      	uxth	r2, r3
     f76:	68fb      	ldr	r3, [r7, #12]
     f78:	831a      	strh	r2, [r3, #24]

			break;
     f7a:	e001      	b.n	f80 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     f7c:	2317      	movs	r3, #23
     f7e:	e007      	b.n	f90 <rtc_count_set_count+0x5c>
	}

	while (rtc_count_is_syncing(module)) {
     f80:	46c0      	nop			; (mov r8, r8)
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	0018      	movs	r0, r3
     f86:	4b04      	ldr	r3, [pc, #16]	; (f98 <rtc_count_set_count+0x64>)
     f88:	4798      	blx	r3
     f8a:	1e03      	subs	r3, r0, #0
     f8c:	d1f9      	bne.n	f82 <rtc_count_set_count+0x4e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     f8e:	2300      	movs	r3, #0
}
     f90:	0018      	movs	r0, r3
     f92:	46bd      	mov	sp, r7
     f94:	b004      	add	sp, #16
     f96:	bd80      	pop	{r7, pc}
     f98:	00000c99 	.word	0x00000c99
     f9c:	0000ffff 	.word	0x0000ffff

00000fa0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     fa0:	b580      	push	{r7, lr}
     fa2:	b084      	sub	sp, #16
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	60bb      	str	r3, [r7, #8]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	0018      	movs	r0, r3
     fb4:	4b0d      	ldr	r3, [pc, #52]	; (fec <rtc_count_get_count+0x4c>)
     fb6:	4798      	blx	r3
     fb8:	1e03      	subs	r3, r0, #0
     fba:	d1f9      	bne.n	fb0 <rtc_count_get_count+0x10>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	791b      	ldrb	r3, [r3, #4]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d005      	beq.n	fd0 <rtc_count_get_count+0x30>
     fc4:	2b01      	cmp	r3, #1
     fc6:	d108      	bne.n	fda <rtc_count_get_count+0x3a>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	699b      	ldr	r3, [r3, #24]
     fcc:	60fb      	str	r3, [r7, #12]

			break;
     fce:	e007      	b.n	fe0 <rtc_count_get_count+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     fd0:	68bb      	ldr	r3, [r7, #8]
     fd2:	8b1b      	ldrh	r3, [r3, #24]
     fd4:	b29b      	uxth	r3, r3
     fd6:	60fb      	str	r3, [r7, #12]

			break;
     fd8:	e002      	b.n	fe0 <rtc_count_get_count+0x40>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     fda:	2300      	movs	r3, #0
     fdc:	60fb      	str	r3, [r7, #12]
			break;
     fde:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     fe0:	68fb      	ldr	r3, [r7, #12]
}
     fe2:	0018      	movs	r0, r3
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	00000c99 	.word	0x00000c99

00000ff0 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     ff0:	b580      	push	{r7, lr}
     ff2:	b086      	sub	sp, #24
     ff4:	af00      	add	r7, sp, #0
     ff6:	60f8      	str	r0, [r7, #12]
     ff8:	60b9      	str	r1, [r7, #8]
     ffa:	1dfb      	adds	r3, r7, #7
     ffc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	68fb      	ldr	r3, [r7, #12]
    1008:	0018      	movs	r0, r3
    100a:	4b1d      	ldr	r3, [pc, #116]	; (1080 <rtc_count_set_compare+0x90>)
    100c:	4798      	blx	r3
    100e:	1e03      	subs	r3, r0, #0
    1010:	d1f9      	bne.n	1006 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	791b      	ldrb	r3, [r3, #4]
    1016:	2b00      	cmp	r3, #0
    1018:	d00f      	beq.n	103a <rtc_count_set_compare+0x4a>
    101a:	2b01      	cmp	r3, #1
    101c:	d122      	bne.n	1064 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    101e:	1dfb      	adds	r3, r7, #7
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b01      	cmp	r3, #1
    1024:	d901      	bls.n	102a <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    1026:	2317      	movs	r3, #23
    1028:	e026      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    102a:	1dfb      	adds	r3, r7, #7
    102c:	781a      	ldrb	r2, [r3, #0]
    102e:	697b      	ldr	r3, [r7, #20]
    1030:	3208      	adds	r2, #8
    1032:	0092      	lsls	r2, r2, #2
    1034:	68b9      	ldr	r1, [r7, #8]
    1036:	50d1      	str	r1, [r2, r3]

			break;
    1038:	e016      	b.n	1068 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    103a:	1dfb      	adds	r3, r7, #7
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	2b02      	cmp	r3, #2
    1040:	d901      	bls.n	1046 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    1042:	2317      	movs	r3, #23
    1044:	e018      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	4a0e      	ldr	r2, [pc, #56]	; (1084 <rtc_count_set_compare+0x94>)
    104a:	4293      	cmp	r3, r2
    104c:	d901      	bls.n	1052 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    104e:	2317      	movs	r3, #23
    1050:	e012      	b.n	1078 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1052:	1dfb      	adds	r3, r7, #7
    1054:	781a      	ldrb	r2, [r3, #0]
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	b299      	uxth	r1, r3
    105a:	697b      	ldr	r3, [r7, #20]
    105c:	3210      	adds	r2, #16
    105e:	0052      	lsls	r2, r2, #1
    1060:	52d1      	strh	r1, [r2, r3]

			break;
    1062:	e001      	b.n	1068 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    1064:	231a      	movs	r3, #26
    1066:	e007      	b.n	1078 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    1068:	46c0      	nop			; (mov r8, r8)
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	0018      	movs	r0, r3
    106e:	4b04      	ldr	r3, [pc, #16]	; (1080 <rtc_count_set_compare+0x90>)
    1070:	4798      	blx	r3
    1072:	1e03      	subs	r3, r0, #0
    1074:	d1f9      	bne.n	106a <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    1076:	2300      	movs	r3, #0
}
    1078:	0018      	movs	r0, r3
    107a:	46bd      	mov	sp, r7
    107c:	b006      	add	sp, #24
    107e:	bd80      	pop	{r7, pc}
    1080:	00000c99 	.word	0x00000c99
    1084:	0000ffff 	.word	0x0000ffff

00001088 <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
    1088:	b580      	push	{r7, lr}
    108a:	b086      	sub	sp, #24
    108c:	af00      	add	r7, sp, #0
    108e:	60f8      	str	r0, [r7, #12]
    1090:	60b9      	str	r1, [r7, #8]
    1092:	1dfb      	adds	r3, r7, #7
    1094:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
    1096:	2317      	movs	r3, #23
    1098:	18fb      	adds	r3, r7, r3
    109a:	2200      	movs	r2, #0
    109c:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    109e:	1dfb      	adds	r3, r7, #7
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	2b0a      	cmp	r3, #10
    10a4:	d003      	beq.n	10ae <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    10a6:	1dfb      	adds	r3, r7, #7
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b07      	cmp	r3, #7
    10ac:	d804      	bhi.n	10b8 <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
    10ae:	2317      	movs	r3, #23
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	2200      	movs	r2, #0
    10b4:	701a      	strb	r2, [r3, #0]
    10b6:	e01f      	b.n	10f8 <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	791b      	ldrb	r3, [r3, #4]
    10bc:	2b00      	cmp	r3, #0
    10be:	d00a      	beq.n	10d6 <rtc_count_register_callback+0x4e>
    10c0:	2b01      	cmp	r3, #1
    10c2:	d111      	bne.n	10e8 <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    10c4:	1dfb      	adds	r3, r7, #7
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	2b09      	cmp	r3, #9
    10ca:	d912      	bls.n	10f2 <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
    10cc:	2317      	movs	r3, #23
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	2217      	movs	r2, #23
    10d2:	701a      	strb	r2, [r3, #0]
			}

			break;
    10d4:	e00d      	b.n	10f2 <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    10d6:	1dfb      	adds	r3, r7, #7
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	2b0a      	cmp	r3, #10
    10dc:	d90b      	bls.n	10f6 <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
    10de:	2317      	movs	r3, #23
    10e0:	18fb      	adds	r3, r7, r3
    10e2:	2217      	movs	r2, #23
    10e4:	701a      	strb	r2, [r3, #0]
			}
			break;
    10e6:	e006      	b.n	10f6 <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
    10e8:	2317      	movs	r3, #23
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	2217      	movs	r2, #23
    10ee:	701a      	strb	r2, [r3, #0]
    10f0:	e002      	b.n	10f8 <rtc_count_register_callback+0x70>
			break;
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	e000      	b.n	10f8 <rtc_count_register_callback+0x70>
			break;
    10f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
    10f8:	2317      	movs	r3, #23
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d115      	bne.n	112e <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
    1102:	1dfb      	adds	r3, r7, #7
    1104:	781a      	ldrb	r2, [r3, #0]
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	3202      	adds	r2, #2
    110a:	0092      	lsls	r2, r2, #2
    110c:	68b9      	ldr	r1, [r7, #8]
    110e:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1114:	b29b      	uxth	r3, r3
    1116:	b21a      	sxth	r2, r3
    1118:	1dfb      	adds	r3, r7, #7
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2101      	movs	r1, #1
    111e:	4099      	lsls	r1, r3
    1120:	000b      	movs	r3, r1
    1122:	b21b      	sxth	r3, r3
    1124:	4313      	orrs	r3, r2
    1126:	b21b      	sxth	r3, r3
    1128:	b29a      	uxth	r2, r3
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
    112e:	2317      	movs	r3, #23
    1130:	18fb      	adds	r3, r7, r3
    1132:	781b      	ldrb	r3, [r3, #0]
}
    1134:	0018      	movs	r0, r3
    1136:	46bd      	mov	sp, r7
    1138:	b006      	add	sp, #24
    113a:	bd80      	pop	{r7, pc}

0000113c <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    113c:	b580      	push	{r7, lr}
    113e:	b084      	sub	sp, #16
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	000a      	movs	r2, r1
    1146:	1cfb      	adds	r3, r7, #3
    1148:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1150:	1cfb      	adds	r3, r7, #3
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	2b0a      	cmp	r3, #10
    1156:	d103      	bne.n	1160 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	4a1a      	ldr	r2, [pc, #104]	; (11c4 <rtc_count_enable_callback+0x88>)
    115c:	815a      	strh	r2, [r3, #10]
    115e:	e01e      	b.n	119e <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1160:	1cfb      	adds	r3, r7, #3
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b07      	cmp	r3, #7
    1166:	d80b      	bhi.n	1180 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    1168:	1cfb      	adds	r3, r7, #3
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	2201      	movs	r2, #1
    116e:	409a      	lsls	r2, r3
    1170:	0013      	movs	r3, r2
    1172:	b29b      	uxth	r3, r3
    1174:	22ff      	movs	r2, #255	; 0xff
    1176:	4013      	ands	r3, r2
    1178:	b29a      	uxth	r2, r3
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	815a      	strh	r2, [r3, #10]
    117e:	e00e      	b.n	119e <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1180:	1cfb      	adds	r3, r7, #3
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	3b08      	subs	r3, #8
    1186:	2201      	movs	r2, #1
    1188:	409a      	lsls	r2, r3
    118a:	0013      	movs	r3, r2
    118c:	b29b      	uxth	r3, r3
    118e:	021b      	lsls	r3, r3, #8
    1190:	b29a      	uxth	r2, r3
    1192:	23c0      	movs	r3, #192	; 0xc0
    1194:	009b      	lsls	r3, r3, #2
    1196:	4013      	ands	r3, r2
    1198:	b29a      	uxth	r2, r3
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    11a2:	b29b      	uxth	r3, r3
    11a4:	b21a      	sxth	r2, r3
    11a6:	1cfb      	adds	r3, r7, #3
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2101      	movs	r1, #1
    11ac:	4099      	lsls	r1, r3
    11ae:	000b      	movs	r3, r1
    11b0:	b21b      	sxth	r3, r3
    11b2:	4313      	orrs	r3, r2
    11b4:	b21b      	sxth	r3, r3
    11b6:	b29a      	uxth	r2, r3
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	86da      	strh	r2, [r3, #54]	; 0x36
}
    11bc:	46c0      	nop			; (mov r8, r8)
    11be:	46bd      	mov	sp, r7
    11c0:	b004      	add	sp, #16
    11c2:	bd80      	pop	{r7, pc}
    11c4:	ffff8000 	.word	0xffff8000

000011c8 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    11c8:	b580      	push	{r7, lr}
    11ca:	b084      	sub	sp, #16
    11cc:	af00      	add	r7, sp, #0
    11ce:	6078      	str	r0, [r7, #4]
    11d0:	000a      	movs	r2, r1
    11d2:	1cfb      	adds	r3, r7, #3
    11d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	681b      	ldr	r3, [r3, #0]
    11da:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    11dc:	1cfb      	adds	r3, r7, #3
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	2b0a      	cmp	r3, #10
    11e2:	d103      	bne.n	11ec <rtc_count_disable_callback+0x24>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	4a1b      	ldr	r2, [pc, #108]	; (1254 <rtc_count_disable_callback+0x8c>)
    11e8:	811a      	strh	r2, [r3, #8]
    11ea:	e01e      	b.n	122a <rtc_count_disable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    11ec:	1cfb      	adds	r3, r7, #3
    11ee:	781b      	ldrb	r3, [r3, #0]
    11f0:	2b07      	cmp	r3, #7
    11f2:	d80b      	bhi.n	120c <rtc_count_disable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    11f4:	1cfb      	adds	r3, r7, #3
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2201      	movs	r2, #1
    11fa:	409a      	lsls	r2, r3
    11fc:	0013      	movs	r3, r2
    11fe:	b29b      	uxth	r3, r3
    1200:	22ff      	movs	r2, #255	; 0xff
    1202:	4013      	ands	r3, r2
    1204:	b29a      	uxth	r2, r3
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	811a      	strh	r2, [r3, #8]
    120a:	e00e      	b.n	122a <rtc_count_disable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    120c:	1cfb      	adds	r3, r7, #3
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	3b08      	subs	r3, #8
    1212:	2201      	movs	r2, #1
    1214:	409a      	lsls	r2, r3
    1216:	0013      	movs	r3, r2
    1218:	b29b      	uxth	r3, r3
    121a:	021b      	lsls	r3, r3, #8
    121c:	b29a      	uxth	r2, r3
    121e:	23c0      	movs	r3, #192	; 0xc0
    1220:	009b      	lsls	r3, r3, #2
    1222:	4013      	ands	r3, r2
    1224:	b29a      	uxth	r2, r3
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	811a      	strh	r2, [r3, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    122e:	b29b      	uxth	r3, r3
    1230:	b21b      	sxth	r3, r3
    1232:	1cfa      	adds	r2, r7, #3
    1234:	7812      	ldrb	r2, [r2, #0]
    1236:	2101      	movs	r1, #1
    1238:	4091      	lsls	r1, r2
    123a:	000a      	movs	r2, r1
    123c:	b212      	sxth	r2, r2
    123e:	43d2      	mvns	r2, r2
    1240:	b212      	sxth	r2, r2
    1242:	4013      	ands	r3, r2
    1244:	b21b      	sxth	r3, r3
    1246:	b29a      	uxth	r2, r3
    1248:	687b      	ldr	r3, [r7, #4]
    124a:	86da      	strh	r2, [r3, #54]	; 0x36
}
    124c:	46c0      	nop			; (mov r8, r8)
    124e:	46bd      	mov	sp, r7
    1250:	b004      	add	sp, #16
    1252:	bd80      	pop	{r7, pc}
    1254:	ffff8000 	.word	0xffff8000

00001258 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1258:	b580      	push	{r7, lr}
    125a:	b086      	sub	sp, #24
    125c:	af00      	add	r7, sp, #0
    125e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    1260:	4b58      	ldr	r3, [pc, #352]	; (13c4 <_rtc_interrupt_handler+0x16c>)
    1262:	687a      	ldr	r2, [r7, #4]
    1264:	0092      	lsls	r2, r2, #2
    1266:	58d3      	ldr	r3, [r2, r3]
    1268:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    126a:	693b      	ldr	r3, [r7, #16]
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1270:	230a      	movs	r3, #10
    1272:	18fb      	adds	r3, r7, r3
    1274:	693a      	ldr	r2, [r7, #16]
    1276:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    1278:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    127a:	693b      	ldr	r3, [r7, #16]
    127c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    127e:	b29a      	uxth	r2, r3
    1280:	230a      	movs	r3, #10
    1282:	18fb      	adds	r3, r7, r3
    1284:	210a      	movs	r1, #10
    1286:	1879      	adds	r1, r7, r1
    1288:	8809      	ldrh	r1, [r1, #0]
    128a:	400a      	ands	r2, r1
    128c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    128e:	2308      	movs	r3, #8
    1290:	18fb      	adds	r3, r7, r3
    1292:	68fa      	ldr	r2, [r7, #12]
    1294:	8992      	ldrh	r2, [r2, #12]
    1296:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	895b      	ldrh	r3, [r3, #10]
    129c:	b29a      	uxth	r2, r3
    129e:	2308      	movs	r3, #8
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	2108      	movs	r1, #8
    12a4:	1879      	adds	r1, r7, r1
    12a6:	8809      	ldrh	r1, [r1, #0]
    12a8:	400a      	ands	r2, r1
    12aa:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    12ac:	2308      	movs	r3, #8
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	2200      	movs	r2, #0
    12b2:	5e9b      	ldrsh	r3, [r3, r2]
    12b4:	2b00      	cmp	r3, #0
    12b6:	da0d      	bge.n	12d4 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    12b8:	230a      	movs	r3, #10
    12ba:	18fb      	adds	r3, r7, r3
    12bc:	881a      	ldrh	r2, [r3, #0]
    12be:	2380      	movs	r3, #128	; 0x80
    12c0:	00db      	lsls	r3, r3, #3
    12c2:	4013      	ands	r3, r2
    12c4:	d002      	beq.n	12cc <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    12ca:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	4a3e      	ldr	r2, [pc, #248]	; (13c8 <_rtc_interrupt_handler+0x170>)
    12d0:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    12d2:	e072      	b.n	13ba <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    12d4:	2308      	movs	r3, #8
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	881b      	ldrh	r3, [r3, #0]
    12da:	22ff      	movs	r2, #255	; 0xff
    12dc:	4013      	ands	r3, r2
    12de:	d041      	beq.n	1364 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    12e0:	2317      	movs	r3, #23
    12e2:	18fb      	adds	r3, r7, r3
    12e4:	2200      	movs	r2, #0
    12e6:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    12e8:	2317      	movs	r3, #23
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	2200      	movs	r2, #0
    12ee:	701a      	strb	r2, [r3, #0]
    12f0:	e032      	b.n	1358 <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    12f2:	2308      	movs	r3, #8
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	881b      	ldrh	r3, [r3, #0]
    12f8:	2217      	movs	r2, #23
    12fa:	18ba      	adds	r2, r7, r2
    12fc:	7812      	ldrb	r2, [r2, #0]
    12fe:	2101      	movs	r1, #1
    1300:	4091      	lsls	r1, r2
    1302:	000a      	movs	r2, r1
    1304:	4013      	ands	r3, r2
    1306:	22ff      	movs	r2, #255	; 0xff
    1308:	4013      	ands	r3, r2
    130a:	d012      	beq.n	1332 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    130c:	230a      	movs	r3, #10
    130e:	18fb      	adds	r3, r7, r3
    1310:	881a      	ldrh	r2, [r3, #0]
    1312:	2317      	movs	r3, #23
    1314:	18fb      	adds	r3, r7, r3
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	411a      	asrs	r2, r3
    131a:	0013      	movs	r3, r2
    131c:	2201      	movs	r2, #1
    131e:	4013      	ands	r3, r2
    1320:	d007      	beq.n	1332 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    1322:	2317      	movs	r3, #23
    1324:	18fb      	adds	r3, r7, r3
    1326:	781a      	ldrb	r2, [r3, #0]
    1328:	693b      	ldr	r3, [r7, #16]
    132a:	3202      	adds	r2, #2
    132c:	0092      	lsls	r2, r2, #2
    132e:	58d3      	ldr	r3, [r2, r3]
    1330:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    1332:	2317      	movs	r3, #23
    1334:	18fb      	adds	r3, r7, r3
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	2201      	movs	r2, #1
    133a:	409a      	lsls	r2, r3
    133c:	0013      	movs	r3, r2
    133e:	b29b      	uxth	r3, r3
    1340:	22ff      	movs	r2, #255	; 0xff
    1342:	4013      	ands	r3, r2
    1344:	b29a      	uxth	r2, r3
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    134a:	2317      	movs	r3, #23
    134c:	18fb      	adds	r3, r7, r3
    134e:	781a      	ldrb	r2, [r3, #0]
    1350:	2317      	movs	r3, #23
    1352:	18fb      	adds	r3, r7, r3
    1354:	3201      	adds	r2, #1
    1356:	701a      	strb	r2, [r3, #0]
    1358:	2317      	movs	r3, #23
    135a:	18fb      	adds	r3, r7, r3
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	2b07      	cmp	r3, #7
    1360:	d9c7      	bls.n	12f2 <_rtc_interrupt_handler+0x9a>
}
    1362:	e02a      	b.n	13ba <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    1364:	2308      	movs	r3, #8
    1366:	18fb      	adds	r3, r7, r3
    1368:	881a      	ldrh	r2, [r3, #0]
    136a:	2380      	movs	r3, #128	; 0x80
    136c:	005b      	lsls	r3, r3, #1
    136e:	4013      	ands	r3, r2
    1370:	d00e      	beq.n	1390 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1372:	230a      	movs	r3, #10
    1374:	18fb      	adds	r3, r7, r3
    1376:	881a      	ldrh	r2, [r3, #0]
    1378:	2380      	movs	r3, #128	; 0x80
    137a:	005b      	lsls	r3, r3, #1
    137c:	4013      	ands	r3, r2
    137e:	d002      	beq.n	1386 <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1380:	693b      	ldr	r3, [r7, #16]
    1382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1384:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	0052      	lsls	r2, r2, #1
    138c:	819a      	strh	r2, [r3, #12]
}
    138e:	e014      	b.n	13ba <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1390:	2308      	movs	r3, #8
    1392:	18fb      	adds	r3, r7, r3
    1394:	881a      	ldrh	r2, [r3, #0]
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	009b      	lsls	r3, r3, #2
    139a:	4013      	ands	r3, r2
    139c:	d00d      	beq.n	13ba <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    139e:	230a      	movs	r3, #10
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	881a      	ldrh	r2, [r3, #0]
    13a4:	2380      	movs	r3, #128	; 0x80
    13a6:	009b      	lsls	r3, r3, #2
    13a8:	4013      	ands	r3, r2
    13aa:	d002      	beq.n	13b2 <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    13ac:	693b      	ldr	r3, [r7, #16]
    13ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13b0:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	2280      	movs	r2, #128	; 0x80
    13b6:	0092      	lsls	r2, r2, #2
    13b8:	819a      	strh	r2, [r3, #12]
}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46bd      	mov	sp, r7
    13be:	b006      	add	sp, #24
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	20000134 	.word	0x20000134
    13c8:	ffff8000 	.word	0xffff8000

000013cc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    13d0:	2000      	movs	r0, #0
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <RTC_Handler+0x10>)
    13d4:	4798      	blx	r3
}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	00001259 	.word	0x00001259

000013e0 <system_gclk_chan_get_config_defaults>:
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	2200      	movs	r2, #0
    13ec:	701a      	strb	r2, [r3, #0]
}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	46bd      	mov	sp, r7
    13f2:	b002      	add	sp, #8
    13f4:	bd80      	pop	{r7, pc}
	...

000013f8 <system_apb_clock_set_mask>:
{
    13f8:	b580      	push	{r7, lr}
    13fa:	b082      	sub	sp, #8
    13fc:	af00      	add	r7, sp, #0
    13fe:	0002      	movs	r2, r0
    1400:	6039      	str	r1, [r7, #0]
    1402:	1dfb      	adds	r3, r7, #7
    1404:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1406:	1dfb      	adds	r3, r7, #7
    1408:	781b      	ldrb	r3, [r3, #0]
    140a:	2b04      	cmp	r3, #4
    140c:	d827      	bhi.n	145e <system_apb_clock_set_mask+0x66>
    140e:	009a      	lsls	r2, r3, #2
    1410:	4b16      	ldr	r3, [pc, #88]	; (146c <system_apb_clock_set_mask+0x74>)
    1412:	18d3      	adds	r3, r2, r3
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1418:	4b15      	ldr	r3, [pc, #84]	; (1470 <system_apb_clock_set_mask+0x78>)
    141a:	4a15      	ldr	r2, [pc, #84]	; (1470 <system_apb_clock_set_mask+0x78>)
    141c:	6951      	ldr	r1, [r2, #20]
    141e:	683a      	ldr	r2, [r7, #0]
    1420:	430a      	orrs	r2, r1
    1422:	615a      	str	r2, [r3, #20]
			break;
    1424:	e01d      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    1426:	4b12      	ldr	r3, [pc, #72]	; (1470 <system_apb_clock_set_mask+0x78>)
    1428:	4a11      	ldr	r2, [pc, #68]	; (1470 <system_apb_clock_set_mask+0x78>)
    142a:	6991      	ldr	r1, [r2, #24]
    142c:	683a      	ldr	r2, [r7, #0]
    142e:	430a      	orrs	r2, r1
    1430:	619a      	str	r2, [r3, #24]
			break;
    1432:	e016      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <system_apb_clock_set_mask+0x78>)
    1436:	4a0e      	ldr	r2, [pc, #56]	; (1470 <system_apb_clock_set_mask+0x78>)
    1438:	69d1      	ldr	r1, [r2, #28]
    143a:	683a      	ldr	r2, [r7, #0]
    143c:	430a      	orrs	r2, r1
    143e:	61da      	str	r2, [r3, #28]
			break;
    1440:	e00f      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1442:	4b0b      	ldr	r3, [pc, #44]	; (1470 <system_apb_clock_set_mask+0x78>)
    1444:	4a0a      	ldr	r2, [pc, #40]	; (1470 <system_apb_clock_set_mask+0x78>)
    1446:	6a11      	ldr	r1, [r2, #32]
    1448:	683a      	ldr	r2, [r7, #0]
    144a:	430a      	orrs	r2, r1
    144c:	621a      	str	r2, [r3, #32]
			break;
    144e:	e008      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    1450:	4b07      	ldr	r3, [pc, #28]	; (1470 <system_apb_clock_set_mask+0x78>)
    1452:	4a07      	ldr	r2, [pc, #28]	; (1470 <system_apb_clock_set_mask+0x78>)
    1454:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1456:	683a      	ldr	r2, [r7, #0]
    1458:	430a      	orrs	r2, r1
    145a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    145c:	e001      	b.n	1462 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    145e:	2317      	movs	r3, #23
    1460:	e000      	b.n	1464 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    1462:	2300      	movs	r3, #0
}
    1464:	0018      	movs	r0, r3
    1466:	46bd      	mov	sp, r7
    1468:	b002      	add	sp, #8
    146a:	bd80      	pop	{r7, pc}
    146c:	000068b0 	.word	0x000068b0
    1470:	40000400 	.word	0x40000400

00001474 <system_pinmux_get_config_defaults>:
{
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2280      	movs	r2, #128	; 0x80
    1480:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	2200      	movs	r2, #0
    1486:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	2201      	movs	r2, #1
    148c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	2200      	movs	r2, #0
    1492:	70da      	strb	r2, [r3, #3]
}
    1494:	46c0      	nop			; (mov r8, r8)
    1496:	46bd      	mov	sp, r7
    1498:	b002      	add	sp, #8
    149a:	bd80      	pop	{r7, pc}

0000149c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <system_is_debugger_present+0x1c>)
    14a2:	789b      	ldrb	r3, [r3, #2]
    14a4:	b2db      	uxtb	r3, r3
    14a6:	001a      	movs	r2, r3
    14a8:	2302      	movs	r3, #2
    14aa:	4013      	ands	r3, r2
    14ac:	1e5a      	subs	r2, r3, #1
    14ae:	4193      	sbcs	r3, r2
    14b0:	b2db      	uxtb	r3, r3
}
    14b2:	0018      	movs	r0, r3
    14b4:	46bd      	mov	sp, r7
    14b6:	bd80      	pop	{r7, pc}
    14b8:	41002000 	.word	0x41002000

000014bc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	69db      	ldr	r3, [r3, #28]
    14ce:	2207      	movs	r2, #7
    14d0:	4013      	ands	r3, r2
    14d2:	1e5a      	subs	r2, r3, #1
    14d4:	4193      	sbcs	r3, r2
    14d6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    14d8:	0018      	movs	r0, r3
    14da:	46bd      	mov	sp, r7
    14dc:	b004      	add	sp, #16
    14de:	bd80      	pop	{r7, pc}

000014e0 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b082      	sub	sp, #8
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    14e8:	46c0      	nop			; (mov r8, r8)
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	0018      	movs	r0, r3
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <_i2c_master_wait_for_sync+0x20>)
    14f0:	4798      	blx	r3
    14f2:	1e03      	subs	r3, r0, #0
    14f4:	d1f9      	bne.n	14ea <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	46bd      	mov	sp, r7
    14fa:	b002      	add	sp, #8
    14fc:	bd80      	pop	{r7, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	000014bd 	.word	0x000014bd

00001504 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	b097      	sub	sp, #92	; 0x5c
    1508:	af00      	add	r7, sp, #0
    150a:	6178      	str	r0, [r7, #20]
    150c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    150e:	2300      	movs	r3, #0
    1510:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    1512:	2300      	movs	r3, #0
    1514:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    1516:	2300      	movs	r3, #0
    1518:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    151a:	233b      	movs	r3, #59	; 0x3b
    151c:	2210      	movs	r2, #16
    151e:	4694      	mov	ip, r2
    1520:	44bc      	add	ip, r7
    1522:	4463      	add	r3, ip
    1524:	2200      	movs	r2, #0
    1526:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1528:	697b      	ldr	r3, [r7, #20]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    152e:	697b      	ldr	r3, [r7, #20]
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1534:	2323      	movs	r3, #35	; 0x23
    1536:	2210      	movs	r2, #16
    1538:	18ba      	adds	r2, r7, r2
    153a:	18d4      	adds	r4, r2, r3
    153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    153e:	0018      	movs	r0, r3
    1540:	4bc0      	ldr	r3, [pc, #768]	; (1844 <_i2c_master_set_config+0x340>)
    1542:	4798      	blx	r3
    1544:	0003      	movs	r3, r0
    1546:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1548:	230c      	movs	r3, #12
    154a:	2210      	movs	r2, #16
    154c:	4694      	mov	ip, r2
    154e:	44bc      	add	ip, r7
    1550:	4463      	add	r3, ip
    1552:	0018      	movs	r0, r3
    1554:	4bbc      	ldr	r3, [pc, #752]	; (1848 <_i2c_master_set_config+0x344>)
    1556:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1558:	693b      	ldr	r3, [r7, #16]
    155a:	69db      	ldr	r3, [r3, #28]
    155c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    155e:	693b      	ldr	r3, [r7, #16]
    1560:	6a1b      	ldr	r3, [r3, #32]
    1562:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1566:	2b00      	cmp	r3, #0
    1568:	d106      	bne.n	1578 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    156c:	2100      	movs	r1, #0
    156e:	0018      	movs	r0, r3
    1570:	4bb6      	ldr	r3, [pc, #728]	; (184c <_i2c_master_set_config+0x348>)
    1572:	4798      	blx	r3
    1574:	0003      	movs	r3, r0
    1576:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    157a:	b2da      	uxtb	r2, r3
    157c:	230c      	movs	r3, #12
    157e:	2110      	movs	r1, #16
    1580:	468c      	mov	ip, r1
    1582:	44bc      	add	ip, r7
    1584:	4463      	add	r3, ip
    1586:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1588:	230c      	movs	r3, #12
    158a:	2210      	movs	r2, #16
    158c:	4694      	mov	ip, r2
    158e:	44bc      	add	ip, r7
    1590:	4463      	add	r3, ip
    1592:	2202      	movs	r2, #2
    1594:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1598:	0c1b      	lsrs	r3, r3, #16
    159a:	b2db      	uxtb	r3, r3
    159c:	220c      	movs	r2, #12
    159e:	2110      	movs	r1, #16
    15a0:	468c      	mov	ip, r1
    15a2:	44bc      	add	ip, r7
    15a4:	4462      	add	r2, ip
    15a6:	0011      	movs	r1, r2
    15a8:	0018      	movs	r0, r3
    15aa:	4ba9      	ldr	r3, [pc, #676]	; (1850 <_i2c_master_set_config+0x34c>)
    15ac:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    15ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15b0:	2b00      	cmp	r3, #0
    15b2:	d106      	bne.n	15c2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    15b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15b6:	2101      	movs	r1, #1
    15b8:	0018      	movs	r0, r3
    15ba:	4ba4      	ldr	r3, [pc, #656]	; (184c <_i2c_master_set_config+0x348>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    15c0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    15c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15c4:	b2da      	uxtb	r2, r3
    15c6:	230c      	movs	r3, #12
    15c8:	2110      	movs	r1, #16
    15ca:	468c      	mov	ip, r1
    15cc:	44bc      	add	ip, r7
    15ce:	4463      	add	r3, ip
    15d0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    15d2:	230c      	movs	r3, #12
    15d4:	2210      	movs	r2, #16
    15d6:	4694      	mov	ip, r2
    15d8:	44bc      	add	ip, r7
    15da:	4463      	add	r3, ip
    15dc:	2202      	movs	r2, #2
    15de:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    15e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15e2:	0c1b      	lsrs	r3, r3, #16
    15e4:	b2db      	uxtb	r3, r3
    15e6:	220c      	movs	r2, #12
    15e8:	2110      	movs	r1, #16
    15ea:	468c      	mov	ip, r1
    15ec:	44bc      	add	ip, r7
    15ee:	4462      	add	r2, ip
    15f0:	0011      	movs	r1, r2
    15f2:	0018      	movs	r0, r3
    15f4:	4b96      	ldr	r3, [pc, #600]	; (1850 <_i2c_master_set_config+0x34c>)
    15f6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    15f8:	693b      	ldr	r3, [r7, #16]
    15fa:	8a9a      	ldrh	r2, [r3, #20]
    15fc:	697b      	ldr	r3, [r7, #20]
    15fe:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1600:	693b      	ldr	r3, [r7, #16]
    1602:	8ada      	ldrh	r2, [r3, #22]
    1604:	697b      	ldr	r3, [r7, #20]
    1606:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1608:	693b      	ldr	r3, [r7, #16]
    160a:	7e1b      	ldrb	r3, [r3, #24]
    160c:	2b00      	cmp	r3, #0
    160e:	d103      	bne.n	1618 <_i2c_master_set_config+0x114>
    1610:	4b90      	ldr	r3, [pc, #576]	; (1854 <_i2c_master_set_config+0x350>)
    1612:	4798      	blx	r3
    1614:	1e03      	subs	r3, r0, #0
    1616:	d002      	beq.n	161e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1618:	2380      	movs	r3, #128	; 0x80
    161a:	657b      	str	r3, [r7, #84]	; 0x54
    161c:	e001      	b.n	1622 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    161e:	2300      	movs	r3, #0
    1620:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1622:	693b      	ldr	r3, [r7, #16]
    1624:	691b      	ldr	r3, [r3, #16]
    1626:	2b00      	cmp	r3, #0
    1628:	d004      	beq.n	1634 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    162a:	693b      	ldr	r3, [r7, #16]
    162c:	691b      	ldr	r3, [r3, #16]
    162e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1630:	4313      	orrs	r3, r2
    1632:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1634:	693b      	ldr	r3, [r7, #16]
    1636:	689b      	ldr	r3, [r3, #8]
    1638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    163a:	4313      	orrs	r3, r2
    163c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    163e:	693b      	ldr	r3, [r7, #16]
    1640:	2224      	movs	r2, #36	; 0x24
    1642:	5c9b      	ldrb	r3, [r3, r2]
    1644:	2b00      	cmp	r3, #0
    1646:	d004      	beq.n	1652 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    164a:	2280      	movs	r2, #128	; 0x80
    164c:	05d2      	lsls	r2, r2, #23
    164e:	4313      	orrs	r3, r2
    1650:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1652:	693b      	ldr	r3, [r7, #16]
    1654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1656:	2b00      	cmp	r3, #0
    1658:	d004      	beq.n	1664 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    165a:	693b      	ldr	r3, [r7, #16]
    165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    165e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1660:	4313      	orrs	r3, r2
    1662:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1664:	693b      	ldr	r3, [r7, #16]
    1666:	222c      	movs	r2, #44	; 0x2c
    1668:	5c9b      	ldrb	r3, [r3, r2]
    166a:	2b00      	cmp	r3, #0
    166c:	d105      	bne.n	167a <_i2c_master_set_config+0x176>
    166e:	693b      	ldr	r3, [r7, #16]
    1670:	689a      	ldr	r2, [r3, #8]
    1672:	2380      	movs	r3, #128	; 0x80
    1674:	049b      	lsls	r3, r3, #18
    1676:	429a      	cmp	r2, r3
    1678:	d104      	bne.n	1684 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    167c:	2280      	movs	r2, #128	; 0x80
    167e:	0512      	lsls	r2, r2, #20
    1680:	4313      	orrs	r3, r2
    1682:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1684:	693b      	ldr	r3, [r7, #16]
    1686:	222d      	movs	r2, #45	; 0x2d
    1688:	5c9b      	ldrb	r3, [r3, r2]
    168a:	2b00      	cmp	r3, #0
    168c:	d004      	beq.n	1698 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1690:	2280      	movs	r2, #128	; 0x80
    1692:	0412      	lsls	r2, r2, #16
    1694:	4313      	orrs	r3, r2
    1696:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1698:	693b      	ldr	r3, [r7, #16]
    169a:	222e      	movs	r2, #46	; 0x2e
    169c:	5c9b      	ldrb	r3, [r3, r2]
    169e:	2b00      	cmp	r3, #0
    16a0:	d004      	beq.n	16ac <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    16a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	03d2      	lsls	r2, r2, #15
    16a8:	4313      	orrs	r3, r2
    16aa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    16ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ae:	681a      	ldr	r2, [r3, #0]
    16b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16b2:	431a      	orrs	r2, r3
    16b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16b6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    16b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16ba:	2280      	movs	r2, #128	; 0x80
    16bc:	0052      	lsls	r2, r2, #1
    16be:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    16c0:	2323      	movs	r3, #35	; 0x23
    16c2:	2210      	movs	r2, #16
    16c4:	4694      	mov	ip, r2
    16c6:	44bc      	add	ip, r7
    16c8:	4463      	add	r3, ip
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	3312      	adds	r3, #18
    16ce:	b2db      	uxtb	r3, r3
    16d0:	0018      	movs	r0, r3
    16d2:	4b61      	ldr	r3, [pc, #388]	; (1858 <_i2c_master_set_config+0x354>)
    16d4:	4798      	blx	r3
    16d6:	0003      	movs	r3, r0
    16d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    16da:	693b      	ldr	r3, [r7, #16]
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	22fa      	movs	r2, #250	; 0xfa
    16e0:	0092      	lsls	r2, r2, #2
    16e2:	4353      	muls	r3, r2
    16e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    16e6:	693b      	ldr	r3, [r7, #16]
    16e8:	685b      	ldr	r3, [r3, #4]
    16ea:	22fa      	movs	r2, #250	; 0xfa
    16ec:	0092      	lsls	r2, r2, #2
    16ee:	4353      	muls	r3, r2
    16f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    16f2:	693b      	ldr	r3, [r7, #16]
    16f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    16f6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    16f8:	4b58      	ldr	r3, [pc, #352]	; (185c <_i2c_master_set_config+0x358>)
    16fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    16fc:	4798      	blx	r3
    16fe:	0005      	movs	r5, r0
    1700:	000e      	movs	r6, r1
    1702:	4b56      	ldr	r3, [pc, #344]	; (185c <_i2c_master_set_config+0x358>)
    1704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1706:	4798      	blx	r3
    1708:	60b8      	str	r0, [r7, #8]
    170a:	60f9      	str	r1, [r7, #12]
    170c:	4b53      	ldr	r3, [pc, #332]	; (185c <_i2c_master_set_config+0x358>)
    170e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1710:	4798      	blx	r3
    1712:	4c53      	ldr	r4, [pc, #332]	; (1860 <_i2c_master_set_config+0x35c>)
    1714:	4a53      	ldr	r2, [pc, #332]	; (1864 <_i2c_master_set_config+0x360>)
    1716:	4b54      	ldr	r3, [pc, #336]	; (1868 <_i2c_master_set_config+0x364>)
    1718:	47a0      	blx	r4
    171a:	0003      	movs	r3, r0
    171c:	000c      	movs	r4, r1
    171e:	603b      	str	r3, [r7, #0]
    1720:	607c      	str	r4, [r7, #4]
    1722:	4b4e      	ldr	r3, [pc, #312]	; (185c <_i2c_master_set_config+0x358>)
    1724:	6a38      	ldr	r0, [r7, #32]
    1726:	4798      	blx	r3
    1728:	0002      	movs	r2, r0
    172a:	000b      	movs	r3, r1
    172c:	4c4c      	ldr	r4, [pc, #304]	; (1860 <_i2c_master_set_config+0x35c>)
    172e:	6838      	ldr	r0, [r7, #0]
    1730:	6879      	ldr	r1, [r7, #4]
    1732:	47a0      	blx	r4
    1734:	0003      	movs	r3, r0
    1736:	000c      	movs	r4, r1
    1738:	0018      	movs	r0, r3
    173a:	0021      	movs	r1, r4
    173c:	4c4b      	ldr	r4, [pc, #300]	; (186c <_i2c_master_set_config+0x368>)
    173e:	2200      	movs	r2, #0
    1740:	4b4b      	ldr	r3, [pc, #300]	; (1870 <_i2c_master_set_config+0x36c>)
    1742:	47a0      	blx	r4
    1744:	0003      	movs	r3, r0
    1746:	000c      	movs	r4, r1
    1748:	001a      	movs	r2, r3
    174a:	0023      	movs	r3, r4
    174c:	4c44      	ldr	r4, [pc, #272]	; (1860 <_i2c_master_set_config+0x35c>)
    174e:	68b8      	ldr	r0, [r7, #8]
    1750:	68f9      	ldr	r1, [r7, #12]
    1752:	47a0      	blx	r4
    1754:	0003      	movs	r3, r0
    1756:	000c      	movs	r4, r1
    1758:	001a      	movs	r2, r3
    175a:	0023      	movs	r3, r4
    175c:	4c45      	ldr	r4, [pc, #276]	; (1874 <_i2c_master_set_config+0x370>)
    175e:	0028      	movs	r0, r5
    1760:	0031      	movs	r1, r6
    1762:	47a0      	blx	r4
    1764:	0003      	movs	r3, r0
    1766:	000c      	movs	r4, r1
    1768:	001d      	movs	r5, r3
    176a:	0026      	movs	r6, r4
    176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    176e:	005a      	lsls	r2, r3, #1
    1770:	4b3a      	ldr	r3, [pc, #232]	; (185c <_i2c_master_set_config+0x358>)
    1772:	0010      	movs	r0, r2
    1774:	4798      	blx	r3
    1776:	0002      	movs	r2, r0
    1778:	000b      	movs	r3, r1
    177a:	4c3c      	ldr	r4, [pc, #240]	; (186c <_i2c_master_set_config+0x368>)
    177c:	0028      	movs	r0, r5
    177e:	0031      	movs	r1, r6
    1780:	47a0      	blx	r4
    1782:	0003      	movs	r3, r0
    1784:	000c      	movs	r4, r1
    1786:	0018      	movs	r0, r3
    1788:	0021      	movs	r1, r4
    178a:	4c3a      	ldr	r4, [pc, #232]	; (1874 <_i2c_master_set_config+0x370>)
    178c:	2200      	movs	r2, #0
    178e:	4b3a      	ldr	r3, [pc, #232]	; (1878 <_i2c_master_set_config+0x374>)
    1790:	47a0      	blx	r4
    1792:	0003      	movs	r3, r0
    1794:	000c      	movs	r4, r1
    1796:	001d      	movs	r5, r3
    1798:	0026      	movs	r6, r4
    179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    179c:	005a      	lsls	r2, r3, #1
    179e:	4b2f      	ldr	r3, [pc, #188]	; (185c <_i2c_master_set_config+0x358>)
    17a0:	0010      	movs	r0, r2
    17a2:	4798      	blx	r3
    17a4:	0002      	movs	r2, r0
    17a6:	000b      	movs	r3, r1
    17a8:	4c34      	ldr	r4, [pc, #208]	; (187c <_i2c_master_set_config+0x378>)
    17aa:	0028      	movs	r0, r5
    17ac:	0031      	movs	r1, r6
    17ae:	47a0      	blx	r4
    17b0:	0003      	movs	r3, r0
    17b2:	000c      	movs	r4, r1
    17b4:	0019      	movs	r1, r3
    17b6:	0022      	movs	r2, r4
    17b8:	4b31      	ldr	r3, [pc, #196]	; (1880 <_i2c_master_set_config+0x37c>)
    17ba:	0008      	movs	r0, r1
    17bc:	0011      	movs	r1, r2
    17be:	4798      	blx	r3
    17c0:	0003      	movs	r3, r0
    17c2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    17c4:	693b      	ldr	r3, [r7, #16]
    17c6:	689a      	ldr	r2, [r3, #8]
    17c8:	2380      	movs	r3, #128	; 0x80
    17ca:	049b      	lsls	r3, r3, #18
    17cc:	429a      	cmp	r2, r3
    17ce:	d16a      	bne.n	18a6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    17d0:	4b22      	ldr	r3, [pc, #136]	; (185c <_i2c_master_set_config+0x358>)
    17d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    17d4:	4798      	blx	r3
    17d6:	4c25      	ldr	r4, [pc, #148]	; (186c <_i2c_master_set_config+0x368>)
    17d8:	0002      	movs	r2, r0
    17da:	000b      	movs	r3, r1
    17dc:	47a0      	blx	r4
    17de:	0003      	movs	r3, r0
    17e0:	000c      	movs	r4, r1
    17e2:	001d      	movs	r5, r3
    17e4:	0026      	movs	r6, r4
    17e6:	4b1d      	ldr	r3, [pc, #116]	; (185c <_i2c_master_set_config+0x358>)
    17e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    17ea:	4798      	blx	r3
    17ec:	4c1c      	ldr	r4, [pc, #112]	; (1860 <_i2c_master_set_config+0x35c>)
    17ee:	2200      	movs	r2, #0
    17f0:	4b24      	ldr	r3, [pc, #144]	; (1884 <_i2c_master_set_config+0x380>)
    17f2:	47a0      	blx	r4
    17f4:	0003      	movs	r3, r0
    17f6:	000c      	movs	r4, r1
    17f8:	001a      	movs	r2, r3
    17fa:	0023      	movs	r3, r4
    17fc:	4c1f      	ldr	r4, [pc, #124]	; (187c <_i2c_master_set_config+0x378>)
    17fe:	0028      	movs	r0, r5
    1800:	0031      	movs	r1, r6
    1802:	47a0      	blx	r4
    1804:	0003      	movs	r3, r0
    1806:	000c      	movs	r4, r1
    1808:	0018      	movs	r0, r3
    180a:	0021      	movs	r1, r4
    180c:	4c19      	ldr	r4, [pc, #100]	; (1874 <_i2c_master_set_config+0x370>)
    180e:	2200      	movs	r2, #0
    1810:	4b19      	ldr	r3, [pc, #100]	; (1878 <_i2c_master_set_config+0x374>)
    1812:	47a0      	blx	r4
    1814:	0003      	movs	r3, r0
    1816:	000c      	movs	r4, r1
    1818:	0019      	movs	r1, r3
    181a:	0022      	movs	r2, r4
    181c:	4b18      	ldr	r3, [pc, #96]	; (1880 <_i2c_master_set_config+0x37c>)
    181e:	0008      	movs	r0, r1
    1820:	0011      	movs	r1, r2
    1822:	4798      	blx	r3
    1824:	0003      	movs	r3, r0
    1826:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    182a:	2b00      	cmp	r3, #0
    182c:	d02e      	beq.n	188c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    182e:	4b16      	ldr	r3, [pc, #88]	; (1888 <_i2c_master_set_config+0x384>)
    1830:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1834:	4798      	blx	r3
    1836:	0003      	movs	r3, r0
    1838:	1e9a      	subs	r2, r3, #2
    183a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    183c:	1ad3      	subs	r3, r2, r3
    183e:	653b      	str	r3, [r7, #80]	; 0x50
    1840:	e031      	b.n	18a6 <_i2c_master_set_config+0x3a2>
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00003441 	.word	0x00003441
    1848:	00001475 	.word	0x00001475
    184c:	00003285 	.word	0x00003285
    1850:	00004015 	.word	0x00004015
    1854:	0000149d 	.word	0x0000149d
    1858:	00003e51 	.word	0x00003e51
    185c:	00006359 	.word	0x00006359
    1860:	00005741 	.word	0x00005741
    1864:	e826d695 	.word	0xe826d695
    1868:	3e112e0b 	.word	0x3e112e0b
    186c:	00004ab9 	.word	0x00004ab9
    1870:	40240000 	.word	0x40240000
    1874:	00005c41 	.word	0x00005c41
    1878:	3ff00000 	.word	0x3ff00000
    187c:	000050d9 	.word	0x000050d9
    1880:	0000626d 	.word	0x0000626d
    1884:	40080000 	.word	0x40080000
    1888:	00004539 	.word	0x00004539
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    188e:	005a      	lsls	r2, r3, #1
    1890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1892:	18d3      	adds	r3, r2, r3
    1894:	1e5a      	subs	r2, r3, #1
    1896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1898:	0059      	lsls	r1, r3, #1
    189a:	4b1d      	ldr	r3, [pc, #116]	; (1910 <_i2c_master_set_config+0x40c>)
    189c:	0010      	movs	r0, r2
    189e:	4798      	blx	r3
    18a0:	0003      	movs	r3, r0
    18a2:	3b01      	subs	r3, #1
    18a4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    18a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18a8:	2bff      	cmp	r3, #255	; 0xff
    18aa:	dc08      	bgt.n	18be <_i2c_master_set_config+0x3ba>
    18ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18ae:	2b00      	cmp	r3, #0
    18b0:	db05      	blt.n	18be <_i2c_master_set_config+0x3ba>
    18b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18b4:	2bff      	cmp	r3, #255	; 0xff
    18b6:	dc02      	bgt.n	18be <_i2c_master_set_config+0x3ba>
    18b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18ba:	2b00      	cmp	r3, #0
    18bc:	da06      	bge.n	18cc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18be:	233b      	movs	r3, #59	; 0x3b
    18c0:	2210      	movs	r2, #16
    18c2:	4694      	mov	ip, r2
    18c4:	44bc      	add	ip, r7
    18c6:	4463      	add	r3, ip
    18c8:	2240      	movs	r2, #64	; 0x40
    18ca:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    18cc:	233b      	movs	r3, #59	; 0x3b
    18ce:	2210      	movs	r2, #16
    18d0:	4694      	mov	ip, r2
    18d2:	44bc      	add	ip, r7
    18d4:	4463      	add	r3, ip
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	2b40      	cmp	r3, #64	; 0x40
    18da:	d00e      	beq.n	18fa <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18de:	22ff      	movs	r2, #255	; 0xff
    18e0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    18e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    18e4:	041b      	lsls	r3, r3, #16
    18e6:	0019      	movs	r1, r3
    18e8:	23ff      	movs	r3, #255	; 0xff
    18ea:	041b      	lsls	r3, r3, #16
    18ec:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18ee:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    18f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    18f2:	0612      	lsls	r2, r2, #24
    18f4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    18f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    18f8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    18fa:	233b      	movs	r3, #59	; 0x3b
    18fc:	2210      	movs	r2, #16
    18fe:	4694      	mov	ip, r2
    1900:	44bc      	add	ip, r7
    1902:	4463      	add	r3, ip
    1904:	781b      	ldrb	r3, [r3, #0]
}
    1906:	0018      	movs	r0, r3
    1908:	46bd      	mov	sp, r7
    190a:	b017      	add	sp, #92	; 0x5c
    190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	00004539 	.word	0x00004539

00001914 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1914:	b580      	push	{r7, lr}
    1916:	b08a      	sub	sp, #40	; 0x28
    1918:	af00      	add	r7, sp, #0
    191a:	60f8      	str	r0, [r7, #12]
    191c:	60b9      	str	r1, [r7, #8]
    191e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	68ba      	ldr	r2, [r7, #8]
    1924:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	0018      	movs	r0, r3
    1932:	4b2f      	ldr	r3, [pc, #188]	; (19f0 <i2c_master_init+0xdc>)
    1934:	4798      	blx	r3
    1936:	0003      	movs	r3, r0
    1938:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	2b05      	cmp	r3, #5
    193e:	d104      	bne.n	194a <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1940:	2301      	movs	r3, #1
    1942:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1944:	2318      	movs	r3, #24
    1946:	623b      	str	r3, [r7, #32]
    1948:	e004      	b.n	1954 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    194a:	69bb      	ldr	r3, [r7, #24]
    194c:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    194e:	69bb      	ldr	r3, [r7, #24]
    1950:	3312      	adds	r3, #18
    1952:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    1954:	69bb      	ldr	r3, [r7, #24]
    1956:	2b05      	cmp	r3, #5
    1958:	d108      	bne.n	196c <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    195a:	2201      	movs	r2, #1
    195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    195e:	409a      	lsls	r2, r3
    1960:	0013      	movs	r3, r2
    1962:	0019      	movs	r1, r3
    1964:	2003      	movs	r0, #3
    1966:	4b23      	ldr	r3, [pc, #140]	; (19f4 <i2c_master_init+0xe0>)
    1968:	4798      	blx	r3
    196a:	e007      	b.n	197c <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    196c:	2201      	movs	r2, #1
    196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1970:	409a      	lsls	r2, r3
    1972:	0013      	movs	r3, r2
    1974:	0019      	movs	r1, r3
    1976:	2002      	movs	r0, #2
    1978:	4b1e      	ldr	r3, [pc, #120]	; (19f4 <i2c_master_init+0xe0>)
    197a:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    197c:	2314      	movs	r3, #20
    197e:	18fb      	adds	r3, r7, r3
    1980:	0018      	movs	r0, r3
    1982:	4b1d      	ldr	r3, [pc, #116]	; (19f8 <i2c_master_init+0xe4>)
    1984:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	7b1a      	ldrb	r2, [r3, #12]
    198a:	2314      	movs	r3, #20
    198c:	18fb      	adds	r3, r7, r3
    198e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1990:	6a3b      	ldr	r3, [r7, #32]
    1992:	b2db      	uxtb	r3, r3
    1994:	2214      	movs	r2, #20
    1996:	18ba      	adds	r2, r7, r2
    1998:	0011      	movs	r1, r2
    199a:	0018      	movs	r0, r3
    199c:	4b17      	ldr	r3, [pc, #92]	; (19fc <i2c_master_init+0xe8>)
    199e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    19a0:	6a3b      	ldr	r3, [r7, #32]
    19a2:	b2db      	uxtb	r3, r3
    19a4:	0018      	movs	r0, r3
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <i2c_master_init+0xec>)
    19a8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	7b1b      	ldrb	r3, [r3, #12]
    19ae:	2100      	movs	r1, #0
    19b0:	0018      	movs	r0, r3
    19b2:	4b14      	ldr	r3, [pc, #80]	; (1a04 <i2c_master_init+0xf0>)
    19b4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    19b6:	69fb      	ldr	r3, [r7, #28]
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	2202      	movs	r2, #2
    19bc:	4013      	ands	r3, r2
    19be:	d001      	beq.n	19c4 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    19c0:	231c      	movs	r3, #28
    19c2:	e010      	b.n	19e6 <i2c_master_init+0xd2>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    19c4:	69fb      	ldr	r3, [r7, #28]
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	2201      	movs	r2, #1
    19ca:	4013      	ands	r3, r2
    19cc:	d001      	beq.n	19d2 <i2c_master_init+0xbe>
		return STATUS_BUSY;
    19ce:	2305      	movs	r3, #5
    19d0:	e009      	b.n	19e6 <i2c_master_init+0xd2>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    19d2:	69fb      	ldr	r3, [r7, #28]
    19d4:	2214      	movs	r2, #20
    19d6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    19d8:	687a      	ldr	r2, [r7, #4]
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	0011      	movs	r1, r2
    19de:	0018      	movs	r0, r3
    19e0:	4b09      	ldr	r3, [pc, #36]	; (1a08 <i2c_master_init+0xf4>)
    19e2:	4798      	blx	r3
    19e4:	0003      	movs	r3, r0
}
    19e6:	0018      	movs	r0, r3
    19e8:	46bd      	mov	sp, r7
    19ea:	b00a      	add	sp, #40	; 0x28
    19ec:	bd80      	pop	{r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	00003441 	.word	0x00003441
    19f4:	000013f9 	.word	0x000013f9
    19f8:	000013e1 	.word	0x000013e1
    19fc:	00003d61 	.word	0x00003d61
    1a00:	00003da1 	.word	0x00003da1
    1a04:	000031f9 	.word	0x000031f9
    1a08:	00001505 	.word	0x00001505

00001a0c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b084      	sub	sp, #16
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	7e1b      	ldrb	r3, [r3, #24]
    1a1e:	b2db      	uxtb	r3, r3
    1a20:	001a      	movs	r2, r3
    1a22:	2302      	movs	r3, #2
    1a24:	4013      	ands	r3, r2
    1a26:	d00b      	beq.n	1a40 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	2202      	movs	r2, #2
    1a2c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	8b5b      	ldrh	r3, [r3, #26]
    1a32:	b29b      	uxth	r3, r3
    1a34:	001a      	movs	r2, r3
    1a36:	2302      	movs	r3, #2
    1a38:	4013      	ands	r3, r2
    1a3a:	d011      	beq.n	1a60 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1a3c:	2341      	movs	r3, #65	; 0x41
    1a3e:	e010      	b.n	1a62 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	8b5b      	ldrh	r3, [r3, #26]
    1a44:	b29b      	uxth	r3, r3
    1a46:	001a      	movs	r2, r3
    1a48:	2304      	movs	r3, #4
    1a4a:	4013      	ands	r3, r2
    1a4c:	d008      	beq.n	1a60 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a4e:	68fb      	ldr	r3, [r7, #12]
    1a50:	685b      	ldr	r3, [r3, #4]
    1a52:	22c0      	movs	r2, #192	; 0xc0
    1a54:	0292      	lsls	r2, r2, #10
    1a56:	431a      	orrs	r2, r3
    1a58:	68fb      	ldr	r3, [r7, #12]
    1a5a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1a5c:	2318      	movs	r3, #24
    1a5e:	e000      	b.n	1a62 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1a60:	2300      	movs	r3, #0
}
    1a62:	0018      	movs	r0, r3
    1a64:	46bd      	mov	sp, r7
    1a66:	b004      	add	sp, #16
    1a68:	bd80      	pop	{r7, pc}

00001a6a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1a6a:	b580      	push	{r7, lr}
    1a6c:	b084      	sub	sp, #16
    1a6e:	af00      	add	r7, sp, #0
    1a70:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1a78:	230e      	movs	r3, #14
    1a7a:	18fb      	adds	r3, r7, r3
    1a7c:	2200      	movs	r2, #0
    1a7e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1a80:	e00f      	b.n	1aa2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1a82:	230e      	movs	r3, #14
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	220e      	movs	r2, #14
    1a88:	18ba      	adds	r2, r7, r2
    1a8a:	8812      	ldrh	r2, [r2, #0]
    1a8c:	3201      	adds	r2, #1
    1a8e:	801a      	strh	r2, [r3, #0]
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	891b      	ldrh	r3, [r3, #8]
    1a94:	220e      	movs	r2, #14
    1a96:	18ba      	adds	r2, r7, r2
    1a98:	8812      	ldrh	r2, [r2, #0]
    1a9a:	429a      	cmp	r2, r3
    1a9c:	d301      	bcc.n	1aa2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1a9e:	2312      	movs	r3, #18
    1aa0:	e00e      	b.n	1ac0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1aa2:	68bb      	ldr	r3, [r7, #8]
    1aa4:	7e1b      	ldrb	r3, [r3, #24]
    1aa6:	b2db      	uxtb	r3, r3
    1aa8:	001a      	movs	r2, r3
    1aaa:	2301      	movs	r3, #1
    1aac:	4013      	ands	r3, r2
    1aae:	d106      	bne.n	1abe <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1ab0:	68bb      	ldr	r3, [r7, #8]
    1ab2:	7e1b      	ldrb	r3, [r3, #24]
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	001a      	movs	r2, r3
    1ab8:	2302      	movs	r3, #2
    1aba:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1abc:	d0e1      	beq.n	1a82 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    1abe:	2300      	movs	r3, #0
}
    1ac0:	0018      	movs	r0, r3
    1ac2:	46bd      	mov	sp, r7
    1ac4:	b004      	add	sp, #16
    1ac6:	bd80      	pop	{r7, pc}

00001ac8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1ac8:	b590      	push	{r4, r7, lr}
    1aca:	b085      	sub	sp, #20
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
    1ad0:	000a      	movs	r2, r1
    1ad2:	1cfb      	adds	r3, r7, #3
    1ad4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1adc:	68fb      	ldr	r3, [r7, #12]
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	2280      	movs	r2, #128	; 0x80
    1ae2:	02d2      	lsls	r2, r2, #11
    1ae4:	431a      	orrs	r2, r3
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1aea:	1cfb      	adds	r3, r7, #3
    1aec:	781a      	ldrb	r2, [r3, #0]
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1af2:	230b      	movs	r3, #11
    1af4:	18fc      	adds	r4, r7, r3
    1af6:	687b      	ldr	r3, [r7, #4]
    1af8:	0018      	movs	r0, r3
    1afa:	4b07      	ldr	r3, [pc, #28]	; (1b18 <_i2c_master_send_hs_master_code+0x50>)
    1afc:	4798      	blx	r3
    1afe:	0003      	movs	r3, r0
    1b00:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	2201      	movs	r2, #1
    1b06:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1b08:	230b      	movs	r3, #11
    1b0a:	18fb      	adds	r3, r7, r3
    1b0c:	781b      	ldrb	r3, [r3, #0]
}
    1b0e:	0018      	movs	r0, r3
    1b10:	46bd      	mov	sp, r7
    1b12:	b005      	add	sp, #20
    1b14:	bd90      	pop	{r4, r7, pc}
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	00001a6b 	.word	0x00001a6b

00001b1c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b1c:	b590      	push	{r4, r7, lr}
    1b1e:	b087      	sub	sp, #28
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
    1b24:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1b2c:	2314      	movs	r3, #20
    1b2e:	18fb      	adds	r3, r7, r3
    1b30:	683a      	ldr	r2, [r7, #0]
    1b32:	8852      	ldrh	r2, [r2, #2]
    1b34:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1b36:	2312      	movs	r3, #18
    1b38:	18fb      	adds	r3, r7, r3
    1b3a:	2200      	movs	r2, #0
    1b3c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b3e:	68fb      	ldr	r3, [r7, #12]
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	011b      	lsls	r3, r3, #4
    1b44:	0fdb      	lsrs	r3, r3, #31
    1b46:	b2db      	uxtb	r3, r3
    1b48:	001a      	movs	r2, r3
    1b4a:	230b      	movs	r3, #11
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	1e51      	subs	r1, r2, #1
    1b50:	418a      	sbcs	r2, r1
    1b52:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1b54:	683b      	ldr	r3, [r7, #0]
    1b56:	7a5b      	ldrb	r3, [r3, #9]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d006      	beq.n	1b6a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1b5c:	683b      	ldr	r3, [r7, #0]
    1b5e:	7a9a      	ldrb	r2, [r3, #10]
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	0011      	movs	r1, r2
    1b64:	0018      	movs	r0, r3
    1b66:	4b85      	ldr	r3, [pc, #532]	; (1d7c <_i2c_master_read_packet+0x260>)
    1b68:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	685b      	ldr	r3, [r3, #4]
    1b6e:	4a84      	ldr	r2, [pc, #528]	; (1d80 <_i2c_master_read_packet+0x264>)
    1b70:	401a      	ands	r2, r3
    1b72:	68fb      	ldr	r3, [r7, #12]
    1b74:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1b76:	683b      	ldr	r3, [r7, #0]
    1b78:	7a1b      	ldrb	r3, [r3, #8]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d042      	beq.n	1c04 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b7e:	683b      	ldr	r3, [r7, #0]
    1b80:	881b      	ldrh	r3, [r3, #0]
    1b82:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b84:	683b      	ldr	r3, [r7, #0]
    1b86:	7a5b      	ldrb	r3, [r3, #9]
    1b88:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b8a:	4313      	orrs	r3, r2
    1b8c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b8e:	2380      	movs	r3, #128	; 0x80
    1b90:	021b      	lsls	r3, r3, #8
    1b92:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1b98:	2317      	movs	r3, #23
    1b9a:	18fc      	adds	r4, r7, r3
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	0018      	movs	r0, r3
    1ba0:	4b78      	ldr	r3, [pc, #480]	; (1d84 <_i2c_master_read_packet+0x268>)
    1ba2:	4798      	blx	r3
    1ba4:	0003      	movs	r3, r0
    1ba6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ba8:	68fb      	ldr	r3, [r7, #12]
    1baa:	685b      	ldr	r3, [r3, #4]
    1bac:	4a74      	ldr	r2, [pc, #464]	; (1d80 <_i2c_master_read_packet+0x264>)
    1bae:	401a      	ands	r2, r3
    1bb0:	68fb      	ldr	r3, [r7, #12]
    1bb2:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1bb4:	2317      	movs	r3, #23
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d107      	bne.n	1bce <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    1bbe:	2317      	movs	r3, #23
    1bc0:	18fc      	adds	r4, r7, r3
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	0018      	movs	r0, r3
    1bc6:	4b70      	ldr	r3, [pc, #448]	; (1d88 <_i2c_master_read_packet+0x26c>)
    1bc8:	4798      	blx	r3
    1bca:	0003      	movs	r3, r0
    1bcc:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1bce:	2317      	movs	r3, #23
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d111      	bne.n	1bfc <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bd8:	683b      	ldr	r3, [r7, #0]
    1bda:	881b      	ldrh	r3, [r3, #0]
    1bdc:	0a1b      	lsrs	r3, r3, #8
    1bde:	b29b      	uxth	r3, r3
    1be0:	2278      	movs	r2, #120	; 0x78
    1be2:	4313      	orrs	r3, r2
    1be4:	b29b      	uxth	r3, r3
    1be6:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	7a5b      	ldrb	r3, [r3, #9]
    1bec:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bee:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1bf0:	2201      	movs	r2, #1
    1bf2:	4313      	orrs	r3, r2
    1bf4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	625a      	str	r2, [r3, #36]	; 0x24
    1bfa:	e00f      	b.n	1c1c <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1bfc:	2317      	movs	r3, #23
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	e0b6      	b.n	1d72 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1c04:	683b      	ldr	r3, [r7, #0]
    1c06:	881b      	ldrh	r3, [r3, #0]
    1c08:	005b      	lsls	r3, r3, #1
    1c0a:	2201      	movs	r2, #1
    1c0c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1c0e:	683b      	ldr	r3, [r7, #0]
    1c10:	7a5b      	ldrb	r3, [r3, #9]
    1c12:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1c14:	4313      	orrs	r3, r2
    1c16:	001a      	movs	r2, r3
    1c18:	68fb      	ldr	r3, [r7, #12]
    1c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1c1c:	2317      	movs	r3, #23
    1c1e:	18fc      	adds	r4, r7, r3
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	0018      	movs	r0, r3
    1c24:	4b57      	ldr	r3, [pc, #348]	; (1d84 <_i2c_master_read_packet+0x268>)
    1c26:	4798      	blx	r3
    1c28:	0003      	movs	r3, r0
    1c2a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1c2c:	230b      	movs	r3, #11
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d00b      	beq.n	1c4e <_i2c_master_read_packet+0x132>
    1c36:	683b      	ldr	r3, [r7, #0]
    1c38:	885b      	ldrh	r3, [r3, #2]
    1c3a:	2b01      	cmp	r3, #1
    1c3c:	d107      	bne.n	1c4e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	685b      	ldr	r3, [r3, #4]
    1c42:	2280      	movs	r2, #128	; 0x80
    1c44:	02d2      	lsls	r2, r2, #11
    1c46:	431a      	orrs	r2, r3
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	605a      	str	r2, [r3, #4]
    1c4c:	e005      	b.n	1c5a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	4a4b      	ldr	r2, [pc, #300]	; (1d80 <_i2c_master_read_packet+0x264>)
    1c54:	401a      	ands	r2, r3
    1c56:	68fb      	ldr	r3, [r7, #12]
    1c58:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1c5a:	2317      	movs	r3, #23
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d107      	bne.n	1c74 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1c64:	2317      	movs	r3, #23
    1c66:	18fc      	adds	r4, r7, r3
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	0018      	movs	r0, r3
    1c6c:	4b46      	ldr	r3, [pc, #280]	; (1d88 <_i2c_master_read_packet+0x26c>)
    1c6e:	4798      	blx	r3
    1c70:	0003      	movs	r3, r0
    1c72:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1c74:	2317      	movs	r3, #23
    1c76:	18fb      	adds	r3, r7, r3
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d000      	beq.n	1c80 <_i2c_master_read_packet+0x164>
    1c7e:	e075      	b.n	1d6c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1c80:	e04b      	b.n	1d1a <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	8b5b      	ldrh	r3, [r3, #26]
    1c86:	b29b      	uxth	r3, r3
    1c88:	001a      	movs	r2, r3
    1c8a:	2320      	movs	r3, #32
    1c8c:	4013      	ands	r3, r2
    1c8e:	d101      	bne.n	1c94 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1c90:	2341      	movs	r3, #65	; 0x41
    1c92:	e06e      	b.n	1d72 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	7adb      	ldrb	r3, [r3, #11]
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d01e      	beq.n	1cda <_i2c_master_read_packet+0x1be>
    1c9c:	230b      	movs	r3, #11
    1c9e:	18fb      	adds	r3, r7, r3
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	2201      	movs	r2, #1
    1ca4:	4053      	eors	r3, r2
    1ca6:	b2db      	uxtb	r3, r3
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d004      	beq.n	1cb6 <_i2c_master_read_packet+0x19a>
    1cac:	2314      	movs	r3, #20
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	881b      	ldrh	r3, [r3, #0]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d009      	beq.n	1cca <_i2c_master_read_packet+0x1ae>
    1cb6:	230b      	movs	r3, #11
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d00c      	beq.n	1cda <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1cc0:	2314      	movs	r3, #20
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	881b      	ldrh	r3, [r3, #0]
    1cc6:	2b01      	cmp	r3, #1
    1cc8:	d107      	bne.n	1cda <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	685b      	ldr	r3, [r3, #4]
    1cce:	2280      	movs	r2, #128	; 0x80
    1cd0:	02d2      	lsls	r2, r2, #11
    1cd2:	431a      	orrs	r2, r3
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	605a      	str	r2, [r3, #4]
    1cd8:	e01a      	b.n	1d10 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	0018      	movs	r0, r3
    1cde:	4b2b      	ldr	r3, [pc, #172]	; (1d8c <_i2c_master_read_packet+0x270>)
    1ce0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1ce2:	683b      	ldr	r3, [r7, #0]
    1ce4:	685a      	ldr	r2, [r3, #4]
    1ce6:	2312      	movs	r3, #18
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	881b      	ldrh	r3, [r3, #0]
    1cec:	2112      	movs	r1, #18
    1cee:	1879      	adds	r1, r7, r1
    1cf0:	1c58      	adds	r0, r3, #1
    1cf2:	8008      	strh	r0, [r1, #0]
    1cf4:	18d3      	adds	r3, r2, r3
    1cf6:	68fa      	ldr	r2, [r7, #12]
    1cf8:	2128      	movs	r1, #40	; 0x28
    1cfa:	5c52      	ldrb	r2, [r2, r1]
    1cfc:	b2d2      	uxtb	r2, r2
    1cfe:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1d00:	2317      	movs	r3, #23
    1d02:	18fc      	adds	r4, r7, r3
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	0018      	movs	r0, r3
    1d08:	4b1e      	ldr	r3, [pc, #120]	; (1d84 <_i2c_master_read_packet+0x268>)
    1d0a:	4798      	blx	r3
    1d0c:	0003      	movs	r3, r0
    1d0e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1d10:	2317      	movs	r3, #23
    1d12:	18fb      	adds	r3, r7, r3
    1d14:	781b      	ldrb	r3, [r3, #0]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d109      	bne.n	1d2e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    1d1a:	2314      	movs	r3, #20
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	881b      	ldrh	r3, [r3, #0]
    1d20:	2214      	movs	r2, #20
    1d22:	18ba      	adds	r2, r7, r2
    1d24:	1e59      	subs	r1, r3, #1
    1d26:	8011      	strh	r1, [r2, #0]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d1aa      	bne.n	1c82 <_i2c_master_read_packet+0x166>
    1d2c:	e000      	b.n	1d30 <_i2c_master_read_packet+0x214>
				break;
    1d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	7a9b      	ldrb	r3, [r3, #10]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d00a      	beq.n	1d4e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	0018      	movs	r0, r3
    1d3c:	4b13      	ldr	r3, [pc, #76]	; (1d8c <_i2c_master_read_packet+0x270>)
    1d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1d40:	68fb      	ldr	r3, [r7, #12]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	22c0      	movs	r2, #192	; 0xc0
    1d46:	0292      	lsls	r2, r2, #10
    1d48:	431a      	orrs	r2, r3
    1d4a:	68fb      	ldr	r3, [r7, #12]
    1d4c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	0018      	movs	r0, r3
    1d52:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <_i2c_master_read_packet+0x270>)
    1d54:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1d56:	683b      	ldr	r3, [r7, #0]
    1d58:	685a      	ldr	r2, [r3, #4]
    1d5a:	2312      	movs	r3, #18
    1d5c:	18fb      	adds	r3, r7, r3
    1d5e:	881b      	ldrh	r3, [r3, #0]
    1d60:	18d3      	adds	r3, r2, r3
    1d62:	68fa      	ldr	r2, [r7, #12]
    1d64:	2128      	movs	r1, #40	; 0x28
    1d66:	5c52      	ldrb	r2, [r2, r1]
    1d68:	b2d2      	uxtb	r2, r2
    1d6a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1d6c:	2317      	movs	r3, #23
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	781b      	ldrb	r3, [r3, #0]
}
    1d72:	0018      	movs	r0, r3
    1d74:	46bd      	mov	sp, r7
    1d76:	b007      	add	sp, #28
    1d78:	bd90      	pop	{r4, r7, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	00001ac9 	.word	0x00001ac9
    1d80:	fffbffff 	.word	0xfffbffff
    1d84:	00001a6b 	.word	0x00001a6b
    1d88:	00001a0d 	.word	0x00001a0d
    1d8c:	000014e1 	.word	0x000014e1

00001d90 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	2201      	movs	r2, #1
    1d9e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	2201      	movs	r2, #1
    1da4:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1da6:	683a      	ldr	r2, [r7, #0]
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	0011      	movs	r1, r2
    1dac:	0018      	movs	r0, r3
    1dae:	4b03      	ldr	r3, [pc, #12]	; (1dbc <i2c_master_read_packet_wait+0x2c>)
    1db0:	4798      	blx	r3
    1db2:	0003      	movs	r3, r0
}
    1db4:	0018      	movs	r0, r3
    1db6:	46bd      	mov	sp, r7
    1db8:	b002      	add	sp, #8
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	00001b1d 	.word	0x00001b1d

00001dc0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1dc0:	b590      	push	{r4, r7, lr}
    1dc2:	b087      	sub	sp, #28
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
    1dc8:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1dd0:	2314      	movs	r3, #20
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	683a      	ldr	r2, [r7, #0]
    1dd6:	8852      	ldrh	r2, [r2, #2]
    1dd8:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	0018      	movs	r0, r3
    1dde:	4b51      	ldr	r3, [pc, #324]	; (1f24 <_i2c_master_write_packet+0x164>)
    1de0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1de2:	683b      	ldr	r3, [r7, #0]
    1de4:	7a5b      	ldrb	r3, [r3, #9]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d006      	beq.n	1df8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1dea:	683b      	ldr	r3, [r7, #0]
    1dec:	7a9a      	ldrb	r2, [r3, #10]
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	0011      	movs	r1, r2
    1df2:	0018      	movs	r0, r3
    1df4:	4b4c      	ldr	r3, [pc, #304]	; (1f28 <_i2c_master_write_packet+0x168>)
    1df6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1df8:	68fb      	ldr	r3, [r7, #12]
    1dfa:	685b      	ldr	r3, [r3, #4]
    1dfc:	4a4b      	ldr	r2, [pc, #300]	; (1f2c <_i2c_master_write_packet+0x16c>)
    1dfe:	401a      	ands	r2, r3
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	7a1b      	ldrb	r3, [r3, #8]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d00d      	beq.n	1e28 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e0c:	683b      	ldr	r3, [r7, #0]
    1e0e:	881b      	ldrh	r3, [r3, #0]
    1e10:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e12:	683b      	ldr	r3, [r7, #0]
    1e14:	7a5b      	ldrb	r3, [r3, #9]
    1e16:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e18:	4313      	orrs	r3, r2
    1e1a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e1c:	2380      	movs	r3, #128	; 0x80
    1e1e:	021b      	lsls	r3, r3, #8
    1e20:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	625a      	str	r2, [r3, #36]	; 0x24
    1e26:	e009      	b.n	1e3c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e28:	683b      	ldr	r3, [r7, #0]
    1e2a:	881b      	ldrh	r3, [r3, #0]
    1e2c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1e2e:	683b      	ldr	r3, [r7, #0]
    1e30:	7a5b      	ldrb	r3, [r3, #9]
    1e32:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e34:	4313      	orrs	r3, r2
    1e36:	001a      	movs	r2, r3
    1e38:	68fb      	ldr	r3, [r7, #12]
    1e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1e3c:	2317      	movs	r3, #23
    1e3e:	18fc      	adds	r4, r7, r3
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	0018      	movs	r0, r3
    1e44:	4b3a      	ldr	r3, [pc, #232]	; (1f30 <_i2c_master_write_packet+0x170>)
    1e46:	4798      	blx	r3
    1e48:	0003      	movs	r3, r0
    1e4a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1e4c:	2317      	movs	r3, #23
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d107      	bne.n	1e66 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1e56:	2317      	movs	r3, #23
    1e58:	18fc      	adds	r4, r7, r3
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b35      	ldr	r3, [pc, #212]	; (1f34 <_i2c_master_write_packet+0x174>)
    1e60:	4798      	blx	r3
    1e62:	0003      	movs	r3, r0
    1e64:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1e66:	2317      	movs	r3, #23
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	781b      	ldrb	r3, [r3, #0]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d152      	bne.n	1f16 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1e70:	2312      	movs	r3, #18
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	2200      	movs	r2, #0
    1e76:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1e78:	e033      	b.n	1ee2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1e7a:	68fb      	ldr	r3, [r7, #12]
    1e7c:	8b5b      	ldrh	r3, [r3, #26]
    1e7e:	b29b      	uxth	r3, r3
    1e80:	001a      	movs	r2, r3
    1e82:	2320      	movs	r3, #32
    1e84:	4013      	ands	r3, r2
    1e86:	d101      	bne.n	1e8c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1e88:	2341      	movs	r3, #65	; 0x41
    1e8a:	e047      	b.n	1f1c <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	0018      	movs	r0, r3
    1e90:	4b24      	ldr	r3, [pc, #144]	; (1f24 <_i2c_master_write_packet+0x164>)
    1e92:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1e94:	683b      	ldr	r3, [r7, #0]
    1e96:	685a      	ldr	r2, [r3, #4]
    1e98:	2312      	movs	r3, #18
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	881b      	ldrh	r3, [r3, #0]
    1e9e:	2112      	movs	r1, #18
    1ea0:	1879      	adds	r1, r7, r1
    1ea2:	1c58      	adds	r0, r3, #1
    1ea4:	8008      	strh	r0, [r1, #0]
    1ea6:	18d3      	adds	r3, r2, r3
    1ea8:	7819      	ldrb	r1, [r3, #0]
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	2228      	movs	r2, #40	; 0x28
    1eae:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1eb0:	2317      	movs	r3, #23
    1eb2:	18fc      	adds	r4, r7, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b1d      	ldr	r3, [pc, #116]	; (1f30 <_i2c_master_write_packet+0x170>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1ec0:	2317      	movs	r3, #23
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	781b      	ldrb	r3, [r3, #0]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d115      	bne.n	1ef6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	8b5b      	ldrh	r3, [r3, #26]
    1ece:	b29b      	uxth	r3, r3
    1ed0:	001a      	movs	r2, r3
    1ed2:	2304      	movs	r3, #4
    1ed4:	4013      	ands	r3, r2
    1ed6:	d004      	beq.n	1ee2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1ed8:	2317      	movs	r3, #23
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	221e      	movs	r2, #30
    1ede:	701a      	strb	r2, [r3, #0]
				break;
    1ee0:	e00a      	b.n	1ef8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    1ee2:	2314      	movs	r3, #20
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	881b      	ldrh	r3, [r3, #0]
    1ee8:	2214      	movs	r2, #20
    1eea:	18ba      	adds	r2, r7, r2
    1eec:	1e59      	subs	r1, r3, #1
    1eee:	8011      	strh	r1, [r2, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d1c2      	bne.n	1e7a <_i2c_master_write_packet+0xba>
    1ef4:	e000      	b.n	1ef8 <_i2c_master_write_packet+0x138>
				break;
    1ef6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	7a9b      	ldrb	r3, [r3, #10]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d00a      	beq.n	1f16 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	0018      	movs	r0, r3
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <_i2c_master_write_packet+0x164>)
    1f06:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	685b      	ldr	r3, [r3, #4]
    1f0c:	22c0      	movs	r2, #192	; 0xc0
    1f0e:	0292      	lsls	r2, r2, #10
    1f10:	431a      	orrs	r2, r3
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1f16:	2317      	movs	r3, #23
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	781b      	ldrb	r3, [r3, #0]
}
    1f1c:	0018      	movs	r0, r3
    1f1e:	46bd      	mov	sp, r7
    1f20:	b007      	add	sp, #28
    1f22:	bd90      	pop	{r4, r7, pc}
    1f24:	000014e1 	.word	0x000014e1
    1f28:	00001ac9 	.word	0x00001ac9
    1f2c:	fffbffff 	.word	0xfffbffff
    1f30:	00001a6b 	.word	0x00001a6b
    1f34:	00001a0d 	.word	0x00001a0d

00001f38 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b082      	sub	sp, #8
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	6078      	str	r0, [r7, #4]
    1f40:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	2201      	movs	r2, #1
    1f46:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	2201      	movs	r2, #1
    1f4c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1f4e:	683a      	ldr	r2, [r7, #0]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	0011      	movs	r1, r2
    1f54:	0018      	movs	r0, r3
    1f56:	4b03      	ldr	r3, [pc, #12]	; (1f64 <i2c_master_write_packet_wait+0x2c>)
    1f58:	4798      	blx	r3
    1f5a:	0003      	movs	r3, r0
}
    1f5c:	0018      	movs	r0, r3
    1f5e:	46bd      	mov	sp, r7
    1f60:	b002      	add	sp, #8
    1f62:	bd80      	pop	{r7, pc}
    1f64:	00001dc1 	.word	0x00001dc1

00001f68 <system_interrupt_enable>:
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	0002      	movs	r2, r0
    1f70:	1dfb      	adds	r3, r7, #7
    1f72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f74:	4b06      	ldr	r3, [pc, #24]	; (1f90 <system_interrupt_enable+0x28>)
    1f76:	1dfa      	adds	r2, r7, #7
    1f78:	7812      	ldrb	r2, [r2, #0]
    1f7a:	0011      	movs	r1, r2
    1f7c:	221f      	movs	r2, #31
    1f7e:	400a      	ands	r2, r1
    1f80:	2101      	movs	r1, #1
    1f82:	4091      	lsls	r1, r2
    1f84:	000a      	movs	r2, r1
    1f86:	601a      	str	r2, [r3, #0]
}
    1f88:	46c0      	nop			; (mov r8, r8)
    1f8a:	46bd      	mov	sp, r7
    1f8c:	b002      	add	sp, #8
    1f8e:	bd80      	pop	{r7, pc}
    1f90:	e000e100 	.word	0xe000e100

00001f94 <adc_is_syncing>:
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b084      	sub	sp, #16
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
    1fa2:	68fb      	ldr	r3, [r7, #12]
    1fa4:	8c1b      	ldrh	r3, [r3, #32]
    1fa6:	b29b      	uxth	r3, r3
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d001      	beq.n	1fb0 <adc_is_syncing+0x1c>
		return true;
    1fac:	2301      	movs	r3, #1
    1fae:	e000      	b.n	1fb2 <adc_is_syncing+0x1e>
	return false;
    1fb0:	2300      	movs	r3, #0
}
    1fb2:	0018      	movs	r0, r3
    1fb4:	46bd      	mov	sp, r7
    1fb6:	b004      	add	sp, #16
    1fb8:	bd80      	pop	{r7, pc}

00001fba <adc_get_status>:
{
    1fba:	b580      	push	{r7, lr}
    1fbc:	b086      	sub	sp, #24
    1fbe:	af00      	add	r7, sp, #0
    1fc0:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1fc8:	693b      	ldr	r3, [r7, #16]
    1fca:	799b      	ldrb	r3, [r3, #6]
    1fcc:	b2db      	uxtb	r3, r3
    1fce:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
    1fd0:	2300      	movs	r3, #0
    1fd2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1fd4:	68fb      	ldr	r3, [r7, #12]
    1fd6:	2201      	movs	r2, #1
    1fd8:	4013      	ands	r3, r2
    1fda:	d003      	beq.n	1fe4 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    1fdc:	697b      	ldr	r3, [r7, #20]
    1fde:	2201      	movs	r2, #1
    1fe0:	4313      	orrs	r3, r2
    1fe2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
    1fe4:	68fb      	ldr	r3, [r7, #12]
    1fe6:	2204      	movs	r2, #4
    1fe8:	4013      	ands	r3, r2
    1fea:	d003      	beq.n	1ff4 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    1fec:	697b      	ldr	r3, [r7, #20]
    1fee:	2202      	movs	r2, #2
    1ff0:	4313      	orrs	r3, r2
    1ff2:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	2202      	movs	r2, #2
    1ff8:	4013      	ands	r3, r2
    1ffa:	d003      	beq.n	2004 <STACK_SIZE+0x4>
		status_flags |= ADC_STATUS_OVERRUN;
    1ffc:	697b      	ldr	r3, [r7, #20]
    1ffe:	2204      	movs	r2, #4
    2000:	4313      	orrs	r3, r2
    2002:	617b      	str	r3, [r7, #20]
	return status_flags;
    2004:	697b      	ldr	r3, [r7, #20]
}
    2006:	0018      	movs	r0, r3
    2008:	46bd      	mov	sp, r7
    200a:	b006      	add	sp, #24
    200c:	bd80      	pop	{r7, pc}

0000200e <adc_clear_status>:
{
    200e:	b580      	push	{r7, lr}
    2010:	b084      	sub	sp, #16
    2012:	af00      	add	r7, sp, #0
    2014:	6078      	str	r0, [r7, #4]
    2016:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	681b      	ldr	r3, [r3, #0]
    201c:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
    201e:	2300      	movs	r3, #0
    2020:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
    2022:	683b      	ldr	r3, [r7, #0]
    2024:	2201      	movs	r2, #1
    2026:	4013      	ands	r3, r2
    2028:	d003      	beq.n	2032 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	2201      	movs	r2, #1
    202e:	4313      	orrs	r3, r2
    2030:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
    2032:	683b      	ldr	r3, [r7, #0]
    2034:	2202      	movs	r2, #2
    2036:	4013      	ands	r3, r2
    2038:	d003      	beq.n	2042 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    203a:	68fb      	ldr	r3, [r7, #12]
    203c:	2204      	movs	r2, #4
    203e:	4313      	orrs	r3, r2
    2040:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
    2042:	683b      	ldr	r3, [r7, #0]
    2044:	2204      	movs	r2, #4
    2046:	4013      	ands	r3, r2
    2048:	d003      	beq.n	2052 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	2202      	movs	r2, #2
    204e:	4313      	orrs	r3, r2
    2050:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
    2052:	68fb      	ldr	r3, [r7, #12]
    2054:	b2da      	uxtb	r2, r3
    2056:	68bb      	ldr	r3, [r7, #8]
    2058:	719a      	strb	r2, [r3, #6]
}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46bd      	mov	sp, r7
    205e:	b004      	add	sp, #16
    2060:	bd80      	pop	{r7, pc}
	...

00002064 <adc_enable>:
{
    2064:	b580      	push	{r7, lr}
    2066:	b084      	sub	sp, #16
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	0018      	movs	r0, r3
    2078:	4b10      	ldr	r3, [pc, #64]	; (20bc <adc_enable+0x58>)
    207a:	4798      	blx	r3
    207c:	1e03      	subs	r3, r0, #0
    207e:	d1f9      	bne.n	2074 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2080:	2016      	movs	r0, #22
    2082:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <adc_enable+0x5c>)
    2084:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2086:	68fb      	ldr	r3, [r7, #12]
    2088:	2207      	movs	r2, #7
    208a:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    208c:	68fb      	ldr	r3, [r7, #12]
    208e:	2207      	movs	r2, #7
    2090:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	b2db      	uxtb	r3, r3
    2098:	2202      	movs	r2, #2
    209a:	4313      	orrs	r3, r2
    209c:	b2da      	uxtb	r2, r3
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	0018      	movs	r0, r3
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <adc_enable+0x58>)
    20aa:	4798      	blx	r3
    20ac:	1e03      	subs	r3, r0, #0
    20ae:	d1f9      	bne.n	20a4 <adc_enable+0x40>
	return STATUS_OK;
    20b0:	2300      	movs	r3, #0
}
    20b2:	0018      	movs	r0, r3
    20b4:	46bd      	mov	sp, r7
    20b6:	b004      	add	sp, #16
    20b8:	bd80      	pop	{r7, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	00001f95 	.word	0x00001f95
    20c0:	00001f69 	.word	0x00001f69

000020c4 <adc_start_conversion>:
{
    20c4:	b580      	push	{r7, lr}
    20c6:	b084      	sub	sp, #16
    20c8:	af00      	add	r7, sp, #0
    20ca:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	687b      	ldr	r3, [r7, #4]
    20d6:	0018      	movs	r0, r3
    20d8:	4b0b      	ldr	r3, [pc, #44]	; (2108 <adc_start_conversion+0x44>)
    20da:	4798      	blx	r3
    20dc:	1e03      	subs	r3, r0, #0
    20de:	d1f9      	bne.n	20d4 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    20e0:	68fb      	ldr	r3, [r7, #12]
    20e2:	7e1b      	ldrb	r3, [r3, #24]
    20e4:	b2db      	uxtb	r3, r3
    20e6:	2202      	movs	r2, #2
    20e8:	4313      	orrs	r3, r2
    20ea:	b2da      	uxtb	r2, r3
    20ec:	68fb      	ldr	r3, [r7, #12]
    20ee:	761a      	strb	r2, [r3, #24]
	while (adc_is_syncing(module_inst)) {
    20f0:	46c0      	nop			; (mov r8, r8)
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	0018      	movs	r0, r3
    20f6:	4b04      	ldr	r3, [pc, #16]	; (2108 <adc_start_conversion+0x44>)
    20f8:	4798      	blx	r3
    20fa:	1e03      	subs	r3, r0, #0
    20fc:	d1f9      	bne.n	20f2 <adc_start_conversion+0x2e>
}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	46bd      	mov	sp, r7
    2102:	b004      	add	sp, #16
    2104:	bd80      	pop	{r7, pc}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	00001f95 	.word	0x00001f95

0000210c <adc_read>:
{
    210c:	b580      	push	{r7, lr}
    210e:	b084      	sub	sp, #16
    2110:	af00      	add	r7, sp, #0
    2112:	6078      	str	r0, [r7, #4]
    2114:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	0018      	movs	r0, r3
    211a:	4b14      	ldr	r3, [pc, #80]	; (216c <adc_read+0x60>)
    211c:	4798      	blx	r3
    211e:	0002      	movs	r2, r0
    2120:	2301      	movs	r3, #1
    2122:	4013      	ands	r3, r2
    2124:	d101      	bne.n	212a <adc_read+0x1e>
		return STATUS_BUSY;
    2126:	2305      	movs	r3, #5
    2128:	e01c      	b.n	2164 <adc_read+0x58>
	Adc *const adc_module = module_inst->hw;
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	681b      	ldr	r3, [r3, #0]
    212e:	60fb      	str	r3, [r7, #12]
	*result = adc_module->RESULT.reg;
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2134:	b29a      	uxth	r2, r3
    2136:	683b      	ldr	r3, [r7, #0]
    2138:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	2101      	movs	r1, #1
    213e:	0018      	movs	r0, r3
    2140:	4b0b      	ldr	r3, [pc, #44]	; (2170 <adc_read+0x64>)
    2142:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	0018      	movs	r0, r3
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <adc_read+0x60>)
    214a:	4798      	blx	r3
    214c:	0002      	movs	r2, r0
    214e:	2304      	movs	r3, #4
    2150:	4013      	ands	r3, r2
    2152:	d006      	beq.n	2162 <adc_read+0x56>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	2104      	movs	r1, #4
    2158:	0018      	movs	r0, r3
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <adc_read+0x64>)
    215c:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    215e:	231e      	movs	r3, #30
    2160:	e000      	b.n	2164 <adc_read+0x58>
	return STATUS_OK;
    2162:	2300      	movs	r3, #0
}
    2164:	0018      	movs	r0, r3
    2166:	46bd      	mov	sp, r7
    2168:	b004      	add	sp, #16
    216a:	bd80      	pop	{r7, pc}
    216c:	00001fbb 	.word	0x00001fbb
    2170:	0000200f 	.word	0x0000200f

00002174 <adc_interface_init>:

 static struct adc_module module;
 static struct adc_config config;

 void adc_interface_init(void)
 {
    2174:	b580      	push	{r7, lr}
    2176:	af00      	add	r7, sp, #0
	adc_get_config_defaults(&config);
    2178:	4b0f      	ldr	r3, [pc, #60]	; (21b8 <adc_interface_init+0x44>)
    217a:	0018      	movs	r0, r3
    217c:	4b0f      	ldr	r3, [pc, #60]	; (21bc <adc_interface_init+0x48>)
    217e:	4798      	blx	r3
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;	// Runs off 4MHz clock
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <adc_interface_init+0x44>)
    2182:	2207      	movs	r2, #7
    2184:	709a      	strb	r2, [r3, #2]
	config.positive_input = ADC_POSITIVE_INPUT_PIN0;
    2186:	4b0c      	ldr	r3, [pc, #48]	; (21b8 <adc_interface_init+0x44>)
    2188:	2200      	movs	r2, #0
    218a:	711a      	strb	r2, [r3, #4]
	config.reference = ADC_REFERENCE_AREFA;
    218c:	4b0a      	ldr	r3, [pc, #40]	; (21b8 <adc_interface_init+0x44>)
    218e:	2203      	movs	r2, #3
    2190:	705a      	strb	r2, [r3, #1]
	config.reference_compensation_enable = false;
    2192:	4b09      	ldr	r3, [pc, #36]	; (21b8 <adc_interface_init+0x44>)
    2194:	2200      	movs	r2, #0
    2196:	751a      	strb	r2, [r3, #20]
	config.positive_input_sequence_mask_enable = (1ul << 0) | (1ul << 2) | (1ul << 3) | (1ul << 4) | (1ul << 5) | (1ul << 10);
    2198:	4b07      	ldr	r3, [pc, #28]	; (21b8 <adc_interface_init+0x44>)
    219a:	4a09      	ldr	r2, [pc, #36]	; (21c0 <adc_interface_init+0x4c>)
    219c:	611a      	str	r2, [r3, #16]

	adc_init(&module, ADC, &config);
    219e:	4a06      	ldr	r2, [pc, #24]	; (21b8 <adc_interface_init+0x44>)
    21a0:	4908      	ldr	r1, [pc, #32]	; (21c4 <adc_interface_init+0x50>)
    21a2:	4b09      	ldr	r3, [pc, #36]	; (21c8 <adc_interface_init+0x54>)
    21a4:	0018      	movs	r0, r3
    21a6:	4b09      	ldr	r3, [pc, #36]	; (21cc <adc_interface_init+0x58>)
    21a8:	4798      	blx	r3
	adc_enable(&module);
    21aa:	4b07      	ldr	r3, [pc, #28]	; (21c8 <adc_interface_init+0x54>)
    21ac:	0018      	movs	r0, r3
    21ae:	4b08      	ldr	r3, [pc, #32]	; (21d0 <adc_interface_init+0x5c>)
    21b0:	4798      	blx	r3
 }
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	46bd      	mov	sp, r7
    21b6:	bd80      	pop	{r7, pc}
    21b8:	2000004c 	.word	0x2000004c
    21bc:	00000281 	.word	0x00000281
    21c0:	0000043d 	.word	0x0000043d
    21c4:	43000c00 	.word	0x43000c00
    21c8:	2000002c 	.word	0x2000002c
    21cc:	000008b9 	.word	0x000008b9
    21d0:	00002065 	.word	0x00002065

000021d4 <adc_interface_read_pin>:

 uint16_t adc_interface_read_pin(ioport_pin_t pin)
 {
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	b085      	sub	sp, #20
    21d8:	af00      	add	r7, sp, #0
    21da:	6078      	str	r0, [r7, #4]
	switch (pin)
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	2b29      	cmp	r3, #41	; 0x29
    21e0:	d81d      	bhi.n	221e <adc_interface_read_pin+0x4a>
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	009a      	lsls	r2, r3, #2
    21e6:	4b33      	ldr	r3, [pc, #204]	; (22b4 <adc_interface_read_pin+0xe0>)
    21e8:	18d3      	adds	r3, r2, r3
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	469f      	mov	pc, r3
	{
		case A0_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN0;
    21ee:	4b32      	ldr	r3, [pc, #200]	; (22b8 <adc_interface_read_pin+0xe4>)
    21f0:	2200      	movs	r2, #0
    21f2:	711a      	strb	r2, [r3, #4]
			break;
    21f4:	e015      	b.n	2222 <adc_interface_read_pin+0x4e>
		case A1_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    21f6:	4b30      	ldr	r3, [pc, #192]	; (22b8 <adc_interface_read_pin+0xe4>)
    21f8:	2202      	movs	r2, #2
    21fa:	711a      	strb	r2, [r3, #4]
			break;
    21fc:	e011      	b.n	2222 <adc_interface_read_pin+0x4e>
		case A2_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN3;
    21fe:	4b2e      	ldr	r3, [pc, #184]	; (22b8 <adc_interface_read_pin+0xe4>)
    2200:	2203      	movs	r2, #3
    2202:	711a      	strb	r2, [r3, #4]
			break;
    2204:	e00d      	b.n	2222 <adc_interface_read_pin+0x4e>
		case A3_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN4;
    2206:	4b2c      	ldr	r3, [pc, #176]	; (22b8 <adc_interface_read_pin+0xe4>)
    2208:	2204      	movs	r2, #4
    220a:	711a      	strb	r2, [r3, #4]
			break;
    220c:	e009      	b.n	2222 <adc_interface_read_pin+0x4e>
		case A4_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN5;
    220e:	4b2a      	ldr	r3, [pc, #168]	; (22b8 <adc_interface_read_pin+0xe4>)
    2210:	2205      	movs	r2, #5
    2212:	711a      	strb	r2, [r3, #4]
			break;
    2214:	e005      	b.n	2222 <adc_interface_read_pin+0x4e>
		case A5_PIN:
			config.positive_input = ADC_POSITIVE_INPUT_PIN10;
    2216:	4b28      	ldr	r3, [pc, #160]	; (22b8 <adc_interface_read_pin+0xe4>)
    2218:	220a      	movs	r2, #10
    221a:	711a      	strb	r2, [r3, #4]
			break;
    221c:	e001      	b.n	2222 <adc_interface_read_pin+0x4e>
		default: // code to be executed if n doesn't match any cases
			return 0;
    221e:	2300      	movs	r3, #0
    2220:	e043      	b.n	22aa <adc_interface_read_pin+0xd6>
	}

	adc_init(&module, ADC, &config);
    2222:	4a25      	ldr	r2, [pc, #148]	; (22b8 <adc_interface_read_pin+0xe4>)
    2224:	4925      	ldr	r1, [pc, #148]	; (22bc <adc_interface_read_pin+0xe8>)
    2226:	4b26      	ldr	r3, [pc, #152]	; (22c0 <adc_interface_read_pin+0xec>)
    2228:	0018      	movs	r0, r3
    222a:	4b26      	ldr	r3, [pc, #152]	; (22c4 <adc_interface_read_pin+0xf0>)
    222c:	4798      	blx	r3
	adc_start_conversion(&module);
    222e:	4b24      	ldr	r3, [pc, #144]	; (22c0 <adc_interface_read_pin+0xec>)
    2230:	0018      	movs	r0, r3
    2232:	4b25      	ldr	r3, [pc, #148]	; (22c8 <adc_interface_read_pin+0xf4>)
    2234:	4798      	blx	r3
	uint16_t result = 0;
    2236:	230c      	movs	r3, #12
    2238:	18fb      	adds	r3, r7, r3
    223a:	2200      	movs	r2, #0
    223c:	801a      	strh	r2, [r3, #0]
	uint16_t timeout = 0;
    223e:	230e      	movs	r3, #14
    2240:	18fb      	adds	r3, r7, r3
    2242:	2200      	movs	r2, #0
    2244:	801a      	strh	r2, [r3, #0]
	do {
		delay_us(100);
    2246:	2000      	movs	r0, #0
    2248:	4b20      	ldr	r3, [pc, #128]	; (22cc <adc_interface_read_pin+0xf8>)
    224a:	4798      	blx	r3
    224c:	0003      	movs	r3, r0
    224e:	001d      	movs	r5, r3
    2250:	2300      	movs	r3, #0
    2252:	001e      	movs	r6, r3
    2254:	4c1e      	ldr	r4, [pc, #120]	; (22d0 <adc_interface_read_pin+0xfc>)
    2256:	2264      	movs	r2, #100	; 0x64
    2258:	2300      	movs	r3, #0
    225a:	0028      	movs	r0, r5
    225c:	0031      	movs	r1, r6
    225e:	47a0      	blx	r4
    2260:	0003      	movs	r3, r0
    2262:	000c      	movs	r4, r1
    2264:	0019      	movs	r1, r3
    2266:	0022      	movs	r2, r4
    2268:	4b1a      	ldr	r3, [pc, #104]	; (22d4 <adc_interface_read_pin+0x100>)
    226a:	2400      	movs	r4, #0
    226c:	18c9      	adds	r1, r1, r3
    226e:	4162      	adcs	r2, r4
    2270:	0008      	movs	r0, r1
    2272:	0011      	movs	r1, r2
    2274:	4c18      	ldr	r4, [pc, #96]	; (22d8 <adc_interface_read_pin+0x104>)
    2276:	4a19      	ldr	r2, [pc, #100]	; (22dc <adc_interface_read_pin+0x108>)
    2278:	2300      	movs	r3, #0
    227a:	47a0      	blx	r4
    227c:	0003      	movs	r3, r0
    227e:	000c      	movs	r4, r1
    2280:	0018      	movs	r0, r3
    2282:	4b17      	ldr	r3, [pc, #92]	; (22e0 <adc_interface_read_pin+0x10c>)
    2284:	4798      	blx	r3
	} while (adc_read(&module, &result) == STATUS_BUSY && timeout <  20);
    2286:	230c      	movs	r3, #12
    2288:	18fa      	adds	r2, r7, r3
    228a:	4b0d      	ldr	r3, [pc, #52]	; (22c0 <adc_interface_read_pin+0xec>)
    228c:	0011      	movs	r1, r2
    228e:	0018      	movs	r0, r3
    2290:	4b14      	ldr	r3, [pc, #80]	; (22e4 <adc_interface_read_pin+0x110>)
    2292:	4798      	blx	r3
    2294:	0003      	movs	r3, r0
    2296:	2b05      	cmp	r3, #5
    2298:	d104      	bne.n	22a4 <adc_interface_read_pin+0xd0>
    229a:	230e      	movs	r3, #14
    229c:	18fb      	adds	r3, r7, r3
    229e:	881b      	ldrh	r3, [r3, #0]
    22a0:	2b13      	cmp	r3, #19
    22a2:	d9d0      	bls.n	2246 <adc_interface_read_pin+0x72>

	return result;
    22a4:	230c      	movs	r3, #12
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	881b      	ldrh	r3, [r3, #0]
    22aa:	0018      	movs	r0, r3
    22ac:	46bd      	mov	sp, r7
    22ae:	b005      	add	sp, #20
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	000068c4 	.word	0x000068c4
    22b8:	2000004c 	.word	0x2000004c
    22bc:	43000c00 	.word	0x43000c00
    22c0:	2000002c 	.word	0x2000002c
    22c4:	000008b9 	.word	0x000008b9
    22c8:	000020c5 	.word	0x000020c5
    22cc:	00003ca1 	.word	0x00003ca1
    22d0:	000048ad 	.word	0x000048ad
    22d4:	006acfbf 	.word	0x006acfbf
    22d8:	0000486d 	.word	0x0000486d
    22dc:	006acfc0 	.word	0x006acfc0
    22e0:	20000001 	.word	0x20000001
    22e4:	0000210d 	.word	0x0000210d

000022e8 <system_set_sleepmode>:
 *
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b082      	sub	sp, #8
    22ec:	af00      	add	r7, sp, #0
    22ee:	0002      	movs	r2, r0
    22f0:	1dfb      	adds	r3, r7, #7
    22f2:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
    22f4:	2380      	movs	r3, #128	; 0x80
    22f6:	05db      	lsls	r3, r3, #23
    22f8:	1dfa      	adds	r2, r7, #7
    22fa:	7812      	ldrb	r2, [r2, #0]
    22fc:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	2380      	movs	r3, #128	; 0x80
    2302:	05db      	lsls	r3, r3, #23
    2304:	785b      	ldrb	r3, [r3, #1]
    2306:	b2db      	uxtb	r3, r3
    2308:	1dfa      	adds	r2, r7, #7
    230a:	7812      	ldrb	r2, [r2, #0]
    230c:	429a      	cmp	r2, r3
    230e:	d1f7      	bne.n	2300 <system_set_sleepmode+0x18>
}
    2310:	46c0      	nop			; (mov r8, r8)
    2312:	46bd      	mov	sp, r7
    2314:	b002      	add	sp, #8
    2316:	bd80      	pop	{r7, pc}

00002318 <system_sleep>:
 * all ongoing memory accesses have completed. Further, a WFI (Wait For Interrupt)
 * instruction is executed to place the device into the sleep mode specified by
 * \ref system_set_sleepmode.
 */
static inline void system_sleep(void)
{
    2318:	b580      	push	{r7, lr}
    231a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    231c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2320:	bf30      	wfi
	__DSB();
	__WFI();
}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	46bd      	mov	sp, r7
    2326:	bd80      	pop	{r7, pc}

00002328 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2328:	b580      	push	{r7, lr}
    232a:	b084      	sub	sp, #16
    232c:	af00      	add	r7, sp, #0
    232e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	22b0      	movs	r2, #176	; 0xb0
    2334:	0112      	lsls	r2, r2, #4
    2336:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	2201      	movs	r2, #1
    233c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	2200      	movs	r2, #0
    2342:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	2201      	movs	r2, #1
    2348:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    234a:	230f      	movs	r3, #15
    234c:	18fb      	adds	r3, r7, r3
    234e:	2200      	movs	r2, #0
    2350:	701a      	strb	r2, [r3, #0]
    2352:	e00e      	b.n	2372 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    2354:	230f      	movs	r3, #15
    2356:	18fb      	adds	r3, r7, r3
    2358:	781a      	ldrb	r2, [r3, #0]
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	3202      	adds	r2, #2
    235e:	0092      	lsls	r2, r2, #2
    2360:	2100      	movs	r1, #0
    2362:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2364:	230f      	movs	r3, #15
    2366:	18fb      	adds	r3, r7, r3
    2368:	781a      	ldrb	r2, [r3, #0]
    236a:	230f      	movs	r3, #15
    236c:	18fb      	adds	r3, r7, r3
    236e:	3201      	adds	r2, #1
    2370:	701a      	strb	r2, [r3, #0]
    2372:	230f      	movs	r3, #15
    2374:	18fb      	adds	r3, r7, r3
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b01      	cmp	r3, #1
    237a:	d9eb      	bls.n	2354 <rtc_count_get_config_defaults+0x2c>
	}
}
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	46bd      	mov	sp, r7
    2380:	b004      	add	sp, #16
    2382:	bd80      	pop	{r7, pc}

00002384 <rtc_callback>:
 #include "rtc_interface.h"

 static struct rtc_module module;

 static void rtc_callback(void)
 {
    2384:	b580      	push	{r7, lr}
    2386:	af00      	add	r7, sp, #0
	// TODO do anything else?
	rtc_count_disable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    2388:	4b03      	ldr	r3, [pc, #12]	; (2398 <rtc_callback+0x14>)
    238a:	2108      	movs	r1, #8
    238c:	0018      	movs	r0, r3
    238e:	4b03      	ldr	r3, [pc, #12]	; (239c <rtc_callback+0x18>)
    2390:	4798      	blx	r3
 }
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	46bd      	mov	sp, r7
    2396:	bd80      	pop	{r7, pc}
    2398:	20000078 	.word	0x20000078
    239c:	000011c9 	.word	0x000011c9

000023a0 <rtc_init>:

 void rtc_init(void)
 {
    23a0:	b580      	push	{r7, lr}
    23a2:	b084      	sub	sp, #16
    23a4:	af00      	add	r7, sp, #0
	// Uses 1.024kHz from ULP32K clock
	struct rtc_count_config config;
	rtc_count_get_config_defaults(&config);
    23a6:	003b      	movs	r3, r7
    23a8:	0018      	movs	r0, r3
    23aa:	4b0f      	ldr	r3, [pc, #60]	; (23e8 <rtc_init+0x48>)
    23ac:	4798      	blx	r3
	config.prescaler = RTC_COUNT_PRESCALER_OFF; // 1.024kHz clock
    23ae:	003b      	movs	r3, r7
    23b0:	2200      	movs	r2, #0
    23b2:	801a      	strh	r2, [r3, #0]
	
	rtc_count_init(&module, RTC, &config);
    23b4:	003a      	movs	r2, r7
    23b6:	490d      	ldr	r1, [pc, #52]	; (23ec <rtc_init+0x4c>)
    23b8:	4b0d      	ldr	r3, [pc, #52]	; (23f0 <rtc_init+0x50>)
    23ba:	0018      	movs	r0, r3
    23bc:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <rtc_init+0x54>)
    23be:	4798      	blx	r3
	rtc_count_set_count(&module, 0);
    23c0:	4b0b      	ldr	r3, [pc, #44]	; (23f0 <rtc_init+0x50>)
    23c2:	2100      	movs	r1, #0
    23c4:	0018      	movs	r0, r3
    23c6:	4b0c      	ldr	r3, [pc, #48]	; (23f8 <rtc_init+0x58>)
    23c8:	4798      	blx	r3
	rtc_count_enable(&module);
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <rtc_init+0x50>)
    23cc:	0018      	movs	r0, r3
    23ce:	4b0b      	ldr	r3, [pc, #44]	; (23fc <rtc_init+0x5c>)
    23d0:	4798      	blx	r3

	rtc_count_register_callback(&module, rtc_callback, RTC_COUNT_CALLBACK_COMPARE_0);
    23d2:	490b      	ldr	r1, [pc, #44]	; (2400 <rtc_init+0x60>)
    23d4:	4b06      	ldr	r3, [pc, #24]	; (23f0 <rtc_init+0x50>)
    23d6:	2208      	movs	r2, #8
    23d8:	0018      	movs	r0, r3
    23da:	4b0a      	ldr	r3, [pc, #40]	; (2404 <rtc_init+0x64>)
    23dc:	4798      	blx	r3
 }
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	46bd      	mov	sp, r7
    23e2:	b004      	add	sp, #16
    23e4:	bd80      	pop	{r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	00002329 	.word	0x00002329
    23ec:	40002000 	.word	0x40002000
    23f0:	20000078 	.word	0x20000078
    23f4:	00000ed1 	.word	0x00000ed1
    23f8:	00000f35 	.word	0x00000f35
    23fc:	00000cbd 	.word	0x00000cbd
    2400:	00002385 	.word	0x00002385
    2404:	00001089 	.word	0x00001089

00002408 <rtc_idle_delay>:

 void rtc_idle_delay(uint32_t sleep_ms)
 {
    2408:	b580      	push	{r7, lr}
    240a:	b084      	sub	sp, #16
    240c:	af00      	add	r7, sp, #0
    240e:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    2410:	4b0e      	ldr	r3, [pc, #56]	; (244c <rtc_idle_delay+0x44>)
    2412:	0018      	movs	r0, r3
    2414:	4b0e      	ldr	r3, [pc, #56]	; (2450 <rtc_idle_delay+0x48>)
    2416:	4798      	blx	r3
    2418:	0003      	movs	r3, r0
    241a:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    241c:	68fa      	ldr	r2, [r7, #12]
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	18d3      	adds	r3, r2, r3
    2422:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    2424:	68b9      	ldr	r1, [r7, #8]
    2426:	4b09      	ldr	r3, [pc, #36]	; (244c <rtc_idle_delay+0x44>)
    2428:	2200      	movs	r2, #0
    242a:	0018      	movs	r0, r3
    242c:	4b09      	ldr	r3, [pc, #36]	; (2454 <rtc_idle_delay+0x4c>)
    242e:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    2430:	4b06      	ldr	r3, [pc, #24]	; (244c <rtc_idle_delay+0x44>)
    2432:	2108      	movs	r1, #8
    2434:	0018      	movs	r0, r3
    2436:	4b08      	ldr	r3, [pc, #32]	; (2458 <rtc_idle_delay+0x50>)
    2438:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);
    243a:	2002      	movs	r0, #2
    243c:	4b07      	ldr	r3, [pc, #28]	; (245c <rtc_idle_delay+0x54>)
    243e:	4798      	blx	r3
	system_sleep();
    2440:	4b07      	ldr	r3, [pc, #28]	; (2460 <rtc_idle_delay+0x58>)
    2442:	4798      	blx	r3
 }
    2444:	46c0      	nop			; (mov r8, r8)
    2446:	46bd      	mov	sp, r7
    2448:	b004      	add	sp, #16
    244a:	bd80      	pop	{r7, pc}
    244c:	20000078 	.word	0x20000078
    2450:	00000fa1 	.word	0x00000fa1
    2454:	00000ff1 	.word	0x00000ff1
    2458:	0000113d 	.word	0x0000113d
    245c:	000022e9 	.word	0x000022e9
    2460:	00002319 	.word	0x00002319

00002464 <rtc_standby_delay>:

 void rtc_standby_delay(uint32_t sleep_ms)
 {
    2464:	b580      	push	{r7, lr}
    2466:	b084      	sub	sp, #16
    2468:	af00      	add	r7, sp, #0
    246a:	6078      	str	r0, [r7, #4]
	uint32_t current_count = rtc_count_get_count(&module);
    246c:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <rtc_standby_delay+0x44>)
    246e:	0018      	movs	r0, r3
    2470:	4b0e      	ldr	r3, [pc, #56]	; (24ac <rtc_standby_delay+0x48>)
    2472:	4798      	blx	r3
    2474:	0003      	movs	r3, r0
    2476:	60fb      	str	r3, [r7, #12]

	uint32_t wakeup_count = current_count + sleep_ms;
    2478:	68fa      	ldr	r2, [r7, #12]
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	18d3      	adds	r3, r2, r3
    247e:	60bb      	str	r3, [r7, #8]
	rtc_count_set_compare(&module, wakeup_count, RTC_COUNT_COMPARE_0);
    2480:	68b9      	ldr	r1, [r7, #8]
    2482:	4b09      	ldr	r3, [pc, #36]	; (24a8 <rtc_standby_delay+0x44>)
    2484:	2200      	movs	r2, #0
    2486:	0018      	movs	r0, r3
    2488:	4b09      	ldr	r3, [pc, #36]	; (24b0 <rtc_standby_delay+0x4c>)
    248a:	4798      	blx	r3
	rtc_count_enable_callback(&module, RTC_COUNT_CALLBACK_COMPARE_0);
    248c:	4b06      	ldr	r3, [pc, #24]	; (24a8 <rtc_standby_delay+0x44>)
    248e:	2108      	movs	r1, #8
    2490:	0018      	movs	r0, r3
    2492:	4b08      	ldr	r3, [pc, #32]	; (24b4 <rtc_standby_delay+0x50>)
    2494:	4798      	blx	r3

	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
    2496:	2004      	movs	r0, #4
    2498:	4b07      	ldr	r3, [pc, #28]	; (24b8 <rtc_standby_delay+0x54>)
    249a:	4798      	blx	r3
	system_sleep();
    249c:	4b07      	ldr	r3, [pc, #28]	; (24bc <rtc_standby_delay+0x58>)
    249e:	4798      	blx	r3
    24a0:	46c0      	nop			; (mov r8, r8)
    24a2:	46bd      	mov	sp, r7
    24a4:	b004      	add	sp, #16
    24a6:	bd80      	pop	{r7, pc}
    24a8:	20000078 	.word	0x20000078
    24ac:	00000fa1 	.word	0x00000fa1
    24b0:	00000ff1 	.word	0x00000ff1
    24b4:	0000113d 	.word	0x0000113d
    24b8:	000022e9 	.word	0x000022e9
    24bc:	00002319 	.word	0x00002319

000024c0 <bmp280_write_configuration>:
 * \brief Configure Bosch BMP280 registers.
 *
 * \param config Pointer to BMP280 configuration object
 */
static void bmp280_write_configuration(const bmp280_config_t * config)
{
    24c0:	b590      	push	{r4, r7, lr}
    24c2:	b085      	sub	sp, #20
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
    // Sensor configuration register.
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	075b      	lsls	r3, r3, #29
    24ce:	0f5b      	lsrs	r3, r3, #29
    24d0:	b2db      	uxtb	r3, r3
    24d2:	015b      	lsls	r3, r3, #5
    24d4:	b25a      	sxtb	r2, r3
                   ((config->filter & 0x07) << 2) |
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	069b      	lsls	r3, r3, #26
    24dc:	0f5b      	lsrs	r3, r3, #29
    24de:	b2db      	uxtb	r3, r3
    24e0:	009b      	lsls	r3, r3, #2
    24e2:	b25b      	sxtb	r3, r3
    24e4:	211c      	movs	r1, #28
    24e6:	400b      	ands	r3, r1
    24e8:	b25b      	sxtb	r3, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    24ea:	4313      	orrs	r3, r2
    24ec:	b25a      	sxtb	r2, r3
                   (config->spi3w_en & 0x01);
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	781b      	ldrb	r3, [r3, #0]
    24f2:	065b      	lsls	r3, r3, #25
    24f4:	0fdb      	lsrs	r3, r3, #31
    24f6:	b2db      	uxtb	r3, r3
    24f8:	b25b      	sxtb	r3, r3
    24fa:	2101      	movs	r1, #1
    24fc:	400b      	ands	r3, r1
    24fe:	b25b      	sxtb	r3, r3
                   ((config->filter & 0x07) << 2) |
    2500:	4313      	orrs	r3, r2
    2502:	b25b      	sxtb	r3, r3
    2504:	b2da      	uxtb	r2, r3
    uint8_t temp = ((config->t_sb & 0x07) << 5) |
    2506:	230f      	movs	r3, #15
    2508:	18fb      	adds	r3, r7, r3
    250a:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CONFIG);
    250c:	230f      	movs	r3, #15
    250e:	18f8      	adds	r0, r7, r3
    2510:	23f5      	movs	r3, #245	; 0xf5
    2512:	2276      	movs	r2, #118	; 0x76
    2514:	2101      	movs	r1, #1
    2516:	4c17      	ldr	r4, [pc, #92]	; (2574 <bmp280_write_configuration+0xb4>)
    2518:	47a0      	blx	r4

    // Measurement control configuration register.
    temp = ((config->osrs_t & 0x07) << 5) |
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	785b      	ldrb	r3, [r3, #1]
    251e:	075b      	lsls	r3, r3, #29
    2520:	0f5b      	lsrs	r3, r3, #29
    2522:	b2db      	uxtb	r3, r3
    2524:	015b      	lsls	r3, r3, #5
    2526:	b25a      	sxtb	r2, r3
           ((config->osrs_p & 0x07) << 2) |
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	785b      	ldrb	r3, [r3, #1]
    252c:	069b      	lsls	r3, r3, #26
    252e:	0f5b      	lsrs	r3, r3, #29
    2530:	b2db      	uxtb	r3, r3
    2532:	009b      	lsls	r3, r3, #2
    2534:	b25b      	sxtb	r3, r3
    2536:	211c      	movs	r1, #28
    2538:	400b      	ands	r3, r1
    253a:	b25b      	sxtb	r3, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    253c:	4313      	orrs	r3, r2
    253e:	b25a      	sxtb	r2, r3
           (config->mode & 0x03);
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	785b      	ldrb	r3, [r3, #1]
    2544:	061b      	lsls	r3, r3, #24
    2546:	0f9b      	lsrs	r3, r3, #30
    2548:	b2db      	uxtb	r3, r3
    254a:	b25b      	sxtb	r3, r3
    254c:	2103      	movs	r1, #3
    254e:	400b      	ands	r3, r1
    2550:	b25b      	sxtb	r3, r3
           ((config->osrs_p & 0x07) << 2) |
    2552:	4313      	orrs	r3, r2
    2554:	b25b      	sxtb	r3, r3
    2556:	b2da      	uxtb	r2, r3
    temp = ((config->osrs_t & 0x07) << 5) |
    2558:	230f      	movs	r3, #15
    255a:	18fb      	adds	r3, r7, r3
    255c:	701a      	strb	r2, [r3, #0]

	i2c_write_bytes(&temp, 1, BMP280_I2C_ADDR, BMP280_REG_CTRL_MEAS);
    255e:	230f      	movs	r3, #15
    2560:	18f8      	adds	r0, r7, r3
    2562:	23f4      	movs	r3, #244	; 0xf4
    2564:	2276      	movs	r2, #118	; 0x76
    2566:	2101      	movs	r1, #1
    2568:	4c02      	ldr	r4, [pc, #8]	; (2574 <bmp280_write_configuration+0xb4>)
    256a:	47a0      	blx	r4
}
    256c:	46c0      	nop			; (mov r8, r8)
    256e:	46bd      	mov	sp, r7
    2570:	b005      	add	sp, #20
    2572:	bd90      	pop	{r4, r7, pc}
    2574:	00002e15 	.word	0x00002e15

00002578 <unpack_uint16>:

static uint16_t unpack_uint16(uint8_t * data)
{
    2578:	b580      	push	{r7, lr}
    257a:	b084      	sub	sp, #16
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
	uint16_t val = 0;
    2580:	230e      	movs	r3, #14
    2582:	18fb      	adds	r3, r7, r3
    2584:	2200      	movs	r2, #0
    2586:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	b21a      	sxth	r2, r3
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3301      	adds	r3, #1
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	021b      	lsls	r3, r3, #8
    2596:	b21b      	sxth	r3, r3
    2598:	4313      	orrs	r3, r2
    259a:	b21a      	sxth	r2, r3
    259c:	230e      	movs	r3, #14
    259e:	18fb      	adds	r3, r7, r3
    25a0:	2100      	movs	r1, #0
    25a2:	5e5b      	ldrsh	r3, [r3, r1]
    25a4:	4313      	orrs	r3, r2
    25a6:	b21a      	sxth	r2, r3
    25a8:	230e      	movs	r3, #14
    25aa:	18fb      	adds	r3, r7, r3
    25ac:	801a      	strh	r2, [r3, #0]
	return val;
    25ae:	230e      	movs	r3, #14
    25b0:	18fb      	adds	r3, r7, r3
    25b2:	881b      	ldrh	r3, [r3, #0]
}
    25b4:	0018      	movs	r0, r3
    25b6:	46bd      	mov	sp, r7
    25b8:	b004      	add	sp, #16
    25ba:	bd80      	pop	{r7, pc}

000025bc <unpack_int16>:

static int16_t unpack_int16(uint8_t * data)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b084      	sub	sp, #16
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
	int16_t val = 0;
    25c4:	230e      	movs	r3, #14
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	2200      	movs	r2, #0
    25ca:	801a      	strh	r2, [r3, #0]
	val |= (*data | ((uint16_t) *(data+1) << 8));
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	b21a      	sxth	r2, r3
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	3301      	adds	r3, #1
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	021b      	lsls	r3, r3, #8
    25da:	b21b      	sxth	r3, r3
    25dc:	4313      	orrs	r3, r2
    25de:	b219      	sxth	r1, r3
    25e0:	230e      	movs	r3, #14
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	220e      	movs	r2, #14
    25e6:	18ba      	adds	r2, r7, r2
    25e8:	8812      	ldrh	r2, [r2, #0]
    25ea:	430a      	orrs	r2, r1
    25ec:	801a      	strh	r2, [r3, #0]
	return val;
    25ee:	230e      	movs	r3, #14
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	2200      	movs	r2, #0
    25f4:	5e9b      	ldrsh	r3, [r3, r2]
}
    25f6:	0018      	movs	r0, r3
    25f8:	46bd      	mov	sp, r7
    25fa:	b004      	add	sp, #16
    25fc:	bd80      	pop	{r7, pc}
	...

00002600 <init_bmp280>:

/*!
 * \brief Basic initialization function for Bosch BMP280 pressure/temperature sensor.
 */
void init_bmp280(void)
{
    2600:	b590      	push	{r4, r7, lr}
    2602:	b089      	sub	sp, #36	; 0x24
    2604:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    2606:	231f      	movs	r3, #31
    2608:	18fb      	adds	r3, r7, r3
    260a:	2200      	movs	r2, #0
    260c:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, BMP280_I2C_ADDR, BMP280_REG_ID);
    260e:	231f      	movs	r3, #31
    2610:	18f8      	adds	r0, r7, r3
    2612:	23d0      	movs	r3, #208	; 0xd0
    2614:	2276      	movs	r2, #118	; 0x76
    2616:	2101      	movs	r1, #1
    2618:	4c49      	ldr	r4, [pc, #292]	; (2740 <init_bmp280+0x140>)
    261a:	47a0      	blx	r4
	if (me != BMP280_CHIP_ID)
    261c:	231f      	movs	r3, #31
    261e:	18fb      	adds	r3, r7, r3
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	2b58      	cmp	r3, #88	; 0x58
    2624:	d000      	beq.n	2628 <init_bmp280+0x28>
    2626:	e086      	b.n	2736 <init_bmp280+0x136>
    {
        return;
    }

    // Read calibration data if not done already.
	if(bmp280_cal_data.dig_T1 == 0)
    2628:	4b46      	ldr	r3, [pc, #280]	; (2744 <init_bmp280+0x144>)
    262a:	881b      	ldrh	r3, [r3, #0]
    262c:	2b00      	cmp	r3, #0
    262e:	d177      	bne.n	2720 <init_bmp280+0x120>
	{
		uint8_t temp[24] = {0};
    2630:	1d3b      	adds	r3, r7, #4
    2632:	0018      	movs	r0, r3
    2634:	2318      	movs	r3, #24
    2636:	001a      	movs	r2, r3
    2638:	2100      	movs	r1, #0
    263a:	4b43      	ldr	r3, [pc, #268]	; (2748 <init_bmp280+0x148>)
    263c:	4798      	blx	r3
		i2c_read_bytes(temp, 24, BMP280_I2C_ADDR, 0x88);
    263e:	1d38      	adds	r0, r7, #4
    2640:	2388      	movs	r3, #136	; 0x88
    2642:	2276      	movs	r2, #118	; 0x76
    2644:	2118      	movs	r1, #24
    2646:	4c3e      	ldr	r4, [pc, #248]	; (2740 <init_bmp280+0x140>)
    2648:	47a0      	blx	r4

		// Parse calibration data.
		bmp280_cal_data.dig_T1 = unpack_uint16(&temp[0]);
    264a:	1d3b      	adds	r3, r7, #4
    264c:	0018      	movs	r0, r3
    264e:	4b3f      	ldr	r3, [pc, #252]	; (274c <init_bmp280+0x14c>)
    2650:	4798      	blx	r3
    2652:	0003      	movs	r3, r0
    2654:	001a      	movs	r2, r3
    2656:	4b3b      	ldr	r3, [pc, #236]	; (2744 <init_bmp280+0x144>)
    2658:	801a      	strh	r2, [r3, #0]
		bmp280_cal_data.dig_T2 = unpack_int16(&temp[2]);
    265a:	1d3b      	adds	r3, r7, #4
    265c:	3302      	adds	r3, #2
    265e:	0018      	movs	r0, r3
    2660:	4b3b      	ldr	r3, [pc, #236]	; (2750 <init_bmp280+0x150>)
    2662:	4798      	blx	r3
    2664:	0003      	movs	r3, r0
    2666:	001a      	movs	r2, r3
    2668:	4b36      	ldr	r3, [pc, #216]	; (2744 <init_bmp280+0x144>)
    266a:	805a      	strh	r2, [r3, #2]
		bmp280_cal_data.dig_T3 = unpack_int16(&temp[4]);
    266c:	1d3b      	adds	r3, r7, #4
    266e:	3304      	adds	r3, #4
    2670:	0018      	movs	r0, r3
    2672:	4b37      	ldr	r3, [pc, #220]	; (2750 <init_bmp280+0x150>)
    2674:	4798      	blx	r3
    2676:	0003      	movs	r3, r0
    2678:	001a      	movs	r2, r3
    267a:	4b32      	ldr	r3, [pc, #200]	; (2744 <init_bmp280+0x144>)
    267c:	809a      	strh	r2, [r3, #4]
		bmp280_cal_data.dig_P1 = unpack_uint16(&temp[6]);
    267e:	1d3b      	adds	r3, r7, #4
    2680:	3306      	adds	r3, #6
    2682:	0018      	movs	r0, r3
    2684:	4b31      	ldr	r3, [pc, #196]	; (274c <init_bmp280+0x14c>)
    2686:	4798      	blx	r3
    2688:	0003      	movs	r3, r0
    268a:	001a      	movs	r2, r3
    268c:	4b2d      	ldr	r3, [pc, #180]	; (2744 <init_bmp280+0x144>)
    268e:	80da      	strh	r2, [r3, #6]
		bmp280_cal_data.dig_P2 = unpack_int16(&temp[8]);
    2690:	1d3b      	adds	r3, r7, #4
    2692:	3308      	adds	r3, #8
    2694:	0018      	movs	r0, r3
    2696:	4b2e      	ldr	r3, [pc, #184]	; (2750 <init_bmp280+0x150>)
    2698:	4798      	blx	r3
    269a:	0003      	movs	r3, r0
    269c:	001a      	movs	r2, r3
    269e:	4b29      	ldr	r3, [pc, #164]	; (2744 <init_bmp280+0x144>)
    26a0:	811a      	strh	r2, [r3, #8]
		bmp280_cal_data.dig_P3 = unpack_int16(&temp[10]);
    26a2:	1d3b      	adds	r3, r7, #4
    26a4:	330a      	adds	r3, #10
    26a6:	0018      	movs	r0, r3
    26a8:	4b29      	ldr	r3, [pc, #164]	; (2750 <init_bmp280+0x150>)
    26aa:	4798      	blx	r3
    26ac:	0003      	movs	r3, r0
    26ae:	001a      	movs	r2, r3
    26b0:	4b24      	ldr	r3, [pc, #144]	; (2744 <init_bmp280+0x144>)
    26b2:	815a      	strh	r2, [r3, #10]
		bmp280_cal_data.dig_P4 = unpack_int16(&temp[12]);
    26b4:	1d3b      	adds	r3, r7, #4
    26b6:	330c      	adds	r3, #12
    26b8:	0018      	movs	r0, r3
    26ba:	4b25      	ldr	r3, [pc, #148]	; (2750 <init_bmp280+0x150>)
    26bc:	4798      	blx	r3
    26be:	0003      	movs	r3, r0
    26c0:	001a      	movs	r2, r3
    26c2:	4b20      	ldr	r3, [pc, #128]	; (2744 <init_bmp280+0x144>)
    26c4:	819a      	strh	r2, [r3, #12]
		bmp280_cal_data.dig_P5 = unpack_int16(&temp[14]);
    26c6:	1d3b      	adds	r3, r7, #4
    26c8:	330e      	adds	r3, #14
    26ca:	0018      	movs	r0, r3
    26cc:	4b20      	ldr	r3, [pc, #128]	; (2750 <init_bmp280+0x150>)
    26ce:	4798      	blx	r3
    26d0:	0003      	movs	r3, r0
    26d2:	001a      	movs	r2, r3
    26d4:	4b1b      	ldr	r3, [pc, #108]	; (2744 <init_bmp280+0x144>)
    26d6:	81da      	strh	r2, [r3, #14]
		bmp280_cal_data.dig_P6 = unpack_int16(&temp[16]);
    26d8:	1d3b      	adds	r3, r7, #4
    26da:	3310      	adds	r3, #16
    26dc:	0018      	movs	r0, r3
    26de:	4b1c      	ldr	r3, [pc, #112]	; (2750 <init_bmp280+0x150>)
    26e0:	4798      	blx	r3
    26e2:	0003      	movs	r3, r0
    26e4:	001a      	movs	r2, r3
    26e6:	4b17      	ldr	r3, [pc, #92]	; (2744 <init_bmp280+0x144>)
    26e8:	821a      	strh	r2, [r3, #16]
		bmp280_cal_data.dig_P7 = unpack_int16(&temp[18]);
    26ea:	1d3b      	adds	r3, r7, #4
    26ec:	3312      	adds	r3, #18
    26ee:	0018      	movs	r0, r3
    26f0:	4b17      	ldr	r3, [pc, #92]	; (2750 <init_bmp280+0x150>)
    26f2:	4798      	blx	r3
    26f4:	0003      	movs	r3, r0
    26f6:	001a      	movs	r2, r3
    26f8:	4b12      	ldr	r3, [pc, #72]	; (2744 <init_bmp280+0x144>)
    26fa:	825a      	strh	r2, [r3, #18]
		bmp280_cal_data.dig_P8 = unpack_int16(&temp[20]);
    26fc:	1d3b      	adds	r3, r7, #4
    26fe:	3314      	adds	r3, #20
    2700:	0018      	movs	r0, r3
    2702:	4b13      	ldr	r3, [pc, #76]	; (2750 <init_bmp280+0x150>)
    2704:	4798      	blx	r3
    2706:	0003      	movs	r3, r0
    2708:	001a      	movs	r2, r3
    270a:	4b0e      	ldr	r3, [pc, #56]	; (2744 <init_bmp280+0x144>)
    270c:	829a      	strh	r2, [r3, #20]
		bmp280_cal_data.dig_P9 = unpack_int16(&temp[22]);
    270e:	1d3b      	adds	r3, r7, #4
    2710:	3316      	adds	r3, #22
    2712:	0018      	movs	r0, r3
    2714:	4b0e      	ldr	r3, [pc, #56]	; (2750 <init_bmp280+0x150>)
    2716:	4798      	blx	r3
    2718:	0003      	movs	r3, r0
    271a:	001a      	movs	r2, r3
    271c:	4b09      	ldr	r3, [pc, #36]	; (2744 <init_bmp280+0x144>)
    271e:	82da      	strh	r2, [r3, #22]
	}

	// Configure barometer in forced mode (1 sample then sleep), 1x oversample on both for <6.4ms measurement time,
	// no filter
    bmp280_config_t config = {
    2720:	231c      	movs	r3, #28
    2722:	18fb      	adds	r3, r7, r3
    2724:	4a0b      	ldr	r2, [pc, #44]	; (2754 <init_bmp280+0x154>)
    2726:	8812      	ldrh	r2, [r2, #0]
    2728:	801a      	strh	r2, [r3, #0]
        .spi3w_en   = BMP280_SPI_4_WIRE,
        .osrs_t     = BMP280_TEMP_OSRS_x1,
        .osrs_p     = BMP280_PRES_OSRS_x1,
        .mode       = BMP280_MODE_FORCED,
    };
    bmp280_write_configuration(&config);
    272a:	231c      	movs	r3, #28
    272c:	18fb      	adds	r3, r7, r3
    272e:	0018      	movs	r0, r3
    2730:	4b09      	ldr	r3, [pc, #36]	; (2758 <init_bmp280+0x158>)
    2732:	4798      	blx	r3
    2734:	e000      	b.n	2738 <init_bmp280+0x138>
        return;
    2736:	46c0      	nop			; (mov r8, r8)
}
    2738:	46bd      	mov	sp, r7
    273a:	b009      	add	sp, #36	; 0x24
    273c:	bd90      	pop	{r4, r7, pc}
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	00002f45 	.word	0x00002f45
    2744:	200000b0 	.word	0x200000b0
    2748:	00006743 	.word	0x00006743
    274c:	00002579 	.word	0x00002579
    2750:	000025bd 	.word	0x000025bd
    2754:	0000696c 	.word	0x0000696c
    2758:	000024c1 	.word	0x000024c1

0000275c <bmp280_compensate_T_int32>:
	
/*!
 * \brief Temperature compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
    275c:	b580      	push	{r7, lr}
    275e:	b086      	sub	sp, #24
    2760:	af00      	add	r7, sp, #0
    2762:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	10da      	asrs	r2, r3, #3
    2768:	4b16      	ldr	r3, [pc, #88]	; (27c4 <bmp280_compensate_T_int32+0x68>)
    276a:	881b      	ldrh	r3, [r3, #0]
    276c:	005b      	lsls	r3, r3, #1
    276e:	1ad3      	subs	r3, r2, r3
            ((int32_t)bmp280_cal_data.dig_T2)) >> 11;
    2770:	4a14      	ldr	r2, [pc, #80]	; (27c4 <bmp280_compensate_T_int32+0x68>)
    2772:	2102      	movs	r1, #2
    2774:	5e52      	ldrsh	r2, [r2, r1]
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_cal_data.dig_T1 << 1))) *
    2776:	4353      	muls	r3, r2
    2778:	12db      	asrs	r3, r3, #11
    277a:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	111b      	asrs	r3, r3, #4
    2780:	4a10      	ldr	r2, [pc, #64]	; (27c4 <bmp280_compensate_T_int32+0x68>)
    2782:	8812      	ldrh	r2, [r2, #0]
    2784:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    2786:	687a      	ldr	r2, [r7, #4]
    2788:	1112      	asrs	r2, r2, #4
    278a:	490e      	ldr	r1, [pc, #56]	; (27c4 <bmp280_compensate_T_int32+0x68>)
    278c:	8809      	ldrh	r1, [r1, #0]
    278e:	1a52      	subs	r2, r2, r1
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    2790:	4353      	muls	r3, r2
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    2792:	131b      	asrs	r3, r3, #12
            ((int32_t)bmp280_cal_data.dig_T3)) >> 14;
    2794:	4a0b      	ldr	r2, [pc, #44]	; (27c4 <bmp280_compensate_T_int32+0x68>)
    2796:	2104      	movs	r1, #4
    2798:	5e52      	ldrsh	r2, [r2, r1]
            ((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1))) >> 12) *
    279a:	4353      	muls	r3, r2
    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_cal_data.dig_T1)) *
    279c:	139b      	asrs	r3, r3, #14
    279e:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
    27a0:	697a      	ldr	r2, [r7, #20]
    27a2:	693b      	ldr	r3, [r7, #16]
    27a4:	18d2      	adds	r2, r2, r3
    27a6:	4b08      	ldr	r3, [pc, #32]	; (27c8 <bmp280_compensate_T_int32+0x6c>)
    27a8:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
    27aa:	4b07      	ldr	r3, [pc, #28]	; (27c8 <bmp280_compensate_T_int32+0x6c>)
    27ac:	681a      	ldr	r2, [r3, #0]
    27ae:	0013      	movs	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	189b      	adds	r3, r3, r2
    27b4:	3380      	adds	r3, #128	; 0x80
    27b6:	121b      	asrs	r3, r3, #8
    27b8:	60fb      	str	r3, [r7, #12]
    return T;
    27ba:	68fb      	ldr	r3, [r7, #12]
}
    27bc:	0018      	movs	r0, r3
    27be:	46bd      	mov	sp, r7
    27c0:	b006      	add	sp, #24
    27c2:	bd80      	pop	{r7, pc}
    27c4:	200000b0 	.word	0x200000b0
    27c8:	200000c8 	.word	0x200000c8

000027cc <bmp280_compensate_P_int32>:

/*!
 * \brief Pressure compensation according to Bosch BMP280 datasheet (Pg. 21-23).
 */
static uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
    27cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ce:	b0ab      	sub	sp, #172	; 0xac
    27d0:	af00      	add	r7, sp, #0
    27d2:	238c      	movs	r3, #140	; 0x8c
    27d4:	18fb      	adds	r3, r7, r3
    27d6:	6018      	str	r0, [r3, #0]
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
    27d8:	4bd0      	ldr	r3, [pc, #832]	; (2b1c <bmp280_compensate_P_int32+0x350>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	0019      	movs	r1, r3
    27de:	17db      	asrs	r3, r3, #31
    27e0:	001a      	movs	r2, r3
    27e2:	4bcf      	ldr	r3, [pc, #828]	; (2b20 <bmp280_compensate_P_int32+0x354>)
    27e4:	2401      	movs	r4, #1
    27e6:	4264      	negs	r4, r4
    27e8:	185b      	adds	r3, r3, r1
    27ea:	4154      	adcs	r4, r2
    27ec:	22a0      	movs	r2, #160	; 0xa0
    27ee:	18ba      	adds	r2, r7, r2
    27f0:	6013      	str	r3, [r2, #0]
    27f2:	6054      	str	r4, [r2, #4]
    var2 = var1 * var1 * (int64_t)bmp280_cal_data.dig_P6;
    27f4:	4ccb      	ldr	r4, [pc, #812]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    27f6:	23a0      	movs	r3, #160	; 0xa0
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	681a      	ldr	r2, [r3, #0]
    27fc:	685b      	ldr	r3, [r3, #4]
    27fe:	21a0      	movs	r1, #160	; 0xa0
    2800:	1879      	adds	r1, r7, r1
    2802:	6808      	ldr	r0, [r1, #0]
    2804:	6849      	ldr	r1, [r1, #4]
    2806:	47a0      	blx	r4
    2808:	0003      	movs	r3, r0
    280a:	000c      	movs	r4, r1
    280c:	0018      	movs	r0, r3
    280e:	0021      	movs	r1, r4
    2810:	4bc5      	ldr	r3, [pc, #788]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    2812:	2210      	movs	r2, #16
    2814:	5e9b      	ldrsh	r3, [r3, r2]
    2816:	653b      	str	r3, [r7, #80]	; 0x50
    2818:	17db      	asrs	r3, r3, #31
    281a:	657b      	str	r3, [r7, #84]	; 0x54
    281c:	4cc1      	ldr	r4, [pc, #772]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    281e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2822:	47a0      	blx	r4
    2824:	0003      	movs	r3, r0
    2826:	000c      	movs	r4, r1
    2828:	2298      	movs	r2, #152	; 0x98
    282a:	18ba      	adds	r2, r7, r2
    282c:	6013      	str	r3, [r2, #0]
    282e:	6054      	str	r4, [r2, #4]
    var2 = var2 + ((var1 * (int64_t)bmp280_cal_data.dig_P5) << 17);
    2830:	4bbd      	ldr	r3, [pc, #756]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    2832:	220e      	movs	r2, #14
    2834:	5e9b      	ldrsh	r3, [r3, r2]
    2836:	64bb      	str	r3, [r7, #72]	; 0x48
    2838:	17db      	asrs	r3, r3, #31
    283a:	64fb      	str	r3, [r7, #76]	; 0x4c
    283c:	4cb9      	ldr	r4, [pc, #740]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    283e:	23a0      	movs	r3, #160	; 0xa0
    2840:	18fb      	adds	r3, r7, r3
    2842:	681a      	ldr	r2, [r3, #0]
    2844:	685b      	ldr	r3, [r3, #4]
    2846:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    2848:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    284a:	47a0      	blx	r4
    284c:	0003      	movs	r3, r0
    284e:	000c      	movs	r4, r1
    2850:	0bda      	lsrs	r2, r3, #15
    2852:	0466      	lsls	r6, r4, #17
    2854:	4316      	orrs	r6, r2
    2856:	045d      	lsls	r5, r3, #17
    2858:	2398      	movs	r3, #152	; 0x98
    285a:	18fb      	adds	r3, r7, r3
    285c:	685c      	ldr	r4, [r3, #4]
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	195b      	adds	r3, r3, r5
    2862:	4174      	adcs	r4, r6
    2864:	2298      	movs	r2, #152	; 0x98
    2866:	18ba      	adds	r2, r7, r2
    2868:	6013      	str	r3, [r2, #0]
    286a:	6054      	str	r4, [r2, #4]
    var2 = var2 + (((int64_t)bmp280_cal_data.dig_P4) << 35);
    286c:	4bae      	ldr	r3, [pc, #696]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    286e:	220c      	movs	r2, #12
    2870:	5e9b      	ldrsh	r3, [r3, r2]
    2872:	643b      	str	r3, [r7, #64]	; 0x40
    2874:	17db      	asrs	r3, r3, #31
    2876:	647b      	str	r3, [r7, #68]	; 0x44
    2878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    287a:	00db      	lsls	r3, r3, #3
    287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    287e:	2300      	movs	r3, #0
    2880:	63bb      	str	r3, [r7, #56]	; 0x38
    2882:	2398      	movs	r3, #152	; 0x98
    2884:	18fb      	adds	r3, r7, r3
    2886:	685c      	ldr	r4, [r3, #4]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    288e:	185b      	adds	r3, r3, r1
    2890:	4154      	adcs	r4, r2
    2892:	2298      	movs	r2, #152	; 0x98
    2894:	18ba      	adds	r2, r7, r2
    2896:	6013      	str	r3, [r2, #0]
    2898:	6054      	str	r4, [r2, #4]
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    289a:	4ca2      	ldr	r4, [pc, #648]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    289c:	23a0      	movs	r3, #160	; 0xa0
    289e:	18fb      	adds	r3, r7, r3
    28a0:	681a      	ldr	r2, [r3, #0]
    28a2:	685b      	ldr	r3, [r3, #4]
    28a4:	21a0      	movs	r1, #160	; 0xa0
    28a6:	1879      	adds	r1, r7, r1
    28a8:	6808      	ldr	r0, [r1, #0]
    28aa:	6849      	ldr	r1, [r1, #4]
    28ac:	47a0      	blx	r4
    28ae:	0003      	movs	r3, r0
    28b0:	000c      	movs	r4, r1
    28b2:	0018      	movs	r0, r3
    28b4:	0021      	movs	r1, r4
    28b6:	4b9c      	ldr	r3, [pc, #624]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    28b8:	220a      	movs	r2, #10
    28ba:	5e9b      	ldrsh	r3, [r3, r2]
    28bc:	633b      	str	r3, [r7, #48]	; 0x30
    28be:	17db      	asrs	r3, r3, #31
    28c0:	637b      	str	r3, [r7, #52]	; 0x34
    28c2:	4c98      	ldr	r4, [pc, #608]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    28c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    28c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    28c8:	47a0      	blx	r4
    28ca:	0003      	movs	r3, r0
    28cc:	000c      	movs	r4, r1
    28ce:	0622      	lsls	r2, r4, #24
    28d0:	0a19      	lsrs	r1, r3, #8
    28d2:	2080      	movs	r0, #128	; 0x80
    28d4:	1838      	adds	r0, r7, r0
    28d6:	6001      	str	r1, [r0, #0]
    28d8:	2180      	movs	r1, #128	; 0x80
    28da:	1879      	adds	r1, r7, r1
    28dc:	6809      	ldr	r1, [r1, #0]
    28de:	4311      	orrs	r1, r2
    28e0:	2280      	movs	r2, #128	; 0x80
    28e2:	18ba      	adds	r2, r7, r2
    28e4:	6011      	str	r1, [r2, #0]
    28e6:	1223      	asrs	r3, r4, #8
    28e8:	2284      	movs	r2, #132	; 0x84
    28ea:	18ba      	adds	r2, r7, r2
    28ec:	6013      	str	r3, [r2, #0]
            ((var1 * (int64_t)bmp280_cal_data.dig_P2) << 12);
    28ee:	4b8e      	ldr	r3, [pc, #568]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    28f0:	2208      	movs	r2, #8
    28f2:	5e9b      	ldrsh	r3, [r3, r2]
    28f4:	62bb      	str	r3, [r7, #40]	; 0x28
    28f6:	17db      	asrs	r3, r3, #31
    28f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    28fa:	4c8a      	ldr	r4, [pc, #552]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    28fc:	23a0      	movs	r3, #160	; 0xa0
    28fe:	18fb      	adds	r3, r7, r3
    2900:	681a      	ldr	r2, [r3, #0]
    2902:	685b      	ldr	r3, [r3, #4]
    2904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    2906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2908:	47a0      	blx	r4
    290a:	0003      	movs	r3, r0
    290c:	000c      	movs	r4, r1
    290e:	0d1a      	lsrs	r2, r3, #20
    2910:	0321      	lsls	r1, r4, #12
    2912:	67f9      	str	r1, [r7, #124]	; 0x7c
    2914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2916:	4311      	orrs	r1, r2
    2918:	67f9      	str	r1, [r7, #124]	; 0x7c
    291a:	031b      	lsls	r3, r3, #12
    291c:	67bb      	str	r3, [r7, #120]	; 0x78
    var1 = ((var1 * var1 * (int64_t)bmp280_cal_data.dig_P3) >> 8) +
    291e:	2380      	movs	r3, #128	; 0x80
    2920:	18fb      	adds	r3, r7, r3
    2922:	685c      	ldr	r4, [r3, #4]
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    2928:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    292a:	185b      	adds	r3, r3, r1
    292c:	4154      	adcs	r4, r2
    292e:	22a0      	movs	r2, #160	; 0xa0
    2930:	18ba      	adds	r2, r7, r2
    2932:	6013      	str	r3, [r2, #0]
    2934:	6054      	str	r4, [r2, #4]
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280_cal_data.dig_P1) >> 33;
    2936:	23a0      	movs	r3, #160	; 0xa0
    2938:	18fb      	adds	r3, r7, r3
    293a:	6819      	ldr	r1, [r3, #0]
    293c:	685a      	ldr	r2, [r3, #4]
    293e:	2300      	movs	r3, #0
    2940:	2480      	movs	r4, #128	; 0x80
    2942:	0224      	lsls	r4, r4, #8
    2944:	18c9      	adds	r1, r1, r3
    2946:	4162      	adcs	r2, r4
    2948:	0008      	movs	r0, r1
    294a:	0011      	movs	r1, r2
    294c:	4b76      	ldr	r3, [pc, #472]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    294e:	88db      	ldrh	r3, [r3, #6]
    2950:	623b      	str	r3, [r7, #32]
    2952:	2300      	movs	r3, #0
    2954:	627b      	str	r3, [r7, #36]	; 0x24
    2956:	4c73      	ldr	r4, [pc, #460]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    2958:	6a3a      	ldr	r2, [r7, #32]
    295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    295c:	47a0      	blx	r4
    295e:	0003      	movs	r3, r0
    2960:	000c      	movs	r4, r1
    2962:	1062      	asrs	r2, r4, #1
    2964:	21a0      	movs	r1, #160	; 0xa0
    2966:	1879      	adds	r1, r7, r1
    2968:	600a      	str	r2, [r1, #0]
    296a:	17e3      	asrs	r3, r4, #31
    296c:	22a4      	movs	r2, #164	; 0xa4
    296e:	18ba      	adds	r2, r7, r2
    2970:	6013      	str	r3, [r2, #0]
    if (var1 == 0)
    2972:	23a0      	movs	r3, #160	; 0xa0
    2974:	18fb      	adds	r3, r7, r3
    2976:	681a      	ldr	r2, [r3, #0]
    2978:	23a4      	movs	r3, #164	; 0xa4
    297a:	18fb      	adds	r3, r7, r3
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	431a      	orrs	r2, r3
    2980:	d101      	bne.n	2986 <bmp280_compensate_P_int32+0x1ba>
    {
        return 0; // Avoid exception caused by division by zero.
    2982:	2300      	movs	r3, #0
    2984:	e0c6      	b.n	2b14 <bmp280_compensate_P_int32+0x348>
    }
    p = 1048576 - adc_P;
    2986:	238c      	movs	r3, #140	; 0x8c
    2988:	18fb      	adds	r3, r7, r3
    298a:	681a      	ldr	r2, [r3, #0]
    298c:	2380      	movs	r3, #128	; 0x80
    298e:	035b      	lsls	r3, r3, #13
    2990:	1a9b      	subs	r3, r3, r2
    2992:	2290      	movs	r2, #144	; 0x90
    2994:	18ba      	adds	r2, r7, r2
    2996:	6013      	str	r3, [r2, #0]
    2998:	17db      	asrs	r3, r3, #31
    299a:	2294      	movs	r2, #148	; 0x94
    299c:	18ba      	adds	r2, r7, r2
    299e:	6013      	str	r3, [r2, #0]
    p = (((p << 31) - var2) * 3125) / var1;
    29a0:	2390      	movs	r3, #144	; 0x90
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	105b      	asrs	r3, r3, #1
    29a8:	61fb      	str	r3, [r7, #28]
    29aa:	2390      	movs	r3, #144	; 0x90
    29ac:	18fb      	adds	r3, r7, r3
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	07db      	lsls	r3, r3, #31
    29b2:	61bb      	str	r3, [r7, #24]
    29b4:	2398      	movs	r3, #152	; 0x98
    29b6:	18fb      	adds	r3, r7, r3
    29b8:	685c      	ldr	r4, [r3, #4]
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	69b8      	ldr	r0, [r7, #24]
    29be:	69f9      	ldr	r1, [r7, #28]
    29c0:	1ac0      	subs	r0, r0, r3
    29c2:	41a1      	sbcs	r1, r4
    29c4:	4c57      	ldr	r4, [pc, #348]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    29c6:	4a59      	ldr	r2, [pc, #356]	; (2b2c <bmp280_compensate_P_int32+0x360>)
    29c8:	2300      	movs	r3, #0
    29ca:	47a0      	blx	r4
    29cc:	0003      	movs	r3, r0
    29ce:	000c      	movs	r4, r1
    29d0:	0018      	movs	r0, r3
    29d2:	0021      	movs	r1, r4
    29d4:	4c56      	ldr	r4, [pc, #344]	; (2b30 <bmp280_compensate_P_int32+0x364>)
    29d6:	23a0      	movs	r3, #160	; 0xa0
    29d8:	18fb      	adds	r3, r7, r3
    29da:	681a      	ldr	r2, [r3, #0]
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	47a0      	blx	r4
    29e0:	0003      	movs	r3, r0
    29e2:	000c      	movs	r4, r1
    29e4:	2290      	movs	r2, #144	; 0x90
    29e6:	18ba      	adds	r2, r7, r2
    29e8:	6013      	str	r3, [r2, #0]
    29ea:	6054      	str	r4, [r2, #4]
    var1 = (((int64_t)bmp280_cal_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    29ec:	4b4e      	ldr	r3, [pc, #312]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    29ee:	2216      	movs	r2, #22
    29f0:	5e9b      	ldrsh	r3, [r3, r2]
    29f2:	613b      	str	r3, [r7, #16]
    29f4:	17db      	asrs	r3, r3, #31
    29f6:	617b      	str	r3, [r7, #20]
    29f8:	2394      	movs	r3, #148	; 0x94
    29fa:	18fb      	adds	r3, r7, r3
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	04da      	lsls	r2, r3, #19
    2a00:	2390      	movs	r3, #144	; 0x90
    2a02:	18fb      	adds	r3, r7, r3
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	0b5b      	lsrs	r3, r3, #13
    2a08:	673b      	str	r3, [r7, #112]	; 0x70
    2a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    2a0c:	4313      	orrs	r3, r2
    2a0e:	673b      	str	r3, [r7, #112]	; 0x70
    2a10:	2394      	movs	r3, #148	; 0x94
    2a12:	18fb      	adds	r3, r7, r3
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	135b      	asrs	r3, r3, #13
    2a18:	677b      	str	r3, [r7, #116]	; 0x74
    2a1a:	4c42      	ldr	r4, [pc, #264]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    2a1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    2a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2a20:	6938      	ldr	r0, [r7, #16]
    2a22:	6979      	ldr	r1, [r7, #20]
    2a24:	47a0      	blx	r4
    2a26:	0003      	movs	r3, r0
    2a28:	000c      	movs	r4, r1
    2a2a:	0018      	movs	r0, r3
    2a2c:	0021      	movs	r1, r4
    2a2e:	2394      	movs	r3, #148	; 0x94
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	04da      	lsls	r2, r3, #19
    2a36:	2390      	movs	r3, #144	; 0x90
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	0b5b      	lsrs	r3, r3, #13
    2a3e:	66bb      	str	r3, [r7, #104]	; 0x68
    2a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2a42:	4313      	orrs	r3, r2
    2a44:	66bb      	str	r3, [r7, #104]	; 0x68
    2a46:	2394      	movs	r3, #148	; 0x94
    2a48:	18fb      	adds	r3, r7, r3
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	135b      	asrs	r3, r3, #13
    2a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    2a50:	4c34      	ldr	r4, [pc, #208]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    2a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
    2a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2a56:	47a0      	blx	r4
    2a58:	0003      	movs	r3, r0
    2a5a:	000c      	movs	r4, r1
    2a5c:	01e2      	lsls	r2, r4, #7
    2a5e:	0e59      	lsrs	r1, r3, #25
    2a60:	430a      	orrs	r2, r1
    2a62:	21a0      	movs	r1, #160	; 0xa0
    2a64:	1879      	adds	r1, r7, r1
    2a66:	600a      	str	r2, [r1, #0]
    2a68:	1663      	asrs	r3, r4, #25
    2a6a:	22a4      	movs	r2, #164	; 0xa4
    2a6c:	18ba      	adds	r2, r7, r2
    2a6e:	6013      	str	r3, [r2, #0]
    var2 = (((int64_t)bmp280_cal_data.dig_P8) * p) >> 19;
    2a70:	4b2d      	ldr	r3, [pc, #180]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    2a72:	2214      	movs	r2, #20
    2a74:	5e9b      	ldrsh	r3, [r3, r2]
    2a76:	60bb      	str	r3, [r7, #8]
    2a78:	17db      	asrs	r3, r3, #31
    2a7a:	60fb      	str	r3, [r7, #12]
    2a7c:	4c29      	ldr	r4, [pc, #164]	; (2b24 <bmp280_compensate_P_int32+0x358>)
    2a7e:	2390      	movs	r3, #144	; 0x90
    2a80:	18fb      	adds	r3, r7, r3
    2a82:	681a      	ldr	r2, [r3, #0]
    2a84:	685b      	ldr	r3, [r3, #4]
    2a86:	68b8      	ldr	r0, [r7, #8]
    2a88:	68f9      	ldr	r1, [r7, #12]
    2a8a:	47a0      	blx	r4
    2a8c:	0003      	movs	r3, r0
    2a8e:	000c      	movs	r4, r1
    2a90:	0362      	lsls	r2, r4, #13
    2a92:	0cd9      	lsrs	r1, r3, #19
    2a94:	430a      	orrs	r2, r1
    2a96:	2198      	movs	r1, #152	; 0x98
    2a98:	1879      	adds	r1, r7, r1
    2a9a:	600a      	str	r2, [r1, #0]
    2a9c:	14e3      	asrs	r3, r4, #19
    2a9e:	229c      	movs	r2, #156	; 0x9c
    2aa0:	18ba      	adds	r2, r7, r2
    2aa2:	6013      	str	r3, [r2, #0]
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp280_cal_data.dig_P7) << 4);
    2aa4:	2390      	movs	r3, #144	; 0x90
    2aa6:	18fb      	adds	r3, r7, r3
    2aa8:	6819      	ldr	r1, [r3, #0]
    2aaa:	685a      	ldr	r2, [r3, #4]
    2aac:	23a0      	movs	r3, #160	; 0xa0
    2aae:	18fb      	adds	r3, r7, r3
    2ab0:	685c      	ldr	r4, [r3, #4]
    2ab2:	681b      	ldr	r3, [r3, #0]
    2ab4:	18c9      	adds	r1, r1, r3
    2ab6:	4162      	adcs	r2, r4
    2ab8:	2398      	movs	r3, #152	; 0x98
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	685c      	ldr	r4, [r3, #4]
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	185b      	adds	r3, r3, r1
    2ac2:	4154      	adcs	r4, r2
    2ac4:	0622      	lsls	r2, r4, #24
    2ac6:	0a19      	lsrs	r1, r3, #8
    2ac8:	6639      	str	r1, [r7, #96]	; 0x60
    2aca:	6e39      	ldr	r1, [r7, #96]	; 0x60
    2acc:	4311      	orrs	r1, r2
    2ace:	6639      	str	r1, [r7, #96]	; 0x60
    2ad0:	1223      	asrs	r3, r4, #8
    2ad2:	667b      	str	r3, [r7, #100]	; 0x64
    2ad4:	4b14      	ldr	r3, [pc, #80]	; (2b28 <bmp280_compensate_P_int32+0x35c>)
    2ad6:	2212      	movs	r2, #18
    2ad8:	5e9b      	ldrsh	r3, [r3, r2]
    2ada:	603b      	str	r3, [r7, #0]
    2adc:	17db      	asrs	r3, r3, #31
    2ade:	607b      	str	r3, [r7, #4]
    2ae0:	6839      	ldr	r1, [r7, #0]
    2ae2:	687a      	ldr	r2, [r7, #4]
    2ae4:	000b      	movs	r3, r1
    2ae6:	0f1b      	lsrs	r3, r3, #28
    2ae8:	0010      	movs	r0, r2
    2aea:	0100      	lsls	r0, r0, #4
    2aec:	65f8      	str	r0, [r7, #92]	; 0x5c
    2aee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    2af0:	4318      	orrs	r0, r3
    2af2:	65f8      	str	r0, [r7, #92]	; 0x5c
    2af4:	000b      	movs	r3, r1
    2af6:	011b      	lsls	r3, r3, #4
    2af8:	65bb      	str	r3, [r7, #88]	; 0x58
    2afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2afc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    2afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
    2b00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2b02:	185b      	adds	r3, r3, r1
    2b04:	4154      	adcs	r4, r2
    2b06:	2290      	movs	r2, #144	; 0x90
    2b08:	18ba      	adds	r2, r7, r2
    2b0a:	6013      	str	r3, [r2, #0]
    2b0c:	6054      	str	r4, [r2, #4]
    return (uint32_t)p;
    2b0e:	2390      	movs	r3, #144	; 0x90
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	681b      	ldr	r3, [r3, #0]
}
    2b14:	0018      	movs	r0, r3
    2b16:	46bd      	mov	sp, r7
    2b18:	b02b      	add	sp, #172	; 0xac
    2b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b1c:	200000c8 	.word	0x200000c8
    2b20:	fffe0c00 	.word	0xfffe0c00
    2b24:	000048ad 	.word	0x000048ad
    2b28:	200000b0 	.word	0x200000b0
    2b2c:	00000c35 	.word	0x00000c35
    2b30:	00004825 	.word	0x00004825

00002b34 <read_bmp280>:

/*!
 * \brief Gets BMP280 readings in Pa and deg C
 */
void read_bmp280(bmp280_meas_t * meas)
{
    2b34:	b590      	push	{r4, r7, lr}
    2b36:	b085      	sub	sp, #20
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
	bmp280_raw_data_t raw_data;
	read_bmp280_integer(&raw_data);
    2b3c:	2308      	movs	r3, #8
    2b3e:	18fb      	adds	r3, r7, r3
    2b40:	0018      	movs	r0, r3
    2b42:	4b18      	ldr	r3, [pc, #96]	; (2ba4 <read_bmp280+0x70>)
    2b44:	4798      	blx	r3
	
	// Convert to Pascal and degrees C
	meas->pressure = raw_data.P / 256.0;
    2b46:	2308      	movs	r3, #8
    2b48:	18fb      	adds	r3, r7, r3
    2b4a:	681a      	ldr	r2, [r3, #0]
    2b4c:	4b16      	ldr	r3, [pc, #88]	; (2ba8 <read_bmp280+0x74>)
    2b4e:	0010      	movs	r0, r2
    2b50:	4798      	blx	r3
    2b52:	4c16      	ldr	r4, [pc, #88]	; (2bac <read_bmp280+0x78>)
    2b54:	2200      	movs	r2, #0
    2b56:	4b16      	ldr	r3, [pc, #88]	; (2bb0 <read_bmp280+0x7c>)
    2b58:	47a0      	blx	r4
    2b5a:	0003      	movs	r3, r0
    2b5c:	000c      	movs	r4, r1
    2b5e:	0019      	movs	r1, r3
    2b60:	0022      	movs	r2, r4
    2b62:	4b14      	ldr	r3, [pc, #80]	; (2bb4 <read_bmp280+0x80>)
    2b64:	0008      	movs	r0, r1
    2b66:	0011      	movs	r1, r2
    2b68:	4798      	blx	r3
    2b6a:	1c02      	adds	r2, r0, #0
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	601a      	str	r2, [r3, #0]
	meas->temp = raw_data.T * 0.01;
    2b70:	2308      	movs	r3, #8
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	685a      	ldr	r2, [r3, #4]
    2b76:	4b10      	ldr	r3, [pc, #64]	; (2bb8 <read_bmp280+0x84>)
    2b78:	0010      	movs	r0, r2
    2b7a:	4798      	blx	r3
    2b7c:	4c0f      	ldr	r4, [pc, #60]	; (2bbc <read_bmp280+0x88>)
    2b7e:	4a10      	ldr	r2, [pc, #64]	; (2bc0 <read_bmp280+0x8c>)
    2b80:	4b10      	ldr	r3, [pc, #64]	; (2bc4 <read_bmp280+0x90>)
    2b82:	47a0      	blx	r4
    2b84:	0003      	movs	r3, r0
    2b86:	000c      	movs	r4, r1
    2b88:	0019      	movs	r1, r3
    2b8a:	0022      	movs	r2, r4
    2b8c:	4b09      	ldr	r3, [pc, #36]	; (2bb4 <read_bmp280+0x80>)
    2b8e:	0008      	movs	r0, r1
    2b90:	0011      	movs	r1, r2
    2b92:	4798      	blx	r3
    2b94:	1c02      	adds	r2, r0, #0
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	605a      	str	r2, [r3, #4]
}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	46bd      	mov	sp, r7
    2b9e:	b005      	add	sp, #20
    2ba0:	bd90      	pop	{r4, r7, pc}
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	00002bc9 	.word	0x00002bc9
    2ba8:	00006359 	.word	0x00006359
    2bac:	000050d9 	.word	0x000050d9
    2bb0:	40700000 	.word	0x40700000
    2bb4:	000063c9 	.word	0x000063c9
    2bb8:	000062d5 	.word	0x000062d5
    2bbc:	00005741 	.word	0x00005741
    2bc0:	47ae147b 	.word	0x47ae147b
    2bc4:	3f847ae1 	.word	0x3f847ae1

00002bc8 <read_bmp280_integer>:

/*!
 * \brief Gets BMP280 readings in integer units for faster speed
 */
void read_bmp280_integer(bmp280_raw_data_t * meas)
{
    2bc8:	b590      	push	{r4, r7, lr}
    2bca:	b087      	sub	sp, #28
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6] = {0};
    2bd0:	2310      	movs	r3, #16
    2bd2:	18fb      	adds	r3, r7, r3
    2bd4:	0018      	movs	r0, r3
    2bd6:	2306      	movs	r3, #6
    2bd8:	001a      	movs	r2, r3
    2bda:	2100      	movs	r1, #0
    2bdc:	4b24      	ldr	r3, [pc, #144]	; (2c70 <read_bmp280_integer+0xa8>)
    2bde:	4798      	blx	r3
	i2c_read_bytes(buffer, 6, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB);
    2be0:	2310      	movs	r3, #16
    2be2:	18f8      	adds	r0, r7, r3
    2be4:	23f7      	movs	r3, #247	; 0xf7
    2be6:	2276      	movs	r2, #118	; 0x76
    2be8:	2106      	movs	r1, #6
    2bea:	4c22      	ldr	r4, [pc, #136]	; (2c74 <read_bmp280_integer+0xac>)
    2bec:	47a0      	blx	r4
		uint32_t i;
		uint8_t b[4];
	} UT, UP;

	// Parse uncompensated pressure measurement.
	UP.b[0] = *(buffer+2);
    2bee:	2310      	movs	r3, #16
    2bf0:	18fb      	adds	r3, r7, r3
    2bf2:	789a      	ldrb	r2, [r3, #2]
    2bf4:	2308      	movs	r3, #8
    2bf6:	18fb      	adds	r3, r7, r3
    2bf8:	701a      	strb	r2, [r3, #0]
	UP.b[1] = *(buffer+1);
    2bfa:	2310      	movs	r3, #16
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	785a      	ldrb	r2, [r3, #1]
    2c00:	2308      	movs	r3, #8
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	705a      	strb	r2, [r3, #1]
	UP.b[2] = *buffer;
    2c06:	2310      	movs	r3, #16
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	781a      	ldrb	r2, [r3, #0]
    2c0c:	2308      	movs	r3, #8
    2c0e:	18fb      	adds	r3, r7, r3
    2c10:	709a      	strb	r2, [r3, #2]
	UP.i = (UP.i >> 4) & 0xFFFFFul;
    2c12:	68bb      	ldr	r3, [r7, #8]
    2c14:	091b      	lsrs	r3, r3, #4
    2c16:	031b      	lsls	r3, r3, #12
    2c18:	0b1b      	lsrs	r3, r3, #12
    2c1a:	60bb      	str	r3, [r7, #8]

	// Parse uncompensated temperature measurement.
	UT.b[0] = *(buffer+5);
    2c1c:	2310      	movs	r3, #16
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	795a      	ldrb	r2, [r3, #5]
    2c22:	230c      	movs	r3, #12
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	701a      	strb	r2, [r3, #0]
	UT.b[1] = *(buffer+4);
    2c28:	2310      	movs	r3, #16
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	791a      	ldrb	r2, [r3, #4]
    2c2e:	230c      	movs	r3, #12
    2c30:	18fb      	adds	r3, r7, r3
    2c32:	705a      	strb	r2, [r3, #1]
	UT.b[2] = *(buffer+3);
    2c34:	2310      	movs	r3, #16
    2c36:	18fb      	adds	r3, r7, r3
    2c38:	78da      	ldrb	r2, [r3, #3]
    2c3a:	230c      	movs	r3, #12
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	709a      	strb	r2, [r3, #2]
	UT.i = (UT.i >> 4) & 0xFFFFFul;
    2c40:	68fb      	ldr	r3, [r7, #12]
    2c42:	091b      	lsrs	r3, r3, #4
    2c44:	031b      	lsls	r3, r3, #12
    2c46:	0b1b      	lsrs	r3, r3, #12
    2c48:	60fb      	str	r3, [r7, #12]

	// Perform pressure/temperature compensation.
	meas->T = bmp280_compensate_T_int32(UT.i);
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	0018      	movs	r0, r3
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <read_bmp280_integer+0xb0>)
    2c50:	4798      	blx	r3
    2c52:	0002      	movs	r2, r0
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	605a      	str	r2, [r3, #4]
	meas->P = (int32_t)bmp280_compensate_P_int32(UP.i);
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	0018      	movs	r0, r3
    2c5c:	4b07      	ldr	r3, [pc, #28]	; (2c7c <read_bmp280_integer+0xb4>)
    2c5e:	4798      	blx	r3
    2c60:	0002      	movs	r2, r0
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	601a      	str	r2, [r3, #0]
}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	46bd      	mov	sp, r7
    2c6a:	b007      	add	sp, #28
    2c6c:	bd90      	pop	{r4, r7, pc}
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	00006743 	.word	0x00006743
    2c74:	00002f45 	.word	0x00002f45
    2c78:	0000275d 	.word	0x0000275d
    2c7c:	000027cd 	.word	0x000027cd

00002c80 <i2c_master_is_syncing>:
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b084      	sub	sp, #16
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	69db      	ldr	r3, [r3, #28]
    2c92:	2207      	movs	r2, #7
    2c94:	4013      	ands	r3, r2
    2c96:	1e5a      	subs	r2, r3, #1
    2c98:	4193      	sbcs	r3, r2
    2c9a:	b2db      	uxtb	r3, r3
}
    2c9c:	0018      	movs	r0, r3
    2c9e:	46bd      	mov	sp, r7
    2ca0:	b004      	add	sp, #16
    2ca2:	bd80      	pop	{r7, pc}

00002ca4 <_i2c_master_wait_for_sync>:
{
    2ca4:	b580      	push	{r7, lr}
    2ca6:	b082      	sub	sp, #8
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2cac:	46c0      	nop			; (mov r8, r8)
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	0018      	movs	r0, r3
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <_i2c_master_wait_for_sync+0x20>)
    2cb4:	4798      	blx	r3
    2cb6:	1e03      	subs	r3, r0, #0
    2cb8:	d1f9      	bne.n	2cae <_i2c_master_wait_for_sync+0xa>
}
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	46bd      	mov	sp, r7
    2cbe:	b002      	add	sp, #8
    2cc0:	bd80      	pop	{r7, pc}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	00002c81 	.word	0x00002c81

00002cc8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	2264      	movs	r2, #100	; 0x64
    2cd4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	4a1b      	ldr	r2, [pc, #108]	; (2d48 <i2c_master_get_config_defaults+0x80>)
    2cda:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	2200      	movs	r2, #0
    2ce0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	2200      	movs	r2, #0
    2cec:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	2280      	movs	r2, #128	; 0x80
    2cf2:	0392      	lsls	r2, r2, #14
    2cf4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	2201      	movs	r2, #1
    2cfa:	4252      	negs	r2, r2
    2cfc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	2201      	movs	r2, #1
    2d02:	4252      	negs	r2, r2
    2d04:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	2200      	movs	r2, #0
    2d0a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	2200      	movs	r2, #0
    2d10:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	2224      	movs	r2, #36	; 0x24
    2d16:	2100      	movs	r1, #0
    2d18:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	2200      	movs	r2, #0
    2d1e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	222c      	movs	r2, #44	; 0x2c
    2d24:	2100      	movs	r1, #0
    2d26:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	222d      	movs	r2, #45	; 0x2d
    2d2c:	2100      	movs	r1, #0
    2d2e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	222e      	movs	r2, #46	; 0x2e
    2d34:	2100      	movs	r1, #0
    2d36:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	22d7      	movs	r2, #215	; 0xd7
    2d3c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	46bd      	mov	sp, r7
    2d42:	b002      	add	sp, #8
    2d44:	bd80      	pop	{r7, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	00000d48 	.word	0x00000d48

00002d4c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b084      	sub	sp, #16
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    2d5a:	2300      	movs	r3, #0
    2d5c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	0018      	movs	r0, r3
    2d62:	4b10      	ldr	r3, [pc, #64]	; (2da4 <i2c_master_enable+0x58>)
    2d64:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2d66:	68bb      	ldr	r3, [r7, #8]
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	2202      	movs	r2, #2
    2d6c:	431a      	orrs	r2, r3
    2d6e:	68bb      	ldr	r3, [r7, #8]
    2d70:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2d72:	e00c      	b.n	2d8e <i2c_master_enable+0x42>
		timeout_counter++;
    2d74:	68fb      	ldr	r3, [r7, #12]
    2d76:	3301      	adds	r3, #1
    2d78:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	88db      	ldrh	r3, [r3, #6]
    2d7e:	001a      	movs	r2, r3
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	429a      	cmp	r2, r3
    2d84:	d803      	bhi.n	2d8e <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2d86:	68bb      	ldr	r3, [r7, #8]
    2d88:	2210      	movs	r2, #16
    2d8a:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    2d8c:	e006      	b.n	2d9c <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2d8e:	68bb      	ldr	r3, [r7, #8]
    2d90:	8b5b      	ldrh	r3, [r3, #26]
    2d92:	b29b      	uxth	r3, r3
    2d94:	001a      	movs	r2, r3
    2d96:	2310      	movs	r3, #16
    2d98:	4013      	ands	r3, r2
    2d9a:	d0eb      	beq.n	2d74 <i2c_master_enable+0x28>
		}
	}
}
    2d9c:	46bd      	mov	sp, r7
    2d9e:	b004      	add	sp, #16
    2da0:	bd80      	pop	{r7, pc}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	00002ca5 	.word	0x00002ca5

00002da8 <i2c_interface_init>:

 static struct i2c_master_config config;
 static struct i2c_master_module module;

 void i2c_interface_init(void)
 {
    2da8:	b580      	push	{r7, lr}
    2daa:	af00      	add	r7, sp, #0
	i2c_master_get_config_defaults(&config);
    2dac:	4b10      	ldr	r3, [pc, #64]	; (2df0 <i2c_interface_init+0x48>)
    2dae:	0018      	movs	r0, r3
    2db0:	4b10      	ldr	r3, [pc, #64]	; (2df4 <i2c_interface_init+0x4c>)
    2db2:	4798      	blx	r3
	config.start_hold_time = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    2db4:	4b0e      	ldr	r3, [pc, #56]	; (2df0 <i2c_interface_init+0x48>)
    2db6:	22c0      	movs	r2, #192	; 0xc0
    2db8:	0392      	lsls	r2, r2, #14
    2dba:	611a      	str	r2, [r3, #16]
	config.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    2dbc:	4b0c      	ldr	r3, [pc, #48]	; (2df0 <i2c_interface_init+0x48>)
    2dbe:	2264      	movs	r2, #100	; 0x64
    2dc0:	601a      	str	r2, [r3, #0]
	config.buffer_timeout = 10000;
    2dc2:	4b0b      	ldr	r3, [pc, #44]	; (2df0 <i2c_interface_init+0x48>)
    2dc4:	4a0c      	ldr	r2, [pc, #48]	; (2df8 <i2c_interface_init+0x50>)
    2dc6:	82da      	strh	r2, [r3, #22]
	config.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    2dc8:	4b09      	ldr	r3, [pc, #36]	; (2df0 <i2c_interface_init+0x48>)
    2dca:	4a0c      	ldr	r2, [pc, #48]	; (2dfc <i2c_interface_init+0x54>)
    2dcc:	61da      	str	r2, [r3, #28]
	config.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    2dce:	4b08      	ldr	r3, [pc, #32]	; (2df0 <i2c_interface_init+0x48>)
    2dd0:	4a0b      	ldr	r2, [pc, #44]	; (2e00 <i2c_interface_init+0x58>)
    2dd2:	621a      	str	r2, [r3, #32]

	i2c_master_init(&module, SERCOM3, &config);
    2dd4:	4a06      	ldr	r2, [pc, #24]	; (2df0 <i2c_interface_init+0x48>)
    2dd6:	490b      	ldr	r1, [pc, #44]	; (2e04 <i2c_interface_init+0x5c>)
    2dd8:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <i2c_interface_init+0x60>)
    2dda:	0018      	movs	r0, r3
    2ddc:	4b0b      	ldr	r3, [pc, #44]	; (2e0c <i2c_interface_init+0x64>)
    2dde:	4798      	blx	r3

	i2c_master_enable(&module);
    2de0:	4b09      	ldr	r3, [pc, #36]	; (2e08 <i2c_interface_init+0x60>)
    2de2:	0018      	movs	r0, r3
    2de4:	4b0a      	ldr	r3, [pc, #40]	; (2e10 <i2c_interface_init+0x68>)
    2de6:	4798      	blx	r3
 }
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	200000cc 	.word	0x200000cc
    2df4:	00002cc9 	.word	0x00002cc9
    2df8:	00002710 	.word	0x00002710
    2dfc:	00160002 	.word	0x00160002
    2e00:	00170002 	.word	0x00170002
    2e04:	42000c00 	.word	0x42000c00
    2e08:	20000100 	.word	0x20000100
    2e0c:	00001915 	.word	0x00001915
    2e10:	00002d4d 	.word	0x00002d4d

00002e14 <i2c_write_bytes>:
 {
	i2c_master_disable(&module);
 }

 void i2c_write_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    2e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e16:	b091      	sub	sp, #68	; 0x44
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6278      	str	r0, [r7, #36]	; 0x24
    2e1c:	000e      	movs	r6, r1
    2e1e:	0010      	movs	r0, r2
    2e20:	0019      	movs	r1, r3
    2e22:	2323      	movs	r3, #35	; 0x23
    2e24:	18fb      	adds	r3, r7, r3
    2e26:	1c32      	adds	r2, r6, #0
    2e28:	701a      	strb	r2, [r3, #0]
    2e2a:	2322      	movs	r3, #34	; 0x22
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	1c02      	adds	r2, r0, #0
    2e30:	701a      	strb	r2, [r3, #0]
    2e32:	2321      	movs	r3, #33	; 0x21
    2e34:	18fb      	adds	r3, r7, r3
    2e36:	1c0a      	adds	r2, r1, #0
    2e38:	701a      	strb	r2, [r3, #0]
    2e3a:	466b      	mov	r3, sp
    2e3c:	607b      	str	r3, [r7, #4]
	uint8_t buffer[data_length+2];
    2e3e:	2323      	movs	r3, #35	; 0x23
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	781b      	ldrb	r3, [r3, #0]
    2e44:	3302      	adds	r3, #2
    2e46:	1e5a      	subs	r2, r3, #1
    2e48:	63fa      	str	r2, [r7, #60]	; 0x3c
    2e4a:	001a      	movs	r2, r3
    2e4c:	613a      	str	r2, [r7, #16]
    2e4e:	2200      	movs	r2, #0
    2e50:	617a      	str	r2, [r7, #20]
    2e52:	6938      	ldr	r0, [r7, #16]
    2e54:	6979      	ldr	r1, [r7, #20]
    2e56:	0002      	movs	r2, r0
    2e58:	0f52      	lsrs	r2, r2, #29
    2e5a:	000e      	movs	r6, r1
    2e5c:	00f6      	lsls	r6, r6, #3
    2e5e:	61fe      	str	r6, [r7, #28]
    2e60:	69fe      	ldr	r6, [r7, #28]
    2e62:	4316      	orrs	r6, r2
    2e64:	61fe      	str	r6, [r7, #28]
    2e66:	0002      	movs	r2, r0
    2e68:	00d2      	lsls	r2, r2, #3
    2e6a:	61ba      	str	r2, [r7, #24]
    2e6c:	001a      	movs	r2, r3
    2e6e:	60ba      	str	r2, [r7, #8]
    2e70:	2200      	movs	r2, #0
    2e72:	60fa      	str	r2, [r7, #12]
    2e74:	68b8      	ldr	r0, [r7, #8]
    2e76:	68f9      	ldr	r1, [r7, #12]
    2e78:	0002      	movs	r2, r0
    2e7a:	0f52      	lsrs	r2, r2, #29
    2e7c:	000e      	movs	r6, r1
    2e7e:	00f5      	lsls	r5, r6, #3
    2e80:	4315      	orrs	r5, r2
    2e82:	0002      	movs	r2, r0
    2e84:	00d4      	lsls	r4, r2, #3
    2e86:	3307      	adds	r3, #7
    2e88:	08db      	lsrs	r3, r3, #3
    2e8a:	00db      	lsls	r3, r3, #3
    2e8c:	466a      	mov	r2, sp
    2e8e:	1ad3      	subs	r3, r2, r3
    2e90:	469d      	mov	sp, r3
    2e92:	466b      	mov	r3, sp
    2e94:	3300      	adds	r3, #0
    2e96:	63bb      	str	r3, [r7, #56]	; 0x38
	buffer[0] = reg;
    2e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e9a:	2221      	movs	r2, #33	; 0x21
    2e9c:	18ba      	adds	r2, r7, r2
    2e9e:	7812      	ldrb	r2, [r2, #0]
    2ea0:	701a      	strb	r2, [r3, #0]
	memcpy(buffer+1, data, data_length);
    2ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ea4:	1c58      	adds	r0, r3, #1
    2ea6:	2323      	movs	r3, #35	; 0x23
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	781a      	ldrb	r2, [r3, #0]
    2eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eae:	0019      	movs	r1, r3
    2eb0:	4b21      	ldr	r3, [pc, #132]	; (2f38 <i2c_write_bytes+0x124>)
    2eb2:	4798      	blx	r3
	
	struct i2c_master_packet packet;
	packet.address = i2c_address;
    2eb4:	2322      	movs	r3, #34	; 0x22
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	b29a      	uxth	r2, r3
    2ebc:	230c      	movs	r3, #12
    2ebe:	2120      	movs	r1, #32
    2ec0:	468c      	mov	ip, r1
    2ec2:	44bc      	add	ip, r7
    2ec4:	4463      	add	r3, ip
    2ec6:	801a      	strh	r2, [r3, #0]
	packet.data = buffer;
    2ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2eca:	230c      	movs	r3, #12
    2ecc:	2120      	movs	r1, #32
    2ece:	468c      	mov	ip, r1
    2ed0:	44bc      	add	ip, r7
    2ed2:	4463      	add	r3, ip
    2ed4:	605a      	str	r2, [r3, #4]
	packet.data_length = data_length+1;
    2ed6:	2323      	movs	r3, #35	; 0x23
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	b29b      	uxth	r3, r3
    2ede:	3301      	adds	r3, #1
    2ee0:	b29a      	uxth	r2, r3
    2ee2:	230c      	movs	r3, #12
    2ee4:	2120      	movs	r1, #32
    2ee6:	468c      	mov	ip, r1
    2ee8:	44bc      	add	ip, r7
    2eea:	4463      	add	r3, ip
    2eec:	805a      	strh	r2, [r3, #2]
	packet.high_speed = false;
    2eee:	230c      	movs	r3, #12
    2ef0:	2220      	movs	r2, #32
    2ef2:	4694      	mov	ip, r2
    2ef4:	44bc      	add	ip, r7
    2ef6:	4463      	add	r3, ip
    2ef8:	2200      	movs	r2, #0
    2efa:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0;
    2efc:	230c      	movs	r3, #12
    2efe:	2220      	movs	r2, #32
    2f00:	4694      	mov	ip, r2
    2f02:	44bc      	add	ip, r7
    2f04:	4463      	add	r3, ip
    2f06:	2200      	movs	r2, #0
    2f08:	729a      	strb	r2, [r3, #10]
	packet.ten_bit_address = 0;
    2f0a:	230c      	movs	r3, #12
    2f0c:	2220      	movs	r2, #32
    2f0e:	4694      	mov	ip, r2
    2f10:	44bc      	add	ip, r7
    2f12:	4463      	add	r3, ip
    2f14:	2200      	movs	r2, #0
    2f16:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet);
    2f18:	230c      	movs	r3, #12
    2f1a:	2220      	movs	r2, #32
    2f1c:	18ba      	adds	r2, r7, r2
    2f1e:	18d2      	adds	r2, r2, r3
    2f20:	4b06      	ldr	r3, [pc, #24]	; (2f3c <i2c_write_bytes+0x128>)
    2f22:	0011      	movs	r1, r2
    2f24:	0018      	movs	r0, r3
    2f26:	4b06      	ldr	r3, [pc, #24]	; (2f40 <i2c_write_bytes+0x12c>)
    2f28:	4798      	blx	r3
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	469d      	mov	sp, r3
 }
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	46bd      	mov	sp, r7
    2f32:	b011      	add	sp, #68	; 0x44
    2f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	00006731 	.word	0x00006731
    2f3c:	20000100 	.word	0x20000100
    2f40:	00001f39 	.word	0x00001f39

00002f44 <i2c_read_bytes>:

 void i2c_read_bytes(uint8_t * data, uint8_t data_length, uint8_t i2c_address, uint8_t reg)
 {
    2f44:	b590      	push	{r4, r7, lr}
    2f46:	b089      	sub	sp, #36	; 0x24
    2f48:	af00      	add	r7, sp, #0
    2f4a:	6078      	str	r0, [r7, #4]
    2f4c:	000c      	movs	r4, r1
    2f4e:	0010      	movs	r0, r2
    2f50:	0019      	movs	r1, r3
    2f52:	1cfb      	adds	r3, r7, #3
    2f54:	1c22      	adds	r2, r4, #0
    2f56:	701a      	strb	r2, [r3, #0]
    2f58:	1cbb      	adds	r3, r7, #2
    2f5a:	1c02      	adds	r2, r0, #0
    2f5c:	701a      	strb	r2, [r3, #0]
    2f5e:	1c7b      	adds	r3, r7, #1
    2f60:	1c0a      	adds	r2, r1, #0
    2f62:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet_setup;
	packet_setup.address = i2c_address;
    2f64:	1cbb      	adds	r3, r7, #2
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	b29a      	uxth	r2, r3
    2f6a:	2314      	movs	r3, #20
    2f6c:	18fb      	adds	r3, r7, r3
    2f6e:	801a      	strh	r2, [r3, #0]
	packet_setup.data = &reg;
    2f70:	2314      	movs	r3, #20
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	1c7a      	adds	r2, r7, #1
    2f76:	605a      	str	r2, [r3, #4]
	packet_setup.data_length = 1;
    2f78:	2314      	movs	r3, #20
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	2201      	movs	r2, #1
    2f7e:	805a      	strh	r2, [r3, #2]
	packet_setup.high_speed = false;
    2f80:	2314      	movs	r3, #20
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	2200      	movs	r2, #0
    2f86:	725a      	strb	r2, [r3, #9]
	packet_setup.hs_master_code = 0;
    2f88:	2314      	movs	r3, #20
    2f8a:	18fb      	adds	r3, r7, r3
    2f8c:	2200      	movs	r2, #0
    2f8e:	729a      	strb	r2, [r3, #10]
	packet_setup.ten_bit_address = 0;
    2f90:	2314      	movs	r3, #20
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	2200      	movs	r2, #0
    2f96:	721a      	strb	r2, [r3, #8]

	i2c_master_write_packet_wait(&module, &packet_setup);
    2f98:	2314      	movs	r3, #20
    2f9a:	18fa      	adds	r2, r7, r3
    2f9c:	4b15      	ldr	r3, [pc, #84]	; (2ff4 <i2c_read_bytes+0xb0>)
    2f9e:	0011      	movs	r1, r2
    2fa0:	0018      	movs	r0, r3
    2fa2:	4b15      	ldr	r3, [pc, #84]	; (2ff8 <i2c_read_bytes+0xb4>)
    2fa4:	4798      	blx	r3

	struct i2c_master_packet packet_read;
	packet_read.address = i2c_address;
    2fa6:	1cbb      	adds	r3, r7, #2
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	b29a      	uxth	r2, r3
    2fac:	2308      	movs	r3, #8
    2fae:	18fb      	adds	r3, r7, r3
    2fb0:	801a      	strh	r2, [r3, #0]
	packet_read.data = data;
    2fb2:	2308      	movs	r3, #8
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	687a      	ldr	r2, [r7, #4]
    2fb8:	605a      	str	r2, [r3, #4]
	packet_read.data_length = data_length;
    2fba:	1cfb      	adds	r3, r7, #3
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	b29a      	uxth	r2, r3
    2fc0:	2308      	movs	r3, #8
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	805a      	strh	r2, [r3, #2]
	packet_read.high_speed = false;
    2fc6:	2308      	movs	r3, #8
    2fc8:	18fb      	adds	r3, r7, r3
    2fca:	2200      	movs	r2, #0
    2fcc:	725a      	strb	r2, [r3, #9]
	packet_read.hs_master_code = 0;
    2fce:	2308      	movs	r3, #8
    2fd0:	18fb      	adds	r3, r7, r3
    2fd2:	2200      	movs	r2, #0
    2fd4:	729a      	strb	r2, [r3, #10]
	packet_read.ten_bit_address = 0;
    2fd6:	2308      	movs	r3, #8
    2fd8:	18fb      	adds	r3, r7, r3
    2fda:	2200      	movs	r2, #0
    2fdc:	721a      	strb	r2, [r3, #8]

	i2c_master_read_packet_wait(&module, &packet_read);
    2fde:	2308      	movs	r3, #8
    2fe0:	18fa      	adds	r2, r7, r3
    2fe2:	4b04      	ldr	r3, [pc, #16]	; (2ff4 <i2c_read_bytes+0xb0>)
    2fe4:	0011      	movs	r1, r2
    2fe6:	0018      	movs	r0, r3
    2fe8:	4b04      	ldr	r3, [pc, #16]	; (2ffc <i2c_read_bytes+0xb8>)
    2fea:	4798      	blx	r3
    2fec:	46c0      	nop			; (mov r8, r8)
    2fee:	46bd      	mov	sp, r7
    2ff0:	b009      	add	sp, #36	; 0x24
    2ff2:	bd90      	pop	{r4, r7, pc}
    2ff4:	20000100 	.word	0x20000100
    2ff8:	00001f39 	.word	0x00001f39
    2ffc:	00001d91 	.word	0x00001d91

00003000 <init_lis3dh>:
 #include "i2c_interface.h"

 #include "lis3dh.h"

 void init_lis3dh(void)
 {
    3000:	b590      	push	{r4, r7, lr}
    3002:	b083      	sub	sp, #12
    3004:	af00      	add	r7, sp, #0
	uint8_t me = 0;
    3006:	1dfb      	adds	r3, r7, #7
    3008:	2200      	movs	r2, #0
    300a:	701a      	strb	r2, [r3, #0]
	i2c_read_bytes(&me, 1, LIS3DH_ADDRESS, REG_WHO_AM_I);
    300c:	1df8      	adds	r0, r7, #7
    300e:	230f      	movs	r3, #15
    3010:	2219      	movs	r2, #25
    3012:	2101      	movs	r1, #1
    3014:	4c0e      	ldr	r4, [pc, #56]	; (3050 <init_lis3dh+0x50>)
    3016:	47a0      	blx	r4
	if(me != WHO_AM_I_VAL)
    3018:	1dfb      	adds	r3, r7, #7
    301a:	781b      	ldrb	r3, [r3, #0]
    301c:	2b33      	cmp	r3, #51	; 0x33
    301e:	d112      	bne.n	3046 <init_lis3dh+0x46>
		return;
	}

	// Set up sensors
	// 50Hz ODR, low power mode -> 6uA typical
	uint8_t data = (0x04 << 4) | (0x01 << 3) | (0x07 << 0);   // 50Hz, all axes enabled, low power mode
    3020:	1dbb      	adds	r3, r7, #6
    3022:	224f      	movs	r2, #79	; 0x4f
    3024:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
    3026:	1db8      	adds	r0, r7, #6
    3028:	2320      	movs	r3, #32
    302a:	2219      	movs	r2, #25
    302c:	2101      	movs	r1, #1
    302e:	4c09      	ldr	r4, [pc, #36]	; (3054 <init_lis3dh+0x54>)
    3030:	47a0      	blx	r4

	data = (0x01 << 4); // +/-4g range
    3032:	1dbb      	adds	r3, r7, #6
    3034:	2210      	movs	r2, #16
    3036:	701a      	strb	r2, [r3, #0]
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG4);
    3038:	1db8      	adds	r0, r7, #6
    303a:	2323      	movs	r3, #35	; 0x23
    303c:	2219      	movs	r2, #25
    303e:	2101      	movs	r1, #1
    3040:	4c04      	ldr	r4, [pc, #16]	; (3054 <init_lis3dh+0x54>)
    3042:	47a0      	blx	r4
    3044:	e000      	b.n	3048 <init_lis3dh+0x48>
		return;
    3046:	46c0      	nop			; (mov r8, r8)
 }
    3048:	46bd      	mov	sp, r7
    304a:	b003      	add	sp, #12
    304c:	bd90      	pop	{r4, r7, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	00002f45 	.word	0x00002f45
    3054:	00002e15 	.word	0x00002e15

00003058 <read_lis3dh_raw>:
	uint8_t data = 0;   // shut down mode, ODR all 0
	i2c_write_bytes(&data, 1, LIS3DH_ADDRESS, REG_CTRL_REG1);
 }

 void read_lis3dh_raw(lis3dh_data_raw_t * data)
 {
    3058:	b590      	push	{r4, r7, lr}
    305a:	b085      	sub	sp, #20
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	i2c_read_bytes(buffer, 6, LIS3DH_ADDRESS, REG_OUT_X_L | 0x80); // 0x80 enables auto increment
    3060:	2308      	movs	r3, #8
    3062:	18f8      	adds	r0, r7, r3
    3064:	23a8      	movs	r3, #168	; 0xa8
    3066:	2219      	movs	r2, #25
    3068:	2106      	movs	r1, #6
    306a:	4c1e      	ldr	r4, [pc, #120]	; (30e4 <read_lis3dh_raw+0x8c>)
    306c:	47a0      	blx	r4
	data->x = buffer[0];
    306e:	2308      	movs	r3, #8
    3070:	18fb      	adds	r3, r7, r3
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	b21a      	sxth	r2, r3
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	801a      	strh	r2, [r3, #0]
	data->x |= ((uint16_t) buffer[1]) << 8;
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	2200      	movs	r2, #0
    307e:	5e9a      	ldrsh	r2, [r3, r2]
    3080:	2308      	movs	r3, #8
    3082:	18fb      	adds	r3, r7, r3
    3084:	785b      	ldrb	r3, [r3, #1]
    3086:	021b      	lsls	r3, r3, #8
    3088:	b21b      	sxth	r3, r3
    308a:	4313      	orrs	r3, r2
    308c:	b21a      	sxth	r2, r3
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	801a      	strh	r2, [r3, #0]
	data->y = buffer[2];
    3092:	2308      	movs	r3, #8
    3094:	18fb      	adds	r3, r7, r3
    3096:	789b      	ldrb	r3, [r3, #2]
    3098:	b21a      	sxth	r2, r3
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	805a      	strh	r2, [r3, #2]
	data->y |= ((uint16_t) buffer[3]) << 8;
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	2202      	movs	r2, #2
    30a2:	5e9a      	ldrsh	r2, [r3, r2]
    30a4:	2308      	movs	r3, #8
    30a6:	18fb      	adds	r3, r7, r3
    30a8:	78db      	ldrb	r3, [r3, #3]
    30aa:	021b      	lsls	r3, r3, #8
    30ac:	b21b      	sxth	r3, r3
    30ae:	4313      	orrs	r3, r2
    30b0:	b21a      	sxth	r2, r3
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	805a      	strh	r2, [r3, #2]
	data->z = buffer[4];
    30b6:	2308      	movs	r3, #8
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	791b      	ldrb	r3, [r3, #4]
    30bc:	b21a      	sxth	r2, r3
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	809a      	strh	r2, [r3, #4]
	data->z |= ((uint16_t) buffer[5]) << 8;
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	2204      	movs	r2, #4
    30c6:	5e9a      	ldrsh	r2, [r3, r2]
    30c8:	2308      	movs	r3, #8
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	795b      	ldrb	r3, [r3, #5]
    30ce:	021b      	lsls	r3, r3, #8
    30d0:	b21b      	sxth	r3, r3
    30d2:	4313      	orrs	r3, r2
    30d4:	b21a      	sxth	r2, r3
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	809a      	strh	r2, [r3, #4]
 }
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	46bd      	mov	sp, r7
    30de:	b005      	add	sp, #20
    30e0:	bd90      	pop	{r4, r7, pc}
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	00002f45 	.word	0x00002f45

000030e8 <read_lis3dh_g>:

 void read_lis3dh_g(lis3dh_data_g_t * data)
 {
    30e8:	b590      	push	{r4, r7, lr}
    30ea:	b085      	sub	sp, #20
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
	lis3dh_data_raw_t raw;
	read_lis3dh_raw(&raw);
    30f0:	2308      	movs	r3, #8
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	0018      	movs	r0, r3
    30f6:	4b24      	ldr	r3, [pc, #144]	; (3188 <read_lis3dh_g+0xa0>)
    30f8:	4798      	blx	r3
	// 8 bit mode, +/-4g range
	data->x = raw.x * 0.00012207;
    30fa:	2308      	movs	r3, #8
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	2200      	movs	r2, #0
    3100:	5e9a      	ldrsh	r2, [r3, r2]
    3102:	4b22      	ldr	r3, [pc, #136]	; (318c <read_lis3dh_g+0xa4>)
    3104:	0010      	movs	r0, r2
    3106:	4798      	blx	r3
    3108:	4c21      	ldr	r4, [pc, #132]	; (3190 <read_lis3dh_g+0xa8>)
    310a:	4a22      	ldr	r2, [pc, #136]	; (3194 <read_lis3dh_g+0xac>)
    310c:	4b22      	ldr	r3, [pc, #136]	; (3198 <read_lis3dh_g+0xb0>)
    310e:	47a0      	blx	r4
    3110:	0003      	movs	r3, r0
    3112:	000c      	movs	r4, r1
    3114:	0019      	movs	r1, r3
    3116:	0022      	movs	r2, r4
    3118:	4b20      	ldr	r3, [pc, #128]	; (319c <read_lis3dh_g+0xb4>)
    311a:	0008      	movs	r0, r1
    311c:	0011      	movs	r1, r2
    311e:	4798      	blx	r3
    3120:	1c02      	adds	r2, r0, #0
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	601a      	str	r2, [r3, #0]
	data->y = raw.y * 0.00012207;
    3126:	2308      	movs	r3, #8
    3128:	18fb      	adds	r3, r7, r3
    312a:	2202      	movs	r2, #2
    312c:	5e9a      	ldrsh	r2, [r3, r2]
    312e:	4b17      	ldr	r3, [pc, #92]	; (318c <read_lis3dh_g+0xa4>)
    3130:	0010      	movs	r0, r2
    3132:	4798      	blx	r3
    3134:	4c16      	ldr	r4, [pc, #88]	; (3190 <read_lis3dh_g+0xa8>)
    3136:	4a17      	ldr	r2, [pc, #92]	; (3194 <read_lis3dh_g+0xac>)
    3138:	4b17      	ldr	r3, [pc, #92]	; (3198 <read_lis3dh_g+0xb0>)
    313a:	47a0      	blx	r4
    313c:	0003      	movs	r3, r0
    313e:	000c      	movs	r4, r1
    3140:	0019      	movs	r1, r3
    3142:	0022      	movs	r2, r4
    3144:	4b15      	ldr	r3, [pc, #84]	; (319c <read_lis3dh_g+0xb4>)
    3146:	0008      	movs	r0, r1
    3148:	0011      	movs	r1, r2
    314a:	4798      	blx	r3
    314c:	1c02      	adds	r2, r0, #0
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	605a      	str	r2, [r3, #4]
	data->z = raw.z * 0.00012207;
    3152:	2308      	movs	r3, #8
    3154:	18fb      	adds	r3, r7, r3
    3156:	2204      	movs	r2, #4
    3158:	5e9a      	ldrsh	r2, [r3, r2]
    315a:	4b0c      	ldr	r3, [pc, #48]	; (318c <read_lis3dh_g+0xa4>)
    315c:	0010      	movs	r0, r2
    315e:	4798      	blx	r3
    3160:	4c0b      	ldr	r4, [pc, #44]	; (3190 <read_lis3dh_g+0xa8>)
    3162:	4a0c      	ldr	r2, [pc, #48]	; (3194 <read_lis3dh_g+0xac>)
    3164:	4b0c      	ldr	r3, [pc, #48]	; (3198 <read_lis3dh_g+0xb0>)
    3166:	47a0      	blx	r4
    3168:	0003      	movs	r3, r0
    316a:	000c      	movs	r4, r1
    316c:	0019      	movs	r1, r3
    316e:	0022      	movs	r2, r4
    3170:	4b0a      	ldr	r3, [pc, #40]	; (319c <read_lis3dh_g+0xb4>)
    3172:	0008      	movs	r0, r1
    3174:	0011      	movs	r1, r2
    3176:	4798      	blx	r3
    3178:	1c02      	adds	r2, r0, #0
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	609a      	str	r2, [r3, #8]
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	46bd      	mov	sp, r7
    3182:	b005      	add	sp, #20
    3184:	bd90      	pop	{r4, r7, pc}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	00003059 	.word	0x00003059
    318c:	000062d5 	.word	0x000062d5
    3190:	00005741 	.word	0x00005741
    3194:	a19c4774 	.word	0xa19c4774
    3198:	3f1ffffa 	.word	0x3f1ffffa
    319c:	000063c9 	.word	0x000063c9

000031a0 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    31a0:	b580      	push	{r7, lr}
    31a2:	b082      	sub	sp, #8
    31a4:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    31a6:	4b04      	ldr	r3, [pc, #16]	; (31b8 <wdt_clear_early_warning+0x18>)
    31a8:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2201      	movs	r2, #1
    31ae:	719a      	strb	r2, [r3, #6]
}
    31b0:	46c0      	nop			; (mov r8, r8)
    31b2:	46bd      	mov	sp, r7
    31b4:	b002      	add	sp, #8
    31b6:	bd80      	pop	{r7, pc}
    31b8:	40001c00 	.word	0x40001c00

000031bc <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    31bc:	b580      	push	{r7, lr}
    31be:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    31c0:	4b05      	ldr	r3, [pc, #20]	; (31d8 <WDT_Handler+0x1c>)
    31c2:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    31c4:	4b05      	ldr	r3, [pc, #20]	; (31dc <WDT_Handler+0x20>)
    31c6:	681b      	ldr	r3, [r3, #0]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d002      	beq.n	31d2 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    31cc:	4b03      	ldr	r3, [pc, #12]	; (31dc <WDT_Handler+0x20>)
    31ce:	681b      	ldr	r3, [r3, #0]
    31d0:	4798      	blx	r3
	}
}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	46bd      	mov	sp, r7
    31d6:	bd80      	pop	{r7, pc}
    31d8:	000031a1 	.word	0x000031a1
    31dc:	20000138 	.word	0x20000138

000031e0 <system_gclk_chan_get_config_defaults>:
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b082      	sub	sp, #8
    31e4:	af00      	add	r7, sp, #0
    31e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2200      	movs	r2, #0
    31ec:	701a      	strb	r2, [r3, #0]
}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	46bd      	mov	sp, r7
    31f2:	b002      	add	sp, #8
    31f4:	bd80      	pop	{r7, pc}
	...

000031f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    31f8:	b580      	push	{r7, lr}
    31fa:	b084      	sub	sp, #16
    31fc:	af00      	add	r7, sp, #0
    31fe:	0002      	movs	r2, r0
    3200:	1dfb      	adds	r3, r7, #7
    3202:	701a      	strb	r2, [r3, #0]
    3204:	1dbb      	adds	r3, r7, #6
    3206:	1c0a      	adds	r2, r1, #0
    3208:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    320a:	4b1a      	ldr	r3, [pc, #104]	; (3274 <sercom_set_gclk_generator+0x7c>)
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	2201      	movs	r2, #1
    3210:	4053      	eors	r3, r2
    3212:	b2db      	uxtb	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	d103      	bne.n	3220 <sercom_set_gclk_generator+0x28>
    3218:	1dbb      	adds	r3, r7, #6
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	d01b      	beq.n	3258 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3220:	230c      	movs	r3, #12
    3222:	18fb      	adds	r3, r7, r3
    3224:	0018      	movs	r0, r3
    3226:	4b14      	ldr	r3, [pc, #80]	; (3278 <sercom_set_gclk_generator+0x80>)
    3228:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    322a:	230c      	movs	r3, #12
    322c:	18fb      	adds	r3, r7, r3
    322e:	1dfa      	adds	r2, r7, #7
    3230:	7812      	ldrb	r2, [r2, #0]
    3232:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3234:	230c      	movs	r3, #12
    3236:	18fb      	adds	r3, r7, r3
    3238:	0019      	movs	r1, r3
    323a:	2011      	movs	r0, #17
    323c:	4b0f      	ldr	r3, [pc, #60]	; (327c <sercom_set_gclk_generator+0x84>)
    323e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3240:	2011      	movs	r0, #17
    3242:	4b0f      	ldr	r3, [pc, #60]	; (3280 <sercom_set_gclk_generator+0x88>)
    3244:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3246:	4b0b      	ldr	r3, [pc, #44]	; (3274 <sercom_set_gclk_generator+0x7c>)
    3248:	1dfa      	adds	r2, r7, #7
    324a:	7812      	ldrb	r2, [r2, #0]
    324c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    324e:	4b09      	ldr	r3, [pc, #36]	; (3274 <sercom_set_gclk_generator+0x7c>)
    3250:	2201      	movs	r2, #1
    3252:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3254:	2300      	movs	r3, #0
    3256:	e008      	b.n	326a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3258:	4b06      	ldr	r3, [pc, #24]	; (3274 <sercom_set_gclk_generator+0x7c>)
    325a:	785b      	ldrb	r3, [r3, #1]
    325c:	1dfa      	adds	r2, r7, #7
    325e:	7812      	ldrb	r2, [r2, #0]
    3260:	429a      	cmp	r2, r3
    3262:	d101      	bne.n	3268 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3264:	2300      	movs	r3, #0
    3266:	e000      	b.n	326a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3268:	231d      	movs	r3, #29
}
    326a:	0018      	movs	r0, r3
    326c:	46bd      	mov	sp, r7
    326e:	b004      	add	sp, #16
    3270:	bd80      	pop	{r7, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	2000010c 	.word	0x2000010c
    3278:	000031e1 	.word	0x000031e1
    327c:	00003d61 	.word	0x00003d61
    3280:	00003da1 	.word	0x00003da1

00003284 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3284:	b580      	push	{r7, lr}
    3286:	b082      	sub	sp, #8
    3288:	af00      	add	r7, sp, #0
    328a:	6078      	str	r0, [r7, #4]
    328c:	000a      	movs	r2, r1
    328e:	1cfb      	adds	r3, r7, #3
    3290:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	4a4e      	ldr	r2, [pc, #312]	; (33d0 <_sercom_get_default_pad+0x14c>)
    3296:	4293      	cmp	r3, r2
    3298:	d040      	beq.n	331c <_sercom_get_default_pad+0x98>
    329a:	4a4d      	ldr	r2, [pc, #308]	; (33d0 <_sercom_get_default_pad+0x14c>)
    329c:	4293      	cmp	r3, r2
    329e:	d807      	bhi.n	32b0 <_sercom_get_default_pad+0x2c>
    32a0:	2284      	movs	r2, #132	; 0x84
    32a2:	05d2      	lsls	r2, r2, #23
    32a4:	4293      	cmp	r3, r2
    32a6:	d00f      	beq.n	32c8 <_sercom_get_default_pad+0x44>
    32a8:	4a4a      	ldr	r2, [pc, #296]	; (33d4 <_sercom_get_default_pad+0x150>)
    32aa:	4293      	cmp	r3, r2
    32ac:	d021      	beq.n	32f2 <_sercom_get_default_pad+0x6e>
    32ae:	e089      	b.n	33c4 <_sercom_get_default_pad+0x140>
    32b0:	4a49      	ldr	r2, [pc, #292]	; (33d8 <_sercom_get_default_pad+0x154>)
    32b2:	4293      	cmp	r3, r2
    32b4:	d100      	bne.n	32b8 <_sercom_get_default_pad+0x34>
    32b6:	e05b      	b.n	3370 <_sercom_get_default_pad+0xec>
    32b8:	4a48      	ldr	r2, [pc, #288]	; (33dc <_sercom_get_default_pad+0x158>)
    32ba:	4293      	cmp	r3, r2
    32bc:	d100      	bne.n	32c0 <_sercom_get_default_pad+0x3c>
    32be:	e06c      	b.n	339a <_sercom_get_default_pad+0x116>
    32c0:	4a47      	ldr	r2, [pc, #284]	; (33e0 <_sercom_get_default_pad+0x15c>)
    32c2:	4293      	cmp	r3, r2
    32c4:	d03f      	beq.n	3346 <_sercom_get_default_pad+0xc2>
    32c6:	e07d      	b.n	33c4 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    32c8:	1cfb      	adds	r3, r7, #3
    32ca:	781b      	ldrb	r3, [r3, #0]
    32cc:	2b01      	cmp	r3, #1
    32ce:	d00a      	beq.n	32e6 <_sercom_get_default_pad+0x62>
    32d0:	dc02      	bgt.n	32d8 <_sercom_get_default_pad+0x54>
    32d2:	2b00      	cmp	r3, #0
    32d4:	d005      	beq.n	32e2 <_sercom_get_default_pad+0x5e>
    32d6:	e075      	b.n	33c4 <_sercom_get_default_pad+0x140>
    32d8:	2b02      	cmp	r3, #2
    32da:	d006      	beq.n	32ea <_sercom_get_default_pad+0x66>
    32dc:	2b03      	cmp	r3, #3
    32de:	d006      	beq.n	32ee <_sercom_get_default_pad+0x6a>
    32e0:	e070      	b.n	33c4 <_sercom_get_default_pad+0x140>
    32e2:	4b40      	ldr	r3, [pc, #256]	; (33e4 <_sercom_get_default_pad+0x160>)
    32e4:	e06f      	b.n	33c6 <_sercom_get_default_pad+0x142>
    32e6:	4b40      	ldr	r3, [pc, #256]	; (33e8 <_sercom_get_default_pad+0x164>)
    32e8:	e06d      	b.n	33c6 <_sercom_get_default_pad+0x142>
    32ea:	4b40      	ldr	r3, [pc, #256]	; (33ec <_sercom_get_default_pad+0x168>)
    32ec:	e06b      	b.n	33c6 <_sercom_get_default_pad+0x142>
    32ee:	4b40      	ldr	r3, [pc, #256]	; (33f0 <_sercom_get_default_pad+0x16c>)
    32f0:	e069      	b.n	33c6 <_sercom_get_default_pad+0x142>
    32f2:	1cfb      	adds	r3, r7, #3
    32f4:	781b      	ldrb	r3, [r3, #0]
    32f6:	2b01      	cmp	r3, #1
    32f8:	d00a      	beq.n	3310 <_sercom_get_default_pad+0x8c>
    32fa:	dc02      	bgt.n	3302 <_sercom_get_default_pad+0x7e>
    32fc:	2b00      	cmp	r3, #0
    32fe:	d005      	beq.n	330c <_sercom_get_default_pad+0x88>
    3300:	e060      	b.n	33c4 <_sercom_get_default_pad+0x140>
    3302:	2b02      	cmp	r3, #2
    3304:	d006      	beq.n	3314 <_sercom_get_default_pad+0x90>
    3306:	2b03      	cmp	r3, #3
    3308:	d006      	beq.n	3318 <_sercom_get_default_pad+0x94>
    330a:	e05b      	b.n	33c4 <_sercom_get_default_pad+0x140>
    330c:	2303      	movs	r3, #3
    330e:	e05a      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3310:	4b38      	ldr	r3, [pc, #224]	; (33f4 <_sercom_get_default_pad+0x170>)
    3312:	e058      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3314:	4b38      	ldr	r3, [pc, #224]	; (33f8 <_sercom_get_default_pad+0x174>)
    3316:	e056      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3318:	4b38      	ldr	r3, [pc, #224]	; (33fc <_sercom_get_default_pad+0x178>)
    331a:	e054      	b.n	33c6 <_sercom_get_default_pad+0x142>
    331c:	1cfb      	adds	r3, r7, #3
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	2b01      	cmp	r3, #1
    3322:	d00a      	beq.n	333a <_sercom_get_default_pad+0xb6>
    3324:	dc02      	bgt.n	332c <_sercom_get_default_pad+0xa8>
    3326:	2b00      	cmp	r3, #0
    3328:	d005      	beq.n	3336 <_sercom_get_default_pad+0xb2>
    332a:	e04b      	b.n	33c4 <_sercom_get_default_pad+0x140>
    332c:	2b02      	cmp	r3, #2
    332e:	d006      	beq.n	333e <_sercom_get_default_pad+0xba>
    3330:	2b03      	cmp	r3, #3
    3332:	d006      	beq.n	3342 <_sercom_get_default_pad+0xbe>
    3334:	e046      	b.n	33c4 <_sercom_get_default_pad+0x140>
    3336:	4b32      	ldr	r3, [pc, #200]	; (3400 <_sercom_get_default_pad+0x17c>)
    3338:	e045      	b.n	33c6 <_sercom_get_default_pad+0x142>
    333a:	4b32      	ldr	r3, [pc, #200]	; (3404 <_sercom_get_default_pad+0x180>)
    333c:	e043      	b.n	33c6 <_sercom_get_default_pad+0x142>
    333e:	4b32      	ldr	r3, [pc, #200]	; (3408 <_sercom_get_default_pad+0x184>)
    3340:	e041      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3342:	4b32      	ldr	r3, [pc, #200]	; (340c <_sercom_get_default_pad+0x188>)
    3344:	e03f      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3346:	1cfb      	adds	r3, r7, #3
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b01      	cmp	r3, #1
    334c:	d00a      	beq.n	3364 <_sercom_get_default_pad+0xe0>
    334e:	dc02      	bgt.n	3356 <_sercom_get_default_pad+0xd2>
    3350:	2b00      	cmp	r3, #0
    3352:	d005      	beq.n	3360 <_sercom_get_default_pad+0xdc>
    3354:	e036      	b.n	33c4 <_sercom_get_default_pad+0x140>
    3356:	2b02      	cmp	r3, #2
    3358:	d006      	beq.n	3368 <_sercom_get_default_pad+0xe4>
    335a:	2b03      	cmp	r3, #3
    335c:	d006      	beq.n	336c <_sercom_get_default_pad+0xe8>
    335e:	e031      	b.n	33c4 <_sercom_get_default_pad+0x140>
    3360:	4b2b      	ldr	r3, [pc, #172]	; (3410 <_sercom_get_default_pad+0x18c>)
    3362:	e030      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3364:	4b2b      	ldr	r3, [pc, #172]	; (3414 <_sercom_get_default_pad+0x190>)
    3366:	e02e      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3368:	4b2b      	ldr	r3, [pc, #172]	; (3418 <_sercom_get_default_pad+0x194>)
    336a:	e02c      	b.n	33c6 <_sercom_get_default_pad+0x142>
    336c:	4b2b      	ldr	r3, [pc, #172]	; (341c <_sercom_get_default_pad+0x198>)
    336e:	e02a      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3370:	1cfb      	adds	r3, r7, #3
    3372:	781b      	ldrb	r3, [r3, #0]
    3374:	2b01      	cmp	r3, #1
    3376:	d00a      	beq.n	338e <_sercom_get_default_pad+0x10a>
    3378:	dc02      	bgt.n	3380 <_sercom_get_default_pad+0xfc>
    337a:	2b00      	cmp	r3, #0
    337c:	d005      	beq.n	338a <_sercom_get_default_pad+0x106>
    337e:	e021      	b.n	33c4 <_sercom_get_default_pad+0x140>
    3380:	2b02      	cmp	r3, #2
    3382:	d006      	beq.n	3392 <_sercom_get_default_pad+0x10e>
    3384:	2b03      	cmp	r3, #3
    3386:	d006      	beq.n	3396 <_sercom_get_default_pad+0x112>
    3388:	e01c      	b.n	33c4 <_sercom_get_default_pad+0x140>
    338a:	4b25      	ldr	r3, [pc, #148]	; (3420 <_sercom_get_default_pad+0x19c>)
    338c:	e01b      	b.n	33c6 <_sercom_get_default_pad+0x142>
    338e:	4b25      	ldr	r3, [pc, #148]	; (3424 <_sercom_get_default_pad+0x1a0>)
    3390:	e019      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3392:	4b25      	ldr	r3, [pc, #148]	; (3428 <_sercom_get_default_pad+0x1a4>)
    3394:	e017      	b.n	33c6 <_sercom_get_default_pad+0x142>
    3396:	4b25      	ldr	r3, [pc, #148]	; (342c <_sercom_get_default_pad+0x1a8>)
    3398:	e015      	b.n	33c6 <_sercom_get_default_pad+0x142>
    339a:	1cfb      	adds	r3, r7, #3
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	2b01      	cmp	r3, #1
    33a0:	d00a      	beq.n	33b8 <_sercom_get_default_pad+0x134>
    33a2:	dc02      	bgt.n	33aa <_sercom_get_default_pad+0x126>
    33a4:	2b00      	cmp	r3, #0
    33a6:	d005      	beq.n	33b4 <_sercom_get_default_pad+0x130>
    33a8:	e00c      	b.n	33c4 <_sercom_get_default_pad+0x140>
    33aa:	2b02      	cmp	r3, #2
    33ac:	d006      	beq.n	33bc <_sercom_get_default_pad+0x138>
    33ae:	2b03      	cmp	r3, #3
    33b0:	d006      	beq.n	33c0 <_sercom_get_default_pad+0x13c>
    33b2:	e007      	b.n	33c4 <_sercom_get_default_pad+0x140>
    33b4:	4b1e      	ldr	r3, [pc, #120]	; (3430 <_sercom_get_default_pad+0x1ac>)
    33b6:	e006      	b.n	33c6 <_sercom_get_default_pad+0x142>
    33b8:	4b1e      	ldr	r3, [pc, #120]	; (3434 <_sercom_get_default_pad+0x1b0>)
    33ba:	e004      	b.n	33c6 <_sercom_get_default_pad+0x142>
    33bc:	4b1e      	ldr	r3, [pc, #120]	; (3438 <_sercom_get_default_pad+0x1b4>)
    33be:	e002      	b.n	33c6 <_sercom_get_default_pad+0x142>
    33c0:	4b1e      	ldr	r3, [pc, #120]	; (343c <_sercom_get_default_pad+0x1b8>)
    33c2:	e000      	b.n	33c6 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    33c4:	2300      	movs	r3, #0
}
    33c6:	0018      	movs	r0, r3
    33c8:	46bd      	mov	sp, r7
    33ca:	b002      	add	sp, #8
    33cc:	bd80      	pop	{r7, pc}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	42000800 	.word	0x42000800
    33d4:	42000400 	.word	0x42000400
    33d8:	42001000 	.word	0x42001000
    33dc:	43000400 	.word	0x43000400
    33e0:	42000c00 	.word	0x42000c00
    33e4:	00040003 	.word	0x00040003
    33e8:	00050003 	.word	0x00050003
    33ec:	00060003 	.word	0x00060003
    33f0:	00070003 	.word	0x00070003
    33f4:	00010003 	.word	0x00010003
    33f8:	001e0003 	.word	0x001e0003
    33fc:	001f0003 	.word	0x001f0003
    3400:	00080003 	.word	0x00080003
    3404:	00090003 	.word	0x00090003
    3408:	000a0003 	.word	0x000a0003
    340c:	000b0003 	.word	0x000b0003
    3410:	00100003 	.word	0x00100003
    3414:	00110003 	.word	0x00110003
    3418:	00120003 	.word	0x00120003
    341c:	00130003 	.word	0x00130003
    3420:	000c0003 	.word	0x000c0003
    3424:	000d0003 	.word	0x000d0003
    3428:	000e0003 	.word	0x000e0003
    342c:	000f0003 	.word	0x000f0003
    3430:	00160003 	.word	0x00160003
    3434:	00170003 	.word	0x00170003
    3438:	00180003 	.word	0x00180003
    343c:	00190003 	.word	0x00190003

00003440 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3440:	b590      	push	{r4, r7, lr}
    3442:	b08b      	sub	sp, #44	; 0x2c
    3444:	af00      	add	r7, sp, #0
    3446:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3448:	230c      	movs	r3, #12
    344a:	18fb      	adds	r3, r7, r3
    344c:	4a0f      	ldr	r2, [pc, #60]	; (348c <_sercom_get_sercom_inst_index+0x4c>)
    344e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3450:	c313      	stmia	r3!, {r0, r1, r4}
    3452:	ca13      	ldmia	r2!, {r0, r1, r4}
    3454:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3456:	2300      	movs	r3, #0
    3458:	627b      	str	r3, [r7, #36]	; 0x24
    345a:	e00e      	b.n	347a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    345c:	230c      	movs	r3, #12
    345e:	18fb      	adds	r3, r7, r3
    3460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3462:	0092      	lsls	r2, r2, #2
    3464:	58d3      	ldr	r3, [r2, r3]
    3466:	001a      	movs	r2, r3
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	429a      	cmp	r2, r3
    346c:	d102      	bne.n	3474 <_sercom_get_sercom_inst_index+0x34>
			return i;
    346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3470:	b2db      	uxtb	r3, r3
    3472:	e006      	b.n	3482 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3476:	3301      	adds	r3, #1
    3478:	627b      	str	r3, [r7, #36]	; 0x24
    347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    347c:	2b05      	cmp	r3, #5
    347e:	d9ed      	bls.n	345c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3480:	2300      	movs	r3, #0
}
    3482:	0018      	movs	r0, r3
    3484:	46bd      	mov	sp, r7
    3486:	b00b      	add	sp, #44	; 0x2c
    3488:	bd90      	pop	{r4, r7, pc}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	00006974 	.word	0x00006974

00003490 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    3490:	b580      	push	{r7, lr}
    3492:	af00      	add	r7, sp, #0
}
    3494:	46c0      	nop			; (mov r8, r8)
    3496:	46bd      	mov	sp, r7
    3498:	bd80      	pop	{r7, pc}

0000349a <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    349a:	b580      	push	{r7, lr}
    349c:	b082      	sub	sp, #8
    349e:	af00      	add	r7, sp, #0
    34a0:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	095b      	lsrs	r3, r3, #5
}
    34a6:	0018      	movs	r0, r3
    34a8:	46bd      	mov	sp, r7
    34aa:	b002      	add	sp, #8
    34ac:	bd80      	pop	{r7, pc}
	...

000034b0 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	b082      	sub	sp, #8
    34b4:	af00      	add	r7, sp, #0
    34b6:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	01db      	lsls	r3, r3, #7
    34bc:	4a03      	ldr	r2, [pc, #12]	; (34cc <arch_ioport_port_to_base+0x1c>)
    34be:	4694      	mov	ip, r2
    34c0:	4463      	add	r3, ip
}
    34c2:	0018      	movs	r0, r3
    34c4:	46bd      	mov	sp, r7
    34c6:	b002      	add	sp, #8
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	40002800 	.word	0x40002800

000034d0 <arch_ioport_pin_to_mask>:
{
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b082      	sub	sp, #8
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	221f      	movs	r2, #31
    34dc:	4013      	ands	r3, r2
    34de:	2201      	movs	r2, #1
    34e0:	409a      	lsls	r2, r3
    34e2:	0013      	movs	r3, r2
}
    34e4:	0018      	movs	r0, r3
    34e6:	46bd      	mov	sp, r7
    34e8:	b002      	add	sp, #8
    34ea:	bd80      	pop	{r7, pc}

000034ec <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b08a      	sub	sp, #40	; 0x28
    34f0:	af00      	add	r7, sp, #0
    34f2:	60f8      	str	r0, [r7, #12]
    34f4:	60b9      	str	r1, [r7, #8]
    34f6:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    34f8:	68fb      	ldr	r3, [r7, #12]
    34fa:	0018      	movs	r0, r3
    34fc:	4b2b      	ldr	r3, [pc, #172]	; (35ac <arch_ioport_set_port_mode+0xc0>)
    34fe:	4798      	blx	r3
    3500:	0003      	movs	r3, r0
    3502:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
    3504:	2300      	movs	r3, #0
    3506:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    3508:	2300      	movs	r3, #0
    350a:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
    350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    350e:	2280      	movs	r2, #128	; 0x80
    3510:	0292      	lsls	r2, r2, #10
    3512:	4313      	orrs	r3, r2
    3514:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	2220      	movs	r2, #32
    351a:	4013      	ands	r3, r2
    351c:	d103      	bne.n	3526 <arch_ioport_set_port_mode+0x3a>
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	2210      	movs	r2, #16
    3522:	4013      	ands	r3, r2
    3524:	d004      	beq.n	3530 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    3526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3528:	2280      	movs	r2, #128	; 0x80
    352a:	02d2      	lsls	r2, r2, #11
    352c:	4313      	orrs	r3, r2
    352e:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	2280      	movs	r2, #128	; 0x80
    3534:	4013      	ands	r3, r2
    3536:	d004      	beq.n	3542 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    3538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    353a:	2280      	movs	r2, #128	; 0x80
    353c:	03d2      	lsls	r2, r2, #15
    353e:	4313      	orrs	r3, r2
    3540:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	061a      	lsls	r2, r3, #24
    3546:	23f0      	movs	r3, #240	; 0xf0
    3548:	051b      	lsls	r3, r3, #20
    354a:	4013      	ands	r3, r2
    354c:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
    354e:	68bb      	ldr	r3, [r7, #8]
    3550:	041b      	lsls	r3, r3, #16
    3552:	0c1b      	lsrs	r3, r3, #16
    3554:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    3556:	68bb      	ldr	r3, [r7, #8]
    3558:	0c1b      	lsrs	r3, r3, #16
    355a:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    355c:	69ba      	ldr	r2, [r7, #24]
    355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3560:	431a      	orrs	r2, r3
			config_mask | config_mux |
    3562:	69fb      	ldr	r3, [r7, #28]
    3564:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3566:	22a0      	movs	r2, #160	; 0xa0
    3568:	05d2      	lsls	r2, r2, #23
    356a:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    356c:	6a3b      	ldr	r3, [r7, #32]
    356e:	629a      	str	r2, [r3, #40]	; 0x28

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3570:	697a      	ldr	r2, [r7, #20]
    3572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3574:	431a      	orrs	r2, r3
			config_mask | config_mux |
    3576:	69fb      	ldr	r3, [r7, #28]
    3578:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    357a:	22d0      	movs	r2, #208	; 0xd0
    357c:	0612      	lsls	r2, r2, #24
    357e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    3580:	6a3b      	ldr	r3, [r7, #32]
    3582:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	2220      	movs	r2, #32
    3588:	4013      	ands	r3, r2
    358a:	d003      	beq.n	3594 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    358c:	6a3b      	ldr	r3, [r7, #32]
    358e:	68ba      	ldr	r2, [r7, #8]
    3590:	615a      	str	r2, [r3, #20]
	}
	else if (mode & IOPORT_MODE_PULLUP) {
		base->OUTSET.reg = mask;
	}
}
    3592:	e006      	b.n	35a2 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	2210      	movs	r2, #16
    3598:	4013      	ands	r3, r2
    359a:	d002      	beq.n	35a2 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    359c:	6a3b      	ldr	r3, [r7, #32]
    359e:	68ba      	ldr	r2, [r7, #8]
    35a0:	619a      	str	r2, [r3, #24]
}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	46bd      	mov	sp, r7
    35a6:	b00a      	add	sp, #40	; 0x28
    35a8:	bd80      	pop	{r7, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	000034b1 	.word	0x000034b1

000035b0 <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
    35b0:	b590      	push	{r4, r7, lr}
    35b2:	b083      	sub	sp, #12
    35b4:	af00      	add	r7, sp, #0
    35b6:	6078      	str	r0, [r7, #4]
    35b8:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	0018      	movs	r0, r3
    35be:	4b08      	ldr	r3, [pc, #32]	; (35e0 <arch_ioport_set_pin_mode+0x30>)
    35c0:	4798      	blx	r3
    35c2:	0004      	movs	r4, r0
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	0018      	movs	r0, r3
    35c8:	4b06      	ldr	r3, [pc, #24]	; (35e4 <arch_ioport_set_pin_mode+0x34>)
    35ca:	4798      	blx	r3
    35cc:	0001      	movs	r1, r0
    35ce:	683b      	ldr	r3, [r7, #0]
    35d0:	001a      	movs	r2, r3
    35d2:	0020      	movs	r0, r4
    35d4:	4b04      	ldr	r3, [pc, #16]	; (35e8 <arch_ioport_set_pin_mode+0x38>)
    35d6:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
    35d8:	46c0      	nop			; (mov r8, r8)
    35da:	46bd      	mov	sp, r7
    35dc:	b003      	add	sp, #12
    35de:	bd90      	pop	{r4, r7, pc}
    35e0:	0000349b 	.word	0x0000349b
    35e4:	000034d1 	.word	0x000034d1
    35e8:	000034ed 	.word	0x000034ed

000035ec <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    35ec:	b580      	push	{r7, lr}
    35ee:	b082      	sub	sp, #8
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
    35f4:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    35f6:	683a      	ldr	r2, [r7, #0]
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	0011      	movs	r1, r2
    35fc:	0018      	movs	r0, r3
    35fe:	4b03      	ldr	r3, [pc, #12]	; (360c <ioport_set_pin_mode+0x20>)
    3600:	4798      	blx	r3
}
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	46bd      	mov	sp, r7
    3606:	b002      	add	sp, #8
    3608:	bd80      	pop	{r7, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	000035b1 	.word	0x000035b1

00003610 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3610:	b580      	push	{r7, lr}
    3612:	af00      	add	r7, sp, #0
	ioport_set_pin_mode(SDA_PIN, SDA_PIN_MUX);
    3614:	2102      	movs	r1, #2
    3616:	2016      	movs	r0, #22
    3618:	4b10      	ldr	r3, [pc, #64]	; (365c <system_board_init+0x4c>)
    361a:	4798      	blx	r3
	ioport_set_pin_mode(SCL_PIN, SCL_PIN_MUX);
    361c:	2102      	movs	r1, #2
    361e:	2017      	movs	r0, #23
    3620:	4b0e      	ldr	r3, [pc, #56]	; (365c <system_board_init+0x4c>)
    3622:	4798      	blx	r3

	ioport_set_pin_mode(A0_PIN, A0_PIN_MUX);
    3624:	2101      	movs	r1, #1
    3626:	2002      	movs	r0, #2
    3628:	4b0c      	ldr	r3, [pc, #48]	; (365c <system_board_init+0x4c>)
    362a:	4798      	blx	r3
	ioport_set_pin_mode(A1_PIN, A1_PIN_MUX);
    362c:	2101      	movs	r1, #1
    362e:	2028      	movs	r0, #40	; 0x28
    3630:	4b0a      	ldr	r3, [pc, #40]	; (365c <system_board_init+0x4c>)
    3632:	4798      	blx	r3
	ioport_set_pin_mode(A2_PIN, A2_PIN_MUX);
    3634:	2101      	movs	r1, #1
    3636:	2029      	movs	r0, #41	; 0x29
    3638:	4b08      	ldr	r3, [pc, #32]	; (365c <system_board_init+0x4c>)
    363a:	4798      	blx	r3
	ioport_set_pin_mode(A3_PIN, A3_PIN_MUX);
    363c:	2101      	movs	r1, #1
    363e:	2004      	movs	r0, #4
    3640:	4b06      	ldr	r3, [pc, #24]	; (365c <system_board_init+0x4c>)
    3642:	4798      	blx	r3
	ioport_set_pin_mode(A4_PIN, A4_PIN_MUX);
    3644:	2101      	movs	r1, #1
    3646:	2005      	movs	r0, #5
    3648:	4b04      	ldr	r3, [pc, #16]	; (365c <system_board_init+0x4c>)
    364a:	4798      	blx	r3
	ioport_set_pin_mode(A5_PIN, A5_PIN_MUX);
    364c:	2101      	movs	r1, #1
    364e:	2022      	movs	r0, #34	; 0x22
    3650:	4b02      	ldr	r3, [pc, #8]	; (365c <system_board_init+0x4c>)
    3652:	4798      	blx	r3

	/*ioport_set_pin_mode(TX_PIN, TX_PIN_MUX);
	ioport_set_pin_mode(RX_PIN, RX_PIN_MUX);*/
    3654:	46c0      	nop			; (mov r8, r8)
    3656:	46bd      	mov	sp, r7
    3658:	bd80      	pop	{r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	000035ed 	.word	0x000035ed

00003660 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3660:	b580      	push	{r7, lr}
    3662:	b082      	sub	sp, #8
    3664:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3666:	4b10      	ldr	r3, [pc, #64]	; (36a8 <cpu_irq_enter_critical+0x48>)
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	2b00      	cmp	r3, #0
    366c:	d112      	bne.n	3694 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    366e:	f3ef 8310 	mrs	r3, PRIMASK
    3672:	607b      	str	r3, [r7, #4]
  return(result);
    3674:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3676:	2b00      	cmp	r3, #0
    3678:	d109      	bne.n	368e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    367a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    367c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3680:	4b0a      	ldr	r3, [pc, #40]	; (36ac <cpu_irq_enter_critical+0x4c>)
    3682:	2200      	movs	r2, #0
    3684:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3686:	4b0a      	ldr	r3, [pc, #40]	; (36b0 <cpu_irq_enter_critical+0x50>)
    3688:	2201      	movs	r2, #1
    368a:	701a      	strb	r2, [r3, #0]
    368c:	e002      	b.n	3694 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    368e:	4b08      	ldr	r3, [pc, #32]	; (36b0 <cpu_irq_enter_critical+0x50>)
    3690:	2200      	movs	r2, #0
    3692:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3694:	4b04      	ldr	r3, [pc, #16]	; (36a8 <cpu_irq_enter_critical+0x48>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	1c5a      	adds	r2, r3, #1
    369a:	4b03      	ldr	r3, [pc, #12]	; (36a8 <cpu_irq_enter_critical+0x48>)
    369c:	601a      	str	r2, [r3, #0]
}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	46bd      	mov	sp, r7
    36a2:	b002      	add	sp, #8
    36a4:	bd80      	pop	{r7, pc}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	20000110 	.word	0x20000110
    36ac:	2000000c 	.word	0x2000000c
    36b0:	20000114 	.word	0x20000114

000036b4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    36b8:	4b0b      	ldr	r3, [pc, #44]	; (36e8 <cpu_irq_leave_critical+0x34>)
    36ba:	681b      	ldr	r3, [r3, #0]
    36bc:	1e5a      	subs	r2, r3, #1
    36be:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <cpu_irq_leave_critical+0x34>)
    36c0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    36c2:	4b09      	ldr	r3, [pc, #36]	; (36e8 <cpu_irq_leave_critical+0x34>)
    36c4:	681b      	ldr	r3, [r3, #0]
    36c6:	2b00      	cmp	r3, #0
    36c8:	d10a      	bne.n	36e0 <cpu_irq_leave_critical+0x2c>
    36ca:	4b08      	ldr	r3, [pc, #32]	; (36ec <cpu_irq_leave_critical+0x38>)
    36cc:	781b      	ldrb	r3, [r3, #0]
    36ce:	b2db      	uxtb	r3, r3
    36d0:	2b00      	cmp	r3, #0
    36d2:	d005      	beq.n	36e0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <cpu_irq_leave_critical+0x3c>)
    36d6:	2201      	movs	r2, #1
    36d8:	701a      	strb	r2, [r3, #0]
    36da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    36de:	b662      	cpsie	i
	}
}
    36e0:	46c0      	nop			; (mov r8, r8)
    36e2:	46bd      	mov	sp, r7
    36e4:	bd80      	pop	{r7, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	20000110 	.word	0x20000110
    36ec:	20000114 	.word	0x20000114
    36f0:	2000000c 	.word	0x2000000c

000036f4 <system_gclk_gen_get_config_defaults>:
{
    36f4:	b580      	push	{r7, lr}
    36f6:	b082      	sub	sp, #8
    36f8:	af00      	add	r7, sp, #0
    36fa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    36fc:	687b      	ldr	r3, [r7, #4]
    36fe:	2201      	movs	r2, #1
    3700:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	2200      	movs	r2, #0
    3706:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	2206      	movs	r2, #6
    370c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	2200      	movs	r2, #0
    3712:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2200      	movs	r2, #0
    3718:	725a      	strb	r2, [r3, #9]
}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	46bd      	mov	sp, r7
    371e:	b002      	add	sp, #8
    3720:	bd80      	pop	{r7, pc}

00003722 <system_main_clock_set_failure_detect>:
{
    3722:	b580      	push	{r7, lr}
    3724:	b082      	sub	sp, #8
    3726:	af00      	add	r7, sp, #0
    3728:	0002      	movs	r2, r0
    372a:	1dfb      	adds	r3, r7, #7
    372c:	701a      	strb	r2, [r3, #0]
}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	46bd      	mov	sp, r7
    3732:	b002      	add	sp, #8
    3734:	bd80      	pop	{r7, pc}
	...

00003738 <system_cpu_clock_set_divider>:
{
    3738:	b580      	push	{r7, lr}
    373a:	b082      	sub	sp, #8
    373c:	af00      	add	r7, sp, #0
    373e:	0002      	movs	r2, r0
    3740:	1dfb      	adds	r3, r7, #7
    3742:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    3744:	4a05      	ldr	r2, [pc, #20]	; (375c <system_cpu_clock_set_divider+0x24>)
    3746:	1dfb      	adds	r3, r7, #7
    3748:	781b      	ldrb	r3, [r3, #0]
    374a:	2101      	movs	r1, #1
    374c:	4099      	lsls	r1, r3
    374e:	000b      	movs	r3, r1
    3750:	b2db      	uxtb	r3, r3
    3752:	7113      	strb	r3, [r2, #4]
}
    3754:	46c0      	nop			; (mov r8, r8)
    3756:	46bd      	mov	sp, r7
    3758:	b002      	add	sp, #8
    375a:	bd80      	pop	{r7, pc}
    375c:	40000400 	.word	0x40000400

00003760 <system_low_power_clock_set_divider>:
{
    3760:	b580      	push	{r7, lr}
    3762:	b082      	sub	sp, #8
    3764:	af00      	add	r7, sp, #0
    3766:	0002      	movs	r2, r0
    3768:	1dfb      	adds	r3, r7, #7
    376a:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    376c:	4a05      	ldr	r2, [pc, #20]	; (3784 <system_low_power_clock_set_divider+0x24>)
    376e:	1dfb      	adds	r3, r7, #7
    3770:	781b      	ldrb	r3, [r3, #0]
    3772:	2101      	movs	r1, #1
    3774:	4099      	lsls	r1, r3
    3776:	000b      	movs	r3, r1
    3778:	b2db      	uxtb	r3, r3
    377a:	7153      	strb	r3, [r2, #5]
}
    377c:	46c0      	nop			; (mov r8, r8)
    377e:	46bd      	mov	sp, r7
    3780:	b002      	add	sp, #8
    3782:	bd80      	pop	{r7, pc}
    3784:	40000400 	.word	0x40000400

00003788 <system_backup_clock_set_divider>:
{
    3788:	b580      	push	{r7, lr}
    378a:	b082      	sub	sp, #8
    378c:	af00      	add	r7, sp, #0
    378e:	0002      	movs	r2, r0
    3790:	1dfb      	adds	r3, r7, #7
    3792:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    3794:	4a05      	ldr	r2, [pc, #20]	; (37ac <system_backup_clock_set_divider+0x24>)
    3796:	1dfb      	adds	r3, r7, #7
    3798:	781b      	ldrb	r3, [r3, #0]
    379a:	2101      	movs	r1, #1
    379c:	4099      	lsls	r1, r3
    379e:	000b      	movs	r3, r1
    37a0:	b2db      	uxtb	r3, r3
    37a2:	7193      	strb	r3, [r2, #6]
}
    37a4:	46c0      	nop			; (mov r8, r8)
    37a6:	46bd      	mov	sp, r7
    37a8:	b002      	add	sp, #8
    37aa:	bd80      	pop	{r7, pc}
    37ac:	40000400 	.word	0x40000400

000037b0 <system_cpu_clock_get_hz>:
{
    37b0:	b580      	push	{r7, lr}
    37b2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    37b4:	2000      	movs	r0, #0
    37b6:	4b07      	ldr	r3, [pc, #28]	; (37d4 <system_cpu_clock_get_hz+0x24>)
    37b8:	4798      	blx	r3
    37ba:	0002      	movs	r2, r0
    37bc:	4b06      	ldr	r3, [pc, #24]	; (37d8 <system_cpu_clock_get_hz+0x28>)
    37be:	791b      	ldrb	r3, [r3, #4]
    37c0:	b2db      	uxtb	r3, r3
    37c2:	0019      	movs	r1, r3
    37c4:	4b05      	ldr	r3, [pc, #20]	; (37dc <system_cpu_clock_get_hz+0x2c>)
    37c6:	0010      	movs	r0, r2
    37c8:	4798      	blx	r3
    37ca:	0003      	movs	r3, r0
}
    37cc:	0018      	movs	r0, r3
    37ce:	46bd      	mov	sp, r7
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	00003ca1 	.word	0x00003ca1
    37d8:	40000400 	.word	0x40000400
    37dc:	00004539 	.word	0x00004539

000037e0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    37e0:	b580      	push	{r7, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	af00      	add	r7, sp, #0
    37e6:	0002      	movs	r2, r0
    37e8:	1dfb      	adds	r3, r7, #7
    37ea:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    37ec:	4a08      	ldr	r2, [pc, #32]	; (3810 <system_flash_set_waitstates+0x30>)
    37ee:	1dfb      	adds	r3, r7, #7
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	210f      	movs	r1, #15
    37f4:	400b      	ands	r3, r1
    37f6:	b2d9      	uxtb	r1, r3
    37f8:	6853      	ldr	r3, [r2, #4]
    37fa:	200f      	movs	r0, #15
    37fc:	4001      	ands	r1, r0
    37fe:	0049      	lsls	r1, r1, #1
    3800:	201e      	movs	r0, #30
    3802:	4383      	bics	r3, r0
    3804:	430b      	orrs	r3, r1
    3806:	6053      	str	r3, [r2, #4]
}
    3808:	46c0      	nop			; (mov r8, r8)
    380a:	46bd      	mov	sp, r7
    380c:	b002      	add	sp, #8
    380e:	bd80      	pop	{r7, pc}
    3810:	41004000 	.word	0x41004000

00003814 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    3814:	b580      	push	{r7, lr}
    3816:	b082      	sub	sp, #8
    3818:	af00      	add	r7, sp, #0
    381a:	0002      	movs	r2, r0
    381c:	1dfb      	adds	r3, r7, #7
    381e:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3820:	2380      	movs	r3, #128	; 0x80
    3822:	05db      	lsls	r3, r3, #23
    3824:	789b      	ldrb	r3, [r3, #2]
    3826:	b2db      	uxtb	r3, r3
    3828:	1dfa      	adds	r2, r7, #7
    382a:	7812      	ldrb	r2, [r2, #0]
    382c:	429a      	cmp	r2, r3
    382e:	d101      	bne.n	3834 <system_switch_performance_level+0x20>
		return STATUS_OK;
    3830:	2300      	movs	r3, #0
    3832:	e019      	b.n	3868 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3834:	2380      	movs	r3, #128	; 0x80
    3836:	05db      	lsls	r3, r3, #23
    3838:	789b      	ldrb	r3, [r3, #2]
    383a:	b2db      	uxtb	r3, r3
    383c:	b25b      	sxtb	r3, r3
    383e:	2b00      	cmp	r3, #0
    3840:	da01      	bge.n	3846 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    3842:	2317      	movs	r3, #23
    3844:	e010      	b.n	3868 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3846:	2380      	movs	r3, #128	; 0x80
    3848:	05db      	lsls	r3, r3, #23
    384a:	2201      	movs	r2, #1
    384c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    384e:	2380      	movs	r3, #128	; 0x80
    3850:	05db      	lsls	r3, r3, #23
    3852:	1dfa      	adds	r2, r7, #7
    3854:	7812      	ldrb	r2, [r2, #0]
    3856:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    3858:	46c0      	nop			; (mov r8, r8)
    385a:	2380      	movs	r3, #128	; 0x80
    385c:	05db      	lsls	r3, r3, #23
    385e:	799b      	ldrb	r3, [r3, #6]
    3860:	b2db      	uxtb	r3, r3
    3862:	2b00      	cmp	r3, #0
    3864:	d0f9      	beq.n	385a <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    3866:	2300      	movs	r3, #0
}
    3868:	0018      	movs	r0, r3
    386a:	46bd      	mov	sp, r7
    386c:	b002      	add	sp, #8
    386e:	bd80      	pop	{r7, pc}

00003870 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3870:	b580      	push	{r7, lr}
    3872:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3874:	46c0      	nop			; (mov r8, r8)
    3876:	4b04      	ldr	r3, [pc, #16]	; (3888 <_system_dfll_wait_for_sync+0x18>)
    3878:	68da      	ldr	r2, [r3, #12]
    387a:	2380      	movs	r3, #128	; 0x80
    387c:	005b      	lsls	r3, r3, #1
    387e:	4013      	ands	r3, r2
    3880:	d0f9      	beq.n	3876 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	46bd      	mov	sp, r7
    3886:	bd80      	pop	{r7, pc}
    3888:	40000c00 	.word	0x40000c00

0000388c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    388c:	b580      	push	{r7, lr}
    388e:	b082      	sub	sp, #8
    3890:	af00      	add	r7, sp, #0
    3892:	0002      	movs	r2, r0
    3894:	1dfb      	adds	r3, r7, #7
    3896:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3898:	1dfb      	adds	r3, r7, #7
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	2b08      	cmp	r3, #8
    389e:	d842      	bhi.n	3926 <system_clock_source_get_hz+0x9a>
    38a0:	009a      	lsls	r2, r3, #2
    38a2:	4b23      	ldr	r3, [pc, #140]	; (3930 <system_clock_source_get_hz+0xa4>)
    38a4:	18d3      	adds	r3, r2, r3
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    38aa:	4b22      	ldr	r3, [pc, #136]	; (3934 <system_clock_source_get_hz+0xa8>)
    38ac:	691b      	ldr	r3, [r3, #16]
    38ae:	e03b      	b.n	3928 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    38b0:	4b21      	ldr	r3, [pc, #132]	; (3938 <system_clock_source_get_hz+0xac>)
    38b2:	7d1b      	ldrb	r3, [r3, #20]
    38b4:	071b      	lsls	r3, r3, #28
    38b6:	0f9b      	lsrs	r3, r3, #30
    38b8:	b2db      	uxtb	r3, r3
    38ba:	3301      	adds	r3, #1
    38bc:	001a      	movs	r2, r3
    38be:	4b1f      	ldr	r3, [pc, #124]	; (393c <system_clock_source_get_hz+0xb0>)
    38c0:	4353      	muls	r3, r2
    38c2:	e031      	b.n	3928 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    38c4:	2380      	movs	r3, #128	; 0x80
    38c6:	021b      	lsls	r3, r3, #8
    38c8:	e02e      	b.n	3928 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    38ca:	2380      	movs	r3, #128	; 0x80
    38cc:	021b      	lsls	r3, r3, #8
    38ce:	e02b      	b.n	3928 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    38d0:	4b18      	ldr	r3, [pc, #96]	; (3934 <system_clock_source_get_hz+0xa8>)
    38d2:	695b      	ldr	r3, [r3, #20]
    38d4:	e028      	b.n	3928 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    38d6:	4b17      	ldr	r3, [pc, #92]	; (3934 <system_clock_source_get_hz+0xa8>)
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	2202      	movs	r2, #2
    38dc:	4013      	ands	r3, r2
    38de:	d101      	bne.n	38e4 <system_clock_source_get_hz+0x58>
			return 0;
    38e0:	2300      	movs	r3, #0
    38e2:	e021      	b.n	3928 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    38e4:	4b16      	ldr	r3, [pc, #88]	; (3940 <system_clock_source_get_hz+0xb4>)
    38e6:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    38e8:	4b12      	ldr	r3, [pc, #72]	; (3934 <system_clock_source_get_hz+0xa8>)
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	2224      	movs	r2, #36	; 0x24
    38ee:	4013      	ands	r3, r2
    38f0:	2b04      	cmp	r3, #4
    38f2:	d109      	bne.n	3908 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    38f4:	2000      	movs	r0, #0
    38f6:	4b13      	ldr	r3, [pc, #76]	; (3944 <system_clock_source_get_hz+0xb8>)
    38f8:	4798      	blx	r3
    38fa:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    38fc:	4b0d      	ldr	r3, [pc, #52]	; (3934 <system_clock_source_get_hz+0xa8>)
    38fe:	689b      	ldr	r3, [r3, #8]
    3900:	041b      	lsls	r3, r3, #16
    3902:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3904:	4353      	muls	r3, r2
    3906:	e00f      	b.n	3928 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    3908:	4b0f      	ldr	r3, [pc, #60]	; (3948 <system_clock_source_get_hz+0xbc>)
    390a:	e00d      	b.n	3928 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    390c:	4a0a      	ldr	r2, [pc, #40]	; (3938 <system_clock_source_get_hz+0xac>)
    390e:	2328      	movs	r3, #40	; 0x28
    3910:	5cd3      	ldrb	r3, [r2, r3]
    3912:	b2db      	uxtb	r3, r3
    3914:	001a      	movs	r2, r3
    3916:	2302      	movs	r3, #2
    3918:	4013      	ands	r3, r2
    391a:	d101      	bne.n	3920 <system_clock_source_get_hz+0x94>
			return 0;
    391c:	2300      	movs	r3, #0
    391e:	e003      	b.n	3928 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    3920:	4b04      	ldr	r3, [pc, #16]	; (3934 <system_clock_source_get_hz+0xa8>)
    3922:	68db      	ldr	r3, [r3, #12]
    3924:	e000      	b.n	3928 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    3926:	2300      	movs	r3, #0
	}
}
    3928:	0018      	movs	r0, r3
    392a:	46bd      	mov	sp, r7
    392c:	b002      	add	sp, #8
    392e:	bd80      	pop	{r7, pc}
    3930:	0000698c 	.word	0x0000698c
    3934:	20000118 	.word	0x20000118
    3938:	40000c00 	.word	0x40000c00
    393c:	003d0900 	.word	0x003d0900
    3940:	00003871 	.word	0x00003871
    3944:	00003e51 	.word	0x00003e51
    3948:	02dc6c00 	.word	0x02dc6c00

0000394c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    394c:	b580      	push	{r7, lr}
    394e:	b0a0      	sub	sp, #128	; 0x80
    3950:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3952:	4b26      	ldr	r3, [pc, #152]	; (39ec <system_clock_init+0xa0>)
    3954:	2280      	movs	r2, #128	; 0x80
    3956:	0052      	lsls	r2, r2, #1
    3958:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    395a:	4b25      	ldr	r3, [pc, #148]	; (39f0 <system_clock_init+0xa4>)
    395c:	2203      	movs	r2, #3
    395e:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3960:	2000      	movs	r0, #0
    3962:	4b24      	ldr	r3, [pc, #144]	; (39f4 <system_clock_init+0xa8>)
    3964:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    3966:	2002      	movs	r0, #2
    3968:	4b23      	ldr	r3, [pc, #140]	; (39f8 <system_clock_init+0xac>)
    396a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    396c:	4a1f      	ldr	r2, [pc, #124]	; (39ec <system_clock_init+0xa0>)
    396e:	7d13      	ldrb	r3, [r2, #20]
    3970:	2180      	movs	r1, #128	; 0x80
    3972:	4249      	negs	r1, r1
    3974:	430b      	orrs	r3, r1
    3976:	7513      	strb	r3, [r2, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    3978:	4a1c      	ldr	r2, [pc, #112]	; (39ec <system_clock_init+0xa0>)
    397a:	7d13      	ldrb	r3, [r2, #20]
    397c:	2140      	movs	r1, #64	; 0x40
    397e:	438b      	bics	r3, r1
    3980:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3982:	4b1e      	ldr	r3, [pc, #120]	; (39fc <system_clock_init+0xb0>)
    3984:	4798      	blx	r3
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    3986:	2000      	movs	r0, #0
    3988:	4b1d      	ldr	r3, [pc, #116]	; (3a00 <system_clock_init+0xb4>)
    398a:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    398c:	2000      	movs	r0, #0
    398e:	4b1d      	ldr	r3, [pc, #116]	; (3a04 <system_clock_init+0xb8>)
    3990:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3992:	2000      	movs	r0, #0
    3994:	4b1c      	ldr	r3, [pc, #112]	; (3a08 <system_clock_init+0xbc>)
    3996:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    3998:	2000      	movs	r0, #0
    399a:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <system_clock_init+0xc0>)
    399c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    399e:	1d3b      	adds	r3, r7, #4
    39a0:	0018      	movs	r0, r3
    39a2:	4b1b      	ldr	r3, [pc, #108]	; (3a10 <system_clock_init+0xc4>)
    39a4:	4798      	blx	r3
    39a6:	1d3b      	adds	r3, r7, #4
    39a8:	2206      	movs	r2, #6
    39aa:	701a      	strb	r2, [r3, #0]
    39ac:	1d3b      	adds	r3, r7, #4
    39ae:	2201      	movs	r2, #1
    39b0:	605a      	str	r2, [r3, #4]
    39b2:	1d3b      	adds	r3, r7, #4
    39b4:	2200      	movs	r2, #0
    39b6:	721a      	strb	r2, [r3, #8]
    39b8:	1d3b      	adds	r3, r7, #4
    39ba:	2200      	movs	r2, #0
    39bc:	725a      	strb	r2, [r3, #9]
    39be:	1d3b      	adds	r3, r7, #4
    39c0:	0019      	movs	r1, r3
    39c2:	2000      	movs	r0, #0
    39c4:	4b13      	ldr	r3, [pc, #76]	; (3a14 <system_clock_init+0xc8>)
    39c6:	4798      	blx	r3
    39c8:	2000      	movs	r0, #0
    39ca:	4b13      	ldr	r3, [pc, #76]	; (3a18 <system_clock_init+0xcc>)
    39cc:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    39ce:	4b13      	ldr	r3, [pc, #76]	; (3a1c <system_clock_init+0xd0>)
    39d0:	4798      	blx	r3
    39d2:	0003      	movs	r3, r0
    39d4:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (cpu_freq <= 12000000) {
    39d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    39d8:	4a11      	ldr	r2, [pc, #68]	; (3a20 <system_clock_init+0xd4>)
    39da:	4293      	cmp	r3, r2
    39dc:	d802      	bhi.n	39e4 <system_clock_init+0x98>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    39de:	2000      	movs	r0, #0
    39e0:	4b05      	ldr	r3, [pc, #20]	; (39f8 <system_clock_init+0xac>)
    39e2:	4798      	blx	r3
	}
}
    39e4:	46c0      	nop			; (mov r8, r8)
    39e6:	46bd      	mov	sp, r7
    39e8:	b020      	add	sp, #128	; 0x80
    39ea:	bd80      	pop	{r7, pc}
    39ec:	40000c00 	.word	0x40000c00
    39f0:	40001400 	.word	0x40001400
    39f4:	000037e1 	.word	0x000037e1
    39f8:	00003815 	.word	0x00003815
    39fc:	00003b05 	.word	0x00003b05
    3a00:	00003789 	.word	0x00003789
    3a04:	00003761 	.word	0x00003761
    3a08:	00003739 	.word	0x00003739
    3a0c:	00003723 	.word	0x00003723
    3a10:	000036f5 	.word	0x000036f5
    3a14:	00003b35 	.word	0x00003b35
    3a18:	00003c45 	.word	0x00003c45
    3a1c:	000037b1 	.word	0x000037b1
    3a20:	00b71b00 	.word	0x00b71b00

00003a24 <system_apb_clock_set_mask>:
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b082      	sub	sp, #8
    3a28:	af00      	add	r7, sp, #0
    3a2a:	0002      	movs	r2, r0
    3a2c:	6039      	str	r1, [r7, #0]
    3a2e:	1dfb      	adds	r3, r7, #7
    3a30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3a32:	1dfb      	adds	r3, r7, #7
    3a34:	781b      	ldrb	r3, [r3, #0]
    3a36:	2b04      	cmp	r3, #4
    3a38:	d827      	bhi.n	3a8a <system_apb_clock_set_mask+0x66>
    3a3a:	009a      	lsls	r2, r3, #2
    3a3c:	4b16      	ldr	r3, [pc, #88]	; (3a98 <system_apb_clock_set_mask+0x74>)
    3a3e:	18d3      	adds	r3, r2, r3
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    3a44:	4b15      	ldr	r3, [pc, #84]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a46:	4a15      	ldr	r2, [pc, #84]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a48:	6951      	ldr	r1, [r2, #20]
    3a4a:	683a      	ldr	r2, [r7, #0]
    3a4c:	430a      	orrs	r2, r1
    3a4e:	615a      	str	r2, [r3, #20]
			break;
    3a50:	e01d      	b.n	3a8e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    3a52:	4b12      	ldr	r3, [pc, #72]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a54:	4a11      	ldr	r2, [pc, #68]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a56:	6991      	ldr	r1, [r2, #24]
    3a58:	683a      	ldr	r2, [r7, #0]
    3a5a:	430a      	orrs	r2, r1
    3a5c:	619a      	str	r2, [r3, #24]
			break;
    3a5e:	e016      	b.n	3a8e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    3a60:	4b0e      	ldr	r3, [pc, #56]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a62:	4a0e      	ldr	r2, [pc, #56]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a64:	69d1      	ldr	r1, [r2, #28]
    3a66:	683a      	ldr	r2, [r7, #0]
    3a68:	430a      	orrs	r2, r1
    3a6a:	61da      	str	r2, [r3, #28]
			break;
    3a6c:	e00f      	b.n	3a8e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    3a6e:	4b0b      	ldr	r3, [pc, #44]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a70:	4a0a      	ldr	r2, [pc, #40]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a72:	6a11      	ldr	r1, [r2, #32]
    3a74:	683a      	ldr	r2, [r7, #0]
    3a76:	430a      	orrs	r2, r1
    3a78:	621a      	str	r2, [r3, #32]
			break;
    3a7a:	e008      	b.n	3a8e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    3a7c:	4b07      	ldr	r3, [pc, #28]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a7e:	4a07      	ldr	r2, [pc, #28]	; (3a9c <system_apb_clock_set_mask+0x78>)
    3a80:	6a51      	ldr	r1, [r2, #36]	; 0x24
    3a82:	683a      	ldr	r2, [r7, #0]
    3a84:	430a      	orrs	r2, r1
    3a86:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    3a88:	e001      	b.n	3a8e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    3a8a:	2317      	movs	r3, #23
    3a8c:	e000      	b.n	3a90 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    3a8e:	2300      	movs	r3, #0
}
    3a90:	0018      	movs	r0, r3
    3a92:	46bd      	mov	sp, r7
    3a94:	b002      	add	sp, #8
    3a96:	bd80      	pop	{r7, pc}
    3a98:	000069b0 	.word	0x000069b0
    3a9c:	40000400 	.word	0x40000400

00003aa0 <system_interrupt_enter_critical_section>:
{
    3aa0:	b580      	push	{r7, lr}
    3aa2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3aa4:	4b02      	ldr	r3, [pc, #8]	; (3ab0 <system_interrupt_enter_critical_section+0x10>)
    3aa6:	4798      	blx	r3
}
    3aa8:	46c0      	nop			; (mov r8, r8)
    3aaa:	46bd      	mov	sp, r7
    3aac:	bd80      	pop	{r7, pc}
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	00003661 	.word	0x00003661

00003ab4 <system_interrupt_leave_critical_section>:
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3ab8:	4b02      	ldr	r3, [pc, #8]	; (3ac4 <system_interrupt_leave_critical_section+0x10>)
    3aba:	4798      	blx	r3
}
    3abc:	46c0      	nop			; (mov r8, r8)
    3abe:	46bd      	mov	sp, r7
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	000036b5 	.word	0x000036b5

00003ac8 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b082      	sub	sp, #8
    3acc:	af00      	add	r7, sp, #0
    3ace:	0002      	movs	r2, r0
    3ad0:	1dfb      	adds	r3, r7, #7
    3ad2:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3ad4:	4b09      	ldr	r3, [pc, #36]	; (3afc <system_gclk_is_syncing+0x34>)
    3ad6:	685b      	ldr	r3, [r3, #4]
    3ad8:	1dfa      	adds	r2, r7, #7
    3ada:	7812      	ldrb	r2, [r2, #0]
    3adc:	2101      	movs	r1, #1
    3ade:	4091      	lsls	r1, r2
    3ae0:	000a      	movs	r2, r1
    3ae2:	0092      	lsls	r2, r2, #2
    3ae4:	4013      	ands	r3, r2
    3ae6:	4a06      	ldr	r2, [pc, #24]	; (3b00 <system_gclk_is_syncing+0x38>)
    3ae8:	4013      	ands	r3, r2
    3aea:	d001      	beq.n	3af0 <system_gclk_is_syncing+0x28>
		 return true;
    3aec:	2301      	movs	r3, #1
    3aee:	e000      	b.n	3af2 <system_gclk_is_syncing+0x2a>
	}

	 return false;
    3af0:	2300      	movs	r3, #0
}
    3af2:	0018      	movs	r0, r3
    3af4:	46bd      	mov	sp, r7
    3af6:	b002      	add	sp, #8
    3af8:	bd80      	pop	{r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	40001800 	.word	0x40001800
    3b00:	000007fc 	.word	0x000007fc

00003b04 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3b04:	b580      	push	{r7, lr}
    3b06:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    3b08:	2140      	movs	r1, #64	; 0x40
    3b0a:	2000      	movs	r0, #0
    3b0c:	4b07      	ldr	r3, [pc, #28]	; (3b2c <system_gclk_init+0x28>)
    3b0e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3b10:	4b07      	ldr	r3, [pc, #28]	; (3b30 <system_gclk_init+0x2c>)
    3b12:	2201      	movs	r2, #1
    3b14:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	4b05      	ldr	r3, [pc, #20]	; (3b30 <system_gclk_init+0x2c>)
    3b1a:	781b      	ldrb	r3, [r3, #0]
    3b1c:	b2db      	uxtb	r3, r3
    3b1e:	001a      	movs	r2, r3
    3b20:	2301      	movs	r3, #1
    3b22:	4013      	ands	r3, r2
    3b24:	d1f8      	bne.n	3b18 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	46bd      	mov	sp, r7
    3b2a:	bd80      	pop	{r7, pc}
    3b2c:	00003a25 	.word	0x00003a25
    3b30:	40001800 	.word	0x40001800

00003b34 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b086      	sub	sp, #24
    3b38:	af00      	add	r7, sp, #0
    3b3a:	0002      	movs	r2, r0
    3b3c:	6039      	str	r1, [r7, #0]
    3b3e:	1dfb      	adds	r3, r7, #7
    3b40:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3b42:	683b      	ldr	r3, [r7, #0]
    3b44:	781b      	ldrb	r3, [r3, #0]
    3b46:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3b48:	683b      	ldr	r3, [r7, #0]
    3b4a:	785b      	ldrb	r3, [r3, #1]
    3b4c:	2b00      	cmp	r3, #0
    3b4e:	d004      	beq.n	3b5a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3b50:	697b      	ldr	r3, [r7, #20]
    3b52:	2280      	movs	r2, #128	; 0x80
    3b54:	00d2      	lsls	r2, r2, #3
    3b56:	4313      	orrs	r3, r2
    3b58:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3b5a:	683b      	ldr	r3, [r7, #0]
    3b5c:	7a5b      	ldrb	r3, [r3, #9]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d004      	beq.n	3b6c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3b62:	697b      	ldr	r3, [r7, #20]
    3b64:	2280      	movs	r2, #128	; 0x80
    3b66:	0112      	lsls	r2, r2, #4
    3b68:	4313      	orrs	r3, r2
    3b6a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3b6c:	683b      	ldr	r3, [r7, #0]
    3b6e:	685b      	ldr	r3, [r3, #4]
    3b70:	2b01      	cmp	r3, #1
    3b72:	d92c      	bls.n	3bce <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3b74:	683b      	ldr	r3, [r7, #0]
    3b76:	685a      	ldr	r2, [r3, #4]
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	685b      	ldr	r3, [r3, #4]
    3b7c:	3b01      	subs	r3, #1
    3b7e:	4013      	ands	r3, r2
    3b80:	d11a      	bne.n	3bb8 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3b82:	2300      	movs	r3, #0
    3b84:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3b86:	2302      	movs	r3, #2
    3b88:	60fb      	str	r3, [r7, #12]
    3b8a:	e005      	b.n	3b98 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    3b8c:	693b      	ldr	r3, [r7, #16]
    3b8e:	3301      	adds	r3, #1
    3b90:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	005b      	lsls	r3, r3, #1
    3b96:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    3b98:	683b      	ldr	r3, [r7, #0]
    3b9a:	685a      	ldr	r2, [r3, #4]
    3b9c:	68fb      	ldr	r3, [r7, #12]
    3b9e:	429a      	cmp	r2, r3
    3ba0:	d8f4      	bhi.n	3b8c <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    3ba2:	693b      	ldr	r3, [r7, #16]
    3ba4:	041b      	lsls	r3, r3, #16
    3ba6:	697a      	ldr	r2, [r7, #20]
    3ba8:	4313      	orrs	r3, r2
    3baa:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3bac:	697b      	ldr	r3, [r7, #20]
    3bae:	2280      	movs	r2, #128	; 0x80
    3bb0:	0152      	lsls	r2, r2, #5
    3bb2:	4313      	orrs	r3, r2
    3bb4:	617b      	str	r3, [r7, #20]
    3bb6:	e00a      	b.n	3bce <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    3bb8:	683b      	ldr	r3, [r7, #0]
    3bba:	685b      	ldr	r3, [r3, #4]
    3bbc:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    3bbe:	697a      	ldr	r2, [r7, #20]
    3bc0:	4313      	orrs	r3, r2
    3bc2:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3bc4:	697b      	ldr	r3, [r7, #20]
    3bc6:	2280      	movs	r2, #128	; 0x80
    3bc8:	0092      	lsls	r2, r2, #2
    3bca:	4313      	orrs	r3, r2
    3bcc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3bce:	683b      	ldr	r3, [r7, #0]
    3bd0:	7a1b      	ldrb	r3, [r3, #8]
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d004      	beq.n	3be0 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3bd6:	697b      	ldr	r3, [r7, #20]
    3bd8:	2280      	movs	r2, #128	; 0x80
    3bda:	0192      	lsls	r2, r2, #6
    3bdc:	4313      	orrs	r3, r2
    3bde:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    3be0:	46c0      	nop			; (mov r8, r8)
    3be2:	1dfb      	adds	r3, r7, #7
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	0018      	movs	r0, r3
    3be8:	4b12      	ldr	r3, [pc, #72]	; (3c34 <system_gclk_gen_set_config+0x100>)
    3bea:	4798      	blx	r3
    3bec:	1e03      	subs	r3, r0, #0
    3bee:	d1f8      	bne.n	3be2 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3bf0:	4b11      	ldr	r3, [pc, #68]	; (3c38 <system_gclk_gen_set_config+0x104>)
    3bf2:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3bf4:	4811      	ldr	r0, [pc, #68]	; (3c3c <system_gclk_gen_set_config+0x108>)
    3bf6:	1dfb      	adds	r3, r7, #7
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	4910      	ldr	r1, [pc, #64]	; (3c3c <system_gclk_gen_set_config+0x108>)
    3bfc:	1dfa      	adds	r2, r7, #7
    3bfe:	7812      	ldrb	r2, [r2, #0]
    3c00:	3208      	adds	r2, #8
    3c02:	0092      	lsls	r2, r2, #2
    3c04:	5851      	ldr	r1, [r2, r1]
    3c06:	2280      	movs	r2, #128	; 0x80
    3c08:	0052      	lsls	r2, r2, #1
    3c0a:	4011      	ands	r1, r2
    3c0c:	697a      	ldr	r2, [r7, #20]
    3c0e:	430a      	orrs	r2, r1
    3c10:	3308      	adds	r3, #8
    3c12:	009b      	lsls	r3, r3, #2
    3c14:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    3c16:	46c0      	nop			; (mov r8, r8)
    3c18:	1dfb      	adds	r3, r7, #7
    3c1a:	781b      	ldrb	r3, [r3, #0]
    3c1c:	0018      	movs	r0, r3
    3c1e:	4b05      	ldr	r3, [pc, #20]	; (3c34 <system_gclk_gen_set_config+0x100>)
    3c20:	4798      	blx	r3
    3c22:	1e03      	subs	r3, r0, #0
    3c24:	d1f8      	bne.n	3c18 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    3c26:	4b06      	ldr	r3, [pc, #24]	; (3c40 <system_gclk_gen_set_config+0x10c>)
    3c28:	4798      	blx	r3
}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	46bd      	mov	sp, r7
    3c2e:	b006      	add	sp, #24
    3c30:	bd80      	pop	{r7, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	00003ac9 	.word	0x00003ac9
    3c38:	00003aa1 	.word	0x00003aa1
    3c3c:	40001800 	.word	0x40001800
    3c40:	00003ab5 	.word	0x00003ab5

00003c44 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b082      	sub	sp, #8
    3c48:	af00      	add	r7, sp, #0
    3c4a:	0002      	movs	r2, r0
    3c4c:	1dfb      	adds	r3, r7, #7
    3c4e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    3c50:	46c0      	nop			; (mov r8, r8)
    3c52:	1dfb      	adds	r3, r7, #7
    3c54:	781b      	ldrb	r3, [r3, #0]
    3c56:	0018      	movs	r0, r3
    3c58:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <system_gclk_gen_enable+0x4c>)
    3c5a:	4798      	blx	r3
    3c5c:	1e03      	subs	r3, r0, #0
    3c5e:	d1f8      	bne.n	3c52 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3c60:	4b0c      	ldr	r3, [pc, #48]	; (3c94 <system_gclk_gen_enable+0x50>)
    3c62:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3c64:	480c      	ldr	r0, [pc, #48]	; (3c98 <system_gclk_gen_enable+0x54>)
    3c66:	1dfb      	adds	r3, r7, #7
    3c68:	781b      	ldrb	r3, [r3, #0]
    3c6a:	490b      	ldr	r1, [pc, #44]	; (3c98 <system_gclk_gen_enable+0x54>)
    3c6c:	1dfa      	adds	r2, r7, #7
    3c6e:	7812      	ldrb	r2, [r2, #0]
    3c70:	3208      	adds	r2, #8
    3c72:	0092      	lsls	r2, r2, #2
    3c74:	5852      	ldr	r2, [r2, r1]
    3c76:	2180      	movs	r1, #128	; 0x80
    3c78:	0049      	lsls	r1, r1, #1
    3c7a:	430a      	orrs	r2, r1
    3c7c:	3308      	adds	r3, #8
    3c7e:	009b      	lsls	r3, r3, #2
    3c80:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    3c82:	4b06      	ldr	r3, [pc, #24]	; (3c9c <system_gclk_gen_enable+0x58>)
    3c84:	4798      	blx	r3
}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	46bd      	mov	sp, r7
    3c8a:	b002      	add	sp, #8
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	00003ac9 	.word	0x00003ac9
    3c94:	00003aa1 	.word	0x00003aa1
    3c98:	40001800 	.word	0x40001800
    3c9c:	00003ab5 	.word	0x00003ab5

00003ca0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b086      	sub	sp, #24
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	0002      	movs	r2, r0
    3ca8:	1dfb      	adds	r3, r7, #7
    3caa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    3cac:	46c0      	nop			; (mov r8, r8)
    3cae:	1dfb      	adds	r3, r7, #7
    3cb0:	781b      	ldrb	r3, [r3, #0]
    3cb2:	0018      	movs	r0, r3
    3cb4:	4b24      	ldr	r3, [pc, #144]	; (3d48 <system_gclk_gen_get_hz+0xa8>)
    3cb6:	4798      	blx	r3
    3cb8:	1e03      	subs	r3, r0, #0
    3cba:	d1f8      	bne.n	3cae <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3cbc:	4b23      	ldr	r3, [pc, #140]	; (3d4c <system_gclk_gen_get_hz+0xac>)
    3cbe:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3cc0:	4a23      	ldr	r2, [pc, #140]	; (3d50 <system_gclk_gen_get_hz+0xb0>)
    3cc2:	1dfb      	adds	r3, r7, #7
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	3308      	adds	r3, #8
    3cc8:	009b      	lsls	r3, r3, #2
    3cca:	589b      	ldr	r3, [r3, r2]
    3ccc:	071b      	lsls	r3, r3, #28
    3cce:	0f1b      	lsrs	r3, r3, #28
    3cd0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3cd2:	0018      	movs	r0, r3
    3cd4:	4b1f      	ldr	r3, [pc, #124]	; (3d54 <system_gclk_gen_get_hz+0xb4>)
    3cd6:	4798      	blx	r3
    3cd8:	0003      	movs	r3, r0
    3cda:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3cdc:	4a1c      	ldr	r2, [pc, #112]	; (3d50 <system_gclk_gen_get_hz+0xb0>)
    3cde:	1dfb      	adds	r3, r7, #7
    3ce0:	781b      	ldrb	r3, [r3, #0]
    3ce2:	3308      	adds	r3, #8
    3ce4:	009b      	lsls	r3, r3, #2
    3ce6:	589b      	ldr	r3, [r3, r2]
    3ce8:	04db      	lsls	r3, r3, #19
    3cea:	0fdb      	lsrs	r3, r3, #31
    3cec:	b2da      	uxtb	r2, r3
    3cee:	2313      	movs	r3, #19
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3cf4:	4a16      	ldr	r2, [pc, #88]	; (3d50 <system_gclk_gen_get_hz+0xb0>)
    3cf6:	1dfb      	adds	r3, r7, #7
    3cf8:	781b      	ldrb	r3, [r3, #0]
    3cfa:	3308      	adds	r3, #8
    3cfc:	009b      	lsls	r3, r3, #2
    3cfe:	589b      	ldr	r3, [r3, r2]
    3d00:	0c1b      	lsrs	r3, r3, #16
    3d02:	b29b      	uxth	r3, r3
    3d04:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3d06:	4b14      	ldr	r3, [pc, #80]	; (3d58 <system_gclk_gen_get_hz+0xb8>)
    3d08:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3d0a:	2313      	movs	r3, #19
    3d0c:	18fb      	adds	r3, r7, r3
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d109      	bne.n	3d28 <system_gclk_gen_get_hz+0x88>
    3d14:	68fb      	ldr	r3, [r7, #12]
    3d16:	2b01      	cmp	r3, #1
    3d18:	d906      	bls.n	3d28 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    3d1a:	4b10      	ldr	r3, [pc, #64]	; (3d5c <system_gclk_gen_get_hz+0xbc>)
    3d1c:	68f9      	ldr	r1, [r7, #12]
    3d1e:	6978      	ldr	r0, [r7, #20]
    3d20:	4798      	blx	r3
    3d22:	0003      	movs	r3, r0
    3d24:	617b      	str	r3, [r7, #20]
    3d26:	e00a      	b.n	3d3e <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    3d28:	2313      	movs	r3, #19
    3d2a:	18fb      	adds	r3, r7, r3
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d005      	beq.n	3d3e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    3d32:	68fb      	ldr	r3, [r7, #12]
    3d34:	3301      	adds	r3, #1
    3d36:	697a      	ldr	r2, [r7, #20]
    3d38:	40da      	lsrs	r2, r3
    3d3a:	0013      	movs	r3, r2
    3d3c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3d3e:	697b      	ldr	r3, [r7, #20]
}
    3d40:	0018      	movs	r0, r3
    3d42:	46bd      	mov	sp, r7
    3d44:	b006      	add	sp, #24
    3d46:	bd80      	pop	{r7, pc}
    3d48:	00003ac9 	.word	0x00003ac9
    3d4c:	00003aa1 	.word	0x00003aa1
    3d50:	40001800 	.word	0x40001800
    3d54:	0000388d 	.word	0x0000388d
    3d58:	00003ab5 	.word	0x00003ab5
    3d5c:	00004539 	.word	0x00004539

00003d60 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	0002      	movs	r2, r0
    3d68:	6039      	str	r1, [r7, #0]
    3d6a:	1dfb      	adds	r3, r7, #7
    3d6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3d6e:	1dfb      	adds	r3, r7, #7
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	0018      	movs	r0, r3
    3d74:	4b08      	ldr	r3, [pc, #32]	; (3d98 <system_gclk_chan_set_config+0x38>)
    3d76:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3d78:	4908      	ldr	r1, [pc, #32]	; (3d9c <system_gclk_chan_set_config+0x3c>)
    3d7a:	1dfb      	adds	r3, r7, #7
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	683a      	ldr	r2, [r7, #0]
    3d80:	7812      	ldrb	r2, [r2, #0]
    3d82:	0010      	movs	r0, r2
    3d84:	220f      	movs	r2, #15
    3d86:	4002      	ands	r2, r0
    3d88:	3320      	adds	r3, #32
    3d8a:	009b      	lsls	r3, r3, #2
    3d8c:	505a      	str	r2, [r3, r1]


}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	46bd      	mov	sp, r7
    3d92:	b002      	add	sp, #8
    3d94:	bd80      	pop	{r7, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	00003df9 	.word	0x00003df9
    3d9c:	40001800 	.word	0x40001800

00003da0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b082      	sub	sp, #8
    3da4:	af00      	add	r7, sp, #0
    3da6:	0002      	movs	r2, r0
    3da8:	1dfb      	adds	r3, r7, #7
    3daa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3dac:	4b0f      	ldr	r3, [pc, #60]	; (3dec <system_gclk_chan_enable+0x4c>)
    3dae:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3db0:	490f      	ldr	r1, [pc, #60]	; (3df0 <system_gclk_chan_enable+0x50>)
    3db2:	1dfb      	adds	r3, r7, #7
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	480e      	ldr	r0, [pc, #56]	; (3df0 <system_gclk_chan_enable+0x50>)
    3db8:	1dfa      	adds	r2, r7, #7
    3dba:	7812      	ldrb	r2, [r2, #0]
    3dbc:	3220      	adds	r2, #32
    3dbe:	0092      	lsls	r2, r2, #2
    3dc0:	5812      	ldr	r2, [r2, r0]
    3dc2:	2040      	movs	r0, #64	; 0x40
    3dc4:	4302      	orrs	r2, r0
    3dc6:	3320      	adds	r3, #32
    3dc8:	009b      	lsls	r3, r3, #2
    3dca:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3dcc:	46c0      	nop			; (mov r8, r8)
    3dce:	4a08      	ldr	r2, [pc, #32]	; (3df0 <system_gclk_chan_enable+0x50>)
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	3320      	adds	r3, #32
    3dd6:	009b      	lsls	r3, r3, #2
    3dd8:	589b      	ldr	r3, [r3, r2]
    3dda:	2240      	movs	r2, #64	; 0x40
    3ddc:	4013      	ands	r3, r2
    3dde:	d0f6      	beq.n	3dce <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    3de0:	4b04      	ldr	r3, [pc, #16]	; (3df4 <system_gclk_chan_enable+0x54>)
    3de2:	4798      	blx	r3
}
    3de4:	46c0      	nop			; (mov r8, r8)
    3de6:	46bd      	mov	sp, r7
    3de8:	b002      	add	sp, #8
    3dea:	bd80      	pop	{r7, pc}
    3dec:	00003aa1 	.word	0x00003aa1
    3df0:	40001800 	.word	0x40001800
    3df4:	00003ab5 	.word	0x00003ab5

00003df8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b082      	sub	sp, #8
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	0002      	movs	r2, r0
    3e00:	1dfb      	adds	r3, r7, #7
    3e02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3e04:	4b0f      	ldr	r3, [pc, #60]	; (3e44 <system_gclk_chan_disable+0x4c>)
    3e06:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3e08:	490f      	ldr	r1, [pc, #60]	; (3e48 <system_gclk_chan_disable+0x50>)
    3e0a:	1dfb      	adds	r3, r7, #7
    3e0c:	781b      	ldrb	r3, [r3, #0]
    3e0e:	480e      	ldr	r0, [pc, #56]	; (3e48 <system_gclk_chan_disable+0x50>)
    3e10:	1dfa      	adds	r2, r7, #7
    3e12:	7812      	ldrb	r2, [r2, #0]
    3e14:	3220      	adds	r2, #32
    3e16:	0092      	lsls	r2, r2, #2
    3e18:	5812      	ldr	r2, [r2, r0]
    3e1a:	2040      	movs	r0, #64	; 0x40
    3e1c:	4382      	bics	r2, r0
    3e1e:	3320      	adds	r3, #32
    3e20:	009b      	lsls	r3, r3, #2
    3e22:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3e24:	46c0      	nop			; (mov r8, r8)
    3e26:	4a08      	ldr	r2, [pc, #32]	; (3e48 <system_gclk_chan_disable+0x50>)
    3e28:	1dfb      	adds	r3, r7, #7
    3e2a:	781b      	ldrb	r3, [r3, #0]
    3e2c:	3320      	adds	r3, #32
    3e2e:	009b      	lsls	r3, r3, #2
    3e30:	589b      	ldr	r3, [r3, r2]
    3e32:	2240      	movs	r2, #64	; 0x40
    3e34:	4013      	ands	r3, r2
    3e36:	d1f6      	bne.n	3e26 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    3e38:	4b04      	ldr	r3, [pc, #16]	; (3e4c <system_gclk_chan_disable+0x54>)
    3e3a:	4798      	blx	r3
}
    3e3c:	46c0      	nop			; (mov r8, r8)
    3e3e:	46bd      	mov	sp, r7
    3e40:	b002      	add	sp, #8
    3e42:	bd80      	pop	{r7, pc}
    3e44:	00003aa1 	.word	0x00003aa1
    3e48:	40001800 	.word	0x40001800
    3e4c:	00003ab5 	.word	0x00003ab5

00003e50 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b084      	sub	sp, #16
    3e54:	af00      	add	r7, sp, #0
    3e56:	0002      	movs	r2, r0
    3e58:	1dfb      	adds	r3, r7, #7
    3e5a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3e5c:	4b0d      	ldr	r3, [pc, #52]	; (3e94 <system_gclk_chan_get_hz+0x44>)
    3e5e:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3e60:	4a0d      	ldr	r2, [pc, #52]	; (3e98 <system_gclk_chan_get_hz+0x48>)
    3e62:	1dfb      	adds	r3, r7, #7
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	3320      	adds	r3, #32
    3e68:	009b      	lsls	r3, r3, #2
    3e6a:	589b      	ldr	r3, [r3, r2]
    3e6c:	071b      	lsls	r3, r3, #28
    3e6e:	0f1b      	lsrs	r3, r3, #28
    3e70:	b2da      	uxtb	r2, r3
    3e72:	230f      	movs	r3, #15
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    3e78:	4b08      	ldr	r3, [pc, #32]	; (3e9c <system_gclk_chan_get_hz+0x4c>)
    3e7a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3e7c:	230f      	movs	r3, #15
    3e7e:	18fb      	adds	r3, r7, r3
    3e80:	781b      	ldrb	r3, [r3, #0]
    3e82:	0018      	movs	r0, r3
    3e84:	4b06      	ldr	r3, [pc, #24]	; (3ea0 <system_gclk_chan_get_hz+0x50>)
    3e86:	4798      	blx	r3
    3e88:	0003      	movs	r3, r0
}
    3e8a:	0018      	movs	r0, r3
    3e8c:	46bd      	mov	sp, r7
    3e8e:	b004      	add	sp, #16
    3e90:	bd80      	pop	{r7, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	00003aa1 	.word	0x00003aa1
    3e98:	40001800 	.word	0x40001800
    3e9c:	00003ab5 	.word	0x00003ab5
    3ea0:	00003ca1 	.word	0x00003ca1

00003ea4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b084      	sub	sp, #16
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	0002      	movs	r2, r0
    3eac:	1dfb      	adds	r3, r7, #7
    3eae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3eb0:	230f      	movs	r3, #15
    3eb2:	18fb      	adds	r3, r7, r3
    3eb4:	1dfa      	adds	r2, r7, #7
    3eb6:	7812      	ldrb	r2, [r2, #0]
    3eb8:	09d2      	lsrs	r2, r2, #7
    3eba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ebc:	230e      	movs	r3, #14
    3ebe:	18fb      	adds	r3, r7, r3
    3ec0:	1dfa      	adds	r2, r7, #7
    3ec2:	7812      	ldrb	r2, [r2, #0]
    3ec4:	0952      	lsrs	r2, r2, #5
    3ec6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ec8:	4b0d      	ldr	r3, [pc, #52]	; (3f00 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3eca:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ecc:	230f      	movs	r3, #15
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d10f      	bne.n	3ef6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ed6:	230f      	movs	r3, #15
    3ed8:	18fb      	adds	r3, r7, r3
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	009b      	lsls	r3, r3, #2
    3ede:	2210      	movs	r2, #16
    3ee0:	4694      	mov	ip, r2
    3ee2:	44bc      	add	ip, r7
    3ee4:	4463      	add	r3, ip
    3ee6:	3b08      	subs	r3, #8
    3ee8:	681a      	ldr	r2, [r3, #0]
    3eea:	230e      	movs	r3, #14
    3eec:	18fb      	adds	r3, r7, r3
    3eee:	781b      	ldrb	r3, [r3, #0]
    3ef0:	01db      	lsls	r3, r3, #7
    3ef2:	18d3      	adds	r3, r2, r3
    3ef4:	e000      	b.n	3ef8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3ef6:	2300      	movs	r3, #0
	}
}
    3ef8:	0018      	movs	r0, r3
    3efa:	46bd      	mov	sp, r7
    3efc:	b004      	add	sp, #16
    3efe:	bd80      	pop	{r7, pc}
    3f00:	40002800 	.word	0x40002800

00003f04 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b088      	sub	sp, #32
    3f08:	af00      	add	r7, sp, #0
    3f0a:	60f8      	str	r0, [r7, #12]
    3f0c:	60b9      	str	r1, [r7, #8]
    3f0e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3f10:	2300      	movs	r3, #0
    3f12:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	78db      	ldrb	r3, [r3, #3]
    3f18:	2201      	movs	r2, #1
    3f1a:	4053      	eors	r3, r2
    3f1c:	b2db      	uxtb	r3, r3
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d035      	beq.n	3f8e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	2b80      	cmp	r3, #128	; 0x80
    3f28:	d00b      	beq.n	3f42 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3f2a:	69fb      	ldr	r3, [r7, #28]
    3f2c:	2280      	movs	r2, #128	; 0x80
    3f2e:	0252      	lsls	r2, r2, #9
    3f30:	4313      	orrs	r3, r2
    3f32:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	781b      	ldrb	r3, [r3, #0]
    3f38:	061b      	lsls	r3, r3, #24
    3f3a:	001a      	movs	r2, r3
    3f3c:	69fb      	ldr	r3, [r7, #28]
    3f3e:	4313      	orrs	r3, r2
    3f40:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	785b      	ldrb	r3, [r3, #1]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d003      	beq.n	3f52 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3f4e:	2b02      	cmp	r3, #2
    3f50:	d110      	bne.n	3f74 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3f52:	69fb      	ldr	r3, [r7, #28]
    3f54:	2280      	movs	r2, #128	; 0x80
    3f56:	0292      	lsls	r2, r2, #10
    3f58:	4313      	orrs	r3, r2
    3f5a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	789b      	ldrb	r3, [r3, #2]
    3f60:	2b00      	cmp	r3, #0
    3f62:	d004      	beq.n	3f6e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3f64:	69fb      	ldr	r3, [r7, #28]
    3f66:	2280      	movs	r2, #128	; 0x80
    3f68:	02d2      	lsls	r2, r2, #11
    3f6a:	4313      	orrs	r3, r2
    3f6c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3f6e:	68fb      	ldr	r3, [r7, #12]
    3f70:	68ba      	ldr	r2, [r7, #8]
    3f72:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	785b      	ldrb	r3, [r3, #1]
    3f78:	2b01      	cmp	r3, #1
    3f7a:	d003      	beq.n	3f84 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3f80:	2b02      	cmp	r3, #2
    3f82:	d107      	bne.n	3f94 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3f84:	69fb      	ldr	r3, [r7, #28]
    3f86:	4a22      	ldr	r2, [pc, #136]	; (4010 <_system_pinmux_config+0x10c>)
    3f88:	4013      	ands	r3, r2
    3f8a:	61fb      	str	r3, [r7, #28]
    3f8c:	e002      	b.n	3f94 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	68ba      	ldr	r2, [r7, #8]
    3f92:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3f94:	68bb      	ldr	r3, [r7, #8]
    3f96:	041b      	lsls	r3, r3, #16
    3f98:	0c1b      	lsrs	r3, r3, #16
    3f9a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3f9c:	68bb      	ldr	r3, [r7, #8]
    3f9e:	0c1b      	lsrs	r3, r3, #16
    3fa0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3fa2:	69ba      	ldr	r2, [r7, #24]
    3fa4:	69fb      	ldr	r3, [r7, #28]
    3fa6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3fa8:	22a0      	movs	r2, #160	; 0xa0
    3faa:	05d2      	lsls	r2, r2, #23
    3fac:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3fae:	68fb      	ldr	r3, [r7, #12]
    3fb0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3fb2:	697a      	ldr	r2, [r7, #20]
    3fb4:	69fb      	ldr	r3, [r7, #28]
    3fb6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3fb8:	22d0      	movs	r2, #208	; 0xd0
    3fba:	0612      	lsls	r2, r2, #24
    3fbc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3fbe:	68fb      	ldr	r3, [r7, #12]
    3fc0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	78db      	ldrb	r3, [r3, #3]
    3fc6:	2201      	movs	r2, #1
    3fc8:	4053      	eors	r3, r2
    3fca:	b2db      	uxtb	r3, r3
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d01a      	beq.n	4006 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3fd0:	69fa      	ldr	r2, [r7, #28]
    3fd2:	2380      	movs	r3, #128	; 0x80
    3fd4:	02db      	lsls	r3, r3, #11
    3fd6:	4013      	ands	r3, r2
    3fd8:	d00a      	beq.n	3ff0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	789b      	ldrb	r3, [r3, #2]
    3fde:	2b01      	cmp	r3, #1
    3fe0:	d103      	bne.n	3fea <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3fe2:	68fb      	ldr	r3, [r7, #12]
    3fe4:	68ba      	ldr	r2, [r7, #8]
    3fe6:	619a      	str	r2, [r3, #24]
    3fe8:	e002      	b.n	3ff0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3fea:	68fb      	ldr	r3, [r7, #12]
    3fec:	68ba      	ldr	r2, [r7, #8]
    3fee:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	785b      	ldrb	r3, [r3, #1]
    3ff4:	2b01      	cmp	r3, #1
    3ff6:	d003      	beq.n	4000 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ffc:	2b02      	cmp	r3, #2
    3ffe:	d102      	bne.n	4006 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4000:	68fb      	ldr	r3, [r7, #12]
    4002:	68ba      	ldr	r2, [r7, #8]
    4004:	609a      	str	r2, [r3, #8]
		}
	}
}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	46bd      	mov	sp, r7
    400a:	b008      	add	sp, #32
    400c:	bd80      	pop	{r7, pc}
    400e:	46c0      	nop			; (mov r8, r8)
    4010:	fffbffff 	.word	0xfffbffff

00004014 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4014:	b580      	push	{r7, lr}
    4016:	b084      	sub	sp, #16
    4018:	af00      	add	r7, sp, #0
    401a:	0002      	movs	r2, r0
    401c:	6039      	str	r1, [r7, #0]
    401e:	1dfb      	adds	r3, r7, #7
    4020:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4022:	1dfb      	adds	r3, r7, #7
    4024:	781b      	ldrb	r3, [r3, #0]
    4026:	0018      	movs	r0, r3
    4028:	4b0a      	ldr	r3, [pc, #40]	; (4054 <system_pinmux_pin_set_config+0x40>)
    402a:	4798      	blx	r3
    402c:	0003      	movs	r3, r0
    402e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4030:	1dfb      	adds	r3, r7, #7
    4032:	781b      	ldrb	r3, [r3, #0]
    4034:	221f      	movs	r2, #31
    4036:	4013      	ands	r3, r2
    4038:	2201      	movs	r2, #1
    403a:	409a      	lsls	r2, r3
    403c:	0013      	movs	r3, r2
    403e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4040:	683a      	ldr	r2, [r7, #0]
    4042:	68b9      	ldr	r1, [r7, #8]
    4044:	68fb      	ldr	r3, [r7, #12]
    4046:	0018      	movs	r0, r3
    4048:	4b03      	ldr	r3, [pc, #12]	; (4058 <system_pinmux_pin_set_config+0x44>)
    404a:	4798      	blx	r3
}
    404c:	46c0      	nop			; (mov r8, r8)
    404e:	46bd      	mov	sp, r7
    4050:	b004      	add	sp, #16
    4052:	bd80      	pop	{r7, pc}
    4054:	00003ea5 	.word	0x00003ea5
    4058:	00003f05 	.word	0x00003f05

0000405c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    405c:	b580      	push	{r7, lr}
    405e:	af00      	add	r7, sp, #0
	return;
    4060:	46c0      	nop			; (mov r8, r8)
}
    4062:	46bd      	mov	sp, r7
    4064:	bd80      	pop	{r7, pc}
	...

00004068 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4068:	b580      	push	{r7, lr}
    406a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    406c:	4b06      	ldr	r3, [pc, #24]	; (4088 <system_init+0x20>)
    406e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4070:	4b06      	ldr	r3, [pc, #24]	; (408c <system_init+0x24>)
    4072:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4074:	4b06      	ldr	r3, [pc, #24]	; (4090 <system_init+0x28>)
    4076:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4078:	4b06      	ldr	r3, [pc, #24]	; (4094 <system_init+0x2c>)
    407a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    407c:	4b06      	ldr	r3, [pc, #24]	; (4098 <system_init+0x30>)
    407e:	4798      	blx	r3
}
    4080:	46c0      	nop			; (mov r8, r8)
    4082:	46bd      	mov	sp, r7
    4084:	bd80      	pop	{r7, pc}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	0000394d 	.word	0x0000394d
    408c:	00003611 	.word	0x00003611
    4090:	0000405d 	.word	0x0000405d
    4094:	0000405d 	.word	0x0000405d
    4098:	0000405d 	.word	0x0000405d

0000409c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    409c:	b580      	push	{r7, lr}
    409e:	b082      	sub	sp, #8
    40a0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    40a2:	4b19      	ldr	r3, [pc, #100]	; (4108 <Reset_Handler+0x6c>)
    40a4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    40a6:	4b19      	ldr	r3, [pc, #100]	; (410c <Reset_Handler+0x70>)
    40a8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    40aa:	687a      	ldr	r2, [r7, #4]
    40ac:	683b      	ldr	r3, [r7, #0]
    40ae:	429a      	cmp	r2, r3
    40b0:	d00c      	beq.n	40cc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    40b2:	e007      	b.n	40c4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    40b4:	683b      	ldr	r3, [r7, #0]
    40b6:	1d1a      	adds	r2, r3, #4
    40b8:	603a      	str	r2, [r7, #0]
    40ba:	687a      	ldr	r2, [r7, #4]
    40bc:	1d11      	adds	r1, r2, #4
    40be:	6079      	str	r1, [r7, #4]
    40c0:	6812      	ldr	r2, [r2, #0]
    40c2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    40c4:	683a      	ldr	r2, [r7, #0]
    40c6:	4b12      	ldr	r3, [pc, #72]	; (4110 <Reset_Handler+0x74>)
    40c8:	429a      	cmp	r2, r3
    40ca:	d3f3      	bcc.n	40b4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    40cc:	4b11      	ldr	r3, [pc, #68]	; (4114 <Reset_Handler+0x78>)
    40ce:	603b      	str	r3, [r7, #0]
    40d0:	e004      	b.n	40dc <Reset_Handler+0x40>
                *pDest++ = 0;
    40d2:	683b      	ldr	r3, [r7, #0]
    40d4:	1d1a      	adds	r2, r3, #4
    40d6:	603a      	str	r2, [r7, #0]
    40d8:	2200      	movs	r2, #0
    40da:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    40dc:	683a      	ldr	r2, [r7, #0]
    40de:	4b0e      	ldr	r3, [pc, #56]	; (4118 <Reset_Handler+0x7c>)
    40e0:	429a      	cmp	r2, r3
    40e2:	d3f6      	bcc.n	40d2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    40e4:	4b0d      	ldr	r3, [pc, #52]	; (411c <Reset_Handler+0x80>)
    40e6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    40e8:	4b0d      	ldr	r3, [pc, #52]	; (4120 <Reset_Handler+0x84>)
    40ea:	687a      	ldr	r2, [r7, #4]
    40ec:	21ff      	movs	r1, #255	; 0xff
    40ee:	438a      	bics	r2, r1
    40f0:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    40f2:	4a0c      	ldr	r2, [pc, #48]	; (4124 <Reset_Handler+0x88>)
    40f4:	6853      	ldr	r3, [r2, #4]
    40f6:	2180      	movs	r1, #128	; 0x80
    40f8:	430b      	orrs	r3, r1
    40fa:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    40fc:	4b0a      	ldr	r3, [pc, #40]	; (4128 <Reset_Handler+0x8c>)
    40fe:	4798      	blx	r3

        /* Branch to main function */
        main();
    4100:	4b0a      	ldr	r3, [pc, #40]	; (412c <Reset_Handler+0x90>)
    4102:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4104:	e7fe      	b.n	4104 <Reset_Handler+0x68>
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	00006a6c 	.word	0x00006a6c
    410c:	20000000 	.word	0x20000000
    4110:	20000010 	.word	0x20000010
    4114:	20000010 	.word	0x20000010
    4118:	2000013c 	.word	0x2000013c
    411c:	00000000 	.word	0x00000000
    4120:	e000ed00 	.word	0xe000ed00
    4124:	41004000 	.word	0x41004000
    4128:	000066e9 	.word	0x000066e9
    412c:	00004319 	.word	0x00004319

00004130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4130:	b580      	push	{r7, lr}
    4132:	af00      	add	r7, sp, #0
        while (1) {
    4134:	e7fe      	b.n	4134 <Dummy_Handler+0x4>

00004136 <system_voltage_regulator_get_config_defaults>:
{
    4136:	b580      	push	{r7, lr}
    4138:	b082      	sub	sp, #8
    413a:	af00      	add	r7, sp, #0
    413c:	6078      	str	r0, [r7, #4]
	config->voltage_scale_period = 0;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	2200      	movs	r2, #0
    4142:	701a      	strb	r2, [r3, #0]
	config->voltage_scale_step   = 0;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2200      	movs	r2, #0
    4148:	705a      	strb	r2, [r3, #1]
	config->run_in_standby       = false;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	2200      	movs	r2, #0
    414e:	709a      	strb	r2, [r3, #2]
	config->regulator_sel        = SYSTEM_VOLTAGE_REGULATOR_LDO;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	2200      	movs	r2, #0
    4154:	70da      	strb	r2, [r3, #3]
	config->low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_DEFAULT;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	2200      	movs	r2, #0
    415a:	711a      	strb	r2, [r3, #4]
	config->run_in_standby_pl0   = false;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	2200      	movs	r2, #0
    4160:	715a      	strb	r2, [r3, #5]
}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	46bd      	mov	sp, r7
    4166:	b002      	add	sp, #8
    4168:	bd80      	pop	{r7, pc}
	...

0000416c <system_voltage_regulator_set_config>:
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
	SUPC->VREG.bit.VSPER    = config->voltage_scale_period;
    4174:	4a2b      	ldr	r2, [pc, #172]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	7819      	ldrb	r1, [r3, #0]
    417a:	6993      	ldr	r3, [r2, #24]
    417c:	0609      	lsls	r1, r1, #24
    417e:	021b      	lsls	r3, r3, #8
    4180:	0a1b      	lsrs	r3, r3, #8
    4182:	430b      	orrs	r3, r1
    4184:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.VSVSTEP  = config->voltage_scale_step;
    4186:	4a27      	ldr	r2, [pc, #156]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	785b      	ldrb	r3, [r3, #1]
    418c:	1c19      	adds	r1, r3, #0
    418e:	230f      	movs	r3, #15
    4190:	400b      	ands	r3, r1
    4192:	b2d9      	uxtb	r1, r3
    4194:	6993      	ldr	r3, [r2, #24]
    4196:	200f      	movs	r0, #15
    4198:	4001      	ands	r1, r0
    419a:	0409      	lsls	r1, r1, #16
    419c:	4822      	ldr	r0, [pc, #136]	; (4228 <system_voltage_regulator_set_config+0xbc>)
    419e:	4003      	ands	r3, r0
    41a0:	430b      	orrs	r3, r1
    41a2:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.RUNSTDBY = config->run_in_standby;
    41a4:	4a1f      	ldr	r2, [pc, #124]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	7899      	ldrb	r1, [r3, #2]
    41aa:	6993      	ldr	r3, [r2, #24]
    41ac:	2001      	movs	r0, #1
    41ae:	4001      	ands	r1, r0
    41b0:	0189      	lsls	r1, r1, #6
    41b2:	2040      	movs	r0, #64	; 0x40
    41b4:	4383      	bics	r3, r0
    41b6:	430b      	orrs	r3, r1
    41b8:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.SEL      = config->regulator_sel;
    41ba:	4a1a      	ldr	r2, [pc, #104]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	78db      	ldrb	r3, [r3, #3]
    41c0:	1c19      	adds	r1, r3, #0
    41c2:	2303      	movs	r3, #3
    41c4:	400b      	ands	r3, r1
    41c6:	b2d9      	uxtb	r1, r3
    41c8:	6993      	ldr	r3, [r2, #24]
    41ca:	2003      	movs	r0, #3
    41cc:	4001      	ands	r1, r0
    41ce:	0089      	lsls	r1, r1, #2
    41d0:	200c      	movs	r0, #12
    41d2:	4383      	bics	r3, r0
    41d4:	430b      	orrs	r3, r1
    41d6:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.LPEFF    = config->low_power_efficiency;
    41d8:	4a12      	ldr	r2, [pc, #72]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	791b      	ldrb	r3, [r3, #4]
    41de:	1c19      	adds	r1, r3, #0
    41e0:	2301      	movs	r3, #1
    41e2:	400b      	ands	r3, r1
    41e4:	b2d9      	uxtb	r1, r3
    41e6:	6993      	ldr	r3, [r2, #24]
    41e8:	2001      	movs	r0, #1
    41ea:	4001      	ands	r1, r0
    41ec:	0209      	lsls	r1, r1, #8
    41ee:	480f      	ldr	r0, [pc, #60]	; (422c <system_voltage_regulator_set_config+0xc0>)
    41f0:	4003      	ands	r3, r0
    41f2:	430b      	orrs	r3, r1
    41f4:	6193      	str	r3, [r2, #24]
	SUPC->VREG.bit.STDBYPL0 = config->run_in_standby_pl0;
    41f6:	4a0b      	ldr	r2, [pc, #44]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	7959      	ldrb	r1, [r3, #5]
    41fc:	6993      	ldr	r3, [r2, #24]
    41fe:	2001      	movs	r0, #1
    4200:	4001      	ands	r1, r0
    4202:	0149      	lsls	r1, r1, #5
    4204:	2020      	movs	r0, #32
    4206:	4383      	bics	r3, r0
    4208:	430b      	orrs	r3, r1
    420a:	6193      	str	r3, [r2, #24]
	while(!(SUPC->STATUS.reg & SUPC_STATUS_VREGRDY)) {
    420c:	46c0      	nop			; (mov r8, r8)
    420e:	4b05      	ldr	r3, [pc, #20]	; (4224 <system_voltage_regulator_set_config+0xb8>)
    4210:	68da      	ldr	r2, [r3, #12]
    4212:	2380      	movs	r3, #128	; 0x80
    4214:	005b      	lsls	r3, r3, #1
    4216:	4013      	ands	r3, r2
    4218:	d0f9      	beq.n	420e <system_voltage_regulator_set_config+0xa2>
}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	46bd      	mov	sp, r7
    421e:	b002      	add	sp, #8
    4220:	bd80      	pop	{r7, pc}
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	40001400 	.word	0x40001400
    4228:	fff0ffff 	.word	0xfff0ffff
    422c:	fffffeff 	.word	0xfffffeff

00004230 <system_switch_performance_level>:
{
    4230:	b580      	push	{r7, lr}
    4232:	b082      	sub	sp, #8
    4234:	af00      	add	r7, sp, #0
    4236:	0002      	movs	r2, r0
    4238:	1dfb      	adds	r3, r7, #7
    423a:	701a      	strb	r2, [r3, #0]
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    423c:	2380      	movs	r3, #128	; 0x80
    423e:	05db      	lsls	r3, r3, #23
    4240:	789b      	ldrb	r3, [r3, #2]
    4242:	b2db      	uxtb	r3, r3
    4244:	1dfa      	adds	r2, r7, #7
    4246:	7812      	ldrb	r2, [r2, #0]
    4248:	429a      	cmp	r2, r3
    424a:	d101      	bne.n	4250 <system_switch_performance_level+0x20>
		return STATUS_OK;
    424c:	2300      	movs	r3, #0
    424e:	e019      	b.n	4284 <system_switch_performance_level+0x54>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    4250:	2380      	movs	r3, #128	; 0x80
    4252:	05db      	lsls	r3, r3, #23
    4254:	789b      	ldrb	r3, [r3, #2]
    4256:	b2db      	uxtb	r3, r3
    4258:	b25b      	sxtb	r3, r3
    425a:	2b00      	cmp	r3, #0
    425c:	da01      	bge.n	4262 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    425e:	2317      	movs	r3, #23
    4260:	e010      	b.n	4284 <system_switch_performance_level+0x54>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    4262:	2380      	movs	r3, #128	; 0x80
    4264:	05db      	lsls	r3, r3, #23
    4266:	2201      	movs	r2, #1
    4268:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    426a:	2380      	movs	r3, #128	; 0x80
    426c:	05db      	lsls	r3, r3, #23
    426e:	1dfa      	adds	r2, r7, #7
    4270:	7812      	ldrb	r2, [r2, #0]
    4272:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    4274:	46c0      	nop			; (mov r8, r8)
    4276:	2380      	movs	r3, #128	; 0x80
    4278:	05db      	lsls	r3, r3, #23
    427a:	799b      	ldrb	r3, [r3, #6]
    427c:	b2db      	uxtb	r3, r3
    427e:	2b00      	cmp	r3, #0
    4280:	d0f9      	beq.n	4276 <system_switch_performance_level+0x46>
	return STATUS_OK;
    4282:	2300      	movs	r3, #0
}
    4284:	0018      	movs	r0, r3
    4286:	46bd      	mov	sp, r7
    4288:	b002      	add	sp, #8
    428a:	bd80      	pop	{r7, pc}

0000428c <system_performance_level_disable>:
 * \brief Disable performance level switch.
 *
 * Disable performance level switch.
 */
static inline void system_performance_level_disable(void)
{
    428c:	b580      	push	{r7, lr}
    428e:	af00      	add	r7, sp, #0
	PM->PLCFG.reg |= PM_PLCFG_PLDIS;
    4290:	2380      	movs	r3, #128	; 0x80
    4292:	05db      	lsls	r3, r3, #23
    4294:	2280      	movs	r2, #128	; 0x80
    4296:	05d2      	lsls	r2, r2, #23
    4298:	7892      	ldrb	r2, [r2, #2]
    429a:	b2d2      	uxtb	r2, r2
    429c:	2180      	movs	r1, #128	; 0x80
    429e:	4249      	negs	r1, r1
    42a0:	430a      	orrs	r2, r1
    42a2:	b2d2      	uxtb	r2, r2
    42a4:	709a      	strb	r2, [r3, #2]
}
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	46bd      	mov	sp, r7
    42aa:	bd80      	pop	{r7, pc}

000042ac <system_interrupt_enable_global>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    42b0:	4b04      	ldr	r3, [pc, #16]	; (42c4 <system_interrupt_enable_global+0x18>)
    42b2:	2201      	movs	r2, #1
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	f3bf 8f5f 	dmb	sy
    42ba:	b662      	cpsie	i
}
    42bc:	46c0      	nop			; (mov r8, r8)
    42be:	46bd      	mov	sp, r7
    42c0:	bd80      	pop	{r7, pc}
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	2000000c 	.word	0x2000000c

000042c8 <bod33_disable>:
 * \return Error code indicating the status of the disable operation.
 *
 * \retval STATUS_OK               If the BOD33 was successfully disabled
 */
static inline enum status_code bod33_disable(void)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	af00      	add	r7, sp, #0
	SUPC->INTENCLR.reg = SUPC_INTENCLR_BOD33RDY | SUPC_INTENCLR_BOD33DET | SUPC_INTENCLR_B33SRDY;
    42cc:	4b07      	ldr	r3, [pc, #28]	; (42ec <bod33_disable+0x24>)
    42ce:	2207      	movs	r2, #7
    42d0:	601a      	str	r2, [r3, #0]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET | SUPC_INTFLAG_B33SRDY;
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <bod33_disable+0x24>)
    42d4:	2207      	movs	r2, #7
    42d6:	609a      	str	r2, [r3, #8]
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    42d8:	4b04      	ldr	r3, [pc, #16]	; (42ec <bod33_disable+0x24>)
    42da:	4a04      	ldr	r2, [pc, #16]	; (42ec <bod33_disable+0x24>)
    42dc:	6912      	ldr	r2, [r2, #16]
    42de:	2102      	movs	r1, #2
    42e0:	438a      	bics	r2, r1
    42e2:	611a      	str	r2, [r3, #16]
	return STATUS_OK;
    42e4:	2300      	movs	r3, #0
}
    42e6:	0018      	movs	r0, r3
    42e8:	46bd      	mov	sp, r7
    42ea:	bd80      	pop	{r7, pc}
    42ec:	40001400 	.word	0x40001400

000042f0 <bod12_disable>:
 * \return Error code indicating the status of the disable operation.
 *
 * \retval STATUS_OK               If the BOD12 was successfully disabled
 */
static inline enum status_code bod12_disable(void)
{
    42f0:	b580      	push	{r7, lr}
    42f2:	af00      	add	r7, sp, #0
	SUPC->INTENCLR.reg = SUPC_INTENCLR_BOD12RDY | SUPC_INTENCLR_BOD12DET | SUPC_INTENCLR_B12SRDY;
    42f4:	4b07      	ldr	r3, [pc, #28]	; (4314 <bod12_disable+0x24>)
    42f6:	2238      	movs	r2, #56	; 0x38
    42f8:	601a      	str	r2, [r3, #0]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD12RDY | SUPC_INTFLAG_BOD12DET | SUPC_INTFLAG_B12SRDY;
    42fa:	4b06      	ldr	r3, [pc, #24]	; (4314 <bod12_disable+0x24>)
    42fc:	2238      	movs	r2, #56	; 0x38
    42fe:	609a      	str	r2, [r3, #8]
	SUPC->BOD12.reg &= ~SUPC_BOD12_ENABLE;
    4300:	4b04      	ldr	r3, [pc, #16]	; (4314 <bod12_disable+0x24>)
    4302:	4a04      	ldr	r2, [pc, #16]	; (4314 <bod12_disable+0x24>)
    4304:	6952      	ldr	r2, [r2, #20]
    4306:	2102      	movs	r1, #2
    4308:	438a      	bics	r2, r1
    430a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    430c:	2300      	movs	r3, #0
}
    430e:	0018      	movs	r0, r3
    4310:	46bd      	mov	sp, r7
    4312:	bd80      	pop	{r7, pc}
    4314:	40001400 	.word	0x40001400

00004318 <main>:
#include "sensor/bmp280.h"
#include "lib/rtc_interface.h"
#include "lib/adc_interface.h"

int main (void)
{
    4318:	b5f0      	push	{r4, r5, r6, r7, lr}
    431a:	b091      	sub	sp, #68	; 0x44
    431c:	af00      	add	r7, sp, #0
	system_init();
    431e:	4b69      	ldr	r3, [pc, #420]	; (44c4 <main+0x1ac>)
    4320:	4798      	blx	r3
	delay_init();
    4322:	4b69      	ldr	r3, [pc, #420]	; (44c8 <main+0x1b0>)
    4324:	4798      	blx	r3
	system_interrupt_enable_global();
    4326:	4b69      	ldr	r3, [pc, #420]	; (44cc <main+0x1b4>)
    4328:	4798      	blx	r3

	delay_ms(50);
    432a:	2000      	movs	r0, #0
    432c:	4b68      	ldr	r3, [pc, #416]	; (44d0 <main+0x1b8>)
    432e:	4798      	blx	r3
    4330:	0003      	movs	r3, r0
    4332:	613b      	str	r3, [r7, #16]
    4334:	2300      	movs	r3, #0
    4336:	617b      	str	r3, [r7, #20]
    4338:	4c66      	ldr	r4, [pc, #408]	; (44d4 <main+0x1bc>)
    433a:	2232      	movs	r2, #50	; 0x32
    433c:	2300      	movs	r3, #0
    433e:	6938      	ldr	r0, [r7, #16]
    4340:	6979      	ldr	r1, [r7, #20]
    4342:	47a0      	blx	r4
    4344:	0003      	movs	r3, r0
    4346:	000c      	movs	r4, r1
    4348:	0019      	movs	r1, r3
    434a:	0022      	movs	r2, r4
    434c:	4b62      	ldr	r3, [pc, #392]	; (44d8 <main+0x1c0>)
    434e:	2400      	movs	r4, #0
    4350:	18c9      	adds	r1, r1, r3
    4352:	4162      	adcs	r2, r4
    4354:	0008      	movs	r0, r1
    4356:	0011      	movs	r1, r2
    4358:	4c60      	ldr	r4, [pc, #384]	; (44dc <main+0x1c4>)
    435a:	4a61      	ldr	r2, [pc, #388]	; (44e0 <main+0x1c8>)
    435c:	2300      	movs	r3, #0
    435e:	47a0      	blx	r4
    4360:	0003      	movs	r3, r0
    4362:	000c      	movs	r4, r1
    4364:	0018      	movs	r0, r3
    4366:	4b5f      	ldr	r3, [pc, #380]	; (44e4 <main+0x1cc>)
    4368:	4798      	blx	r3

	// Set up to performance level 0, buck converter
	// Clock must be <12MHz, other clocks must meet specs in datasheet
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    436a:	2000      	movs	r0, #0
    436c:	4b5e      	ldr	r3, [pc, #376]	; (44e8 <main+0x1d0>)
    436e:	4798      	blx	r3
	system_performance_level_disable(); // Lock into PL0
    4370:	4b5e      	ldr	r3, [pc, #376]	; (44ec <main+0x1d4>)
    4372:	4798      	blx	r3

	struct system_voltage_regulator_config vreg_config;
	system_voltage_regulator_get_config_defaults(&vreg_config);
    4374:	2318      	movs	r3, #24
    4376:	2218      	movs	r2, #24
    4378:	4694      	mov	ip, r2
    437a:	44bc      	add	ip, r7
    437c:	4463      	add	r3, ip
    437e:	0018      	movs	r0, r3
    4380:	4b5b      	ldr	r3, [pc, #364]	; (44f0 <main+0x1d8>)
    4382:	4798      	blx	r3
	vreg_config.regulator_sel = SYSTEM_VOLTAGE_REGULATOR_BUCK;
    4384:	2318      	movs	r3, #24
    4386:	2218      	movs	r2, #24
    4388:	4694      	mov	ip, r2
    438a:	44bc      	add	ip, r7
    438c:	4463      	add	r3, ip
    438e:	2201      	movs	r2, #1
    4390:	70da      	strb	r2, [r3, #3]
	vreg_config.low_power_efficiency = SYSTEM_VOLTAGE_REGULATOR_LOW_POWER_EFFICIENCY_HIGHTEST; // Higher efficiency, runs 2.5-3.6V only
    4392:	2318      	movs	r3, #24
    4394:	2218      	movs	r2, #24
    4396:	4694      	mov	ip, r2
    4398:	44bc      	add	ip, r7
    439a:	4463      	add	r3, ip
    439c:	2201      	movs	r2, #1
    439e:	711a      	strb	r2, [r3, #4]
	vreg_config.run_in_standby_pl0 = true;
    43a0:	2318      	movs	r3, #24
    43a2:	2218      	movs	r2, #24
    43a4:	4694      	mov	ip, r2
    43a6:	44bc      	add	ip, r7
    43a8:	4463      	add	r3, ip
    43aa:	2201      	movs	r2, #1
    43ac:	715a      	strb	r2, [r3, #5]
	system_voltage_regulator_set_config(&vreg_config);
    43ae:	2318      	movs	r3, #24
    43b0:	2218      	movs	r2, #24
    43b2:	4694      	mov	ip, r2
    43b4:	44bc      	add	ip, r7
    43b6:	4463      	add	r3, ip
    43b8:	0018      	movs	r0, r3
    43ba:	4b4e      	ldr	r3, [pc, #312]	; (44f4 <main+0x1dc>)
    43bc:	4798      	blx	r3

	bod33_disable();
    43be:	4b4e      	ldr	r3, [pc, #312]	; (44f8 <main+0x1e0>)
    43c0:	4798      	blx	r3
	bod12_disable();
    43c2:	4b4e      	ldr	r3, [pc, #312]	; (44fc <main+0x1e4>)
    43c4:	4798      	blx	r3
	rtc_init();
    43c6:	4b4e      	ldr	r3, [pc, #312]	; (4500 <main+0x1e8>)
    43c8:	4798      	blx	r3
	adc_interface_init();
    43ca:	4b4e      	ldr	r3, [pc, #312]	; (4504 <main+0x1ec>)
    43cc:	4798      	blx	r3

	i2c_interface_init();
    43ce:	4b4e      	ldr	r3, [pc, #312]	; (4508 <main+0x1f0>)
    43d0:	4798      	blx	r3
	init_lis3dh();
    43d2:	4b4e      	ldr	r3, [pc, #312]	; (450c <main+0x1f4>)
    43d4:	4798      	blx	r3
	init_bmp280();
    43d6:	4b4e      	ldr	r3, [pc, #312]	; (4510 <main+0x1f8>)
    43d8:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	int32_t i;
	for(;;)
	{	
		uint32_t delay_time = 5000;
    43da:	4b4e      	ldr	r3, [pc, #312]	; (4514 <main+0x1fc>)
    43dc:	63bb      	str	r3, [r7, #56]	; 0x38
		if((i+1) % 3 == 0)
    43de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43e0:	1c5a      	adds	r2, r3, #1
    43e2:	4b4d      	ldr	r3, [pc, #308]	; (4518 <main+0x200>)
    43e4:	2103      	movs	r1, #3
    43e6:	0010      	movs	r0, r2
    43e8:	4798      	blx	r3
    43ea:	1e0b      	subs	r3, r1, #0
    43ec:	d104      	bne.n	43f8 <main+0xe0>
		{
			rtc_standby_delay(delay_time);
    43ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43f0:	0018      	movs	r0, r3
    43f2:	4b4a      	ldr	r3, [pc, #296]	; (451c <main+0x204>)
    43f4:	4798      	blx	r3
    43f6:	e04a      	b.n	448e <main+0x176>
		}
		else if((i+2) % 3 == 0)
    43f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43fa:	1c9a      	adds	r2, r3, #2
    43fc:	4b46      	ldr	r3, [pc, #280]	; (4518 <main+0x200>)
    43fe:	2103      	movs	r1, #3
    4400:	0010      	movs	r0, r2
    4402:	4798      	blx	r3
    4404:	1e0b      	subs	r3, r1, #0
    4406:	d104      	bne.n	4412 <main+0xfa>
		{
			rtc_idle_delay(delay_time);
    4408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    440a:	0018      	movs	r0, r3
    440c:	4b44      	ldr	r3, [pc, #272]	; (4520 <main+0x208>)
    440e:	4798      	blx	r3
    4410:	e03d      	b.n	448e <main+0x176>
		}
		else
		{
			delay_ms(delay_time);
    4412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4414:	2b00      	cmp	r3, #0
    4416:	d024      	beq.n	4462 <main+0x14a>
    4418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    441a:	60bb      	str	r3, [r7, #8]
    441c:	2300      	movs	r3, #0
    441e:	60fb      	str	r3, [r7, #12]
    4420:	2000      	movs	r0, #0
    4422:	4b2b      	ldr	r3, [pc, #172]	; (44d0 <main+0x1b8>)
    4424:	4798      	blx	r3
    4426:	0003      	movs	r3, r0
    4428:	603b      	str	r3, [r7, #0]
    442a:	2300      	movs	r3, #0
    442c:	607b      	str	r3, [r7, #4]
    442e:	4c29      	ldr	r4, [pc, #164]	; (44d4 <main+0x1bc>)
    4430:	683a      	ldr	r2, [r7, #0]
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	68b8      	ldr	r0, [r7, #8]
    4436:	68f9      	ldr	r1, [r7, #12]
    4438:	47a0      	blx	r4
    443a:	0003      	movs	r3, r0
    443c:	000c      	movs	r4, r1
    443e:	0019      	movs	r1, r3
    4440:	0022      	movs	r2, r4
    4442:	4b25      	ldr	r3, [pc, #148]	; (44d8 <main+0x1c0>)
    4444:	2400      	movs	r4, #0
    4446:	18c9      	adds	r1, r1, r3
    4448:	4162      	adcs	r2, r4
    444a:	0008      	movs	r0, r1
    444c:	0011      	movs	r1, r2
    444e:	4c23      	ldr	r4, [pc, #140]	; (44dc <main+0x1c4>)
    4450:	4a23      	ldr	r2, [pc, #140]	; (44e0 <main+0x1c8>)
    4452:	2300      	movs	r3, #0
    4454:	47a0      	blx	r4
    4456:	0003      	movs	r3, r0
    4458:	000c      	movs	r4, r1
    445a:	0018      	movs	r0, r3
    445c:	4b21      	ldr	r3, [pc, #132]	; (44e4 <main+0x1cc>)
    445e:	4798      	blx	r3
    4460:	e015      	b.n	448e <main+0x176>
    4462:	2000      	movs	r0, #0
    4464:	4b1a      	ldr	r3, [pc, #104]	; (44d0 <main+0x1b8>)
    4466:	4798      	blx	r3
    4468:	0003      	movs	r3, r0
    446a:	001d      	movs	r5, r3
    446c:	2300      	movs	r3, #0
    446e:	001e      	movs	r6, r3
    4470:	4b2c      	ldr	r3, [pc, #176]	; (4524 <main+0x20c>)
    4472:	2400      	movs	r4, #0
    4474:	195b      	adds	r3, r3, r5
    4476:	4174      	adcs	r4, r6
    4478:	0018      	movs	r0, r3
    447a:	0021      	movs	r1, r4
    447c:	4c17      	ldr	r4, [pc, #92]	; (44dc <main+0x1c4>)
    447e:	4a2a      	ldr	r2, [pc, #168]	; (4528 <main+0x210>)
    4480:	2300      	movs	r3, #0
    4482:	47a0      	blx	r4
    4484:	0003      	movs	r3, r0
    4486:	000c      	movs	r4, r1
    4488:	0018      	movs	r0, r3
    448a:	4b16      	ldr	r3, [pc, #88]	; (44e4 <main+0x1cc>)
    448c:	4798      	blx	r3
		}
		lis3dh_data_g_t accel_data;
		read_lis3dh_g(&accel_data);
    448e:	230c      	movs	r3, #12
    4490:	2218      	movs	r2, #24
    4492:	4694      	mov	ip, r2
    4494:	44bc      	add	ip, r7
    4496:	4463      	add	r3, ip
    4498:	0018      	movs	r0, r3
    449a:	4b24      	ldr	r3, [pc, #144]	; (452c <main+0x214>)
    449c:	4798      	blx	r3

		bmp280_meas_t baro_data;
		read_bmp280(&baro_data);
    449e:	231c      	movs	r3, #28
    44a0:	18fb      	adds	r3, r7, r3
    44a2:	0018      	movs	r0, r3
    44a4:	4b22      	ldr	r3, [pc, #136]	; (4530 <main+0x218>)
    44a6:	4798      	blx	r3

		uint16_t adc_value = adc_interface_read_pin(A0_PIN);
    44a8:	231e      	movs	r3, #30
    44aa:	2218      	movs	r2, #24
    44ac:	18ba      	adds	r2, r7, r2
    44ae:	18d4      	adds	r4, r2, r3
    44b0:	2002      	movs	r0, #2
    44b2:	4b20      	ldr	r3, [pc, #128]	; (4534 <main+0x21c>)
    44b4:	4798      	blx	r3
    44b6:	0003      	movs	r3, r0
    44b8:	8023      	strh	r3, [r4, #0]

		i++;
    44ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    44bc:	3301      	adds	r3, #1
    44be:	63fb      	str	r3, [r7, #60]	; 0x3c
	{	
    44c0:	e78b      	b.n	43da <main+0xc2>
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	00004069 	.word	0x00004069
    44c8:	00003491 	.word	0x00003491
    44cc:	000042ad 	.word	0x000042ad
    44d0:	00003ca1 	.word	0x00003ca1
    44d4:	000048ad 	.word	0x000048ad
    44d8:	00001b57 	.word	0x00001b57
    44dc:	0000486d 	.word	0x0000486d
    44e0:	00001b58 	.word	0x00001b58
    44e4:	20000001 	.word	0x20000001
    44e8:	00004231 	.word	0x00004231
    44ec:	0000428d 	.word	0x0000428d
    44f0:	00004137 	.word	0x00004137
    44f4:	0000416d 	.word	0x0000416d
    44f8:	000042c9 	.word	0x000042c9
    44fc:	000042f1 	.word	0x000042f1
    4500:	000023a1 	.word	0x000023a1
    4504:	00002175 	.word	0x00002175
    4508:	00002da9 	.word	0x00002da9
    450c:	00003001 	.word	0x00003001
    4510:	00002601 	.word	0x00002601
    4514:	00001388 	.word	0x00001388
    4518:	00004819 	.word	0x00004819
    451c:	00002465 	.word	0x00002465
    4520:	00002409 	.word	0x00002409
    4524:	006acfbf 	.word	0x006acfbf
    4528:	006acfc0 	.word	0x006acfc0
    452c:	000030e9 	.word	0x000030e9
    4530:	00002b35 	.word	0x00002b35
    4534:	000021d5 	.word	0x000021d5

00004538 <__udivsi3>:
    4538:	2200      	movs	r2, #0
    453a:	0843      	lsrs	r3, r0, #1
    453c:	428b      	cmp	r3, r1
    453e:	d374      	bcc.n	462a <__udivsi3+0xf2>
    4540:	0903      	lsrs	r3, r0, #4
    4542:	428b      	cmp	r3, r1
    4544:	d35f      	bcc.n	4606 <__udivsi3+0xce>
    4546:	0a03      	lsrs	r3, r0, #8
    4548:	428b      	cmp	r3, r1
    454a:	d344      	bcc.n	45d6 <__udivsi3+0x9e>
    454c:	0b03      	lsrs	r3, r0, #12
    454e:	428b      	cmp	r3, r1
    4550:	d328      	bcc.n	45a4 <__udivsi3+0x6c>
    4552:	0c03      	lsrs	r3, r0, #16
    4554:	428b      	cmp	r3, r1
    4556:	d30d      	bcc.n	4574 <__udivsi3+0x3c>
    4558:	22ff      	movs	r2, #255	; 0xff
    455a:	0209      	lsls	r1, r1, #8
    455c:	ba12      	rev	r2, r2
    455e:	0c03      	lsrs	r3, r0, #16
    4560:	428b      	cmp	r3, r1
    4562:	d302      	bcc.n	456a <__udivsi3+0x32>
    4564:	1212      	asrs	r2, r2, #8
    4566:	0209      	lsls	r1, r1, #8
    4568:	d065      	beq.n	4636 <__udivsi3+0xfe>
    456a:	0b03      	lsrs	r3, r0, #12
    456c:	428b      	cmp	r3, r1
    456e:	d319      	bcc.n	45a4 <__udivsi3+0x6c>
    4570:	e000      	b.n	4574 <__udivsi3+0x3c>
    4572:	0a09      	lsrs	r1, r1, #8
    4574:	0bc3      	lsrs	r3, r0, #15
    4576:	428b      	cmp	r3, r1
    4578:	d301      	bcc.n	457e <__udivsi3+0x46>
    457a:	03cb      	lsls	r3, r1, #15
    457c:	1ac0      	subs	r0, r0, r3
    457e:	4152      	adcs	r2, r2
    4580:	0b83      	lsrs	r3, r0, #14
    4582:	428b      	cmp	r3, r1
    4584:	d301      	bcc.n	458a <__udivsi3+0x52>
    4586:	038b      	lsls	r3, r1, #14
    4588:	1ac0      	subs	r0, r0, r3
    458a:	4152      	adcs	r2, r2
    458c:	0b43      	lsrs	r3, r0, #13
    458e:	428b      	cmp	r3, r1
    4590:	d301      	bcc.n	4596 <__udivsi3+0x5e>
    4592:	034b      	lsls	r3, r1, #13
    4594:	1ac0      	subs	r0, r0, r3
    4596:	4152      	adcs	r2, r2
    4598:	0b03      	lsrs	r3, r0, #12
    459a:	428b      	cmp	r3, r1
    459c:	d301      	bcc.n	45a2 <__udivsi3+0x6a>
    459e:	030b      	lsls	r3, r1, #12
    45a0:	1ac0      	subs	r0, r0, r3
    45a2:	4152      	adcs	r2, r2
    45a4:	0ac3      	lsrs	r3, r0, #11
    45a6:	428b      	cmp	r3, r1
    45a8:	d301      	bcc.n	45ae <__udivsi3+0x76>
    45aa:	02cb      	lsls	r3, r1, #11
    45ac:	1ac0      	subs	r0, r0, r3
    45ae:	4152      	adcs	r2, r2
    45b0:	0a83      	lsrs	r3, r0, #10
    45b2:	428b      	cmp	r3, r1
    45b4:	d301      	bcc.n	45ba <__udivsi3+0x82>
    45b6:	028b      	lsls	r3, r1, #10
    45b8:	1ac0      	subs	r0, r0, r3
    45ba:	4152      	adcs	r2, r2
    45bc:	0a43      	lsrs	r3, r0, #9
    45be:	428b      	cmp	r3, r1
    45c0:	d301      	bcc.n	45c6 <__udivsi3+0x8e>
    45c2:	024b      	lsls	r3, r1, #9
    45c4:	1ac0      	subs	r0, r0, r3
    45c6:	4152      	adcs	r2, r2
    45c8:	0a03      	lsrs	r3, r0, #8
    45ca:	428b      	cmp	r3, r1
    45cc:	d301      	bcc.n	45d2 <__udivsi3+0x9a>
    45ce:	020b      	lsls	r3, r1, #8
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	4152      	adcs	r2, r2
    45d4:	d2cd      	bcs.n	4572 <__udivsi3+0x3a>
    45d6:	09c3      	lsrs	r3, r0, #7
    45d8:	428b      	cmp	r3, r1
    45da:	d301      	bcc.n	45e0 <__udivsi3+0xa8>
    45dc:	01cb      	lsls	r3, r1, #7
    45de:	1ac0      	subs	r0, r0, r3
    45e0:	4152      	adcs	r2, r2
    45e2:	0983      	lsrs	r3, r0, #6
    45e4:	428b      	cmp	r3, r1
    45e6:	d301      	bcc.n	45ec <__udivsi3+0xb4>
    45e8:	018b      	lsls	r3, r1, #6
    45ea:	1ac0      	subs	r0, r0, r3
    45ec:	4152      	adcs	r2, r2
    45ee:	0943      	lsrs	r3, r0, #5
    45f0:	428b      	cmp	r3, r1
    45f2:	d301      	bcc.n	45f8 <__udivsi3+0xc0>
    45f4:	014b      	lsls	r3, r1, #5
    45f6:	1ac0      	subs	r0, r0, r3
    45f8:	4152      	adcs	r2, r2
    45fa:	0903      	lsrs	r3, r0, #4
    45fc:	428b      	cmp	r3, r1
    45fe:	d301      	bcc.n	4604 <__udivsi3+0xcc>
    4600:	010b      	lsls	r3, r1, #4
    4602:	1ac0      	subs	r0, r0, r3
    4604:	4152      	adcs	r2, r2
    4606:	08c3      	lsrs	r3, r0, #3
    4608:	428b      	cmp	r3, r1
    460a:	d301      	bcc.n	4610 <__udivsi3+0xd8>
    460c:	00cb      	lsls	r3, r1, #3
    460e:	1ac0      	subs	r0, r0, r3
    4610:	4152      	adcs	r2, r2
    4612:	0883      	lsrs	r3, r0, #2
    4614:	428b      	cmp	r3, r1
    4616:	d301      	bcc.n	461c <__udivsi3+0xe4>
    4618:	008b      	lsls	r3, r1, #2
    461a:	1ac0      	subs	r0, r0, r3
    461c:	4152      	adcs	r2, r2
    461e:	0843      	lsrs	r3, r0, #1
    4620:	428b      	cmp	r3, r1
    4622:	d301      	bcc.n	4628 <__udivsi3+0xf0>
    4624:	004b      	lsls	r3, r1, #1
    4626:	1ac0      	subs	r0, r0, r3
    4628:	4152      	adcs	r2, r2
    462a:	1a41      	subs	r1, r0, r1
    462c:	d200      	bcs.n	4630 <__udivsi3+0xf8>
    462e:	4601      	mov	r1, r0
    4630:	4152      	adcs	r2, r2
    4632:	4610      	mov	r0, r2
    4634:	4770      	bx	lr
    4636:	e7ff      	b.n	4638 <__udivsi3+0x100>
    4638:	b501      	push	{r0, lr}
    463a:	2000      	movs	r0, #0
    463c:	f000 f8f0 	bl	4820 <__aeabi_idiv0>
    4640:	bd02      	pop	{r1, pc}
    4642:	46c0      	nop			; (mov r8, r8)

00004644 <__aeabi_uidivmod>:
    4644:	2900      	cmp	r1, #0
    4646:	d0f7      	beq.n	4638 <__udivsi3+0x100>
    4648:	e776      	b.n	4538 <__udivsi3>
    464a:	4770      	bx	lr

0000464c <__divsi3>:
    464c:	4603      	mov	r3, r0
    464e:	430b      	orrs	r3, r1
    4650:	d47f      	bmi.n	4752 <__divsi3+0x106>
    4652:	2200      	movs	r2, #0
    4654:	0843      	lsrs	r3, r0, #1
    4656:	428b      	cmp	r3, r1
    4658:	d374      	bcc.n	4744 <__divsi3+0xf8>
    465a:	0903      	lsrs	r3, r0, #4
    465c:	428b      	cmp	r3, r1
    465e:	d35f      	bcc.n	4720 <__divsi3+0xd4>
    4660:	0a03      	lsrs	r3, r0, #8
    4662:	428b      	cmp	r3, r1
    4664:	d344      	bcc.n	46f0 <__divsi3+0xa4>
    4666:	0b03      	lsrs	r3, r0, #12
    4668:	428b      	cmp	r3, r1
    466a:	d328      	bcc.n	46be <__divsi3+0x72>
    466c:	0c03      	lsrs	r3, r0, #16
    466e:	428b      	cmp	r3, r1
    4670:	d30d      	bcc.n	468e <__divsi3+0x42>
    4672:	22ff      	movs	r2, #255	; 0xff
    4674:	0209      	lsls	r1, r1, #8
    4676:	ba12      	rev	r2, r2
    4678:	0c03      	lsrs	r3, r0, #16
    467a:	428b      	cmp	r3, r1
    467c:	d302      	bcc.n	4684 <__divsi3+0x38>
    467e:	1212      	asrs	r2, r2, #8
    4680:	0209      	lsls	r1, r1, #8
    4682:	d065      	beq.n	4750 <__divsi3+0x104>
    4684:	0b03      	lsrs	r3, r0, #12
    4686:	428b      	cmp	r3, r1
    4688:	d319      	bcc.n	46be <__divsi3+0x72>
    468a:	e000      	b.n	468e <__divsi3+0x42>
    468c:	0a09      	lsrs	r1, r1, #8
    468e:	0bc3      	lsrs	r3, r0, #15
    4690:	428b      	cmp	r3, r1
    4692:	d301      	bcc.n	4698 <__divsi3+0x4c>
    4694:	03cb      	lsls	r3, r1, #15
    4696:	1ac0      	subs	r0, r0, r3
    4698:	4152      	adcs	r2, r2
    469a:	0b83      	lsrs	r3, r0, #14
    469c:	428b      	cmp	r3, r1
    469e:	d301      	bcc.n	46a4 <__divsi3+0x58>
    46a0:	038b      	lsls	r3, r1, #14
    46a2:	1ac0      	subs	r0, r0, r3
    46a4:	4152      	adcs	r2, r2
    46a6:	0b43      	lsrs	r3, r0, #13
    46a8:	428b      	cmp	r3, r1
    46aa:	d301      	bcc.n	46b0 <__divsi3+0x64>
    46ac:	034b      	lsls	r3, r1, #13
    46ae:	1ac0      	subs	r0, r0, r3
    46b0:	4152      	adcs	r2, r2
    46b2:	0b03      	lsrs	r3, r0, #12
    46b4:	428b      	cmp	r3, r1
    46b6:	d301      	bcc.n	46bc <__divsi3+0x70>
    46b8:	030b      	lsls	r3, r1, #12
    46ba:	1ac0      	subs	r0, r0, r3
    46bc:	4152      	adcs	r2, r2
    46be:	0ac3      	lsrs	r3, r0, #11
    46c0:	428b      	cmp	r3, r1
    46c2:	d301      	bcc.n	46c8 <__divsi3+0x7c>
    46c4:	02cb      	lsls	r3, r1, #11
    46c6:	1ac0      	subs	r0, r0, r3
    46c8:	4152      	adcs	r2, r2
    46ca:	0a83      	lsrs	r3, r0, #10
    46cc:	428b      	cmp	r3, r1
    46ce:	d301      	bcc.n	46d4 <__divsi3+0x88>
    46d0:	028b      	lsls	r3, r1, #10
    46d2:	1ac0      	subs	r0, r0, r3
    46d4:	4152      	adcs	r2, r2
    46d6:	0a43      	lsrs	r3, r0, #9
    46d8:	428b      	cmp	r3, r1
    46da:	d301      	bcc.n	46e0 <__divsi3+0x94>
    46dc:	024b      	lsls	r3, r1, #9
    46de:	1ac0      	subs	r0, r0, r3
    46e0:	4152      	adcs	r2, r2
    46e2:	0a03      	lsrs	r3, r0, #8
    46e4:	428b      	cmp	r3, r1
    46e6:	d301      	bcc.n	46ec <__divsi3+0xa0>
    46e8:	020b      	lsls	r3, r1, #8
    46ea:	1ac0      	subs	r0, r0, r3
    46ec:	4152      	adcs	r2, r2
    46ee:	d2cd      	bcs.n	468c <__divsi3+0x40>
    46f0:	09c3      	lsrs	r3, r0, #7
    46f2:	428b      	cmp	r3, r1
    46f4:	d301      	bcc.n	46fa <__divsi3+0xae>
    46f6:	01cb      	lsls	r3, r1, #7
    46f8:	1ac0      	subs	r0, r0, r3
    46fa:	4152      	adcs	r2, r2
    46fc:	0983      	lsrs	r3, r0, #6
    46fe:	428b      	cmp	r3, r1
    4700:	d301      	bcc.n	4706 <__divsi3+0xba>
    4702:	018b      	lsls	r3, r1, #6
    4704:	1ac0      	subs	r0, r0, r3
    4706:	4152      	adcs	r2, r2
    4708:	0943      	lsrs	r3, r0, #5
    470a:	428b      	cmp	r3, r1
    470c:	d301      	bcc.n	4712 <__divsi3+0xc6>
    470e:	014b      	lsls	r3, r1, #5
    4710:	1ac0      	subs	r0, r0, r3
    4712:	4152      	adcs	r2, r2
    4714:	0903      	lsrs	r3, r0, #4
    4716:	428b      	cmp	r3, r1
    4718:	d301      	bcc.n	471e <__divsi3+0xd2>
    471a:	010b      	lsls	r3, r1, #4
    471c:	1ac0      	subs	r0, r0, r3
    471e:	4152      	adcs	r2, r2
    4720:	08c3      	lsrs	r3, r0, #3
    4722:	428b      	cmp	r3, r1
    4724:	d301      	bcc.n	472a <__divsi3+0xde>
    4726:	00cb      	lsls	r3, r1, #3
    4728:	1ac0      	subs	r0, r0, r3
    472a:	4152      	adcs	r2, r2
    472c:	0883      	lsrs	r3, r0, #2
    472e:	428b      	cmp	r3, r1
    4730:	d301      	bcc.n	4736 <__divsi3+0xea>
    4732:	008b      	lsls	r3, r1, #2
    4734:	1ac0      	subs	r0, r0, r3
    4736:	4152      	adcs	r2, r2
    4738:	0843      	lsrs	r3, r0, #1
    473a:	428b      	cmp	r3, r1
    473c:	d301      	bcc.n	4742 <__divsi3+0xf6>
    473e:	004b      	lsls	r3, r1, #1
    4740:	1ac0      	subs	r0, r0, r3
    4742:	4152      	adcs	r2, r2
    4744:	1a41      	subs	r1, r0, r1
    4746:	d200      	bcs.n	474a <__divsi3+0xfe>
    4748:	4601      	mov	r1, r0
    474a:	4152      	adcs	r2, r2
    474c:	4610      	mov	r0, r2
    474e:	4770      	bx	lr
    4750:	e05d      	b.n	480e <__divsi3+0x1c2>
    4752:	0fca      	lsrs	r2, r1, #31
    4754:	d000      	beq.n	4758 <__divsi3+0x10c>
    4756:	4249      	negs	r1, r1
    4758:	1003      	asrs	r3, r0, #32
    475a:	d300      	bcc.n	475e <__divsi3+0x112>
    475c:	4240      	negs	r0, r0
    475e:	4053      	eors	r3, r2
    4760:	2200      	movs	r2, #0
    4762:	469c      	mov	ip, r3
    4764:	0903      	lsrs	r3, r0, #4
    4766:	428b      	cmp	r3, r1
    4768:	d32d      	bcc.n	47c6 <__divsi3+0x17a>
    476a:	0a03      	lsrs	r3, r0, #8
    476c:	428b      	cmp	r3, r1
    476e:	d312      	bcc.n	4796 <__divsi3+0x14a>
    4770:	22fc      	movs	r2, #252	; 0xfc
    4772:	0189      	lsls	r1, r1, #6
    4774:	ba12      	rev	r2, r2
    4776:	0a03      	lsrs	r3, r0, #8
    4778:	428b      	cmp	r3, r1
    477a:	d30c      	bcc.n	4796 <__divsi3+0x14a>
    477c:	0189      	lsls	r1, r1, #6
    477e:	1192      	asrs	r2, r2, #6
    4780:	428b      	cmp	r3, r1
    4782:	d308      	bcc.n	4796 <__divsi3+0x14a>
    4784:	0189      	lsls	r1, r1, #6
    4786:	1192      	asrs	r2, r2, #6
    4788:	428b      	cmp	r3, r1
    478a:	d304      	bcc.n	4796 <__divsi3+0x14a>
    478c:	0189      	lsls	r1, r1, #6
    478e:	d03a      	beq.n	4806 <__divsi3+0x1ba>
    4790:	1192      	asrs	r2, r2, #6
    4792:	e000      	b.n	4796 <__divsi3+0x14a>
    4794:	0989      	lsrs	r1, r1, #6
    4796:	09c3      	lsrs	r3, r0, #7
    4798:	428b      	cmp	r3, r1
    479a:	d301      	bcc.n	47a0 <__divsi3+0x154>
    479c:	01cb      	lsls	r3, r1, #7
    479e:	1ac0      	subs	r0, r0, r3
    47a0:	4152      	adcs	r2, r2
    47a2:	0983      	lsrs	r3, r0, #6
    47a4:	428b      	cmp	r3, r1
    47a6:	d301      	bcc.n	47ac <__divsi3+0x160>
    47a8:	018b      	lsls	r3, r1, #6
    47aa:	1ac0      	subs	r0, r0, r3
    47ac:	4152      	adcs	r2, r2
    47ae:	0943      	lsrs	r3, r0, #5
    47b0:	428b      	cmp	r3, r1
    47b2:	d301      	bcc.n	47b8 <__divsi3+0x16c>
    47b4:	014b      	lsls	r3, r1, #5
    47b6:	1ac0      	subs	r0, r0, r3
    47b8:	4152      	adcs	r2, r2
    47ba:	0903      	lsrs	r3, r0, #4
    47bc:	428b      	cmp	r3, r1
    47be:	d301      	bcc.n	47c4 <__divsi3+0x178>
    47c0:	010b      	lsls	r3, r1, #4
    47c2:	1ac0      	subs	r0, r0, r3
    47c4:	4152      	adcs	r2, r2
    47c6:	08c3      	lsrs	r3, r0, #3
    47c8:	428b      	cmp	r3, r1
    47ca:	d301      	bcc.n	47d0 <__divsi3+0x184>
    47cc:	00cb      	lsls	r3, r1, #3
    47ce:	1ac0      	subs	r0, r0, r3
    47d0:	4152      	adcs	r2, r2
    47d2:	0883      	lsrs	r3, r0, #2
    47d4:	428b      	cmp	r3, r1
    47d6:	d301      	bcc.n	47dc <__divsi3+0x190>
    47d8:	008b      	lsls	r3, r1, #2
    47da:	1ac0      	subs	r0, r0, r3
    47dc:	4152      	adcs	r2, r2
    47de:	d2d9      	bcs.n	4794 <__divsi3+0x148>
    47e0:	0843      	lsrs	r3, r0, #1
    47e2:	428b      	cmp	r3, r1
    47e4:	d301      	bcc.n	47ea <__divsi3+0x19e>
    47e6:	004b      	lsls	r3, r1, #1
    47e8:	1ac0      	subs	r0, r0, r3
    47ea:	4152      	adcs	r2, r2
    47ec:	1a41      	subs	r1, r0, r1
    47ee:	d200      	bcs.n	47f2 <__divsi3+0x1a6>
    47f0:	4601      	mov	r1, r0
    47f2:	4663      	mov	r3, ip
    47f4:	4152      	adcs	r2, r2
    47f6:	105b      	asrs	r3, r3, #1
    47f8:	4610      	mov	r0, r2
    47fa:	d301      	bcc.n	4800 <__divsi3+0x1b4>
    47fc:	4240      	negs	r0, r0
    47fe:	2b00      	cmp	r3, #0
    4800:	d500      	bpl.n	4804 <__divsi3+0x1b8>
    4802:	4249      	negs	r1, r1
    4804:	4770      	bx	lr
    4806:	4663      	mov	r3, ip
    4808:	105b      	asrs	r3, r3, #1
    480a:	d300      	bcc.n	480e <__divsi3+0x1c2>
    480c:	4240      	negs	r0, r0
    480e:	b501      	push	{r0, lr}
    4810:	2000      	movs	r0, #0
    4812:	f000 f805 	bl	4820 <__aeabi_idiv0>
    4816:	bd02      	pop	{r1, pc}

00004818 <__aeabi_idivmod>:
    4818:	2900      	cmp	r1, #0
    481a:	d0f8      	beq.n	480e <__divsi3+0x1c2>
    481c:	e716      	b.n	464c <__divsi3>
    481e:	4770      	bx	lr

00004820 <__aeabi_idiv0>:
    4820:	4770      	bx	lr
    4822:	46c0      	nop			; (mov r8, r8)

00004824 <__aeabi_ldivmod>:
    4824:	2b00      	cmp	r3, #0
    4826:	d115      	bne.n	4854 <__aeabi_ldivmod+0x30>
    4828:	2a00      	cmp	r2, #0
    482a:	d113      	bne.n	4854 <__aeabi_ldivmod+0x30>
    482c:	2900      	cmp	r1, #0
    482e:	db06      	blt.n	483e <__aeabi_ldivmod+0x1a>
    4830:	dc01      	bgt.n	4836 <__aeabi_ldivmod+0x12>
    4832:	2800      	cmp	r0, #0
    4834:	d006      	beq.n	4844 <__aeabi_ldivmod+0x20>
    4836:	2000      	movs	r0, #0
    4838:	43c0      	mvns	r0, r0
    483a:	0841      	lsrs	r1, r0, #1
    483c:	e002      	b.n	4844 <__aeabi_ldivmod+0x20>
    483e:	2180      	movs	r1, #128	; 0x80
    4840:	0609      	lsls	r1, r1, #24
    4842:	2000      	movs	r0, #0
    4844:	b407      	push	{r0, r1, r2}
    4846:	4802      	ldr	r0, [pc, #8]	; (4850 <__aeabi_ldivmod+0x2c>)
    4848:	a101      	add	r1, pc, #4	; (adr r1, 4850 <__aeabi_ldivmod+0x2c>)
    484a:	1840      	adds	r0, r0, r1
    484c:	9002      	str	r0, [sp, #8]
    484e:	bd03      	pop	{r0, r1, pc}
    4850:	ffffffd1 	.word	0xffffffd1
    4854:	b403      	push	{r0, r1}
    4856:	4668      	mov	r0, sp
    4858:	b501      	push	{r0, lr}
    485a:	9802      	ldr	r0, [sp, #8]
    485c:	f000 f910 	bl	4a80 <__gnu_ldivmod_helper>
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	469e      	mov	lr, r3
    4864:	b002      	add	sp, #8
    4866:	bc0c      	pop	{r2, r3}
    4868:	4770      	bx	lr
    486a:	46c0      	nop			; (mov r8, r8)

0000486c <__aeabi_uldivmod>:
    486c:	2b00      	cmp	r3, #0
    486e:	d111      	bne.n	4894 <__aeabi_uldivmod+0x28>
    4870:	2a00      	cmp	r2, #0
    4872:	d10f      	bne.n	4894 <__aeabi_uldivmod+0x28>
    4874:	2900      	cmp	r1, #0
    4876:	d100      	bne.n	487a <__aeabi_uldivmod+0xe>
    4878:	2800      	cmp	r0, #0
    487a:	d002      	beq.n	4882 <__aeabi_uldivmod+0x16>
    487c:	2100      	movs	r1, #0
    487e:	43c9      	mvns	r1, r1
    4880:	1c08      	adds	r0, r1, #0
    4882:	b407      	push	{r0, r1, r2}
    4884:	4802      	ldr	r0, [pc, #8]	; (4890 <__aeabi_uldivmod+0x24>)
    4886:	a102      	add	r1, pc, #8	; (adr r1, 4890 <__aeabi_uldivmod+0x24>)
    4888:	1840      	adds	r0, r0, r1
    488a:	9002      	str	r0, [sp, #8]
    488c:	bd03      	pop	{r0, r1, pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	ffffff91 	.word	0xffffff91
    4894:	b403      	push	{r0, r1}
    4896:	4668      	mov	r0, sp
    4898:	b501      	push	{r0, lr}
    489a:	9802      	ldr	r0, [sp, #8]
    489c:	f000 f830 	bl	4900 <__udivmoddi4>
    48a0:	9b01      	ldr	r3, [sp, #4]
    48a2:	469e      	mov	lr, r3
    48a4:	b002      	add	sp, #8
    48a6:	bc0c      	pop	{r2, r3}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			; (mov r8, r8)

000048ac <__aeabi_lmul>:
    48ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ae:	46ce      	mov	lr, r9
    48b0:	4647      	mov	r7, r8
    48b2:	0415      	lsls	r5, r2, #16
    48b4:	0c2d      	lsrs	r5, r5, #16
    48b6:	002e      	movs	r6, r5
    48b8:	b580      	push	{r7, lr}
    48ba:	0407      	lsls	r7, r0, #16
    48bc:	0c14      	lsrs	r4, r2, #16
    48be:	0c3f      	lsrs	r7, r7, #16
    48c0:	4699      	mov	r9, r3
    48c2:	0c03      	lsrs	r3, r0, #16
    48c4:	437e      	muls	r6, r7
    48c6:	435d      	muls	r5, r3
    48c8:	4367      	muls	r7, r4
    48ca:	4363      	muls	r3, r4
    48cc:	197f      	adds	r7, r7, r5
    48ce:	0c34      	lsrs	r4, r6, #16
    48d0:	19e4      	adds	r4, r4, r7
    48d2:	469c      	mov	ip, r3
    48d4:	42a5      	cmp	r5, r4
    48d6:	d903      	bls.n	48e0 <__aeabi_lmul+0x34>
    48d8:	2380      	movs	r3, #128	; 0x80
    48da:	025b      	lsls	r3, r3, #9
    48dc:	4698      	mov	r8, r3
    48de:	44c4      	add	ip, r8
    48e0:	464b      	mov	r3, r9
    48e2:	4351      	muls	r1, r2
    48e4:	4343      	muls	r3, r0
    48e6:	0436      	lsls	r6, r6, #16
    48e8:	0c36      	lsrs	r6, r6, #16
    48ea:	0c25      	lsrs	r5, r4, #16
    48ec:	0424      	lsls	r4, r4, #16
    48ee:	4465      	add	r5, ip
    48f0:	19a4      	adds	r4, r4, r6
    48f2:	1859      	adds	r1, r3, r1
    48f4:	1949      	adds	r1, r1, r5
    48f6:	0020      	movs	r0, r4
    48f8:	bc0c      	pop	{r2, r3}
    48fa:	4690      	mov	r8, r2
    48fc:	4699      	mov	r9, r3
    48fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004900 <__udivmoddi4>:
    4900:	b5f0      	push	{r4, r5, r6, r7, lr}
    4902:	4657      	mov	r7, sl
    4904:	464e      	mov	r6, r9
    4906:	4645      	mov	r5, r8
    4908:	46de      	mov	lr, fp
    490a:	b5e0      	push	{r5, r6, r7, lr}
    490c:	0004      	movs	r4, r0
    490e:	b083      	sub	sp, #12
    4910:	000d      	movs	r5, r1
    4912:	4692      	mov	sl, r2
    4914:	4699      	mov	r9, r3
    4916:	428b      	cmp	r3, r1
    4918:	d82f      	bhi.n	497a <__udivmoddi4+0x7a>
    491a:	d02c      	beq.n	4976 <__udivmoddi4+0x76>
    491c:	4649      	mov	r1, r9
    491e:	4650      	mov	r0, sl
    4920:	f001 fdfa 	bl	6518 <__clzdi2>
    4924:	0029      	movs	r1, r5
    4926:	0006      	movs	r6, r0
    4928:	0020      	movs	r0, r4
    492a:	f001 fdf5 	bl	6518 <__clzdi2>
    492e:	1a33      	subs	r3, r6, r0
    4930:	4698      	mov	r8, r3
    4932:	3b20      	subs	r3, #32
    4934:	469b      	mov	fp, r3
    4936:	d500      	bpl.n	493a <__udivmoddi4+0x3a>
    4938:	e074      	b.n	4a24 <__udivmoddi4+0x124>
    493a:	4653      	mov	r3, sl
    493c:	465a      	mov	r2, fp
    493e:	4093      	lsls	r3, r2
    4940:	001f      	movs	r7, r3
    4942:	4653      	mov	r3, sl
    4944:	4642      	mov	r2, r8
    4946:	4093      	lsls	r3, r2
    4948:	001e      	movs	r6, r3
    494a:	42af      	cmp	r7, r5
    494c:	d829      	bhi.n	49a2 <__udivmoddi4+0xa2>
    494e:	d026      	beq.n	499e <__udivmoddi4+0x9e>
    4950:	465b      	mov	r3, fp
    4952:	1ba4      	subs	r4, r4, r6
    4954:	41bd      	sbcs	r5, r7
    4956:	2b00      	cmp	r3, #0
    4958:	da00      	bge.n	495c <__udivmoddi4+0x5c>
    495a:	e079      	b.n	4a50 <__udivmoddi4+0x150>
    495c:	2200      	movs	r2, #0
    495e:	2300      	movs	r3, #0
    4960:	9200      	str	r2, [sp, #0]
    4962:	9301      	str	r3, [sp, #4]
    4964:	2301      	movs	r3, #1
    4966:	465a      	mov	r2, fp
    4968:	4093      	lsls	r3, r2
    496a:	9301      	str	r3, [sp, #4]
    496c:	2301      	movs	r3, #1
    496e:	4642      	mov	r2, r8
    4970:	4093      	lsls	r3, r2
    4972:	9300      	str	r3, [sp, #0]
    4974:	e019      	b.n	49aa <__udivmoddi4+0xaa>
    4976:	4282      	cmp	r2, r0
    4978:	d9d0      	bls.n	491c <__udivmoddi4+0x1c>
    497a:	2200      	movs	r2, #0
    497c:	2300      	movs	r3, #0
    497e:	9200      	str	r2, [sp, #0]
    4980:	9301      	str	r3, [sp, #4]
    4982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4984:	2b00      	cmp	r3, #0
    4986:	d001      	beq.n	498c <__udivmoddi4+0x8c>
    4988:	601c      	str	r4, [r3, #0]
    498a:	605d      	str	r5, [r3, #4]
    498c:	9800      	ldr	r0, [sp, #0]
    498e:	9901      	ldr	r1, [sp, #4]
    4990:	b003      	add	sp, #12
    4992:	bc3c      	pop	{r2, r3, r4, r5}
    4994:	4690      	mov	r8, r2
    4996:	4699      	mov	r9, r3
    4998:	46a2      	mov	sl, r4
    499a:	46ab      	mov	fp, r5
    499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    499e:	42a3      	cmp	r3, r4
    49a0:	d9d6      	bls.n	4950 <__udivmoddi4+0x50>
    49a2:	2200      	movs	r2, #0
    49a4:	2300      	movs	r3, #0
    49a6:	9200      	str	r2, [sp, #0]
    49a8:	9301      	str	r3, [sp, #4]
    49aa:	4643      	mov	r3, r8
    49ac:	2b00      	cmp	r3, #0
    49ae:	d0e8      	beq.n	4982 <__udivmoddi4+0x82>
    49b0:	07fb      	lsls	r3, r7, #31
    49b2:	0872      	lsrs	r2, r6, #1
    49b4:	431a      	orrs	r2, r3
    49b6:	4646      	mov	r6, r8
    49b8:	087b      	lsrs	r3, r7, #1
    49ba:	e00e      	b.n	49da <__udivmoddi4+0xda>
    49bc:	42ab      	cmp	r3, r5
    49be:	d101      	bne.n	49c4 <__udivmoddi4+0xc4>
    49c0:	42a2      	cmp	r2, r4
    49c2:	d80c      	bhi.n	49de <__udivmoddi4+0xde>
    49c4:	1aa4      	subs	r4, r4, r2
    49c6:	419d      	sbcs	r5, r3
    49c8:	2001      	movs	r0, #1
    49ca:	1924      	adds	r4, r4, r4
    49cc:	416d      	adcs	r5, r5
    49ce:	2100      	movs	r1, #0
    49d0:	3e01      	subs	r6, #1
    49d2:	1824      	adds	r4, r4, r0
    49d4:	414d      	adcs	r5, r1
    49d6:	2e00      	cmp	r6, #0
    49d8:	d006      	beq.n	49e8 <__udivmoddi4+0xe8>
    49da:	42ab      	cmp	r3, r5
    49dc:	d9ee      	bls.n	49bc <__udivmoddi4+0xbc>
    49de:	3e01      	subs	r6, #1
    49e0:	1924      	adds	r4, r4, r4
    49e2:	416d      	adcs	r5, r5
    49e4:	2e00      	cmp	r6, #0
    49e6:	d1f8      	bne.n	49da <__udivmoddi4+0xda>
    49e8:	465b      	mov	r3, fp
    49ea:	9800      	ldr	r0, [sp, #0]
    49ec:	9901      	ldr	r1, [sp, #4]
    49ee:	1900      	adds	r0, r0, r4
    49f0:	4169      	adcs	r1, r5
    49f2:	2b00      	cmp	r3, #0
    49f4:	db22      	blt.n	4a3c <__udivmoddi4+0x13c>
    49f6:	002b      	movs	r3, r5
    49f8:	465a      	mov	r2, fp
    49fa:	40d3      	lsrs	r3, r2
    49fc:	002a      	movs	r2, r5
    49fe:	4644      	mov	r4, r8
    4a00:	40e2      	lsrs	r2, r4
    4a02:	001c      	movs	r4, r3
    4a04:	465b      	mov	r3, fp
    4a06:	0015      	movs	r5, r2
    4a08:	2b00      	cmp	r3, #0
    4a0a:	db2c      	blt.n	4a66 <__udivmoddi4+0x166>
    4a0c:	0026      	movs	r6, r4
    4a0e:	409e      	lsls	r6, r3
    4a10:	0033      	movs	r3, r6
    4a12:	0026      	movs	r6, r4
    4a14:	4647      	mov	r7, r8
    4a16:	40be      	lsls	r6, r7
    4a18:	0032      	movs	r2, r6
    4a1a:	1a80      	subs	r0, r0, r2
    4a1c:	4199      	sbcs	r1, r3
    4a1e:	9000      	str	r0, [sp, #0]
    4a20:	9101      	str	r1, [sp, #4]
    4a22:	e7ae      	b.n	4982 <__udivmoddi4+0x82>
    4a24:	4642      	mov	r2, r8
    4a26:	2320      	movs	r3, #32
    4a28:	1a9b      	subs	r3, r3, r2
    4a2a:	4652      	mov	r2, sl
    4a2c:	40da      	lsrs	r2, r3
    4a2e:	4641      	mov	r1, r8
    4a30:	0013      	movs	r3, r2
    4a32:	464a      	mov	r2, r9
    4a34:	408a      	lsls	r2, r1
    4a36:	0017      	movs	r7, r2
    4a38:	431f      	orrs	r7, r3
    4a3a:	e782      	b.n	4942 <__udivmoddi4+0x42>
    4a3c:	4642      	mov	r2, r8
    4a3e:	2320      	movs	r3, #32
    4a40:	1a9b      	subs	r3, r3, r2
    4a42:	002a      	movs	r2, r5
    4a44:	4646      	mov	r6, r8
    4a46:	409a      	lsls	r2, r3
    4a48:	0023      	movs	r3, r4
    4a4a:	40f3      	lsrs	r3, r6
    4a4c:	4313      	orrs	r3, r2
    4a4e:	e7d5      	b.n	49fc <__udivmoddi4+0xfc>
    4a50:	4642      	mov	r2, r8
    4a52:	2320      	movs	r3, #32
    4a54:	2100      	movs	r1, #0
    4a56:	1a9b      	subs	r3, r3, r2
    4a58:	2200      	movs	r2, #0
    4a5a:	9100      	str	r1, [sp, #0]
    4a5c:	9201      	str	r2, [sp, #4]
    4a5e:	2201      	movs	r2, #1
    4a60:	40da      	lsrs	r2, r3
    4a62:	9201      	str	r2, [sp, #4]
    4a64:	e782      	b.n	496c <__udivmoddi4+0x6c>
    4a66:	4642      	mov	r2, r8
    4a68:	2320      	movs	r3, #32
    4a6a:	0026      	movs	r6, r4
    4a6c:	1a9b      	subs	r3, r3, r2
    4a6e:	40de      	lsrs	r6, r3
    4a70:	002f      	movs	r7, r5
    4a72:	46b4      	mov	ip, r6
    4a74:	4097      	lsls	r7, r2
    4a76:	4666      	mov	r6, ip
    4a78:	003b      	movs	r3, r7
    4a7a:	4333      	orrs	r3, r6
    4a7c:	e7c9      	b.n	4a12 <__udivmoddi4+0x112>
    4a7e:	46c0      	nop			; (mov r8, r8)

00004a80 <__gnu_ldivmod_helper>:
    4a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a82:	b083      	sub	sp, #12
    4a84:	0016      	movs	r6, r2
    4a86:	001f      	movs	r7, r3
    4a88:	9000      	str	r0, [sp, #0]
    4a8a:	9101      	str	r1, [sp, #4]
    4a8c:	f001 fd50 	bl	6530 <__divdi3>
    4a90:	0004      	movs	r4, r0
    4a92:	000d      	movs	r5, r1
    4a94:	0002      	movs	r2, r0
    4a96:	000b      	movs	r3, r1
    4a98:	0030      	movs	r0, r6
    4a9a:	0039      	movs	r1, r7
    4a9c:	f7ff ff06 	bl	48ac <__aeabi_lmul>
    4aa0:	9a00      	ldr	r2, [sp, #0]
    4aa2:	9b01      	ldr	r3, [sp, #4]
    4aa4:	1a12      	subs	r2, r2, r0
    4aa6:	418b      	sbcs	r3, r1
    4aa8:	9908      	ldr	r1, [sp, #32]
    4aaa:	0020      	movs	r0, r4
    4aac:	600a      	str	r2, [r1, #0]
    4aae:	604b      	str	r3, [r1, #4]
    4ab0:	0029      	movs	r1, r5
    4ab2:	b003      	add	sp, #12
    4ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ab6:	46c0      	nop			; (mov r8, r8)

00004ab8 <__aeabi_dadd>:
    4ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aba:	4645      	mov	r5, r8
    4abc:	46de      	mov	lr, fp
    4abe:	4657      	mov	r7, sl
    4ac0:	464e      	mov	r6, r9
    4ac2:	030c      	lsls	r4, r1, #12
    4ac4:	b5e0      	push	{r5, r6, r7, lr}
    4ac6:	004e      	lsls	r6, r1, #1
    4ac8:	0fc9      	lsrs	r1, r1, #31
    4aca:	4688      	mov	r8, r1
    4acc:	000d      	movs	r5, r1
    4ace:	0a61      	lsrs	r1, r4, #9
    4ad0:	0f44      	lsrs	r4, r0, #29
    4ad2:	430c      	orrs	r4, r1
    4ad4:	00c7      	lsls	r7, r0, #3
    4ad6:	0319      	lsls	r1, r3, #12
    4ad8:	0058      	lsls	r0, r3, #1
    4ada:	0fdb      	lsrs	r3, r3, #31
    4adc:	469b      	mov	fp, r3
    4ade:	0a4b      	lsrs	r3, r1, #9
    4ae0:	0f51      	lsrs	r1, r2, #29
    4ae2:	430b      	orrs	r3, r1
    4ae4:	0d76      	lsrs	r6, r6, #21
    4ae6:	0d40      	lsrs	r0, r0, #21
    4ae8:	0019      	movs	r1, r3
    4aea:	00d2      	lsls	r2, r2, #3
    4aec:	45d8      	cmp	r8, fp
    4aee:	d100      	bne.n	4af2 <__aeabi_dadd+0x3a>
    4af0:	e0ae      	b.n	4c50 <__aeabi_dadd+0x198>
    4af2:	1a35      	subs	r5, r6, r0
    4af4:	2d00      	cmp	r5, #0
    4af6:	dc00      	bgt.n	4afa <__aeabi_dadd+0x42>
    4af8:	e0f6      	b.n	4ce8 <__aeabi_dadd+0x230>
    4afa:	2800      	cmp	r0, #0
    4afc:	d10f      	bne.n	4b1e <__aeabi_dadd+0x66>
    4afe:	4313      	orrs	r3, r2
    4b00:	d100      	bne.n	4b04 <__aeabi_dadd+0x4c>
    4b02:	e0db      	b.n	4cbc <__aeabi_dadd+0x204>
    4b04:	1e6b      	subs	r3, r5, #1
    4b06:	2b00      	cmp	r3, #0
    4b08:	d000      	beq.n	4b0c <__aeabi_dadd+0x54>
    4b0a:	e137      	b.n	4d7c <__aeabi_dadd+0x2c4>
    4b0c:	1aba      	subs	r2, r7, r2
    4b0e:	4297      	cmp	r7, r2
    4b10:	41bf      	sbcs	r7, r7
    4b12:	1a64      	subs	r4, r4, r1
    4b14:	427f      	negs	r7, r7
    4b16:	1be4      	subs	r4, r4, r7
    4b18:	2601      	movs	r6, #1
    4b1a:	0017      	movs	r7, r2
    4b1c:	e024      	b.n	4b68 <__aeabi_dadd+0xb0>
    4b1e:	4bc6      	ldr	r3, [pc, #792]	; (4e38 <__aeabi_dadd+0x380>)
    4b20:	429e      	cmp	r6, r3
    4b22:	d04d      	beq.n	4bc0 <__aeabi_dadd+0x108>
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	041b      	lsls	r3, r3, #16
    4b28:	4319      	orrs	r1, r3
    4b2a:	2d38      	cmp	r5, #56	; 0x38
    4b2c:	dd00      	ble.n	4b30 <__aeabi_dadd+0x78>
    4b2e:	e107      	b.n	4d40 <__aeabi_dadd+0x288>
    4b30:	2d1f      	cmp	r5, #31
    4b32:	dd00      	ble.n	4b36 <__aeabi_dadd+0x7e>
    4b34:	e138      	b.n	4da8 <__aeabi_dadd+0x2f0>
    4b36:	2020      	movs	r0, #32
    4b38:	1b43      	subs	r3, r0, r5
    4b3a:	469a      	mov	sl, r3
    4b3c:	000b      	movs	r3, r1
    4b3e:	4650      	mov	r0, sl
    4b40:	4083      	lsls	r3, r0
    4b42:	4699      	mov	r9, r3
    4b44:	0013      	movs	r3, r2
    4b46:	4648      	mov	r0, r9
    4b48:	40eb      	lsrs	r3, r5
    4b4a:	4318      	orrs	r0, r3
    4b4c:	0003      	movs	r3, r0
    4b4e:	4650      	mov	r0, sl
    4b50:	4082      	lsls	r2, r0
    4b52:	1e50      	subs	r0, r2, #1
    4b54:	4182      	sbcs	r2, r0
    4b56:	40e9      	lsrs	r1, r5
    4b58:	431a      	orrs	r2, r3
    4b5a:	1aba      	subs	r2, r7, r2
    4b5c:	1a61      	subs	r1, r4, r1
    4b5e:	4297      	cmp	r7, r2
    4b60:	41a4      	sbcs	r4, r4
    4b62:	0017      	movs	r7, r2
    4b64:	4264      	negs	r4, r4
    4b66:	1b0c      	subs	r4, r1, r4
    4b68:	0223      	lsls	r3, r4, #8
    4b6a:	d562      	bpl.n	4c32 <__aeabi_dadd+0x17a>
    4b6c:	0264      	lsls	r4, r4, #9
    4b6e:	0a65      	lsrs	r5, r4, #9
    4b70:	2d00      	cmp	r5, #0
    4b72:	d100      	bne.n	4b76 <__aeabi_dadd+0xbe>
    4b74:	e0df      	b.n	4d36 <__aeabi_dadd+0x27e>
    4b76:	0028      	movs	r0, r5
    4b78:	f001 fcb0 	bl	64dc <__clzsi2>
    4b7c:	0003      	movs	r3, r0
    4b7e:	3b08      	subs	r3, #8
    4b80:	2b1f      	cmp	r3, #31
    4b82:	dd00      	ble.n	4b86 <__aeabi_dadd+0xce>
    4b84:	e0d2      	b.n	4d2c <__aeabi_dadd+0x274>
    4b86:	2220      	movs	r2, #32
    4b88:	003c      	movs	r4, r7
    4b8a:	1ad2      	subs	r2, r2, r3
    4b8c:	409d      	lsls	r5, r3
    4b8e:	40d4      	lsrs	r4, r2
    4b90:	409f      	lsls	r7, r3
    4b92:	4325      	orrs	r5, r4
    4b94:	429e      	cmp	r6, r3
    4b96:	dd00      	ble.n	4b9a <__aeabi_dadd+0xe2>
    4b98:	e0c4      	b.n	4d24 <__aeabi_dadd+0x26c>
    4b9a:	1b9e      	subs	r6, r3, r6
    4b9c:	1c73      	adds	r3, r6, #1
    4b9e:	2b1f      	cmp	r3, #31
    4ba0:	dd00      	ble.n	4ba4 <__aeabi_dadd+0xec>
    4ba2:	e0f1      	b.n	4d88 <__aeabi_dadd+0x2d0>
    4ba4:	2220      	movs	r2, #32
    4ba6:	0038      	movs	r0, r7
    4ba8:	0029      	movs	r1, r5
    4baa:	1ad2      	subs	r2, r2, r3
    4bac:	40d8      	lsrs	r0, r3
    4bae:	4091      	lsls	r1, r2
    4bb0:	4097      	lsls	r7, r2
    4bb2:	002c      	movs	r4, r5
    4bb4:	4301      	orrs	r1, r0
    4bb6:	1e78      	subs	r0, r7, #1
    4bb8:	4187      	sbcs	r7, r0
    4bba:	40dc      	lsrs	r4, r3
    4bbc:	2600      	movs	r6, #0
    4bbe:	430f      	orrs	r7, r1
    4bc0:	077b      	lsls	r3, r7, #29
    4bc2:	d009      	beq.n	4bd8 <__aeabi_dadd+0x120>
    4bc4:	230f      	movs	r3, #15
    4bc6:	403b      	ands	r3, r7
    4bc8:	2b04      	cmp	r3, #4
    4bca:	d005      	beq.n	4bd8 <__aeabi_dadd+0x120>
    4bcc:	1d3b      	adds	r3, r7, #4
    4bce:	42bb      	cmp	r3, r7
    4bd0:	41bf      	sbcs	r7, r7
    4bd2:	427f      	negs	r7, r7
    4bd4:	19e4      	adds	r4, r4, r7
    4bd6:	001f      	movs	r7, r3
    4bd8:	0223      	lsls	r3, r4, #8
    4bda:	d52c      	bpl.n	4c36 <__aeabi_dadd+0x17e>
    4bdc:	4b96      	ldr	r3, [pc, #600]	; (4e38 <__aeabi_dadd+0x380>)
    4bde:	3601      	adds	r6, #1
    4be0:	429e      	cmp	r6, r3
    4be2:	d100      	bne.n	4be6 <__aeabi_dadd+0x12e>
    4be4:	e09a      	b.n	4d1c <__aeabi_dadd+0x264>
    4be6:	4645      	mov	r5, r8
    4be8:	4b94      	ldr	r3, [pc, #592]	; (4e3c <__aeabi_dadd+0x384>)
    4bea:	08ff      	lsrs	r7, r7, #3
    4bec:	401c      	ands	r4, r3
    4bee:	0760      	lsls	r0, r4, #29
    4bf0:	0576      	lsls	r6, r6, #21
    4bf2:	0264      	lsls	r4, r4, #9
    4bf4:	4307      	orrs	r7, r0
    4bf6:	0b24      	lsrs	r4, r4, #12
    4bf8:	0d76      	lsrs	r6, r6, #21
    4bfa:	2100      	movs	r1, #0
    4bfc:	0324      	lsls	r4, r4, #12
    4bfe:	0b23      	lsrs	r3, r4, #12
    4c00:	0d0c      	lsrs	r4, r1, #20
    4c02:	4a8f      	ldr	r2, [pc, #572]	; (4e40 <__aeabi_dadd+0x388>)
    4c04:	0524      	lsls	r4, r4, #20
    4c06:	431c      	orrs	r4, r3
    4c08:	4014      	ands	r4, r2
    4c0a:	0533      	lsls	r3, r6, #20
    4c0c:	4323      	orrs	r3, r4
    4c0e:	005b      	lsls	r3, r3, #1
    4c10:	07ed      	lsls	r5, r5, #31
    4c12:	085b      	lsrs	r3, r3, #1
    4c14:	432b      	orrs	r3, r5
    4c16:	0038      	movs	r0, r7
    4c18:	0019      	movs	r1, r3
    4c1a:	bc3c      	pop	{r2, r3, r4, r5}
    4c1c:	4690      	mov	r8, r2
    4c1e:	4699      	mov	r9, r3
    4c20:	46a2      	mov	sl, r4
    4c22:	46ab      	mov	fp, r5
    4c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c26:	4664      	mov	r4, ip
    4c28:	4304      	orrs	r4, r0
    4c2a:	d100      	bne.n	4c2e <__aeabi_dadd+0x176>
    4c2c:	e211      	b.n	5052 <__aeabi_dadd+0x59a>
    4c2e:	0004      	movs	r4, r0
    4c30:	4667      	mov	r7, ip
    4c32:	077b      	lsls	r3, r7, #29
    4c34:	d1c6      	bne.n	4bc4 <__aeabi_dadd+0x10c>
    4c36:	4645      	mov	r5, r8
    4c38:	0760      	lsls	r0, r4, #29
    4c3a:	08ff      	lsrs	r7, r7, #3
    4c3c:	4307      	orrs	r7, r0
    4c3e:	08e4      	lsrs	r4, r4, #3
    4c40:	4b7d      	ldr	r3, [pc, #500]	; (4e38 <__aeabi_dadd+0x380>)
    4c42:	429e      	cmp	r6, r3
    4c44:	d030      	beq.n	4ca8 <__aeabi_dadd+0x1f0>
    4c46:	0324      	lsls	r4, r4, #12
    4c48:	0576      	lsls	r6, r6, #21
    4c4a:	0b24      	lsrs	r4, r4, #12
    4c4c:	0d76      	lsrs	r6, r6, #21
    4c4e:	e7d4      	b.n	4bfa <__aeabi_dadd+0x142>
    4c50:	1a33      	subs	r3, r6, r0
    4c52:	469a      	mov	sl, r3
    4c54:	2b00      	cmp	r3, #0
    4c56:	dd78      	ble.n	4d4a <__aeabi_dadd+0x292>
    4c58:	2800      	cmp	r0, #0
    4c5a:	d031      	beq.n	4cc0 <__aeabi_dadd+0x208>
    4c5c:	4876      	ldr	r0, [pc, #472]	; (4e38 <__aeabi_dadd+0x380>)
    4c5e:	4286      	cmp	r6, r0
    4c60:	d0ae      	beq.n	4bc0 <__aeabi_dadd+0x108>
    4c62:	2080      	movs	r0, #128	; 0x80
    4c64:	0400      	lsls	r0, r0, #16
    4c66:	4301      	orrs	r1, r0
    4c68:	4653      	mov	r3, sl
    4c6a:	2b38      	cmp	r3, #56	; 0x38
    4c6c:	dc00      	bgt.n	4c70 <__aeabi_dadd+0x1b8>
    4c6e:	e0e9      	b.n	4e44 <__aeabi_dadd+0x38c>
    4c70:	430a      	orrs	r2, r1
    4c72:	1e51      	subs	r1, r2, #1
    4c74:	418a      	sbcs	r2, r1
    4c76:	2100      	movs	r1, #0
    4c78:	19d2      	adds	r2, r2, r7
    4c7a:	42ba      	cmp	r2, r7
    4c7c:	41bf      	sbcs	r7, r7
    4c7e:	1909      	adds	r1, r1, r4
    4c80:	427c      	negs	r4, r7
    4c82:	0017      	movs	r7, r2
    4c84:	190c      	adds	r4, r1, r4
    4c86:	0223      	lsls	r3, r4, #8
    4c88:	d5d3      	bpl.n	4c32 <__aeabi_dadd+0x17a>
    4c8a:	4b6b      	ldr	r3, [pc, #428]	; (4e38 <__aeabi_dadd+0x380>)
    4c8c:	3601      	adds	r6, #1
    4c8e:	429e      	cmp	r6, r3
    4c90:	d100      	bne.n	4c94 <__aeabi_dadd+0x1dc>
    4c92:	e13a      	b.n	4f0a <__aeabi_dadd+0x452>
    4c94:	2001      	movs	r0, #1
    4c96:	4b69      	ldr	r3, [pc, #420]	; (4e3c <__aeabi_dadd+0x384>)
    4c98:	401c      	ands	r4, r3
    4c9a:	087b      	lsrs	r3, r7, #1
    4c9c:	4007      	ands	r7, r0
    4c9e:	431f      	orrs	r7, r3
    4ca0:	07e0      	lsls	r0, r4, #31
    4ca2:	4307      	orrs	r7, r0
    4ca4:	0864      	lsrs	r4, r4, #1
    4ca6:	e78b      	b.n	4bc0 <__aeabi_dadd+0x108>
    4ca8:	0023      	movs	r3, r4
    4caa:	433b      	orrs	r3, r7
    4cac:	d100      	bne.n	4cb0 <__aeabi_dadd+0x1f8>
    4cae:	e1cb      	b.n	5048 <__aeabi_dadd+0x590>
    4cb0:	2280      	movs	r2, #128	; 0x80
    4cb2:	0312      	lsls	r2, r2, #12
    4cb4:	4314      	orrs	r4, r2
    4cb6:	0324      	lsls	r4, r4, #12
    4cb8:	0b24      	lsrs	r4, r4, #12
    4cba:	e79e      	b.n	4bfa <__aeabi_dadd+0x142>
    4cbc:	002e      	movs	r6, r5
    4cbe:	e77f      	b.n	4bc0 <__aeabi_dadd+0x108>
    4cc0:	0008      	movs	r0, r1
    4cc2:	4310      	orrs	r0, r2
    4cc4:	d100      	bne.n	4cc8 <__aeabi_dadd+0x210>
    4cc6:	e0b4      	b.n	4e32 <__aeabi_dadd+0x37a>
    4cc8:	1e58      	subs	r0, r3, #1
    4cca:	2800      	cmp	r0, #0
    4ccc:	d000      	beq.n	4cd0 <__aeabi_dadd+0x218>
    4cce:	e0de      	b.n	4e8e <__aeabi_dadd+0x3d6>
    4cd0:	18ba      	adds	r2, r7, r2
    4cd2:	42ba      	cmp	r2, r7
    4cd4:	419b      	sbcs	r3, r3
    4cd6:	1864      	adds	r4, r4, r1
    4cd8:	425b      	negs	r3, r3
    4cda:	18e4      	adds	r4, r4, r3
    4cdc:	0017      	movs	r7, r2
    4cde:	2601      	movs	r6, #1
    4ce0:	0223      	lsls	r3, r4, #8
    4ce2:	d5a6      	bpl.n	4c32 <__aeabi_dadd+0x17a>
    4ce4:	2602      	movs	r6, #2
    4ce6:	e7d5      	b.n	4c94 <__aeabi_dadd+0x1dc>
    4ce8:	2d00      	cmp	r5, #0
    4cea:	d16e      	bne.n	4dca <__aeabi_dadd+0x312>
    4cec:	1c70      	adds	r0, r6, #1
    4cee:	0540      	lsls	r0, r0, #21
    4cf0:	0d40      	lsrs	r0, r0, #21
    4cf2:	2801      	cmp	r0, #1
    4cf4:	dc00      	bgt.n	4cf8 <__aeabi_dadd+0x240>
    4cf6:	e0f9      	b.n	4eec <__aeabi_dadd+0x434>
    4cf8:	1ab8      	subs	r0, r7, r2
    4cfa:	4684      	mov	ip, r0
    4cfc:	4287      	cmp	r7, r0
    4cfe:	4180      	sbcs	r0, r0
    4d00:	1ae5      	subs	r5, r4, r3
    4d02:	4240      	negs	r0, r0
    4d04:	1a2d      	subs	r5, r5, r0
    4d06:	0228      	lsls	r0, r5, #8
    4d08:	d400      	bmi.n	4d0c <__aeabi_dadd+0x254>
    4d0a:	e089      	b.n	4e20 <__aeabi_dadd+0x368>
    4d0c:	1bd7      	subs	r7, r2, r7
    4d0e:	42ba      	cmp	r2, r7
    4d10:	4192      	sbcs	r2, r2
    4d12:	1b1c      	subs	r4, r3, r4
    4d14:	4252      	negs	r2, r2
    4d16:	1aa5      	subs	r5, r4, r2
    4d18:	46d8      	mov	r8, fp
    4d1a:	e729      	b.n	4b70 <__aeabi_dadd+0xb8>
    4d1c:	4645      	mov	r5, r8
    4d1e:	2400      	movs	r4, #0
    4d20:	2700      	movs	r7, #0
    4d22:	e76a      	b.n	4bfa <__aeabi_dadd+0x142>
    4d24:	4c45      	ldr	r4, [pc, #276]	; (4e3c <__aeabi_dadd+0x384>)
    4d26:	1af6      	subs	r6, r6, r3
    4d28:	402c      	ands	r4, r5
    4d2a:	e749      	b.n	4bc0 <__aeabi_dadd+0x108>
    4d2c:	003d      	movs	r5, r7
    4d2e:	3828      	subs	r0, #40	; 0x28
    4d30:	4085      	lsls	r5, r0
    4d32:	2700      	movs	r7, #0
    4d34:	e72e      	b.n	4b94 <__aeabi_dadd+0xdc>
    4d36:	0038      	movs	r0, r7
    4d38:	f001 fbd0 	bl	64dc <__clzsi2>
    4d3c:	3020      	adds	r0, #32
    4d3e:	e71d      	b.n	4b7c <__aeabi_dadd+0xc4>
    4d40:	430a      	orrs	r2, r1
    4d42:	1e51      	subs	r1, r2, #1
    4d44:	418a      	sbcs	r2, r1
    4d46:	2100      	movs	r1, #0
    4d48:	e707      	b.n	4b5a <__aeabi_dadd+0xa2>
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d000      	beq.n	4d50 <__aeabi_dadd+0x298>
    4d4e:	e0f3      	b.n	4f38 <__aeabi_dadd+0x480>
    4d50:	1c70      	adds	r0, r6, #1
    4d52:	0543      	lsls	r3, r0, #21
    4d54:	0d5b      	lsrs	r3, r3, #21
    4d56:	2b01      	cmp	r3, #1
    4d58:	dc00      	bgt.n	4d5c <__aeabi_dadd+0x2a4>
    4d5a:	e0ad      	b.n	4eb8 <__aeabi_dadd+0x400>
    4d5c:	4b36      	ldr	r3, [pc, #216]	; (4e38 <__aeabi_dadd+0x380>)
    4d5e:	4298      	cmp	r0, r3
    4d60:	d100      	bne.n	4d64 <__aeabi_dadd+0x2ac>
    4d62:	e0d1      	b.n	4f08 <__aeabi_dadd+0x450>
    4d64:	18ba      	adds	r2, r7, r2
    4d66:	42ba      	cmp	r2, r7
    4d68:	41bf      	sbcs	r7, r7
    4d6a:	1864      	adds	r4, r4, r1
    4d6c:	427f      	negs	r7, r7
    4d6e:	19e4      	adds	r4, r4, r7
    4d70:	07e7      	lsls	r7, r4, #31
    4d72:	0852      	lsrs	r2, r2, #1
    4d74:	4317      	orrs	r7, r2
    4d76:	0864      	lsrs	r4, r4, #1
    4d78:	0006      	movs	r6, r0
    4d7a:	e721      	b.n	4bc0 <__aeabi_dadd+0x108>
    4d7c:	482e      	ldr	r0, [pc, #184]	; (4e38 <__aeabi_dadd+0x380>)
    4d7e:	4285      	cmp	r5, r0
    4d80:	d100      	bne.n	4d84 <__aeabi_dadd+0x2cc>
    4d82:	e093      	b.n	4eac <__aeabi_dadd+0x3f4>
    4d84:	001d      	movs	r5, r3
    4d86:	e6d0      	b.n	4b2a <__aeabi_dadd+0x72>
    4d88:	0029      	movs	r1, r5
    4d8a:	3e1f      	subs	r6, #31
    4d8c:	40f1      	lsrs	r1, r6
    4d8e:	2b20      	cmp	r3, #32
    4d90:	d100      	bne.n	4d94 <__aeabi_dadd+0x2dc>
    4d92:	e08d      	b.n	4eb0 <__aeabi_dadd+0x3f8>
    4d94:	2240      	movs	r2, #64	; 0x40
    4d96:	1ad3      	subs	r3, r2, r3
    4d98:	409d      	lsls	r5, r3
    4d9a:	432f      	orrs	r7, r5
    4d9c:	1e7d      	subs	r5, r7, #1
    4d9e:	41af      	sbcs	r7, r5
    4da0:	2400      	movs	r4, #0
    4da2:	430f      	orrs	r7, r1
    4da4:	2600      	movs	r6, #0
    4da6:	e744      	b.n	4c32 <__aeabi_dadd+0x17a>
    4da8:	002b      	movs	r3, r5
    4daa:	0008      	movs	r0, r1
    4dac:	3b20      	subs	r3, #32
    4dae:	40d8      	lsrs	r0, r3
    4db0:	0003      	movs	r3, r0
    4db2:	2d20      	cmp	r5, #32
    4db4:	d100      	bne.n	4db8 <__aeabi_dadd+0x300>
    4db6:	e07d      	b.n	4eb4 <__aeabi_dadd+0x3fc>
    4db8:	2040      	movs	r0, #64	; 0x40
    4dba:	1b45      	subs	r5, r0, r5
    4dbc:	40a9      	lsls	r1, r5
    4dbe:	430a      	orrs	r2, r1
    4dc0:	1e51      	subs	r1, r2, #1
    4dc2:	418a      	sbcs	r2, r1
    4dc4:	2100      	movs	r1, #0
    4dc6:	431a      	orrs	r2, r3
    4dc8:	e6c7      	b.n	4b5a <__aeabi_dadd+0xa2>
    4dca:	2e00      	cmp	r6, #0
    4dcc:	d050      	beq.n	4e70 <__aeabi_dadd+0x3b8>
    4dce:	4e1a      	ldr	r6, [pc, #104]	; (4e38 <__aeabi_dadd+0x380>)
    4dd0:	42b0      	cmp	r0, r6
    4dd2:	d057      	beq.n	4e84 <__aeabi_dadd+0x3cc>
    4dd4:	2680      	movs	r6, #128	; 0x80
    4dd6:	426b      	negs	r3, r5
    4dd8:	4699      	mov	r9, r3
    4dda:	0436      	lsls	r6, r6, #16
    4ddc:	4334      	orrs	r4, r6
    4dde:	464b      	mov	r3, r9
    4de0:	2b38      	cmp	r3, #56	; 0x38
    4de2:	dd00      	ble.n	4de6 <__aeabi_dadd+0x32e>
    4de4:	e0d6      	b.n	4f94 <__aeabi_dadd+0x4dc>
    4de6:	2b1f      	cmp	r3, #31
    4de8:	dd00      	ble.n	4dec <__aeabi_dadd+0x334>
    4dea:	e135      	b.n	5058 <__aeabi_dadd+0x5a0>
    4dec:	2620      	movs	r6, #32
    4dee:	1af5      	subs	r5, r6, r3
    4df0:	0026      	movs	r6, r4
    4df2:	40ae      	lsls	r6, r5
    4df4:	46b2      	mov	sl, r6
    4df6:	003e      	movs	r6, r7
    4df8:	40de      	lsrs	r6, r3
    4dfa:	46ac      	mov	ip, r5
    4dfc:	0035      	movs	r5, r6
    4dfe:	4656      	mov	r6, sl
    4e00:	432e      	orrs	r6, r5
    4e02:	4665      	mov	r5, ip
    4e04:	40af      	lsls	r7, r5
    4e06:	1e7d      	subs	r5, r7, #1
    4e08:	41af      	sbcs	r7, r5
    4e0a:	40dc      	lsrs	r4, r3
    4e0c:	4337      	orrs	r7, r6
    4e0e:	1bd7      	subs	r7, r2, r7
    4e10:	42ba      	cmp	r2, r7
    4e12:	4192      	sbcs	r2, r2
    4e14:	1b0c      	subs	r4, r1, r4
    4e16:	4252      	negs	r2, r2
    4e18:	1aa4      	subs	r4, r4, r2
    4e1a:	0006      	movs	r6, r0
    4e1c:	46d8      	mov	r8, fp
    4e1e:	e6a3      	b.n	4b68 <__aeabi_dadd+0xb0>
    4e20:	4664      	mov	r4, ip
    4e22:	4667      	mov	r7, ip
    4e24:	432c      	orrs	r4, r5
    4e26:	d000      	beq.n	4e2a <__aeabi_dadd+0x372>
    4e28:	e6a2      	b.n	4b70 <__aeabi_dadd+0xb8>
    4e2a:	2500      	movs	r5, #0
    4e2c:	2600      	movs	r6, #0
    4e2e:	2700      	movs	r7, #0
    4e30:	e706      	b.n	4c40 <__aeabi_dadd+0x188>
    4e32:	001e      	movs	r6, r3
    4e34:	e6c4      	b.n	4bc0 <__aeabi_dadd+0x108>
    4e36:	46c0      	nop			; (mov r8, r8)
    4e38:	000007ff 	.word	0x000007ff
    4e3c:	ff7fffff 	.word	0xff7fffff
    4e40:	800fffff 	.word	0x800fffff
    4e44:	2b1f      	cmp	r3, #31
    4e46:	dc63      	bgt.n	4f10 <__aeabi_dadd+0x458>
    4e48:	2020      	movs	r0, #32
    4e4a:	1ac3      	subs	r3, r0, r3
    4e4c:	0008      	movs	r0, r1
    4e4e:	4098      	lsls	r0, r3
    4e50:	469c      	mov	ip, r3
    4e52:	4683      	mov	fp, r0
    4e54:	4653      	mov	r3, sl
    4e56:	0010      	movs	r0, r2
    4e58:	40d8      	lsrs	r0, r3
    4e5a:	0003      	movs	r3, r0
    4e5c:	4658      	mov	r0, fp
    4e5e:	4318      	orrs	r0, r3
    4e60:	4663      	mov	r3, ip
    4e62:	409a      	lsls	r2, r3
    4e64:	1e53      	subs	r3, r2, #1
    4e66:	419a      	sbcs	r2, r3
    4e68:	4653      	mov	r3, sl
    4e6a:	4302      	orrs	r2, r0
    4e6c:	40d9      	lsrs	r1, r3
    4e6e:	e703      	b.n	4c78 <__aeabi_dadd+0x1c0>
    4e70:	0026      	movs	r6, r4
    4e72:	433e      	orrs	r6, r7
    4e74:	d006      	beq.n	4e84 <__aeabi_dadd+0x3cc>
    4e76:	43eb      	mvns	r3, r5
    4e78:	4699      	mov	r9, r3
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d0c7      	beq.n	4e0e <__aeabi_dadd+0x356>
    4e7e:	4e94      	ldr	r6, [pc, #592]	; (50d0 <__aeabi_dadd+0x618>)
    4e80:	42b0      	cmp	r0, r6
    4e82:	d1ac      	bne.n	4dde <__aeabi_dadd+0x326>
    4e84:	000c      	movs	r4, r1
    4e86:	0017      	movs	r7, r2
    4e88:	0006      	movs	r6, r0
    4e8a:	46d8      	mov	r8, fp
    4e8c:	e698      	b.n	4bc0 <__aeabi_dadd+0x108>
    4e8e:	4b90      	ldr	r3, [pc, #576]	; (50d0 <__aeabi_dadd+0x618>)
    4e90:	459a      	cmp	sl, r3
    4e92:	d00b      	beq.n	4eac <__aeabi_dadd+0x3f4>
    4e94:	4682      	mov	sl, r0
    4e96:	e6e7      	b.n	4c68 <__aeabi_dadd+0x1b0>
    4e98:	2800      	cmp	r0, #0
    4e9a:	d000      	beq.n	4e9e <__aeabi_dadd+0x3e6>
    4e9c:	e09e      	b.n	4fdc <__aeabi_dadd+0x524>
    4e9e:	0018      	movs	r0, r3
    4ea0:	4310      	orrs	r0, r2
    4ea2:	d100      	bne.n	4ea6 <__aeabi_dadd+0x3ee>
    4ea4:	e0e9      	b.n	507a <__aeabi_dadd+0x5c2>
    4ea6:	001c      	movs	r4, r3
    4ea8:	0017      	movs	r7, r2
    4eaa:	46d8      	mov	r8, fp
    4eac:	4e88      	ldr	r6, [pc, #544]	; (50d0 <__aeabi_dadd+0x618>)
    4eae:	e687      	b.n	4bc0 <__aeabi_dadd+0x108>
    4eb0:	2500      	movs	r5, #0
    4eb2:	e772      	b.n	4d9a <__aeabi_dadd+0x2e2>
    4eb4:	2100      	movs	r1, #0
    4eb6:	e782      	b.n	4dbe <__aeabi_dadd+0x306>
    4eb8:	0023      	movs	r3, r4
    4eba:	433b      	orrs	r3, r7
    4ebc:	2e00      	cmp	r6, #0
    4ebe:	d000      	beq.n	4ec2 <__aeabi_dadd+0x40a>
    4ec0:	e0ab      	b.n	501a <__aeabi_dadd+0x562>
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d100      	bne.n	4ec8 <__aeabi_dadd+0x410>
    4ec6:	e0e7      	b.n	5098 <__aeabi_dadd+0x5e0>
    4ec8:	000b      	movs	r3, r1
    4eca:	4313      	orrs	r3, r2
    4ecc:	d100      	bne.n	4ed0 <__aeabi_dadd+0x418>
    4ece:	e677      	b.n	4bc0 <__aeabi_dadd+0x108>
    4ed0:	18ba      	adds	r2, r7, r2
    4ed2:	42ba      	cmp	r2, r7
    4ed4:	41bf      	sbcs	r7, r7
    4ed6:	1864      	adds	r4, r4, r1
    4ed8:	427f      	negs	r7, r7
    4eda:	19e4      	adds	r4, r4, r7
    4edc:	0223      	lsls	r3, r4, #8
    4ede:	d400      	bmi.n	4ee2 <__aeabi_dadd+0x42a>
    4ee0:	e0f2      	b.n	50c8 <__aeabi_dadd+0x610>
    4ee2:	4b7c      	ldr	r3, [pc, #496]	; (50d4 <__aeabi_dadd+0x61c>)
    4ee4:	0017      	movs	r7, r2
    4ee6:	401c      	ands	r4, r3
    4ee8:	0006      	movs	r6, r0
    4eea:	e669      	b.n	4bc0 <__aeabi_dadd+0x108>
    4eec:	0020      	movs	r0, r4
    4eee:	4338      	orrs	r0, r7
    4ef0:	2e00      	cmp	r6, #0
    4ef2:	d1d1      	bne.n	4e98 <__aeabi_dadd+0x3e0>
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d15b      	bne.n	4fb0 <__aeabi_dadd+0x4f8>
    4ef8:	001c      	movs	r4, r3
    4efa:	4314      	orrs	r4, r2
    4efc:	d100      	bne.n	4f00 <__aeabi_dadd+0x448>
    4efe:	e0a8      	b.n	5052 <__aeabi_dadd+0x59a>
    4f00:	001c      	movs	r4, r3
    4f02:	0017      	movs	r7, r2
    4f04:	46d8      	mov	r8, fp
    4f06:	e65b      	b.n	4bc0 <__aeabi_dadd+0x108>
    4f08:	0006      	movs	r6, r0
    4f0a:	2400      	movs	r4, #0
    4f0c:	2700      	movs	r7, #0
    4f0e:	e697      	b.n	4c40 <__aeabi_dadd+0x188>
    4f10:	4650      	mov	r0, sl
    4f12:	000b      	movs	r3, r1
    4f14:	3820      	subs	r0, #32
    4f16:	40c3      	lsrs	r3, r0
    4f18:	4699      	mov	r9, r3
    4f1a:	4653      	mov	r3, sl
    4f1c:	2b20      	cmp	r3, #32
    4f1e:	d100      	bne.n	4f22 <__aeabi_dadd+0x46a>
    4f20:	e095      	b.n	504e <__aeabi_dadd+0x596>
    4f22:	2340      	movs	r3, #64	; 0x40
    4f24:	4650      	mov	r0, sl
    4f26:	1a1b      	subs	r3, r3, r0
    4f28:	4099      	lsls	r1, r3
    4f2a:	430a      	orrs	r2, r1
    4f2c:	1e51      	subs	r1, r2, #1
    4f2e:	418a      	sbcs	r2, r1
    4f30:	464b      	mov	r3, r9
    4f32:	2100      	movs	r1, #0
    4f34:	431a      	orrs	r2, r3
    4f36:	e69f      	b.n	4c78 <__aeabi_dadd+0x1c0>
    4f38:	2e00      	cmp	r6, #0
    4f3a:	d130      	bne.n	4f9e <__aeabi_dadd+0x4e6>
    4f3c:	0026      	movs	r6, r4
    4f3e:	433e      	orrs	r6, r7
    4f40:	d067      	beq.n	5012 <__aeabi_dadd+0x55a>
    4f42:	43db      	mvns	r3, r3
    4f44:	469a      	mov	sl, r3
    4f46:	2b00      	cmp	r3, #0
    4f48:	d01c      	beq.n	4f84 <__aeabi_dadd+0x4cc>
    4f4a:	4e61      	ldr	r6, [pc, #388]	; (50d0 <__aeabi_dadd+0x618>)
    4f4c:	42b0      	cmp	r0, r6
    4f4e:	d060      	beq.n	5012 <__aeabi_dadd+0x55a>
    4f50:	4653      	mov	r3, sl
    4f52:	2b38      	cmp	r3, #56	; 0x38
    4f54:	dd00      	ble.n	4f58 <__aeabi_dadd+0x4a0>
    4f56:	e096      	b.n	5086 <__aeabi_dadd+0x5ce>
    4f58:	2b1f      	cmp	r3, #31
    4f5a:	dd00      	ble.n	4f5e <__aeabi_dadd+0x4a6>
    4f5c:	e09f      	b.n	509e <__aeabi_dadd+0x5e6>
    4f5e:	2620      	movs	r6, #32
    4f60:	1af3      	subs	r3, r6, r3
    4f62:	0026      	movs	r6, r4
    4f64:	409e      	lsls	r6, r3
    4f66:	469c      	mov	ip, r3
    4f68:	46b3      	mov	fp, r6
    4f6a:	4653      	mov	r3, sl
    4f6c:	003e      	movs	r6, r7
    4f6e:	40de      	lsrs	r6, r3
    4f70:	0033      	movs	r3, r6
    4f72:	465e      	mov	r6, fp
    4f74:	431e      	orrs	r6, r3
    4f76:	4663      	mov	r3, ip
    4f78:	409f      	lsls	r7, r3
    4f7a:	1e7b      	subs	r3, r7, #1
    4f7c:	419f      	sbcs	r7, r3
    4f7e:	4653      	mov	r3, sl
    4f80:	40dc      	lsrs	r4, r3
    4f82:	4337      	orrs	r7, r6
    4f84:	18bf      	adds	r7, r7, r2
    4f86:	4297      	cmp	r7, r2
    4f88:	4192      	sbcs	r2, r2
    4f8a:	1864      	adds	r4, r4, r1
    4f8c:	4252      	negs	r2, r2
    4f8e:	18a4      	adds	r4, r4, r2
    4f90:	0006      	movs	r6, r0
    4f92:	e678      	b.n	4c86 <__aeabi_dadd+0x1ce>
    4f94:	4327      	orrs	r7, r4
    4f96:	1e7c      	subs	r4, r7, #1
    4f98:	41a7      	sbcs	r7, r4
    4f9a:	2400      	movs	r4, #0
    4f9c:	e737      	b.n	4e0e <__aeabi_dadd+0x356>
    4f9e:	4e4c      	ldr	r6, [pc, #304]	; (50d0 <__aeabi_dadd+0x618>)
    4fa0:	42b0      	cmp	r0, r6
    4fa2:	d036      	beq.n	5012 <__aeabi_dadd+0x55a>
    4fa4:	2680      	movs	r6, #128	; 0x80
    4fa6:	425b      	negs	r3, r3
    4fa8:	0436      	lsls	r6, r6, #16
    4faa:	469a      	mov	sl, r3
    4fac:	4334      	orrs	r4, r6
    4fae:	e7cf      	b.n	4f50 <__aeabi_dadd+0x498>
    4fb0:	0018      	movs	r0, r3
    4fb2:	4310      	orrs	r0, r2
    4fb4:	d100      	bne.n	4fb8 <__aeabi_dadd+0x500>
    4fb6:	e603      	b.n	4bc0 <__aeabi_dadd+0x108>
    4fb8:	1ab8      	subs	r0, r7, r2
    4fba:	4684      	mov	ip, r0
    4fbc:	4567      	cmp	r7, ip
    4fbe:	41ad      	sbcs	r5, r5
    4fc0:	1ae0      	subs	r0, r4, r3
    4fc2:	426d      	negs	r5, r5
    4fc4:	1b40      	subs	r0, r0, r5
    4fc6:	0205      	lsls	r5, r0, #8
    4fc8:	d400      	bmi.n	4fcc <__aeabi_dadd+0x514>
    4fca:	e62c      	b.n	4c26 <__aeabi_dadd+0x16e>
    4fcc:	1bd7      	subs	r7, r2, r7
    4fce:	42ba      	cmp	r2, r7
    4fd0:	4192      	sbcs	r2, r2
    4fd2:	1b1c      	subs	r4, r3, r4
    4fd4:	4252      	negs	r2, r2
    4fd6:	1aa4      	subs	r4, r4, r2
    4fd8:	46d8      	mov	r8, fp
    4fda:	e5f1      	b.n	4bc0 <__aeabi_dadd+0x108>
    4fdc:	0018      	movs	r0, r3
    4fde:	4310      	orrs	r0, r2
    4fe0:	d100      	bne.n	4fe4 <__aeabi_dadd+0x52c>
    4fe2:	e763      	b.n	4eac <__aeabi_dadd+0x3f4>
    4fe4:	08f8      	lsrs	r0, r7, #3
    4fe6:	0767      	lsls	r7, r4, #29
    4fe8:	4307      	orrs	r7, r0
    4fea:	2080      	movs	r0, #128	; 0x80
    4fec:	08e4      	lsrs	r4, r4, #3
    4fee:	0300      	lsls	r0, r0, #12
    4ff0:	4204      	tst	r4, r0
    4ff2:	d008      	beq.n	5006 <__aeabi_dadd+0x54e>
    4ff4:	08dd      	lsrs	r5, r3, #3
    4ff6:	4205      	tst	r5, r0
    4ff8:	d105      	bne.n	5006 <__aeabi_dadd+0x54e>
    4ffa:	08d2      	lsrs	r2, r2, #3
    4ffc:	0759      	lsls	r1, r3, #29
    4ffe:	4311      	orrs	r1, r2
    5000:	000f      	movs	r7, r1
    5002:	002c      	movs	r4, r5
    5004:	46d8      	mov	r8, fp
    5006:	0f7b      	lsrs	r3, r7, #29
    5008:	00e4      	lsls	r4, r4, #3
    500a:	431c      	orrs	r4, r3
    500c:	00ff      	lsls	r7, r7, #3
    500e:	4e30      	ldr	r6, [pc, #192]	; (50d0 <__aeabi_dadd+0x618>)
    5010:	e5d6      	b.n	4bc0 <__aeabi_dadd+0x108>
    5012:	000c      	movs	r4, r1
    5014:	0017      	movs	r7, r2
    5016:	0006      	movs	r6, r0
    5018:	e5d2      	b.n	4bc0 <__aeabi_dadd+0x108>
    501a:	2b00      	cmp	r3, #0
    501c:	d038      	beq.n	5090 <__aeabi_dadd+0x5d8>
    501e:	000b      	movs	r3, r1
    5020:	4313      	orrs	r3, r2
    5022:	d100      	bne.n	5026 <__aeabi_dadd+0x56e>
    5024:	e742      	b.n	4eac <__aeabi_dadd+0x3f4>
    5026:	08f8      	lsrs	r0, r7, #3
    5028:	0767      	lsls	r7, r4, #29
    502a:	4307      	orrs	r7, r0
    502c:	2080      	movs	r0, #128	; 0x80
    502e:	08e4      	lsrs	r4, r4, #3
    5030:	0300      	lsls	r0, r0, #12
    5032:	4204      	tst	r4, r0
    5034:	d0e7      	beq.n	5006 <__aeabi_dadd+0x54e>
    5036:	08cb      	lsrs	r3, r1, #3
    5038:	4203      	tst	r3, r0
    503a:	d1e4      	bne.n	5006 <__aeabi_dadd+0x54e>
    503c:	08d2      	lsrs	r2, r2, #3
    503e:	0749      	lsls	r1, r1, #29
    5040:	4311      	orrs	r1, r2
    5042:	000f      	movs	r7, r1
    5044:	001c      	movs	r4, r3
    5046:	e7de      	b.n	5006 <__aeabi_dadd+0x54e>
    5048:	2700      	movs	r7, #0
    504a:	2400      	movs	r4, #0
    504c:	e5d5      	b.n	4bfa <__aeabi_dadd+0x142>
    504e:	2100      	movs	r1, #0
    5050:	e76b      	b.n	4f2a <__aeabi_dadd+0x472>
    5052:	2500      	movs	r5, #0
    5054:	2700      	movs	r7, #0
    5056:	e5f3      	b.n	4c40 <__aeabi_dadd+0x188>
    5058:	464e      	mov	r6, r9
    505a:	0025      	movs	r5, r4
    505c:	3e20      	subs	r6, #32
    505e:	40f5      	lsrs	r5, r6
    5060:	464b      	mov	r3, r9
    5062:	002e      	movs	r6, r5
    5064:	2b20      	cmp	r3, #32
    5066:	d02d      	beq.n	50c4 <__aeabi_dadd+0x60c>
    5068:	2540      	movs	r5, #64	; 0x40
    506a:	1aed      	subs	r5, r5, r3
    506c:	40ac      	lsls	r4, r5
    506e:	4327      	orrs	r7, r4
    5070:	1e7c      	subs	r4, r7, #1
    5072:	41a7      	sbcs	r7, r4
    5074:	2400      	movs	r4, #0
    5076:	4337      	orrs	r7, r6
    5078:	e6c9      	b.n	4e0e <__aeabi_dadd+0x356>
    507a:	2480      	movs	r4, #128	; 0x80
    507c:	2500      	movs	r5, #0
    507e:	0324      	lsls	r4, r4, #12
    5080:	4e13      	ldr	r6, [pc, #76]	; (50d0 <__aeabi_dadd+0x618>)
    5082:	2700      	movs	r7, #0
    5084:	e5dc      	b.n	4c40 <__aeabi_dadd+0x188>
    5086:	4327      	orrs	r7, r4
    5088:	1e7c      	subs	r4, r7, #1
    508a:	41a7      	sbcs	r7, r4
    508c:	2400      	movs	r4, #0
    508e:	e779      	b.n	4f84 <__aeabi_dadd+0x4cc>
    5090:	000c      	movs	r4, r1
    5092:	0017      	movs	r7, r2
    5094:	4e0e      	ldr	r6, [pc, #56]	; (50d0 <__aeabi_dadd+0x618>)
    5096:	e593      	b.n	4bc0 <__aeabi_dadd+0x108>
    5098:	000c      	movs	r4, r1
    509a:	0017      	movs	r7, r2
    509c:	e590      	b.n	4bc0 <__aeabi_dadd+0x108>
    509e:	4656      	mov	r6, sl
    50a0:	0023      	movs	r3, r4
    50a2:	3e20      	subs	r6, #32
    50a4:	40f3      	lsrs	r3, r6
    50a6:	4699      	mov	r9, r3
    50a8:	4653      	mov	r3, sl
    50aa:	2b20      	cmp	r3, #32
    50ac:	d00e      	beq.n	50cc <__aeabi_dadd+0x614>
    50ae:	2340      	movs	r3, #64	; 0x40
    50b0:	4656      	mov	r6, sl
    50b2:	1b9b      	subs	r3, r3, r6
    50b4:	409c      	lsls	r4, r3
    50b6:	4327      	orrs	r7, r4
    50b8:	1e7c      	subs	r4, r7, #1
    50ba:	41a7      	sbcs	r7, r4
    50bc:	464b      	mov	r3, r9
    50be:	2400      	movs	r4, #0
    50c0:	431f      	orrs	r7, r3
    50c2:	e75f      	b.n	4f84 <__aeabi_dadd+0x4cc>
    50c4:	2400      	movs	r4, #0
    50c6:	e7d2      	b.n	506e <__aeabi_dadd+0x5b6>
    50c8:	0017      	movs	r7, r2
    50ca:	e5b2      	b.n	4c32 <__aeabi_dadd+0x17a>
    50cc:	2400      	movs	r4, #0
    50ce:	e7f2      	b.n	50b6 <__aeabi_dadd+0x5fe>
    50d0:	000007ff 	.word	0x000007ff
    50d4:	ff7fffff 	.word	0xff7fffff

000050d8 <__aeabi_ddiv>:
    50d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50da:	4657      	mov	r7, sl
    50dc:	4645      	mov	r5, r8
    50de:	46de      	mov	lr, fp
    50e0:	464e      	mov	r6, r9
    50e2:	b5e0      	push	{r5, r6, r7, lr}
    50e4:	004c      	lsls	r4, r1, #1
    50e6:	030e      	lsls	r6, r1, #12
    50e8:	b087      	sub	sp, #28
    50ea:	4683      	mov	fp, r0
    50ec:	4692      	mov	sl, r2
    50ee:	001d      	movs	r5, r3
    50f0:	4680      	mov	r8, r0
    50f2:	0b36      	lsrs	r6, r6, #12
    50f4:	0d64      	lsrs	r4, r4, #21
    50f6:	0fcf      	lsrs	r7, r1, #31
    50f8:	2c00      	cmp	r4, #0
    50fa:	d04f      	beq.n	519c <__aeabi_ddiv+0xc4>
    50fc:	4b6f      	ldr	r3, [pc, #444]	; (52bc <__aeabi_ddiv+0x1e4>)
    50fe:	429c      	cmp	r4, r3
    5100:	d035      	beq.n	516e <__aeabi_ddiv+0x96>
    5102:	2380      	movs	r3, #128	; 0x80
    5104:	0f42      	lsrs	r2, r0, #29
    5106:	041b      	lsls	r3, r3, #16
    5108:	00f6      	lsls	r6, r6, #3
    510a:	4313      	orrs	r3, r2
    510c:	4333      	orrs	r3, r6
    510e:	4699      	mov	r9, r3
    5110:	00c3      	lsls	r3, r0, #3
    5112:	4698      	mov	r8, r3
    5114:	4b6a      	ldr	r3, [pc, #424]	; (52c0 <__aeabi_ddiv+0x1e8>)
    5116:	2600      	movs	r6, #0
    5118:	469c      	mov	ip, r3
    511a:	2300      	movs	r3, #0
    511c:	4464      	add	r4, ip
    511e:	9303      	str	r3, [sp, #12]
    5120:	032b      	lsls	r3, r5, #12
    5122:	0b1b      	lsrs	r3, r3, #12
    5124:	469b      	mov	fp, r3
    5126:	006b      	lsls	r3, r5, #1
    5128:	0fed      	lsrs	r5, r5, #31
    512a:	4650      	mov	r0, sl
    512c:	0d5b      	lsrs	r3, r3, #21
    512e:	9501      	str	r5, [sp, #4]
    5130:	d05e      	beq.n	51f0 <__aeabi_ddiv+0x118>
    5132:	4a62      	ldr	r2, [pc, #392]	; (52bc <__aeabi_ddiv+0x1e4>)
    5134:	4293      	cmp	r3, r2
    5136:	d053      	beq.n	51e0 <__aeabi_ddiv+0x108>
    5138:	465a      	mov	r2, fp
    513a:	00d1      	lsls	r1, r2, #3
    513c:	2280      	movs	r2, #128	; 0x80
    513e:	0f40      	lsrs	r0, r0, #29
    5140:	0412      	lsls	r2, r2, #16
    5142:	4302      	orrs	r2, r0
    5144:	430a      	orrs	r2, r1
    5146:	4693      	mov	fp, r2
    5148:	4652      	mov	r2, sl
    514a:	00d1      	lsls	r1, r2, #3
    514c:	4a5c      	ldr	r2, [pc, #368]	; (52c0 <__aeabi_ddiv+0x1e8>)
    514e:	4694      	mov	ip, r2
    5150:	2200      	movs	r2, #0
    5152:	4463      	add	r3, ip
    5154:	0038      	movs	r0, r7
    5156:	4068      	eors	r0, r5
    5158:	4684      	mov	ip, r0
    515a:	9002      	str	r0, [sp, #8]
    515c:	1ae4      	subs	r4, r4, r3
    515e:	4316      	orrs	r6, r2
    5160:	2e0f      	cmp	r6, #15
    5162:	d900      	bls.n	5166 <__aeabi_ddiv+0x8e>
    5164:	e0b4      	b.n	52d0 <__aeabi_ddiv+0x1f8>
    5166:	4b57      	ldr	r3, [pc, #348]	; (52c4 <__aeabi_ddiv+0x1ec>)
    5168:	00b6      	lsls	r6, r6, #2
    516a:	599b      	ldr	r3, [r3, r6]
    516c:	469f      	mov	pc, r3
    516e:	0003      	movs	r3, r0
    5170:	4333      	orrs	r3, r6
    5172:	4699      	mov	r9, r3
    5174:	d16c      	bne.n	5250 <__aeabi_ddiv+0x178>
    5176:	2300      	movs	r3, #0
    5178:	4698      	mov	r8, r3
    517a:	3302      	adds	r3, #2
    517c:	2608      	movs	r6, #8
    517e:	9303      	str	r3, [sp, #12]
    5180:	e7ce      	b.n	5120 <__aeabi_ddiv+0x48>
    5182:	46cb      	mov	fp, r9
    5184:	4641      	mov	r1, r8
    5186:	9a03      	ldr	r2, [sp, #12]
    5188:	9701      	str	r7, [sp, #4]
    518a:	2a02      	cmp	r2, #2
    518c:	d165      	bne.n	525a <__aeabi_ddiv+0x182>
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	4c4a      	ldr	r4, [pc, #296]	; (52bc <__aeabi_ddiv+0x1e4>)
    5192:	469c      	mov	ip, r3
    5194:	2300      	movs	r3, #0
    5196:	2200      	movs	r2, #0
    5198:	4698      	mov	r8, r3
    519a:	e06b      	b.n	5274 <__aeabi_ddiv+0x19c>
    519c:	0003      	movs	r3, r0
    519e:	4333      	orrs	r3, r6
    51a0:	4699      	mov	r9, r3
    51a2:	d04e      	beq.n	5242 <__aeabi_ddiv+0x16a>
    51a4:	2e00      	cmp	r6, #0
    51a6:	d100      	bne.n	51aa <__aeabi_ddiv+0xd2>
    51a8:	e1bc      	b.n	5524 <__aeabi_ddiv+0x44c>
    51aa:	0030      	movs	r0, r6
    51ac:	f001 f996 	bl	64dc <__clzsi2>
    51b0:	0003      	movs	r3, r0
    51b2:	3b0b      	subs	r3, #11
    51b4:	2b1c      	cmp	r3, #28
    51b6:	dd00      	ble.n	51ba <__aeabi_ddiv+0xe2>
    51b8:	e1ac      	b.n	5514 <__aeabi_ddiv+0x43c>
    51ba:	221d      	movs	r2, #29
    51bc:	1ad3      	subs	r3, r2, r3
    51be:	465a      	mov	r2, fp
    51c0:	0001      	movs	r1, r0
    51c2:	40da      	lsrs	r2, r3
    51c4:	3908      	subs	r1, #8
    51c6:	408e      	lsls	r6, r1
    51c8:	0013      	movs	r3, r2
    51ca:	4333      	orrs	r3, r6
    51cc:	4699      	mov	r9, r3
    51ce:	465b      	mov	r3, fp
    51d0:	408b      	lsls	r3, r1
    51d2:	4698      	mov	r8, r3
    51d4:	2300      	movs	r3, #0
    51d6:	4c3c      	ldr	r4, [pc, #240]	; (52c8 <__aeabi_ddiv+0x1f0>)
    51d8:	2600      	movs	r6, #0
    51da:	1a24      	subs	r4, r4, r0
    51dc:	9303      	str	r3, [sp, #12]
    51de:	e79f      	b.n	5120 <__aeabi_ddiv+0x48>
    51e0:	4651      	mov	r1, sl
    51e2:	465a      	mov	r2, fp
    51e4:	4311      	orrs	r1, r2
    51e6:	d129      	bne.n	523c <__aeabi_ddiv+0x164>
    51e8:	2200      	movs	r2, #0
    51ea:	4693      	mov	fp, r2
    51ec:	3202      	adds	r2, #2
    51ee:	e7b1      	b.n	5154 <__aeabi_ddiv+0x7c>
    51f0:	4659      	mov	r1, fp
    51f2:	4301      	orrs	r1, r0
    51f4:	d01e      	beq.n	5234 <__aeabi_ddiv+0x15c>
    51f6:	465b      	mov	r3, fp
    51f8:	2b00      	cmp	r3, #0
    51fa:	d100      	bne.n	51fe <__aeabi_ddiv+0x126>
    51fc:	e19e      	b.n	553c <__aeabi_ddiv+0x464>
    51fe:	4658      	mov	r0, fp
    5200:	f001 f96c 	bl	64dc <__clzsi2>
    5204:	0003      	movs	r3, r0
    5206:	3b0b      	subs	r3, #11
    5208:	2b1c      	cmp	r3, #28
    520a:	dd00      	ble.n	520e <__aeabi_ddiv+0x136>
    520c:	e18f      	b.n	552e <__aeabi_ddiv+0x456>
    520e:	0002      	movs	r2, r0
    5210:	4659      	mov	r1, fp
    5212:	3a08      	subs	r2, #8
    5214:	4091      	lsls	r1, r2
    5216:	468b      	mov	fp, r1
    5218:	211d      	movs	r1, #29
    521a:	1acb      	subs	r3, r1, r3
    521c:	4651      	mov	r1, sl
    521e:	40d9      	lsrs	r1, r3
    5220:	000b      	movs	r3, r1
    5222:	4659      	mov	r1, fp
    5224:	430b      	orrs	r3, r1
    5226:	4651      	mov	r1, sl
    5228:	469b      	mov	fp, r3
    522a:	4091      	lsls	r1, r2
    522c:	4b26      	ldr	r3, [pc, #152]	; (52c8 <__aeabi_ddiv+0x1f0>)
    522e:	2200      	movs	r2, #0
    5230:	1a1b      	subs	r3, r3, r0
    5232:	e78f      	b.n	5154 <__aeabi_ddiv+0x7c>
    5234:	2300      	movs	r3, #0
    5236:	2201      	movs	r2, #1
    5238:	469b      	mov	fp, r3
    523a:	e78b      	b.n	5154 <__aeabi_ddiv+0x7c>
    523c:	4651      	mov	r1, sl
    523e:	2203      	movs	r2, #3
    5240:	e788      	b.n	5154 <__aeabi_ddiv+0x7c>
    5242:	2300      	movs	r3, #0
    5244:	4698      	mov	r8, r3
    5246:	3301      	adds	r3, #1
    5248:	2604      	movs	r6, #4
    524a:	2400      	movs	r4, #0
    524c:	9303      	str	r3, [sp, #12]
    524e:	e767      	b.n	5120 <__aeabi_ddiv+0x48>
    5250:	2303      	movs	r3, #3
    5252:	46b1      	mov	r9, r6
    5254:	9303      	str	r3, [sp, #12]
    5256:	260c      	movs	r6, #12
    5258:	e762      	b.n	5120 <__aeabi_ddiv+0x48>
    525a:	2a03      	cmp	r2, #3
    525c:	d100      	bne.n	5260 <__aeabi_ddiv+0x188>
    525e:	e25c      	b.n	571a <__aeabi_ddiv+0x642>
    5260:	9b01      	ldr	r3, [sp, #4]
    5262:	2a01      	cmp	r2, #1
    5264:	d000      	beq.n	5268 <__aeabi_ddiv+0x190>
    5266:	e1e4      	b.n	5632 <__aeabi_ddiv+0x55a>
    5268:	4013      	ands	r3, r2
    526a:	469c      	mov	ip, r3
    526c:	2300      	movs	r3, #0
    526e:	2400      	movs	r4, #0
    5270:	2200      	movs	r2, #0
    5272:	4698      	mov	r8, r3
    5274:	2100      	movs	r1, #0
    5276:	0312      	lsls	r2, r2, #12
    5278:	0b13      	lsrs	r3, r2, #12
    527a:	0d0a      	lsrs	r2, r1, #20
    527c:	0512      	lsls	r2, r2, #20
    527e:	431a      	orrs	r2, r3
    5280:	0523      	lsls	r3, r4, #20
    5282:	4c12      	ldr	r4, [pc, #72]	; (52cc <__aeabi_ddiv+0x1f4>)
    5284:	4640      	mov	r0, r8
    5286:	4022      	ands	r2, r4
    5288:	4313      	orrs	r3, r2
    528a:	4662      	mov	r2, ip
    528c:	005b      	lsls	r3, r3, #1
    528e:	07d2      	lsls	r2, r2, #31
    5290:	085b      	lsrs	r3, r3, #1
    5292:	4313      	orrs	r3, r2
    5294:	0019      	movs	r1, r3
    5296:	b007      	add	sp, #28
    5298:	bc3c      	pop	{r2, r3, r4, r5}
    529a:	4690      	mov	r8, r2
    529c:	4699      	mov	r9, r3
    529e:	46a2      	mov	sl, r4
    52a0:	46ab      	mov	fp, r5
    52a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52a4:	2300      	movs	r3, #0
    52a6:	2280      	movs	r2, #128	; 0x80
    52a8:	469c      	mov	ip, r3
    52aa:	0312      	lsls	r2, r2, #12
    52ac:	4698      	mov	r8, r3
    52ae:	4c03      	ldr	r4, [pc, #12]	; (52bc <__aeabi_ddiv+0x1e4>)
    52b0:	e7e0      	b.n	5274 <__aeabi_ddiv+0x19c>
    52b2:	2300      	movs	r3, #0
    52b4:	4c01      	ldr	r4, [pc, #4]	; (52bc <__aeabi_ddiv+0x1e4>)
    52b6:	2200      	movs	r2, #0
    52b8:	4698      	mov	r8, r3
    52ba:	e7db      	b.n	5274 <__aeabi_ddiv+0x19c>
    52bc:	000007ff 	.word	0x000007ff
    52c0:	fffffc01 	.word	0xfffffc01
    52c4:	000069c4 	.word	0x000069c4
    52c8:	fffffc0d 	.word	0xfffffc0d
    52cc:	800fffff 	.word	0x800fffff
    52d0:	45d9      	cmp	r9, fp
    52d2:	d900      	bls.n	52d6 <__aeabi_ddiv+0x1fe>
    52d4:	e139      	b.n	554a <__aeabi_ddiv+0x472>
    52d6:	d100      	bne.n	52da <__aeabi_ddiv+0x202>
    52d8:	e134      	b.n	5544 <__aeabi_ddiv+0x46c>
    52da:	2300      	movs	r3, #0
    52dc:	4646      	mov	r6, r8
    52de:	464d      	mov	r5, r9
    52e0:	469a      	mov	sl, r3
    52e2:	3c01      	subs	r4, #1
    52e4:	465b      	mov	r3, fp
    52e6:	0e0a      	lsrs	r2, r1, #24
    52e8:	021b      	lsls	r3, r3, #8
    52ea:	431a      	orrs	r2, r3
    52ec:	020b      	lsls	r3, r1, #8
    52ee:	0c17      	lsrs	r7, r2, #16
    52f0:	9303      	str	r3, [sp, #12]
    52f2:	0413      	lsls	r3, r2, #16
    52f4:	0c1b      	lsrs	r3, r3, #16
    52f6:	0039      	movs	r1, r7
    52f8:	0028      	movs	r0, r5
    52fa:	4690      	mov	r8, r2
    52fc:	9301      	str	r3, [sp, #4]
    52fe:	f7ff f91b 	bl	4538 <__udivsi3>
    5302:	0002      	movs	r2, r0
    5304:	9b01      	ldr	r3, [sp, #4]
    5306:	4683      	mov	fp, r0
    5308:	435a      	muls	r2, r3
    530a:	0028      	movs	r0, r5
    530c:	0039      	movs	r1, r7
    530e:	4691      	mov	r9, r2
    5310:	f7ff f998 	bl	4644 <__aeabi_uidivmod>
    5314:	0c35      	lsrs	r5, r6, #16
    5316:	0409      	lsls	r1, r1, #16
    5318:	430d      	orrs	r5, r1
    531a:	45a9      	cmp	r9, r5
    531c:	d90d      	bls.n	533a <__aeabi_ddiv+0x262>
    531e:	465b      	mov	r3, fp
    5320:	4445      	add	r5, r8
    5322:	3b01      	subs	r3, #1
    5324:	45a8      	cmp	r8, r5
    5326:	d900      	bls.n	532a <__aeabi_ddiv+0x252>
    5328:	e13a      	b.n	55a0 <__aeabi_ddiv+0x4c8>
    532a:	45a9      	cmp	r9, r5
    532c:	d800      	bhi.n	5330 <__aeabi_ddiv+0x258>
    532e:	e137      	b.n	55a0 <__aeabi_ddiv+0x4c8>
    5330:	2302      	movs	r3, #2
    5332:	425b      	negs	r3, r3
    5334:	469c      	mov	ip, r3
    5336:	4445      	add	r5, r8
    5338:	44e3      	add	fp, ip
    533a:	464b      	mov	r3, r9
    533c:	1aeb      	subs	r3, r5, r3
    533e:	0039      	movs	r1, r7
    5340:	0018      	movs	r0, r3
    5342:	9304      	str	r3, [sp, #16]
    5344:	f7ff f8f8 	bl	4538 <__udivsi3>
    5348:	9b01      	ldr	r3, [sp, #4]
    534a:	0005      	movs	r5, r0
    534c:	4343      	muls	r3, r0
    534e:	0039      	movs	r1, r7
    5350:	9804      	ldr	r0, [sp, #16]
    5352:	4699      	mov	r9, r3
    5354:	f7ff f976 	bl	4644 <__aeabi_uidivmod>
    5358:	0433      	lsls	r3, r6, #16
    535a:	0409      	lsls	r1, r1, #16
    535c:	0c1b      	lsrs	r3, r3, #16
    535e:	430b      	orrs	r3, r1
    5360:	4599      	cmp	r9, r3
    5362:	d909      	bls.n	5378 <__aeabi_ddiv+0x2a0>
    5364:	4443      	add	r3, r8
    5366:	1e6a      	subs	r2, r5, #1
    5368:	4598      	cmp	r8, r3
    536a:	d900      	bls.n	536e <__aeabi_ddiv+0x296>
    536c:	e11a      	b.n	55a4 <__aeabi_ddiv+0x4cc>
    536e:	4599      	cmp	r9, r3
    5370:	d800      	bhi.n	5374 <__aeabi_ddiv+0x29c>
    5372:	e117      	b.n	55a4 <__aeabi_ddiv+0x4cc>
    5374:	3d02      	subs	r5, #2
    5376:	4443      	add	r3, r8
    5378:	464a      	mov	r2, r9
    537a:	1a9b      	subs	r3, r3, r2
    537c:	465a      	mov	r2, fp
    537e:	0412      	lsls	r2, r2, #16
    5380:	432a      	orrs	r2, r5
    5382:	9903      	ldr	r1, [sp, #12]
    5384:	4693      	mov	fp, r2
    5386:	0c10      	lsrs	r0, r2, #16
    5388:	0c0a      	lsrs	r2, r1, #16
    538a:	4691      	mov	r9, r2
    538c:	0409      	lsls	r1, r1, #16
    538e:	465a      	mov	r2, fp
    5390:	0c09      	lsrs	r1, r1, #16
    5392:	464e      	mov	r6, r9
    5394:	000d      	movs	r5, r1
    5396:	0412      	lsls	r2, r2, #16
    5398:	0c12      	lsrs	r2, r2, #16
    539a:	4345      	muls	r5, r0
    539c:	9105      	str	r1, [sp, #20]
    539e:	4351      	muls	r1, r2
    53a0:	4372      	muls	r2, r6
    53a2:	4370      	muls	r0, r6
    53a4:	1952      	adds	r2, r2, r5
    53a6:	0c0e      	lsrs	r6, r1, #16
    53a8:	18b2      	adds	r2, r6, r2
    53aa:	4295      	cmp	r5, r2
    53ac:	d903      	bls.n	53b6 <__aeabi_ddiv+0x2de>
    53ae:	2580      	movs	r5, #128	; 0x80
    53b0:	026d      	lsls	r5, r5, #9
    53b2:	46ac      	mov	ip, r5
    53b4:	4460      	add	r0, ip
    53b6:	0c15      	lsrs	r5, r2, #16
    53b8:	0409      	lsls	r1, r1, #16
    53ba:	0412      	lsls	r2, r2, #16
    53bc:	0c09      	lsrs	r1, r1, #16
    53be:	1828      	adds	r0, r5, r0
    53c0:	1852      	adds	r2, r2, r1
    53c2:	4283      	cmp	r3, r0
    53c4:	d200      	bcs.n	53c8 <__aeabi_ddiv+0x2f0>
    53c6:	e0ce      	b.n	5566 <__aeabi_ddiv+0x48e>
    53c8:	d100      	bne.n	53cc <__aeabi_ddiv+0x2f4>
    53ca:	e0c8      	b.n	555e <__aeabi_ddiv+0x486>
    53cc:	1a1d      	subs	r5, r3, r0
    53ce:	4653      	mov	r3, sl
    53d0:	1a9e      	subs	r6, r3, r2
    53d2:	45b2      	cmp	sl, r6
    53d4:	4192      	sbcs	r2, r2
    53d6:	4252      	negs	r2, r2
    53d8:	1aab      	subs	r3, r5, r2
    53da:	469a      	mov	sl, r3
    53dc:	4598      	cmp	r8, r3
    53de:	d100      	bne.n	53e2 <__aeabi_ddiv+0x30a>
    53e0:	e117      	b.n	5612 <__aeabi_ddiv+0x53a>
    53e2:	0039      	movs	r1, r7
    53e4:	0018      	movs	r0, r3
    53e6:	f7ff f8a7 	bl	4538 <__udivsi3>
    53ea:	9b01      	ldr	r3, [sp, #4]
    53ec:	0005      	movs	r5, r0
    53ee:	4343      	muls	r3, r0
    53f0:	0039      	movs	r1, r7
    53f2:	4650      	mov	r0, sl
    53f4:	9304      	str	r3, [sp, #16]
    53f6:	f7ff f925 	bl	4644 <__aeabi_uidivmod>
    53fa:	9804      	ldr	r0, [sp, #16]
    53fc:	040b      	lsls	r3, r1, #16
    53fe:	0c31      	lsrs	r1, r6, #16
    5400:	4319      	orrs	r1, r3
    5402:	4288      	cmp	r0, r1
    5404:	d909      	bls.n	541a <__aeabi_ddiv+0x342>
    5406:	4441      	add	r1, r8
    5408:	1e6b      	subs	r3, r5, #1
    540a:	4588      	cmp	r8, r1
    540c:	d900      	bls.n	5410 <__aeabi_ddiv+0x338>
    540e:	e107      	b.n	5620 <__aeabi_ddiv+0x548>
    5410:	4288      	cmp	r0, r1
    5412:	d800      	bhi.n	5416 <__aeabi_ddiv+0x33e>
    5414:	e104      	b.n	5620 <__aeabi_ddiv+0x548>
    5416:	3d02      	subs	r5, #2
    5418:	4441      	add	r1, r8
    541a:	9b04      	ldr	r3, [sp, #16]
    541c:	1acb      	subs	r3, r1, r3
    541e:	0018      	movs	r0, r3
    5420:	0039      	movs	r1, r7
    5422:	9304      	str	r3, [sp, #16]
    5424:	f7ff f888 	bl	4538 <__udivsi3>
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	4682      	mov	sl, r0
    542c:	4343      	muls	r3, r0
    542e:	0039      	movs	r1, r7
    5430:	9804      	ldr	r0, [sp, #16]
    5432:	9301      	str	r3, [sp, #4]
    5434:	f7ff f906 	bl	4644 <__aeabi_uidivmod>
    5438:	9801      	ldr	r0, [sp, #4]
    543a:	040b      	lsls	r3, r1, #16
    543c:	0431      	lsls	r1, r6, #16
    543e:	0c09      	lsrs	r1, r1, #16
    5440:	4319      	orrs	r1, r3
    5442:	4288      	cmp	r0, r1
    5444:	d90d      	bls.n	5462 <__aeabi_ddiv+0x38a>
    5446:	4653      	mov	r3, sl
    5448:	4441      	add	r1, r8
    544a:	3b01      	subs	r3, #1
    544c:	4588      	cmp	r8, r1
    544e:	d900      	bls.n	5452 <__aeabi_ddiv+0x37a>
    5450:	e0e8      	b.n	5624 <__aeabi_ddiv+0x54c>
    5452:	4288      	cmp	r0, r1
    5454:	d800      	bhi.n	5458 <__aeabi_ddiv+0x380>
    5456:	e0e5      	b.n	5624 <__aeabi_ddiv+0x54c>
    5458:	2302      	movs	r3, #2
    545a:	425b      	negs	r3, r3
    545c:	469c      	mov	ip, r3
    545e:	4441      	add	r1, r8
    5460:	44e2      	add	sl, ip
    5462:	9b01      	ldr	r3, [sp, #4]
    5464:	042d      	lsls	r5, r5, #16
    5466:	1ace      	subs	r6, r1, r3
    5468:	4651      	mov	r1, sl
    546a:	4329      	orrs	r1, r5
    546c:	9d05      	ldr	r5, [sp, #20]
    546e:	464f      	mov	r7, r9
    5470:	002a      	movs	r2, r5
    5472:	040b      	lsls	r3, r1, #16
    5474:	0c08      	lsrs	r0, r1, #16
    5476:	0c1b      	lsrs	r3, r3, #16
    5478:	435a      	muls	r2, r3
    547a:	4345      	muls	r5, r0
    547c:	437b      	muls	r3, r7
    547e:	4378      	muls	r0, r7
    5480:	195b      	adds	r3, r3, r5
    5482:	0c17      	lsrs	r7, r2, #16
    5484:	18fb      	adds	r3, r7, r3
    5486:	429d      	cmp	r5, r3
    5488:	d903      	bls.n	5492 <__aeabi_ddiv+0x3ba>
    548a:	2580      	movs	r5, #128	; 0x80
    548c:	026d      	lsls	r5, r5, #9
    548e:	46ac      	mov	ip, r5
    5490:	4460      	add	r0, ip
    5492:	0c1d      	lsrs	r5, r3, #16
    5494:	0412      	lsls	r2, r2, #16
    5496:	041b      	lsls	r3, r3, #16
    5498:	0c12      	lsrs	r2, r2, #16
    549a:	1828      	adds	r0, r5, r0
    549c:	189b      	adds	r3, r3, r2
    549e:	4286      	cmp	r6, r0
    54a0:	d200      	bcs.n	54a4 <__aeabi_ddiv+0x3cc>
    54a2:	e093      	b.n	55cc <__aeabi_ddiv+0x4f4>
    54a4:	d100      	bne.n	54a8 <__aeabi_ddiv+0x3d0>
    54a6:	e08e      	b.n	55c6 <__aeabi_ddiv+0x4ee>
    54a8:	2301      	movs	r3, #1
    54aa:	4319      	orrs	r1, r3
    54ac:	4ba0      	ldr	r3, [pc, #640]	; (5730 <__aeabi_ddiv+0x658>)
    54ae:	18e3      	adds	r3, r4, r3
    54b0:	2b00      	cmp	r3, #0
    54b2:	dc00      	bgt.n	54b6 <__aeabi_ddiv+0x3de>
    54b4:	e099      	b.n	55ea <__aeabi_ddiv+0x512>
    54b6:	074a      	lsls	r2, r1, #29
    54b8:	d000      	beq.n	54bc <__aeabi_ddiv+0x3e4>
    54ba:	e09e      	b.n	55fa <__aeabi_ddiv+0x522>
    54bc:	465a      	mov	r2, fp
    54be:	01d2      	lsls	r2, r2, #7
    54c0:	d506      	bpl.n	54d0 <__aeabi_ddiv+0x3f8>
    54c2:	465a      	mov	r2, fp
    54c4:	4b9b      	ldr	r3, [pc, #620]	; (5734 <__aeabi_ddiv+0x65c>)
    54c6:	401a      	ands	r2, r3
    54c8:	2380      	movs	r3, #128	; 0x80
    54ca:	4693      	mov	fp, r2
    54cc:	00db      	lsls	r3, r3, #3
    54ce:	18e3      	adds	r3, r4, r3
    54d0:	4a99      	ldr	r2, [pc, #612]	; (5738 <__aeabi_ddiv+0x660>)
    54d2:	4293      	cmp	r3, r2
    54d4:	dd68      	ble.n	55a8 <__aeabi_ddiv+0x4d0>
    54d6:	2301      	movs	r3, #1
    54d8:	9a02      	ldr	r2, [sp, #8]
    54da:	4c98      	ldr	r4, [pc, #608]	; (573c <__aeabi_ddiv+0x664>)
    54dc:	401a      	ands	r2, r3
    54de:	2300      	movs	r3, #0
    54e0:	4694      	mov	ip, r2
    54e2:	4698      	mov	r8, r3
    54e4:	2200      	movs	r2, #0
    54e6:	e6c5      	b.n	5274 <__aeabi_ddiv+0x19c>
    54e8:	2280      	movs	r2, #128	; 0x80
    54ea:	464b      	mov	r3, r9
    54ec:	0312      	lsls	r2, r2, #12
    54ee:	4213      	tst	r3, r2
    54f0:	d00a      	beq.n	5508 <__aeabi_ddiv+0x430>
    54f2:	465b      	mov	r3, fp
    54f4:	4213      	tst	r3, r2
    54f6:	d106      	bne.n	5506 <__aeabi_ddiv+0x42e>
    54f8:	431a      	orrs	r2, r3
    54fa:	0312      	lsls	r2, r2, #12
    54fc:	0b12      	lsrs	r2, r2, #12
    54fe:	46ac      	mov	ip, r5
    5500:	4688      	mov	r8, r1
    5502:	4c8e      	ldr	r4, [pc, #568]	; (573c <__aeabi_ddiv+0x664>)
    5504:	e6b6      	b.n	5274 <__aeabi_ddiv+0x19c>
    5506:	464b      	mov	r3, r9
    5508:	431a      	orrs	r2, r3
    550a:	0312      	lsls	r2, r2, #12
    550c:	0b12      	lsrs	r2, r2, #12
    550e:	46bc      	mov	ip, r7
    5510:	4c8a      	ldr	r4, [pc, #552]	; (573c <__aeabi_ddiv+0x664>)
    5512:	e6af      	b.n	5274 <__aeabi_ddiv+0x19c>
    5514:	0003      	movs	r3, r0
    5516:	465a      	mov	r2, fp
    5518:	3b28      	subs	r3, #40	; 0x28
    551a:	409a      	lsls	r2, r3
    551c:	2300      	movs	r3, #0
    551e:	4691      	mov	r9, r2
    5520:	4698      	mov	r8, r3
    5522:	e657      	b.n	51d4 <__aeabi_ddiv+0xfc>
    5524:	4658      	mov	r0, fp
    5526:	f000 ffd9 	bl	64dc <__clzsi2>
    552a:	3020      	adds	r0, #32
    552c:	e640      	b.n	51b0 <__aeabi_ddiv+0xd8>
    552e:	0003      	movs	r3, r0
    5530:	4652      	mov	r2, sl
    5532:	3b28      	subs	r3, #40	; 0x28
    5534:	409a      	lsls	r2, r3
    5536:	2100      	movs	r1, #0
    5538:	4693      	mov	fp, r2
    553a:	e677      	b.n	522c <__aeabi_ddiv+0x154>
    553c:	f000 ffce 	bl	64dc <__clzsi2>
    5540:	3020      	adds	r0, #32
    5542:	e65f      	b.n	5204 <__aeabi_ddiv+0x12c>
    5544:	4588      	cmp	r8, r1
    5546:	d200      	bcs.n	554a <__aeabi_ddiv+0x472>
    5548:	e6c7      	b.n	52da <__aeabi_ddiv+0x202>
    554a:	464b      	mov	r3, r9
    554c:	07de      	lsls	r6, r3, #31
    554e:	085d      	lsrs	r5, r3, #1
    5550:	4643      	mov	r3, r8
    5552:	085b      	lsrs	r3, r3, #1
    5554:	431e      	orrs	r6, r3
    5556:	4643      	mov	r3, r8
    5558:	07db      	lsls	r3, r3, #31
    555a:	469a      	mov	sl, r3
    555c:	e6c2      	b.n	52e4 <__aeabi_ddiv+0x20c>
    555e:	2500      	movs	r5, #0
    5560:	4592      	cmp	sl, r2
    5562:	d300      	bcc.n	5566 <__aeabi_ddiv+0x48e>
    5564:	e733      	b.n	53ce <__aeabi_ddiv+0x2f6>
    5566:	9e03      	ldr	r6, [sp, #12]
    5568:	4659      	mov	r1, fp
    556a:	46b4      	mov	ip, r6
    556c:	44e2      	add	sl, ip
    556e:	45b2      	cmp	sl, r6
    5570:	41ad      	sbcs	r5, r5
    5572:	426d      	negs	r5, r5
    5574:	4445      	add	r5, r8
    5576:	18eb      	adds	r3, r5, r3
    5578:	3901      	subs	r1, #1
    557a:	4598      	cmp	r8, r3
    557c:	d207      	bcs.n	558e <__aeabi_ddiv+0x4b6>
    557e:	4298      	cmp	r0, r3
    5580:	d900      	bls.n	5584 <__aeabi_ddiv+0x4ac>
    5582:	e07f      	b.n	5684 <__aeabi_ddiv+0x5ac>
    5584:	d100      	bne.n	5588 <__aeabi_ddiv+0x4b0>
    5586:	e0bc      	b.n	5702 <__aeabi_ddiv+0x62a>
    5588:	1a1d      	subs	r5, r3, r0
    558a:	468b      	mov	fp, r1
    558c:	e71f      	b.n	53ce <__aeabi_ddiv+0x2f6>
    558e:	4598      	cmp	r8, r3
    5590:	d1fa      	bne.n	5588 <__aeabi_ddiv+0x4b0>
    5592:	9d03      	ldr	r5, [sp, #12]
    5594:	4555      	cmp	r5, sl
    5596:	d9f2      	bls.n	557e <__aeabi_ddiv+0x4a6>
    5598:	4643      	mov	r3, r8
    559a:	468b      	mov	fp, r1
    559c:	1a1d      	subs	r5, r3, r0
    559e:	e716      	b.n	53ce <__aeabi_ddiv+0x2f6>
    55a0:	469b      	mov	fp, r3
    55a2:	e6ca      	b.n	533a <__aeabi_ddiv+0x262>
    55a4:	0015      	movs	r5, r2
    55a6:	e6e7      	b.n	5378 <__aeabi_ddiv+0x2a0>
    55a8:	465a      	mov	r2, fp
    55aa:	08c9      	lsrs	r1, r1, #3
    55ac:	0752      	lsls	r2, r2, #29
    55ae:	430a      	orrs	r2, r1
    55b0:	055b      	lsls	r3, r3, #21
    55b2:	4690      	mov	r8, r2
    55b4:	0d5c      	lsrs	r4, r3, #21
    55b6:	465a      	mov	r2, fp
    55b8:	2301      	movs	r3, #1
    55ba:	9902      	ldr	r1, [sp, #8]
    55bc:	0252      	lsls	r2, r2, #9
    55be:	4019      	ands	r1, r3
    55c0:	0b12      	lsrs	r2, r2, #12
    55c2:	468c      	mov	ip, r1
    55c4:	e656      	b.n	5274 <__aeabi_ddiv+0x19c>
    55c6:	2b00      	cmp	r3, #0
    55c8:	d100      	bne.n	55cc <__aeabi_ddiv+0x4f4>
    55ca:	e76f      	b.n	54ac <__aeabi_ddiv+0x3d4>
    55cc:	4446      	add	r6, r8
    55ce:	1e4a      	subs	r2, r1, #1
    55d0:	45b0      	cmp	r8, r6
    55d2:	d929      	bls.n	5628 <__aeabi_ddiv+0x550>
    55d4:	0011      	movs	r1, r2
    55d6:	4286      	cmp	r6, r0
    55d8:	d000      	beq.n	55dc <__aeabi_ddiv+0x504>
    55da:	e765      	b.n	54a8 <__aeabi_ddiv+0x3d0>
    55dc:	9a03      	ldr	r2, [sp, #12]
    55de:	4293      	cmp	r3, r2
    55e0:	d000      	beq.n	55e4 <__aeabi_ddiv+0x50c>
    55e2:	e761      	b.n	54a8 <__aeabi_ddiv+0x3d0>
    55e4:	e762      	b.n	54ac <__aeabi_ddiv+0x3d4>
    55e6:	2101      	movs	r1, #1
    55e8:	4249      	negs	r1, r1
    55ea:	2001      	movs	r0, #1
    55ec:	1ac2      	subs	r2, r0, r3
    55ee:	2a38      	cmp	r2, #56	; 0x38
    55f0:	dd21      	ble.n	5636 <__aeabi_ddiv+0x55e>
    55f2:	9b02      	ldr	r3, [sp, #8]
    55f4:	4003      	ands	r3, r0
    55f6:	469c      	mov	ip, r3
    55f8:	e638      	b.n	526c <__aeabi_ddiv+0x194>
    55fa:	220f      	movs	r2, #15
    55fc:	400a      	ands	r2, r1
    55fe:	2a04      	cmp	r2, #4
    5600:	d100      	bne.n	5604 <__aeabi_ddiv+0x52c>
    5602:	e75b      	b.n	54bc <__aeabi_ddiv+0x3e4>
    5604:	000a      	movs	r2, r1
    5606:	1d11      	adds	r1, r2, #4
    5608:	4291      	cmp	r1, r2
    560a:	4192      	sbcs	r2, r2
    560c:	4252      	negs	r2, r2
    560e:	4493      	add	fp, r2
    5610:	e754      	b.n	54bc <__aeabi_ddiv+0x3e4>
    5612:	4b47      	ldr	r3, [pc, #284]	; (5730 <__aeabi_ddiv+0x658>)
    5614:	18e3      	adds	r3, r4, r3
    5616:	2b00      	cmp	r3, #0
    5618:	dde5      	ble.n	55e6 <__aeabi_ddiv+0x50e>
    561a:	2201      	movs	r2, #1
    561c:	4252      	negs	r2, r2
    561e:	e7f2      	b.n	5606 <__aeabi_ddiv+0x52e>
    5620:	001d      	movs	r5, r3
    5622:	e6fa      	b.n	541a <__aeabi_ddiv+0x342>
    5624:	469a      	mov	sl, r3
    5626:	e71c      	b.n	5462 <__aeabi_ddiv+0x38a>
    5628:	42b0      	cmp	r0, r6
    562a:	d839      	bhi.n	56a0 <__aeabi_ddiv+0x5c8>
    562c:	d06e      	beq.n	570c <__aeabi_ddiv+0x634>
    562e:	0011      	movs	r1, r2
    5630:	e73a      	b.n	54a8 <__aeabi_ddiv+0x3d0>
    5632:	9302      	str	r3, [sp, #8]
    5634:	e73a      	b.n	54ac <__aeabi_ddiv+0x3d4>
    5636:	2a1f      	cmp	r2, #31
    5638:	dc3c      	bgt.n	56b4 <__aeabi_ddiv+0x5dc>
    563a:	2320      	movs	r3, #32
    563c:	1a9b      	subs	r3, r3, r2
    563e:	000c      	movs	r4, r1
    5640:	4658      	mov	r0, fp
    5642:	4099      	lsls	r1, r3
    5644:	4098      	lsls	r0, r3
    5646:	1e4b      	subs	r3, r1, #1
    5648:	4199      	sbcs	r1, r3
    564a:	465b      	mov	r3, fp
    564c:	40d4      	lsrs	r4, r2
    564e:	40d3      	lsrs	r3, r2
    5650:	4320      	orrs	r0, r4
    5652:	4308      	orrs	r0, r1
    5654:	001a      	movs	r2, r3
    5656:	0743      	lsls	r3, r0, #29
    5658:	d009      	beq.n	566e <__aeabi_ddiv+0x596>
    565a:	230f      	movs	r3, #15
    565c:	4003      	ands	r3, r0
    565e:	2b04      	cmp	r3, #4
    5660:	d005      	beq.n	566e <__aeabi_ddiv+0x596>
    5662:	0001      	movs	r1, r0
    5664:	1d08      	adds	r0, r1, #4
    5666:	4288      	cmp	r0, r1
    5668:	419b      	sbcs	r3, r3
    566a:	425b      	negs	r3, r3
    566c:	18d2      	adds	r2, r2, r3
    566e:	0213      	lsls	r3, r2, #8
    5670:	d53a      	bpl.n	56e8 <__aeabi_ddiv+0x610>
    5672:	2301      	movs	r3, #1
    5674:	9a02      	ldr	r2, [sp, #8]
    5676:	2401      	movs	r4, #1
    5678:	401a      	ands	r2, r3
    567a:	2300      	movs	r3, #0
    567c:	4694      	mov	ip, r2
    567e:	4698      	mov	r8, r3
    5680:	2200      	movs	r2, #0
    5682:	e5f7      	b.n	5274 <__aeabi_ddiv+0x19c>
    5684:	2102      	movs	r1, #2
    5686:	4249      	negs	r1, r1
    5688:	468c      	mov	ip, r1
    568a:	9d03      	ldr	r5, [sp, #12]
    568c:	44e3      	add	fp, ip
    568e:	46ac      	mov	ip, r5
    5690:	44e2      	add	sl, ip
    5692:	45aa      	cmp	sl, r5
    5694:	41ad      	sbcs	r5, r5
    5696:	426d      	negs	r5, r5
    5698:	4445      	add	r5, r8
    569a:	18ed      	adds	r5, r5, r3
    569c:	1a2d      	subs	r5, r5, r0
    569e:	e696      	b.n	53ce <__aeabi_ddiv+0x2f6>
    56a0:	1e8a      	subs	r2, r1, #2
    56a2:	9903      	ldr	r1, [sp, #12]
    56a4:	004d      	lsls	r5, r1, #1
    56a6:	428d      	cmp	r5, r1
    56a8:	4189      	sbcs	r1, r1
    56aa:	4249      	negs	r1, r1
    56ac:	4441      	add	r1, r8
    56ae:	1876      	adds	r6, r6, r1
    56b0:	9503      	str	r5, [sp, #12]
    56b2:	e78f      	b.n	55d4 <__aeabi_ddiv+0x4fc>
    56b4:	201f      	movs	r0, #31
    56b6:	4240      	negs	r0, r0
    56b8:	1ac3      	subs	r3, r0, r3
    56ba:	4658      	mov	r0, fp
    56bc:	40d8      	lsrs	r0, r3
    56be:	0003      	movs	r3, r0
    56c0:	2a20      	cmp	r2, #32
    56c2:	d028      	beq.n	5716 <__aeabi_ddiv+0x63e>
    56c4:	2040      	movs	r0, #64	; 0x40
    56c6:	465d      	mov	r5, fp
    56c8:	1a82      	subs	r2, r0, r2
    56ca:	4095      	lsls	r5, r2
    56cc:	4329      	orrs	r1, r5
    56ce:	1e4a      	subs	r2, r1, #1
    56d0:	4191      	sbcs	r1, r2
    56d2:	4319      	orrs	r1, r3
    56d4:	2307      	movs	r3, #7
    56d6:	2200      	movs	r2, #0
    56d8:	400b      	ands	r3, r1
    56da:	d009      	beq.n	56f0 <__aeabi_ddiv+0x618>
    56dc:	230f      	movs	r3, #15
    56de:	2200      	movs	r2, #0
    56e0:	400b      	ands	r3, r1
    56e2:	0008      	movs	r0, r1
    56e4:	2b04      	cmp	r3, #4
    56e6:	d1bd      	bne.n	5664 <__aeabi_ddiv+0x58c>
    56e8:	0001      	movs	r1, r0
    56ea:	0753      	lsls	r3, r2, #29
    56ec:	0252      	lsls	r2, r2, #9
    56ee:	0b12      	lsrs	r2, r2, #12
    56f0:	08c9      	lsrs	r1, r1, #3
    56f2:	4319      	orrs	r1, r3
    56f4:	2301      	movs	r3, #1
    56f6:	4688      	mov	r8, r1
    56f8:	9902      	ldr	r1, [sp, #8]
    56fa:	2400      	movs	r4, #0
    56fc:	4019      	ands	r1, r3
    56fe:	468c      	mov	ip, r1
    5700:	e5b8      	b.n	5274 <__aeabi_ddiv+0x19c>
    5702:	4552      	cmp	r2, sl
    5704:	d8be      	bhi.n	5684 <__aeabi_ddiv+0x5ac>
    5706:	468b      	mov	fp, r1
    5708:	2500      	movs	r5, #0
    570a:	e660      	b.n	53ce <__aeabi_ddiv+0x2f6>
    570c:	9d03      	ldr	r5, [sp, #12]
    570e:	429d      	cmp	r5, r3
    5710:	d3c6      	bcc.n	56a0 <__aeabi_ddiv+0x5c8>
    5712:	0011      	movs	r1, r2
    5714:	e762      	b.n	55dc <__aeabi_ddiv+0x504>
    5716:	2500      	movs	r5, #0
    5718:	e7d8      	b.n	56cc <__aeabi_ddiv+0x5f4>
    571a:	2280      	movs	r2, #128	; 0x80
    571c:	465b      	mov	r3, fp
    571e:	0312      	lsls	r2, r2, #12
    5720:	431a      	orrs	r2, r3
    5722:	9b01      	ldr	r3, [sp, #4]
    5724:	0312      	lsls	r2, r2, #12
    5726:	0b12      	lsrs	r2, r2, #12
    5728:	469c      	mov	ip, r3
    572a:	4688      	mov	r8, r1
    572c:	4c03      	ldr	r4, [pc, #12]	; (573c <__aeabi_ddiv+0x664>)
    572e:	e5a1      	b.n	5274 <__aeabi_ddiv+0x19c>
    5730:	000003ff 	.word	0x000003ff
    5734:	feffffff 	.word	0xfeffffff
    5738:	000007fe 	.word	0x000007fe
    573c:	000007ff 	.word	0x000007ff

00005740 <__aeabi_dmul>:
    5740:	b5f0      	push	{r4, r5, r6, r7, lr}
    5742:	4657      	mov	r7, sl
    5744:	4645      	mov	r5, r8
    5746:	46de      	mov	lr, fp
    5748:	464e      	mov	r6, r9
    574a:	b5e0      	push	{r5, r6, r7, lr}
    574c:	030c      	lsls	r4, r1, #12
    574e:	4698      	mov	r8, r3
    5750:	004e      	lsls	r6, r1, #1
    5752:	0b23      	lsrs	r3, r4, #12
    5754:	b087      	sub	sp, #28
    5756:	0007      	movs	r7, r0
    5758:	4692      	mov	sl, r2
    575a:	469b      	mov	fp, r3
    575c:	0d76      	lsrs	r6, r6, #21
    575e:	0fcd      	lsrs	r5, r1, #31
    5760:	2e00      	cmp	r6, #0
    5762:	d06b      	beq.n	583c <__aeabi_dmul+0xfc>
    5764:	4b6d      	ldr	r3, [pc, #436]	; (591c <__aeabi_dmul+0x1dc>)
    5766:	429e      	cmp	r6, r3
    5768:	d035      	beq.n	57d6 <__aeabi_dmul+0x96>
    576a:	2480      	movs	r4, #128	; 0x80
    576c:	465b      	mov	r3, fp
    576e:	0f42      	lsrs	r2, r0, #29
    5770:	0424      	lsls	r4, r4, #16
    5772:	00db      	lsls	r3, r3, #3
    5774:	4314      	orrs	r4, r2
    5776:	431c      	orrs	r4, r3
    5778:	00c3      	lsls	r3, r0, #3
    577a:	4699      	mov	r9, r3
    577c:	4b68      	ldr	r3, [pc, #416]	; (5920 <__aeabi_dmul+0x1e0>)
    577e:	46a3      	mov	fp, r4
    5780:	469c      	mov	ip, r3
    5782:	2300      	movs	r3, #0
    5784:	2700      	movs	r7, #0
    5786:	4466      	add	r6, ip
    5788:	9302      	str	r3, [sp, #8]
    578a:	4643      	mov	r3, r8
    578c:	031c      	lsls	r4, r3, #12
    578e:	005a      	lsls	r2, r3, #1
    5790:	0fdb      	lsrs	r3, r3, #31
    5792:	4650      	mov	r0, sl
    5794:	0b24      	lsrs	r4, r4, #12
    5796:	0d52      	lsrs	r2, r2, #21
    5798:	4698      	mov	r8, r3
    579a:	d100      	bne.n	579e <__aeabi_dmul+0x5e>
    579c:	e076      	b.n	588c <__aeabi_dmul+0x14c>
    579e:	4b5f      	ldr	r3, [pc, #380]	; (591c <__aeabi_dmul+0x1dc>)
    57a0:	429a      	cmp	r2, r3
    57a2:	d06d      	beq.n	5880 <__aeabi_dmul+0x140>
    57a4:	2380      	movs	r3, #128	; 0x80
    57a6:	0f41      	lsrs	r1, r0, #29
    57a8:	041b      	lsls	r3, r3, #16
    57aa:	430b      	orrs	r3, r1
    57ac:	495c      	ldr	r1, [pc, #368]	; (5920 <__aeabi_dmul+0x1e0>)
    57ae:	00e4      	lsls	r4, r4, #3
    57b0:	468c      	mov	ip, r1
    57b2:	431c      	orrs	r4, r3
    57b4:	00c3      	lsls	r3, r0, #3
    57b6:	2000      	movs	r0, #0
    57b8:	4462      	add	r2, ip
    57ba:	4641      	mov	r1, r8
    57bc:	18b6      	adds	r6, r6, r2
    57be:	4069      	eors	r1, r5
    57c0:	1c72      	adds	r2, r6, #1
    57c2:	9101      	str	r1, [sp, #4]
    57c4:	4694      	mov	ip, r2
    57c6:	4307      	orrs	r7, r0
    57c8:	2f0f      	cmp	r7, #15
    57ca:	d900      	bls.n	57ce <__aeabi_dmul+0x8e>
    57cc:	e0b0      	b.n	5930 <__aeabi_dmul+0x1f0>
    57ce:	4a55      	ldr	r2, [pc, #340]	; (5924 <__aeabi_dmul+0x1e4>)
    57d0:	00bf      	lsls	r7, r7, #2
    57d2:	59d2      	ldr	r2, [r2, r7]
    57d4:	4697      	mov	pc, r2
    57d6:	465b      	mov	r3, fp
    57d8:	4303      	orrs	r3, r0
    57da:	4699      	mov	r9, r3
    57dc:	d000      	beq.n	57e0 <__aeabi_dmul+0xa0>
    57de:	e087      	b.n	58f0 <__aeabi_dmul+0x1b0>
    57e0:	2300      	movs	r3, #0
    57e2:	469b      	mov	fp, r3
    57e4:	3302      	adds	r3, #2
    57e6:	2708      	movs	r7, #8
    57e8:	9302      	str	r3, [sp, #8]
    57ea:	e7ce      	b.n	578a <__aeabi_dmul+0x4a>
    57ec:	4642      	mov	r2, r8
    57ee:	9201      	str	r2, [sp, #4]
    57f0:	2802      	cmp	r0, #2
    57f2:	d067      	beq.n	58c4 <__aeabi_dmul+0x184>
    57f4:	2803      	cmp	r0, #3
    57f6:	d100      	bne.n	57fa <__aeabi_dmul+0xba>
    57f8:	e20e      	b.n	5c18 <__aeabi_dmul+0x4d8>
    57fa:	2801      	cmp	r0, #1
    57fc:	d000      	beq.n	5800 <__aeabi_dmul+0xc0>
    57fe:	e162      	b.n	5ac6 <__aeabi_dmul+0x386>
    5800:	2300      	movs	r3, #0
    5802:	2400      	movs	r4, #0
    5804:	2200      	movs	r2, #0
    5806:	4699      	mov	r9, r3
    5808:	9901      	ldr	r1, [sp, #4]
    580a:	4001      	ands	r1, r0
    580c:	b2cd      	uxtb	r5, r1
    580e:	2100      	movs	r1, #0
    5810:	0312      	lsls	r2, r2, #12
    5812:	0d0b      	lsrs	r3, r1, #20
    5814:	0b12      	lsrs	r2, r2, #12
    5816:	051b      	lsls	r3, r3, #20
    5818:	4313      	orrs	r3, r2
    581a:	4a43      	ldr	r2, [pc, #268]	; (5928 <__aeabi_dmul+0x1e8>)
    581c:	0524      	lsls	r4, r4, #20
    581e:	4013      	ands	r3, r2
    5820:	431c      	orrs	r4, r3
    5822:	0064      	lsls	r4, r4, #1
    5824:	07ed      	lsls	r5, r5, #31
    5826:	0864      	lsrs	r4, r4, #1
    5828:	432c      	orrs	r4, r5
    582a:	4648      	mov	r0, r9
    582c:	0021      	movs	r1, r4
    582e:	b007      	add	sp, #28
    5830:	bc3c      	pop	{r2, r3, r4, r5}
    5832:	4690      	mov	r8, r2
    5834:	4699      	mov	r9, r3
    5836:	46a2      	mov	sl, r4
    5838:	46ab      	mov	fp, r5
    583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    583c:	4303      	orrs	r3, r0
    583e:	4699      	mov	r9, r3
    5840:	d04f      	beq.n	58e2 <__aeabi_dmul+0x1a2>
    5842:	465b      	mov	r3, fp
    5844:	2b00      	cmp	r3, #0
    5846:	d100      	bne.n	584a <__aeabi_dmul+0x10a>
    5848:	e189      	b.n	5b5e <__aeabi_dmul+0x41e>
    584a:	4658      	mov	r0, fp
    584c:	f000 fe46 	bl	64dc <__clzsi2>
    5850:	0003      	movs	r3, r0
    5852:	3b0b      	subs	r3, #11
    5854:	2b1c      	cmp	r3, #28
    5856:	dd00      	ble.n	585a <__aeabi_dmul+0x11a>
    5858:	e17a      	b.n	5b50 <__aeabi_dmul+0x410>
    585a:	221d      	movs	r2, #29
    585c:	1ad3      	subs	r3, r2, r3
    585e:	003a      	movs	r2, r7
    5860:	0001      	movs	r1, r0
    5862:	465c      	mov	r4, fp
    5864:	40da      	lsrs	r2, r3
    5866:	3908      	subs	r1, #8
    5868:	408c      	lsls	r4, r1
    586a:	0013      	movs	r3, r2
    586c:	408f      	lsls	r7, r1
    586e:	4323      	orrs	r3, r4
    5870:	469b      	mov	fp, r3
    5872:	46b9      	mov	r9, r7
    5874:	2300      	movs	r3, #0
    5876:	4e2d      	ldr	r6, [pc, #180]	; (592c <__aeabi_dmul+0x1ec>)
    5878:	2700      	movs	r7, #0
    587a:	1a36      	subs	r6, r6, r0
    587c:	9302      	str	r3, [sp, #8]
    587e:	e784      	b.n	578a <__aeabi_dmul+0x4a>
    5880:	4653      	mov	r3, sl
    5882:	4323      	orrs	r3, r4
    5884:	d12a      	bne.n	58dc <__aeabi_dmul+0x19c>
    5886:	2400      	movs	r4, #0
    5888:	2002      	movs	r0, #2
    588a:	e796      	b.n	57ba <__aeabi_dmul+0x7a>
    588c:	4653      	mov	r3, sl
    588e:	4323      	orrs	r3, r4
    5890:	d020      	beq.n	58d4 <__aeabi_dmul+0x194>
    5892:	2c00      	cmp	r4, #0
    5894:	d100      	bne.n	5898 <__aeabi_dmul+0x158>
    5896:	e157      	b.n	5b48 <__aeabi_dmul+0x408>
    5898:	0020      	movs	r0, r4
    589a:	f000 fe1f 	bl	64dc <__clzsi2>
    589e:	0003      	movs	r3, r0
    58a0:	3b0b      	subs	r3, #11
    58a2:	2b1c      	cmp	r3, #28
    58a4:	dd00      	ble.n	58a8 <__aeabi_dmul+0x168>
    58a6:	e149      	b.n	5b3c <__aeabi_dmul+0x3fc>
    58a8:	211d      	movs	r1, #29
    58aa:	1acb      	subs	r3, r1, r3
    58ac:	4651      	mov	r1, sl
    58ae:	0002      	movs	r2, r0
    58b0:	40d9      	lsrs	r1, r3
    58b2:	4653      	mov	r3, sl
    58b4:	3a08      	subs	r2, #8
    58b6:	4094      	lsls	r4, r2
    58b8:	4093      	lsls	r3, r2
    58ba:	430c      	orrs	r4, r1
    58bc:	4a1b      	ldr	r2, [pc, #108]	; (592c <__aeabi_dmul+0x1ec>)
    58be:	1a12      	subs	r2, r2, r0
    58c0:	2000      	movs	r0, #0
    58c2:	e77a      	b.n	57ba <__aeabi_dmul+0x7a>
    58c4:	2501      	movs	r5, #1
    58c6:	9b01      	ldr	r3, [sp, #4]
    58c8:	4c14      	ldr	r4, [pc, #80]	; (591c <__aeabi_dmul+0x1dc>)
    58ca:	401d      	ands	r5, r3
    58cc:	2300      	movs	r3, #0
    58ce:	2200      	movs	r2, #0
    58d0:	4699      	mov	r9, r3
    58d2:	e79c      	b.n	580e <__aeabi_dmul+0xce>
    58d4:	2400      	movs	r4, #0
    58d6:	2200      	movs	r2, #0
    58d8:	2001      	movs	r0, #1
    58da:	e76e      	b.n	57ba <__aeabi_dmul+0x7a>
    58dc:	4653      	mov	r3, sl
    58de:	2003      	movs	r0, #3
    58e0:	e76b      	b.n	57ba <__aeabi_dmul+0x7a>
    58e2:	2300      	movs	r3, #0
    58e4:	469b      	mov	fp, r3
    58e6:	3301      	adds	r3, #1
    58e8:	2704      	movs	r7, #4
    58ea:	2600      	movs	r6, #0
    58ec:	9302      	str	r3, [sp, #8]
    58ee:	e74c      	b.n	578a <__aeabi_dmul+0x4a>
    58f0:	2303      	movs	r3, #3
    58f2:	4681      	mov	r9, r0
    58f4:	270c      	movs	r7, #12
    58f6:	9302      	str	r3, [sp, #8]
    58f8:	e747      	b.n	578a <__aeabi_dmul+0x4a>
    58fa:	2280      	movs	r2, #128	; 0x80
    58fc:	2300      	movs	r3, #0
    58fe:	2500      	movs	r5, #0
    5900:	0312      	lsls	r2, r2, #12
    5902:	4699      	mov	r9, r3
    5904:	4c05      	ldr	r4, [pc, #20]	; (591c <__aeabi_dmul+0x1dc>)
    5906:	e782      	b.n	580e <__aeabi_dmul+0xce>
    5908:	465c      	mov	r4, fp
    590a:	464b      	mov	r3, r9
    590c:	9802      	ldr	r0, [sp, #8]
    590e:	e76f      	b.n	57f0 <__aeabi_dmul+0xb0>
    5910:	465c      	mov	r4, fp
    5912:	464b      	mov	r3, r9
    5914:	9501      	str	r5, [sp, #4]
    5916:	9802      	ldr	r0, [sp, #8]
    5918:	e76a      	b.n	57f0 <__aeabi_dmul+0xb0>
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	000007ff 	.word	0x000007ff
    5920:	fffffc01 	.word	0xfffffc01
    5924:	00006a04 	.word	0x00006a04
    5928:	800fffff 	.word	0x800fffff
    592c:	fffffc0d 	.word	0xfffffc0d
    5930:	464a      	mov	r2, r9
    5932:	4649      	mov	r1, r9
    5934:	0c17      	lsrs	r7, r2, #16
    5936:	0c1a      	lsrs	r2, r3, #16
    5938:	041b      	lsls	r3, r3, #16
    593a:	0c1b      	lsrs	r3, r3, #16
    593c:	0408      	lsls	r0, r1, #16
    593e:	0019      	movs	r1, r3
    5940:	0c00      	lsrs	r0, r0, #16
    5942:	4341      	muls	r1, r0
    5944:	0015      	movs	r5, r2
    5946:	4688      	mov	r8, r1
    5948:	0019      	movs	r1, r3
    594a:	437d      	muls	r5, r7
    594c:	4379      	muls	r1, r7
    594e:	9503      	str	r5, [sp, #12]
    5950:	4689      	mov	r9, r1
    5952:	0029      	movs	r1, r5
    5954:	0015      	movs	r5, r2
    5956:	4345      	muls	r5, r0
    5958:	444d      	add	r5, r9
    595a:	9502      	str	r5, [sp, #8]
    595c:	4645      	mov	r5, r8
    595e:	0c2d      	lsrs	r5, r5, #16
    5960:	46aa      	mov	sl, r5
    5962:	9d02      	ldr	r5, [sp, #8]
    5964:	4455      	add	r5, sl
    5966:	45a9      	cmp	r9, r5
    5968:	d906      	bls.n	5978 <__aeabi_dmul+0x238>
    596a:	468a      	mov	sl, r1
    596c:	2180      	movs	r1, #128	; 0x80
    596e:	0249      	lsls	r1, r1, #9
    5970:	4689      	mov	r9, r1
    5972:	44ca      	add	sl, r9
    5974:	4651      	mov	r1, sl
    5976:	9103      	str	r1, [sp, #12]
    5978:	0c29      	lsrs	r1, r5, #16
    597a:	9104      	str	r1, [sp, #16]
    597c:	4641      	mov	r1, r8
    597e:	0409      	lsls	r1, r1, #16
    5980:	042d      	lsls	r5, r5, #16
    5982:	0c09      	lsrs	r1, r1, #16
    5984:	4688      	mov	r8, r1
    5986:	0029      	movs	r1, r5
    5988:	0c25      	lsrs	r5, r4, #16
    598a:	0424      	lsls	r4, r4, #16
    598c:	4441      	add	r1, r8
    598e:	0c24      	lsrs	r4, r4, #16
    5990:	9105      	str	r1, [sp, #20]
    5992:	0021      	movs	r1, r4
    5994:	4341      	muls	r1, r0
    5996:	4688      	mov	r8, r1
    5998:	0021      	movs	r1, r4
    599a:	4379      	muls	r1, r7
    599c:	468a      	mov	sl, r1
    599e:	4368      	muls	r0, r5
    59a0:	4641      	mov	r1, r8
    59a2:	4450      	add	r0, sl
    59a4:	4681      	mov	r9, r0
    59a6:	0c08      	lsrs	r0, r1, #16
    59a8:	4448      	add	r0, r9
    59aa:	436f      	muls	r7, r5
    59ac:	4582      	cmp	sl, r0
    59ae:	d903      	bls.n	59b8 <__aeabi_dmul+0x278>
    59b0:	2180      	movs	r1, #128	; 0x80
    59b2:	0249      	lsls	r1, r1, #9
    59b4:	4689      	mov	r9, r1
    59b6:	444f      	add	r7, r9
    59b8:	0c01      	lsrs	r1, r0, #16
    59ba:	4689      	mov	r9, r1
    59bc:	0039      	movs	r1, r7
    59be:	4449      	add	r1, r9
    59c0:	9102      	str	r1, [sp, #8]
    59c2:	4641      	mov	r1, r8
    59c4:	040f      	lsls	r7, r1, #16
    59c6:	9904      	ldr	r1, [sp, #16]
    59c8:	0c3f      	lsrs	r7, r7, #16
    59ca:	4688      	mov	r8, r1
    59cc:	0400      	lsls	r0, r0, #16
    59ce:	19c0      	adds	r0, r0, r7
    59d0:	4480      	add	r8, r0
    59d2:	4641      	mov	r1, r8
    59d4:	9104      	str	r1, [sp, #16]
    59d6:	4659      	mov	r1, fp
    59d8:	0c0f      	lsrs	r7, r1, #16
    59da:	0409      	lsls	r1, r1, #16
    59dc:	0c09      	lsrs	r1, r1, #16
    59de:	4688      	mov	r8, r1
    59e0:	4359      	muls	r1, r3
    59e2:	468a      	mov	sl, r1
    59e4:	0039      	movs	r1, r7
    59e6:	4351      	muls	r1, r2
    59e8:	4689      	mov	r9, r1
    59ea:	4641      	mov	r1, r8
    59ec:	434a      	muls	r2, r1
    59ee:	4651      	mov	r1, sl
    59f0:	0c09      	lsrs	r1, r1, #16
    59f2:	468b      	mov	fp, r1
    59f4:	437b      	muls	r3, r7
    59f6:	18d2      	adds	r2, r2, r3
    59f8:	445a      	add	r2, fp
    59fa:	4293      	cmp	r3, r2
    59fc:	d903      	bls.n	5a06 <__aeabi_dmul+0x2c6>
    59fe:	2380      	movs	r3, #128	; 0x80
    5a00:	025b      	lsls	r3, r3, #9
    5a02:	469b      	mov	fp, r3
    5a04:	44d9      	add	r9, fp
    5a06:	4651      	mov	r1, sl
    5a08:	0409      	lsls	r1, r1, #16
    5a0a:	0c09      	lsrs	r1, r1, #16
    5a0c:	468a      	mov	sl, r1
    5a0e:	4641      	mov	r1, r8
    5a10:	4361      	muls	r1, r4
    5a12:	437c      	muls	r4, r7
    5a14:	0c13      	lsrs	r3, r2, #16
    5a16:	0412      	lsls	r2, r2, #16
    5a18:	444b      	add	r3, r9
    5a1a:	4452      	add	r2, sl
    5a1c:	46a1      	mov	r9, r4
    5a1e:	468a      	mov	sl, r1
    5a20:	003c      	movs	r4, r7
    5a22:	4641      	mov	r1, r8
    5a24:	436c      	muls	r4, r5
    5a26:	434d      	muls	r5, r1
    5a28:	4651      	mov	r1, sl
    5a2a:	444d      	add	r5, r9
    5a2c:	0c0f      	lsrs	r7, r1, #16
    5a2e:	197d      	adds	r5, r7, r5
    5a30:	45a9      	cmp	r9, r5
    5a32:	d903      	bls.n	5a3c <__aeabi_dmul+0x2fc>
    5a34:	2180      	movs	r1, #128	; 0x80
    5a36:	0249      	lsls	r1, r1, #9
    5a38:	4688      	mov	r8, r1
    5a3a:	4444      	add	r4, r8
    5a3c:	9f04      	ldr	r7, [sp, #16]
    5a3e:	9903      	ldr	r1, [sp, #12]
    5a40:	46b8      	mov	r8, r7
    5a42:	4441      	add	r1, r8
    5a44:	468b      	mov	fp, r1
    5a46:	4583      	cmp	fp, r0
    5a48:	4180      	sbcs	r0, r0
    5a4a:	4241      	negs	r1, r0
    5a4c:	4688      	mov	r8, r1
    5a4e:	4651      	mov	r1, sl
    5a50:	0408      	lsls	r0, r1, #16
    5a52:	042f      	lsls	r7, r5, #16
    5a54:	0c00      	lsrs	r0, r0, #16
    5a56:	183f      	adds	r7, r7, r0
    5a58:	4658      	mov	r0, fp
    5a5a:	9902      	ldr	r1, [sp, #8]
    5a5c:	1810      	adds	r0, r2, r0
    5a5e:	4689      	mov	r9, r1
    5a60:	4290      	cmp	r0, r2
    5a62:	4192      	sbcs	r2, r2
    5a64:	444f      	add	r7, r9
    5a66:	46ba      	mov	sl, r7
    5a68:	4252      	negs	r2, r2
    5a6a:	4699      	mov	r9, r3
    5a6c:	4693      	mov	fp, r2
    5a6e:	44c2      	add	sl, r8
    5a70:	44d1      	add	r9, sl
    5a72:	44cb      	add	fp, r9
    5a74:	428f      	cmp	r7, r1
    5a76:	41bf      	sbcs	r7, r7
    5a78:	45c2      	cmp	sl, r8
    5a7a:	4189      	sbcs	r1, r1
    5a7c:	4599      	cmp	r9, r3
    5a7e:	419b      	sbcs	r3, r3
    5a80:	4593      	cmp	fp, r2
    5a82:	4192      	sbcs	r2, r2
    5a84:	427f      	negs	r7, r7
    5a86:	4249      	negs	r1, r1
    5a88:	0c2d      	lsrs	r5, r5, #16
    5a8a:	4252      	negs	r2, r2
    5a8c:	430f      	orrs	r7, r1
    5a8e:	425b      	negs	r3, r3
    5a90:	4313      	orrs	r3, r2
    5a92:	197f      	adds	r7, r7, r5
    5a94:	18ff      	adds	r7, r7, r3
    5a96:	465b      	mov	r3, fp
    5a98:	193c      	adds	r4, r7, r4
    5a9a:	0ddb      	lsrs	r3, r3, #23
    5a9c:	9a05      	ldr	r2, [sp, #20]
    5a9e:	0264      	lsls	r4, r4, #9
    5aa0:	431c      	orrs	r4, r3
    5aa2:	0243      	lsls	r3, r0, #9
    5aa4:	4313      	orrs	r3, r2
    5aa6:	1e5d      	subs	r5, r3, #1
    5aa8:	41ab      	sbcs	r3, r5
    5aaa:	465a      	mov	r2, fp
    5aac:	0dc0      	lsrs	r0, r0, #23
    5aae:	4303      	orrs	r3, r0
    5ab0:	0252      	lsls	r2, r2, #9
    5ab2:	4313      	orrs	r3, r2
    5ab4:	01e2      	lsls	r2, r4, #7
    5ab6:	d556      	bpl.n	5b66 <__aeabi_dmul+0x426>
    5ab8:	2001      	movs	r0, #1
    5aba:	085a      	lsrs	r2, r3, #1
    5abc:	4003      	ands	r3, r0
    5abe:	4313      	orrs	r3, r2
    5ac0:	07e2      	lsls	r2, r4, #31
    5ac2:	4313      	orrs	r3, r2
    5ac4:	0864      	lsrs	r4, r4, #1
    5ac6:	485a      	ldr	r0, [pc, #360]	; (5c30 <__aeabi_dmul+0x4f0>)
    5ac8:	4460      	add	r0, ip
    5aca:	2800      	cmp	r0, #0
    5acc:	dd4d      	ble.n	5b6a <__aeabi_dmul+0x42a>
    5ace:	075a      	lsls	r2, r3, #29
    5ad0:	d009      	beq.n	5ae6 <__aeabi_dmul+0x3a6>
    5ad2:	220f      	movs	r2, #15
    5ad4:	401a      	ands	r2, r3
    5ad6:	2a04      	cmp	r2, #4
    5ad8:	d005      	beq.n	5ae6 <__aeabi_dmul+0x3a6>
    5ada:	1d1a      	adds	r2, r3, #4
    5adc:	429a      	cmp	r2, r3
    5ade:	419b      	sbcs	r3, r3
    5ae0:	425b      	negs	r3, r3
    5ae2:	18e4      	adds	r4, r4, r3
    5ae4:	0013      	movs	r3, r2
    5ae6:	01e2      	lsls	r2, r4, #7
    5ae8:	d504      	bpl.n	5af4 <__aeabi_dmul+0x3b4>
    5aea:	2080      	movs	r0, #128	; 0x80
    5aec:	4a51      	ldr	r2, [pc, #324]	; (5c34 <__aeabi_dmul+0x4f4>)
    5aee:	00c0      	lsls	r0, r0, #3
    5af0:	4014      	ands	r4, r2
    5af2:	4460      	add	r0, ip
    5af4:	4a50      	ldr	r2, [pc, #320]	; (5c38 <__aeabi_dmul+0x4f8>)
    5af6:	4290      	cmp	r0, r2
    5af8:	dd00      	ble.n	5afc <__aeabi_dmul+0x3bc>
    5afa:	e6e3      	b.n	58c4 <__aeabi_dmul+0x184>
    5afc:	2501      	movs	r5, #1
    5afe:	08db      	lsrs	r3, r3, #3
    5b00:	0762      	lsls	r2, r4, #29
    5b02:	431a      	orrs	r2, r3
    5b04:	0264      	lsls	r4, r4, #9
    5b06:	9b01      	ldr	r3, [sp, #4]
    5b08:	4691      	mov	r9, r2
    5b0a:	0b22      	lsrs	r2, r4, #12
    5b0c:	0544      	lsls	r4, r0, #21
    5b0e:	0d64      	lsrs	r4, r4, #21
    5b10:	401d      	ands	r5, r3
    5b12:	e67c      	b.n	580e <__aeabi_dmul+0xce>
    5b14:	2280      	movs	r2, #128	; 0x80
    5b16:	4659      	mov	r1, fp
    5b18:	0312      	lsls	r2, r2, #12
    5b1a:	4211      	tst	r1, r2
    5b1c:	d008      	beq.n	5b30 <__aeabi_dmul+0x3f0>
    5b1e:	4214      	tst	r4, r2
    5b20:	d106      	bne.n	5b30 <__aeabi_dmul+0x3f0>
    5b22:	4322      	orrs	r2, r4
    5b24:	0312      	lsls	r2, r2, #12
    5b26:	0b12      	lsrs	r2, r2, #12
    5b28:	4645      	mov	r5, r8
    5b2a:	4699      	mov	r9, r3
    5b2c:	4c43      	ldr	r4, [pc, #268]	; (5c3c <__aeabi_dmul+0x4fc>)
    5b2e:	e66e      	b.n	580e <__aeabi_dmul+0xce>
    5b30:	465b      	mov	r3, fp
    5b32:	431a      	orrs	r2, r3
    5b34:	0312      	lsls	r2, r2, #12
    5b36:	0b12      	lsrs	r2, r2, #12
    5b38:	4c40      	ldr	r4, [pc, #256]	; (5c3c <__aeabi_dmul+0x4fc>)
    5b3a:	e668      	b.n	580e <__aeabi_dmul+0xce>
    5b3c:	0003      	movs	r3, r0
    5b3e:	4654      	mov	r4, sl
    5b40:	3b28      	subs	r3, #40	; 0x28
    5b42:	409c      	lsls	r4, r3
    5b44:	2300      	movs	r3, #0
    5b46:	e6b9      	b.n	58bc <__aeabi_dmul+0x17c>
    5b48:	f000 fcc8 	bl	64dc <__clzsi2>
    5b4c:	3020      	adds	r0, #32
    5b4e:	e6a6      	b.n	589e <__aeabi_dmul+0x15e>
    5b50:	0003      	movs	r3, r0
    5b52:	3b28      	subs	r3, #40	; 0x28
    5b54:	409f      	lsls	r7, r3
    5b56:	2300      	movs	r3, #0
    5b58:	46bb      	mov	fp, r7
    5b5a:	4699      	mov	r9, r3
    5b5c:	e68a      	b.n	5874 <__aeabi_dmul+0x134>
    5b5e:	f000 fcbd 	bl	64dc <__clzsi2>
    5b62:	3020      	adds	r0, #32
    5b64:	e674      	b.n	5850 <__aeabi_dmul+0x110>
    5b66:	46b4      	mov	ip, r6
    5b68:	e7ad      	b.n	5ac6 <__aeabi_dmul+0x386>
    5b6a:	2501      	movs	r5, #1
    5b6c:	1a2a      	subs	r2, r5, r0
    5b6e:	2a38      	cmp	r2, #56	; 0x38
    5b70:	dd06      	ble.n	5b80 <__aeabi_dmul+0x440>
    5b72:	9b01      	ldr	r3, [sp, #4]
    5b74:	2400      	movs	r4, #0
    5b76:	401d      	ands	r5, r3
    5b78:	2300      	movs	r3, #0
    5b7a:	2200      	movs	r2, #0
    5b7c:	4699      	mov	r9, r3
    5b7e:	e646      	b.n	580e <__aeabi_dmul+0xce>
    5b80:	2a1f      	cmp	r2, #31
    5b82:	dc21      	bgt.n	5bc8 <__aeabi_dmul+0x488>
    5b84:	2520      	movs	r5, #32
    5b86:	0020      	movs	r0, r4
    5b88:	1aad      	subs	r5, r5, r2
    5b8a:	001e      	movs	r6, r3
    5b8c:	40ab      	lsls	r3, r5
    5b8e:	40a8      	lsls	r0, r5
    5b90:	40d6      	lsrs	r6, r2
    5b92:	1e5d      	subs	r5, r3, #1
    5b94:	41ab      	sbcs	r3, r5
    5b96:	4330      	orrs	r0, r6
    5b98:	4318      	orrs	r0, r3
    5b9a:	40d4      	lsrs	r4, r2
    5b9c:	0743      	lsls	r3, r0, #29
    5b9e:	d009      	beq.n	5bb4 <__aeabi_dmul+0x474>
    5ba0:	230f      	movs	r3, #15
    5ba2:	4003      	ands	r3, r0
    5ba4:	2b04      	cmp	r3, #4
    5ba6:	d005      	beq.n	5bb4 <__aeabi_dmul+0x474>
    5ba8:	0003      	movs	r3, r0
    5baa:	1d18      	adds	r0, r3, #4
    5bac:	4298      	cmp	r0, r3
    5bae:	419b      	sbcs	r3, r3
    5bb0:	425b      	negs	r3, r3
    5bb2:	18e4      	adds	r4, r4, r3
    5bb4:	0223      	lsls	r3, r4, #8
    5bb6:	d521      	bpl.n	5bfc <__aeabi_dmul+0x4bc>
    5bb8:	2501      	movs	r5, #1
    5bba:	9b01      	ldr	r3, [sp, #4]
    5bbc:	2401      	movs	r4, #1
    5bbe:	401d      	ands	r5, r3
    5bc0:	2300      	movs	r3, #0
    5bc2:	2200      	movs	r2, #0
    5bc4:	4699      	mov	r9, r3
    5bc6:	e622      	b.n	580e <__aeabi_dmul+0xce>
    5bc8:	251f      	movs	r5, #31
    5bca:	0021      	movs	r1, r4
    5bcc:	426d      	negs	r5, r5
    5bce:	1a28      	subs	r0, r5, r0
    5bd0:	40c1      	lsrs	r1, r0
    5bd2:	0008      	movs	r0, r1
    5bd4:	2a20      	cmp	r2, #32
    5bd6:	d01d      	beq.n	5c14 <__aeabi_dmul+0x4d4>
    5bd8:	355f      	adds	r5, #95	; 0x5f
    5bda:	1aaa      	subs	r2, r5, r2
    5bdc:	4094      	lsls	r4, r2
    5bde:	4323      	orrs	r3, r4
    5be0:	1e5c      	subs	r4, r3, #1
    5be2:	41a3      	sbcs	r3, r4
    5be4:	2507      	movs	r5, #7
    5be6:	4303      	orrs	r3, r0
    5be8:	401d      	ands	r5, r3
    5bea:	2200      	movs	r2, #0
    5bec:	2d00      	cmp	r5, #0
    5bee:	d009      	beq.n	5c04 <__aeabi_dmul+0x4c4>
    5bf0:	220f      	movs	r2, #15
    5bf2:	2400      	movs	r4, #0
    5bf4:	401a      	ands	r2, r3
    5bf6:	0018      	movs	r0, r3
    5bf8:	2a04      	cmp	r2, #4
    5bfa:	d1d6      	bne.n	5baa <__aeabi_dmul+0x46a>
    5bfc:	0003      	movs	r3, r0
    5bfe:	0765      	lsls	r5, r4, #29
    5c00:	0264      	lsls	r4, r4, #9
    5c02:	0b22      	lsrs	r2, r4, #12
    5c04:	08db      	lsrs	r3, r3, #3
    5c06:	432b      	orrs	r3, r5
    5c08:	2501      	movs	r5, #1
    5c0a:	4699      	mov	r9, r3
    5c0c:	9b01      	ldr	r3, [sp, #4]
    5c0e:	2400      	movs	r4, #0
    5c10:	401d      	ands	r5, r3
    5c12:	e5fc      	b.n	580e <__aeabi_dmul+0xce>
    5c14:	2400      	movs	r4, #0
    5c16:	e7e2      	b.n	5bde <__aeabi_dmul+0x49e>
    5c18:	2280      	movs	r2, #128	; 0x80
    5c1a:	2501      	movs	r5, #1
    5c1c:	0312      	lsls	r2, r2, #12
    5c1e:	4322      	orrs	r2, r4
    5c20:	9901      	ldr	r1, [sp, #4]
    5c22:	0312      	lsls	r2, r2, #12
    5c24:	0b12      	lsrs	r2, r2, #12
    5c26:	400d      	ands	r5, r1
    5c28:	4699      	mov	r9, r3
    5c2a:	4c04      	ldr	r4, [pc, #16]	; (5c3c <__aeabi_dmul+0x4fc>)
    5c2c:	e5ef      	b.n	580e <__aeabi_dmul+0xce>
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	000003ff 	.word	0x000003ff
    5c34:	feffffff 	.word	0xfeffffff
    5c38:	000007fe 	.word	0x000007fe
    5c3c:	000007ff 	.word	0x000007ff

00005c40 <__aeabi_dsub>:
    5c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c42:	4646      	mov	r6, r8
    5c44:	46d6      	mov	lr, sl
    5c46:	464f      	mov	r7, r9
    5c48:	030c      	lsls	r4, r1, #12
    5c4a:	b5c0      	push	{r6, r7, lr}
    5c4c:	0fcd      	lsrs	r5, r1, #31
    5c4e:	004e      	lsls	r6, r1, #1
    5c50:	0a61      	lsrs	r1, r4, #9
    5c52:	0f44      	lsrs	r4, r0, #29
    5c54:	430c      	orrs	r4, r1
    5c56:	00c1      	lsls	r1, r0, #3
    5c58:	0058      	lsls	r0, r3, #1
    5c5a:	0d40      	lsrs	r0, r0, #21
    5c5c:	4684      	mov	ip, r0
    5c5e:	468a      	mov	sl, r1
    5c60:	000f      	movs	r7, r1
    5c62:	0319      	lsls	r1, r3, #12
    5c64:	0f50      	lsrs	r0, r2, #29
    5c66:	0a49      	lsrs	r1, r1, #9
    5c68:	4301      	orrs	r1, r0
    5c6a:	48c6      	ldr	r0, [pc, #792]	; (5f84 <__aeabi_dsub+0x344>)
    5c6c:	0d76      	lsrs	r6, r6, #21
    5c6e:	46a8      	mov	r8, r5
    5c70:	0fdb      	lsrs	r3, r3, #31
    5c72:	00d2      	lsls	r2, r2, #3
    5c74:	4584      	cmp	ip, r0
    5c76:	d100      	bne.n	5c7a <__aeabi_dsub+0x3a>
    5c78:	e0d8      	b.n	5e2c <__aeabi_dsub+0x1ec>
    5c7a:	2001      	movs	r0, #1
    5c7c:	4043      	eors	r3, r0
    5c7e:	42ab      	cmp	r3, r5
    5c80:	d100      	bne.n	5c84 <__aeabi_dsub+0x44>
    5c82:	e0a6      	b.n	5dd2 <__aeabi_dsub+0x192>
    5c84:	4660      	mov	r0, ip
    5c86:	1a35      	subs	r5, r6, r0
    5c88:	2d00      	cmp	r5, #0
    5c8a:	dc00      	bgt.n	5c8e <__aeabi_dsub+0x4e>
    5c8c:	e105      	b.n	5e9a <__aeabi_dsub+0x25a>
    5c8e:	2800      	cmp	r0, #0
    5c90:	d110      	bne.n	5cb4 <__aeabi_dsub+0x74>
    5c92:	000b      	movs	r3, r1
    5c94:	4313      	orrs	r3, r2
    5c96:	d100      	bne.n	5c9a <__aeabi_dsub+0x5a>
    5c98:	e0d7      	b.n	5e4a <__aeabi_dsub+0x20a>
    5c9a:	1e6b      	subs	r3, r5, #1
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d000      	beq.n	5ca2 <__aeabi_dsub+0x62>
    5ca0:	e14b      	b.n	5f3a <__aeabi_dsub+0x2fa>
    5ca2:	4653      	mov	r3, sl
    5ca4:	1a9f      	subs	r7, r3, r2
    5ca6:	45ba      	cmp	sl, r7
    5ca8:	4180      	sbcs	r0, r0
    5caa:	1a64      	subs	r4, r4, r1
    5cac:	4240      	negs	r0, r0
    5cae:	1a24      	subs	r4, r4, r0
    5cb0:	2601      	movs	r6, #1
    5cb2:	e01e      	b.n	5cf2 <__aeabi_dsub+0xb2>
    5cb4:	4bb3      	ldr	r3, [pc, #716]	; (5f84 <__aeabi_dsub+0x344>)
    5cb6:	429e      	cmp	r6, r3
    5cb8:	d048      	beq.n	5d4c <__aeabi_dsub+0x10c>
    5cba:	2380      	movs	r3, #128	; 0x80
    5cbc:	041b      	lsls	r3, r3, #16
    5cbe:	4319      	orrs	r1, r3
    5cc0:	2d38      	cmp	r5, #56	; 0x38
    5cc2:	dd00      	ble.n	5cc6 <__aeabi_dsub+0x86>
    5cc4:	e119      	b.n	5efa <__aeabi_dsub+0x2ba>
    5cc6:	2d1f      	cmp	r5, #31
    5cc8:	dd00      	ble.n	5ccc <__aeabi_dsub+0x8c>
    5cca:	e14c      	b.n	5f66 <__aeabi_dsub+0x326>
    5ccc:	2320      	movs	r3, #32
    5cce:	000f      	movs	r7, r1
    5cd0:	1b5b      	subs	r3, r3, r5
    5cd2:	0010      	movs	r0, r2
    5cd4:	409a      	lsls	r2, r3
    5cd6:	409f      	lsls	r7, r3
    5cd8:	40e8      	lsrs	r0, r5
    5cda:	1e53      	subs	r3, r2, #1
    5cdc:	419a      	sbcs	r2, r3
    5cde:	40e9      	lsrs	r1, r5
    5ce0:	4307      	orrs	r7, r0
    5ce2:	4317      	orrs	r7, r2
    5ce4:	4653      	mov	r3, sl
    5ce6:	1bdf      	subs	r7, r3, r7
    5ce8:	1a61      	subs	r1, r4, r1
    5cea:	45ba      	cmp	sl, r7
    5cec:	41a4      	sbcs	r4, r4
    5cee:	4264      	negs	r4, r4
    5cf0:	1b0c      	subs	r4, r1, r4
    5cf2:	0223      	lsls	r3, r4, #8
    5cf4:	d400      	bmi.n	5cf8 <__aeabi_dsub+0xb8>
    5cf6:	e0c5      	b.n	5e84 <__aeabi_dsub+0x244>
    5cf8:	0264      	lsls	r4, r4, #9
    5cfa:	0a65      	lsrs	r5, r4, #9
    5cfc:	2d00      	cmp	r5, #0
    5cfe:	d100      	bne.n	5d02 <__aeabi_dsub+0xc2>
    5d00:	e0f6      	b.n	5ef0 <__aeabi_dsub+0x2b0>
    5d02:	0028      	movs	r0, r5
    5d04:	f000 fbea 	bl	64dc <__clzsi2>
    5d08:	0003      	movs	r3, r0
    5d0a:	3b08      	subs	r3, #8
    5d0c:	2b1f      	cmp	r3, #31
    5d0e:	dd00      	ble.n	5d12 <__aeabi_dsub+0xd2>
    5d10:	e0e9      	b.n	5ee6 <__aeabi_dsub+0x2a6>
    5d12:	2220      	movs	r2, #32
    5d14:	003c      	movs	r4, r7
    5d16:	1ad2      	subs	r2, r2, r3
    5d18:	409d      	lsls	r5, r3
    5d1a:	40d4      	lsrs	r4, r2
    5d1c:	409f      	lsls	r7, r3
    5d1e:	4325      	orrs	r5, r4
    5d20:	429e      	cmp	r6, r3
    5d22:	dd00      	ble.n	5d26 <__aeabi_dsub+0xe6>
    5d24:	e0db      	b.n	5ede <__aeabi_dsub+0x29e>
    5d26:	1b9e      	subs	r6, r3, r6
    5d28:	1c73      	adds	r3, r6, #1
    5d2a:	2b1f      	cmp	r3, #31
    5d2c:	dd00      	ble.n	5d30 <__aeabi_dsub+0xf0>
    5d2e:	e10a      	b.n	5f46 <__aeabi_dsub+0x306>
    5d30:	2220      	movs	r2, #32
    5d32:	0038      	movs	r0, r7
    5d34:	1ad2      	subs	r2, r2, r3
    5d36:	0029      	movs	r1, r5
    5d38:	4097      	lsls	r7, r2
    5d3a:	002c      	movs	r4, r5
    5d3c:	4091      	lsls	r1, r2
    5d3e:	40d8      	lsrs	r0, r3
    5d40:	1e7a      	subs	r2, r7, #1
    5d42:	4197      	sbcs	r7, r2
    5d44:	40dc      	lsrs	r4, r3
    5d46:	2600      	movs	r6, #0
    5d48:	4301      	orrs	r1, r0
    5d4a:	430f      	orrs	r7, r1
    5d4c:	077b      	lsls	r3, r7, #29
    5d4e:	d009      	beq.n	5d64 <__aeabi_dsub+0x124>
    5d50:	230f      	movs	r3, #15
    5d52:	403b      	ands	r3, r7
    5d54:	2b04      	cmp	r3, #4
    5d56:	d005      	beq.n	5d64 <__aeabi_dsub+0x124>
    5d58:	1d3b      	adds	r3, r7, #4
    5d5a:	42bb      	cmp	r3, r7
    5d5c:	41bf      	sbcs	r7, r7
    5d5e:	427f      	negs	r7, r7
    5d60:	19e4      	adds	r4, r4, r7
    5d62:	001f      	movs	r7, r3
    5d64:	0223      	lsls	r3, r4, #8
    5d66:	d525      	bpl.n	5db4 <__aeabi_dsub+0x174>
    5d68:	4b86      	ldr	r3, [pc, #536]	; (5f84 <__aeabi_dsub+0x344>)
    5d6a:	3601      	adds	r6, #1
    5d6c:	429e      	cmp	r6, r3
    5d6e:	d100      	bne.n	5d72 <__aeabi_dsub+0x132>
    5d70:	e0af      	b.n	5ed2 <__aeabi_dsub+0x292>
    5d72:	4b85      	ldr	r3, [pc, #532]	; (5f88 <__aeabi_dsub+0x348>)
    5d74:	2501      	movs	r5, #1
    5d76:	401c      	ands	r4, r3
    5d78:	4643      	mov	r3, r8
    5d7a:	0762      	lsls	r2, r4, #29
    5d7c:	08ff      	lsrs	r7, r7, #3
    5d7e:	0264      	lsls	r4, r4, #9
    5d80:	0576      	lsls	r6, r6, #21
    5d82:	4317      	orrs	r7, r2
    5d84:	0b24      	lsrs	r4, r4, #12
    5d86:	0d76      	lsrs	r6, r6, #21
    5d88:	401d      	ands	r5, r3
    5d8a:	2100      	movs	r1, #0
    5d8c:	0324      	lsls	r4, r4, #12
    5d8e:	0b23      	lsrs	r3, r4, #12
    5d90:	0d0c      	lsrs	r4, r1, #20
    5d92:	4a7e      	ldr	r2, [pc, #504]	; (5f8c <__aeabi_dsub+0x34c>)
    5d94:	0524      	lsls	r4, r4, #20
    5d96:	431c      	orrs	r4, r3
    5d98:	4014      	ands	r4, r2
    5d9a:	0533      	lsls	r3, r6, #20
    5d9c:	4323      	orrs	r3, r4
    5d9e:	005b      	lsls	r3, r3, #1
    5da0:	07ed      	lsls	r5, r5, #31
    5da2:	085b      	lsrs	r3, r3, #1
    5da4:	432b      	orrs	r3, r5
    5da6:	0038      	movs	r0, r7
    5da8:	0019      	movs	r1, r3
    5daa:	bc1c      	pop	{r2, r3, r4}
    5dac:	4690      	mov	r8, r2
    5dae:	4699      	mov	r9, r3
    5db0:	46a2      	mov	sl, r4
    5db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db4:	2501      	movs	r5, #1
    5db6:	4643      	mov	r3, r8
    5db8:	0762      	lsls	r2, r4, #29
    5dba:	08ff      	lsrs	r7, r7, #3
    5dbc:	4317      	orrs	r7, r2
    5dbe:	08e4      	lsrs	r4, r4, #3
    5dc0:	401d      	ands	r5, r3
    5dc2:	4b70      	ldr	r3, [pc, #448]	; (5f84 <__aeabi_dsub+0x344>)
    5dc4:	429e      	cmp	r6, r3
    5dc6:	d036      	beq.n	5e36 <__aeabi_dsub+0x1f6>
    5dc8:	0324      	lsls	r4, r4, #12
    5dca:	0576      	lsls	r6, r6, #21
    5dcc:	0b24      	lsrs	r4, r4, #12
    5dce:	0d76      	lsrs	r6, r6, #21
    5dd0:	e7db      	b.n	5d8a <__aeabi_dsub+0x14a>
    5dd2:	4663      	mov	r3, ip
    5dd4:	1af3      	subs	r3, r6, r3
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	dc00      	bgt.n	5ddc <__aeabi_dsub+0x19c>
    5dda:	e094      	b.n	5f06 <__aeabi_dsub+0x2c6>
    5ddc:	4660      	mov	r0, ip
    5dde:	2800      	cmp	r0, #0
    5de0:	d035      	beq.n	5e4e <__aeabi_dsub+0x20e>
    5de2:	4868      	ldr	r0, [pc, #416]	; (5f84 <__aeabi_dsub+0x344>)
    5de4:	4286      	cmp	r6, r0
    5de6:	d0b1      	beq.n	5d4c <__aeabi_dsub+0x10c>
    5de8:	2780      	movs	r7, #128	; 0x80
    5dea:	043f      	lsls	r7, r7, #16
    5dec:	4339      	orrs	r1, r7
    5dee:	2b38      	cmp	r3, #56	; 0x38
    5df0:	dc00      	bgt.n	5df4 <__aeabi_dsub+0x1b4>
    5df2:	e0fd      	b.n	5ff0 <__aeabi_dsub+0x3b0>
    5df4:	430a      	orrs	r2, r1
    5df6:	0017      	movs	r7, r2
    5df8:	2100      	movs	r1, #0
    5dfa:	1e7a      	subs	r2, r7, #1
    5dfc:	4197      	sbcs	r7, r2
    5dfe:	4457      	add	r7, sl
    5e00:	4557      	cmp	r7, sl
    5e02:	4180      	sbcs	r0, r0
    5e04:	1909      	adds	r1, r1, r4
    5e06:	4244      	negs	r4, r0
    5e08:	190c      	adds	r4, r1, r4
    5e0a:	0223      	lsls	r3, r4, #8
    5e0c:	d53a      	bpl.n	5e84 <__aeabi_dsub+0x244>
    5e0e:	4b5d      	ldr	r3, [pc, #372]	; (5f84 <__aeabi_dsub+0x344>)
    5e10:	3601      	adds	r6, #1
    5e12:	429e      	cmp	r6, r3
    5e14:	d100      	bne.n	5e18 <__aeabi_dsub+0x1d8>
    5e16:	e14b      	b.n	60b0 <__aeabi_dsub+0x470>
    5e18:	2201      	movs	r2, #1
    5e1a:	4b5b      	ldr	r3, [pc, #364]	; (5f88 <__aeabi_dsub+0x348>)
    5e1c:	401c      	ands	r4, r3
    5e1e:	087b      	lsrs	r3, r7, #1
    5e20:	4017      	ands	r7, r2
    5e22:	431f      	orrs	r7, r3
    5e24:	07e2      	lsls	r2, r4, #31
    5e26:	4317      	orrs	r7, r2
    5e28:	0864      	lsrs	r4, r4, #1
    5e2a:	e78f      	b.n	5d4c <__aeabi_dsub+0x10c>
    5e2c:	0008      	movs	r0, r1
    5e2e:	4310      	orrs	r0, r2
    5e30:	d000      	beq.n	5e34 <__aeabi_dsub+0x1f4>
    5e32:	e724      	b.n	5c7e <__aeabi_dsub+0x3e>
    5e34:	e721      	b.n	5c7a <__aeabi_dsub+0x3a>
    5e36:	0023      	movs	r3, r4
    5e38:	433b      	orrs	r3, r7
    5e3a:	d100      	bne.n	5e3e <__aeabi_dsub+0x1fe>
    5e3c:	e1b9      	b.n	61b2 <__aeabi_dsub+0x572>
    5e3e:	2280      	movs	r2, #128	; 0x80
    5e40:	0312      	lsls	r2, r2, #12
    5e42:	4314      	orrs	r4, r2
    5e44:	0324      	lsls	r4, r4, #12
    5e46:	0b24      	lsrs	r4, r4, #12
    5e48:	e79f      	b.n	5d8a <__aeabi_dsub+0x14a>
    5e4a:	002e      	movs	r6, r5
    5e4c:	e77e      	b.n	5d4c <__aeabi_dsub+0x10c>
    5e4e:	0008      	movs	r0, r1
    5e50:	4310      	orrs	r0, r2
    5e52:	d100      	bne.n	5e56 <__aeabi_dsub+0x216>
    5e54:	e0ca      	b.n	5fec <__aeabi_dsub+0x3ac>
    5e56:	1e58      	subs	r0, r3, #1
    5e58:	4684      	mov	ip, r0
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d000      	beq.n	5e60 <__aeabi_dsub+0x220>
    5e5e:	e0e7      	b.n	6030 <__aeabi_dsub+0x3f0>
    5e60:	4452      	add	r2, sl
    5e62:	4552      	cmp	r2, sl
    5e64:	4180      	sbcs	r0, r0
    5e66:	1864      	adds	r4, r4, r1
    5e68:	4240      	negs	r0, r0
    5e6a:	1824      	adds	r4, r4, r0
    5e6c:	0017      	movs	r7, r2
    5e6e:	2601      	movs	r6, #1
    5e70:	0223      	lsls	r3, r4, #8
    5e72:	d507      	bpl.n	5e84 <__aeabi_dsub+0x244>
    5e74:	2602      	movs	r6, #2
    5e76:	e7cf      	b.n	5e18 <__aeabi_dsub+0x1d8>
    5e78:	4664      	mov	r4, ip
    5e7a:	432c      	orrs	r4, r5
    5e7c:	d100      	bne.n	5e80 <__aeabi_dsub+0x240>
    5e7e:	e1b3      	b.n	61e8 <__aeabi_dsub+0x5a8>
    5e80:	002c      	movs	r4, r5
    5e82:	4667      	mov	r7, ip
    5e84:	077b      	lsls	r3, r7, #29
    5e86:	d000      	beq.n	5e8a <__aeabi_dsub+0x24a>
    5e88:	e762      	b.n	5d50 <__aeabi_dsub+0x110>
    5e8a:	0763      	lsls	r3, r4, #29
    5e8c:	08ff      	lsrs	r7, r7, #3
    5e8e:	431f      	orrs	r7, r3
    5e90:	2501      	movs	r5, #1
    5e92:	4643      	mov	r3, r8
    5e94:	08e4      	lsrs	r4, r4, #3
    5e96:	401d      	ands	r5, r3
    5e98:	e793      	b.n	5dc2 <__aeabi_dsub+0x182>
    5e9a:	2d00      	cmp	r5, #0
    5e9c:	d178      	bne.n	5f90 <__aeabi_dsub+0x350>
    5e9e:	1c75      	adds	r5, r6, #1
    5ea0:	056d      	lsls	r5, r5, #21
    5ea2:	0d6d      	lsrs	r5, r5, #21
    5ea4:	2d01      	cmp	r5, #1
    5ea6:	dc00      	bgt.n	5eaa <__aeabi_dsub+0x26a>
    5ea8:	e0f2      	b.n	6090 <__aeabi_dsub+0x450>
    5eaa:	4650      	mov	r0, sl
    5eac:	1a80      	subs	r0, r0, r2
    5eae:	4582      	cmp	sl, r0
    5eb0:	41bf      	sbcs	r7, r7
    5eb2:	1a65      	subs	r5, r4, r1
    5eb4:	427f      	negs	r7, r7
    5eb6:	1bed      	subs	r5, r5, r7
    5eb8:	4684      	mov	ip, r0
    5eba:	0228      	lsls	r0, r5, #8
    5ebc:	d400      	bmi.n	5ec0 <__aeabi_dsub+0x280>
    5ebe:	e08c      	b.n	5fda <__aeabi_dsub+0x39a>
    5ec0:	4650      	mov	r0, sl
    5ec2:	1a17      	subs	r7, r2, r0
    5ec4:	42ba      	cmp	r2, r7
    5ec6:	4192      	sbcs	r2, r2
    5ec8:	1b0c      	subs	r4, r1, r4
    5eca:	4255      	negs	r5, r2
    5ecc:	1b65      	subs	r5, r4, r5
    5ece:	4698      	mov	r8, r3
    5ed0:	e714      	b.n	5cfc <__aeabi_dsub+0xbc>
    5ed2:	2501      	movs	r5, #1
    5ed4:	4643      	mov	r3, r8
    5ed6:	2400      	movs	r4, #0
    5ed8:	401d      	ands	r5, r3
    5eda:	2700      	movs	r7, #0
    5edc:	e755      	b.n	5d8a <__aeabi_dsub+0x14a>
    5ede:	4c2a      	ldr	r4, [pc, #168]	; (5f88 <__aeabi_dsub+0x348>)
    5ee0:	1af6      	subs	r6, r6, r3
    5ee2:	402c      	ands	r4, r5
    5ee4:	e732      	b.n	5d4c <__aeabi_dsub+0x10c>
    5ee6:	003d      	movs	r5, r7
    5ee8:	3828      	subs	r0, #40	; 0x28
    5eea:	4085      	lsls	r5, r0
    5eec:	2700      	movs	r7, #0
    5eee:	e717      	b.n	5d20 <__aeabi_dsub+0xe0>
    5ef0:	0038      	movs	r0, r7
    5ef2:	f000 faf3 	bl	64dc <__clzsi2>
    5ef6:	3020      	adds	r0, #32
    5ef8:	e706      	b.n	5d08 <__aeabi_dsub+0xc8>
    5efa:	430a      	orrs	r2, r1
    5efc:	0017      	movs	r7, r2
    5efe:	2100      	movs	r1, #0
    5f00:	1e7a      	subs	r2, r7, #1
    5f02:	4197      	sbcs	r7, r2
    5f04:	e6ee      	b.n	5ce4 <__aeabi_dsub+0xa4>
    5f06:	2b00      	cmp	r3, #0
    5f08:	d000      	beq.n	5f0c <__aeabi_dsub+0x2cc>
    5f0a:	e0e5      	b.n	60d8 <__aeabi_dsub+0x498>
    5f0c:	1c73      	adds	r3, r6, #1
    5f0e:	469c      	mov	ip, r3
    5f10:	055b      	lsls	r3, r3, #21
    5f12:	0d5b      	lsrs	r3, r3, #21
    5f14:	2b01      	cmp	r3, #1
    5f16:	dc00      	bgt.n	5f1a <__aeabi_dsub+0x2da>
    5f18:	e09f      	b.n	605a <__aeabi_dsub+0x41a>
    5f1a:	4b1a      	ldr	r3, [pc, #104]	; (5f84 <__aeabi_dsub+0x344>)
    5f1c:	459c      	cmp	ip, r3
    5f1e:	d100      	bne.n	5f22 <__aeabi_dsub+0x2e2>
    5f20:	e0c5      	b.n	60ae <__aeabi_dsub+0x46e>
    5f22:	4452      	add	r2, sl
    5f24:	4552      	cmp	r2, sl
    5f26:	4180      	sbcs	r0, r0
    5f28:	1864      	adds	r4, r4, r1
    5f2a:	4240      	negs	r0, r0
    5f2c:	1824      	adds	r4, r4, r0
    5f2e:	07e7      	lsls	r7, r4, #31
    5f30:	0852      	lsrs	r2, r2, #1
    5f32:	4317      	orrs	r7, r2
    5f34:	0864      	lsrs	r4, r4, #1
    5f36:	4666      	mov	r6, ip
    5f38:	e708      	b.n	5d4c <__aeabi_dsub+0x10c>
    5f3a:	4812      	ldr	r0, [pc, #72]	; (5f84 <__aeabi_dsub+0x344>)
    5f3c:	4285      	cmp	r5, r0
    5f3e:	d100      	bne.n	5f42 <__aeabi_dsub+0x302>
    5f40:	e085      	b.n	604e <__aeabi_dsub+0x40e>
    5f42:	001d      	movs	r5, r3
    5f44:	e6bc      	b.n	5cc0 <__aeabi_dsub+0x80>
    5f46:	0029      	movs	r1, r5
    5f48:	3e1f      	subs	r6, #31
    5f4a:	40f1      	lsrs	r1, r6
    5f4c:	2b20      	cmp	r3, #32
    5f4e:	d100      	bne.n	5f52 <__aeabi_dsub+0x312>
    5f50:	e07f      	b.n	6052 <__aeabi_dsub+0x412>
    5f52:	2240      	movs	r2, #64	; 0x40
    5f54:	1ad3      	subs	r3, r2, r3
    5f56:	409d      	lsls	r5, r3
    5f58:	432f      	orrs	r7, r5
    5f5a:	1e7d      	subs	r5, r7, #1
    5f5c:	41af      	sbcs	r7, r5
    5f5e:	2400      	movs	r4, #0
    5f60:	430f      	orrs	r7, r1
    5f62:	2600      	movs	r6, #0
    5f64:	e78e      	b.n	5e84 <__aeabi_dsub+0x244>
    5f66:	002b      	movs	r3, r5
    5f68:	000f      	movs	r7, r1
    5f6a:	3b20      	subs	r3, #32
    5f6c:	40df      	lsrs	r7, r3
    5f6e:	2d20      	cmp	r5, #32
    5f70:	d071      	beq.n	6056 <__aeabi_dsub+0x416>
    5f72:	2340      	movs	r3, #64	; 0x40
    5f74:	1b5d      	subs	r5, r3, r5
    5f76:	40a9      	lsls	r1, r5
    5f78:	430a      	orrs	r2, r1
    5f7a:	1e51      	subs	r1, r2, #1
    5f7c:	418a      	sbcs	r2, r1
    5f7e:	2100      	movs	r1, #0
    5f80:	4317      	orrs	r7, r2
    5f82:	e6af      	b.n	5ce4 <__aeabi_dsub+0xa4>
    5f84:	000007ff 	.word	0x000007ff
    5f88:	ff7fffff 	.word	0xff7fffff
    5f8c:	800fffff 	.word	0x800fffff
    5f90:	2e00      	cmp	r6, #0
    5f92:	d03e      	beq.n	6012 <__aeabi_dsub+0x3d2>
    5f94:	4eb3      	ldr	r6, [pc, #716]	; (6264 <__aeabi_dsub+0x624>)
    5f96:	45b4      	cmp	ip, r6
    5f98:	d045      	beq.n	6026 <__aeabi_dsub+0x3e6>
    5f9a:	2680      	movs	r6, #128	; 0x80
    5f9c:	0436      	lsls	r6, r6, #16
    5f9e:	426d      	negs	r5, r5
    5fa0:	4334      	orrs	r4, r6
    5fa2:	2d38      	cmp	r5, #56	; 0x38
    5fa4:	dd00      	ble.n	5fa8 <__aeabi_dsub+0x368>
    5fa6:	e0a8      	b.n	60fa <__aeabi_dsub+0x4ba>
    5fa8:	2d1f      	cmp	r5, #31
    5faa:	dd00      	ble.n	5fae <__aeabi_dsub+0x36e>
    5fac:	e11f      	b.n	61ee <__aeabi_dsub+0x5ae>
    5fae:	2620      	movs	r6, #32
    5fb0:	0027      	movs	r7, r4
    5fb2:	4650      	mov	r0, sl
    5fb4:	1b76      	subs	r6, r6, r5
    5fb6:	40b7      	lsls	r7, r6
    5fb8:	40e8      	lsrs	r0, r5
    5fba:	4307      	orrs	r7, r0
    5fbc:	4650      	mov	r0, sl
    5fbe:	40b0      	lsls	r0, r6
    5fc0:	1e46      	subs	r6, r0, #1
    5fc2:	41b0      	sbcs	r0, r6
    5fc4:	40ec      	lsrs	r4, r5
    5fc6:	4338      	orrs	r0, r7
    5fc8:	1a17      	subs	r7, r2, r0
    5fca:	42ba      	cmp	r2, r7
    5fcc:	4192      	sbcs	r2, r2
    5fce:	1b0c      	subs	r4, r1, r4
    5fd0:	4252      	negs	r2, r2
    5fd2:	1aa4      	subs	r4, r4, r2
    5fd4:	4666      	mov	r6, ip
    5fd6:	4698      	mov	r8, r3
    5fd8:	e68b      	b.n	5cf2 <__aeabi_dsub+0xb2>
    5fda:	4664      	mov	r4, ip
    5fdc:	4667      	mov	r7, ip
    5fde:	432c      	orrs	r4, r5
    5fe0:	d000      	beq.n	5fe4 <__aeabi_dsub+0x3a4>
    5fe2:	e68b      	b.n	5cfc <__aeabi_dsub+0xbc>
    5fe4:	2500      	movs	r5, #0
    5fe6:	2600      	movs	r6, #0
    5fe8:	2700      	movs	r7, #0
    5fea:	e6ea      	b.n	5dc2 <__aeabi_dsub+0x182>
    5fec:	001e      	movs	r6, r3
    5fee:	e6ad      	b.n	5d4c <__aeabi_dsub+0x10c>
    5ff0:	2b1f      	cmp	r3, #31
    5ff2:	dc60      	bgt.n	60b6 <__aeabi_dsub+0x476>
    5ff4:	2720      	movs	r7, #32
    5ff6:	1af8      	subs	r0, r7, r3
    5ff8:	000f      	movs	r7, r1
    5ffa:	4684      	mov	ip, r0
    5ffc:	4087      	lsls	r7, r0
    5ffe:	0010      	movs	r0, r2
    6000:	40d8      	lsrs	r0, r3
    6002:	4307      	orrs	r7, r0
    6004:	4660      	mov	r0, ip
    6006:	4082      	lsls	r2, r0
    6008:	1e50      	subs	r0, r2, #1
    600a:	4182      	sbcs	r2, r0
    600c:	40d9      	lsrs	r1, r3
    600e:	4317      	orrs	r7, r2
    6010:	e6f5      	b.n	5dfe <__aeabi_dsub+0x1be>
    6012:	0026      	movs	r6, r4
    6014:	4650      	mov	r0, sl
    6016:	4306      	orrs	r6, r0
    6018:	d005      	beq.n	6026 <__aeabi_dsub+0x3e6>
    601a:	43ed      	mvns	r5, r5
    601c:	2d00      	cmp	r5, #0
    601e:	d0d3      	beq.n	5fc8 <__aeabi_dsub+0x388>
    6020:	4e90      	ldr	r6, [pc, #576]	; (6264 <__aeabi_dsub+0x624>)
    6022:	45b4      	cmp	ip, r6
    6024:	d1bd      	bne.n	5fa2 <__aeabi_dsub+0x362>
    6026:	000c      	movs	r4, r1
    6028:	0017      	movs	r7, r2
    602a:	4666      	mov	r6, ip
    602c:	4698      	mov	r8, r3
    602e:	e68d      	b.n	5d4c <__aeabi_dsub+0x10c>
    6030:	488c      	ldr	r0, [pc, #560]	; (6264 <__aeabi_dsub+0x624>)
    6032:	4283      	cmp	r3, r0
    6034:	d00b      	beq.n	604e <__aeabi_dsub+0x40e>
    6036:	4663      	mov	r3, ip
    6038:	e6d9      	b.n	5dee <__aeabi_dsub+0x1ae>
    603a:	2d00      	cmp	r5, #0
    603c:	d000      	beq.n	6040 <__aeabi_dsub+0x400>
    603e:	e096      	b.n	616e <__aeabi_dsub+0x52e>
    6040:	0008      	movs	r0, r1
    6042:	4310      	orrs	r0, r2
    6044:	d100      	bne.n	6048 <__aeabi_dsub+0x408>
    6046:	e0e2      	b.n	620e <__aeabi_dsub+0x5ce>
    6048:	000c      	movs	r4, r1
    604a:	0017      	movs	r7, r2
    604c:	4698      	mov	r8, r3
    604e:	4e85      	ldr	r6, [pc, #532]	; (6264 <__aeabi_dsub+0x624>)
    6050:	e67c      	b.n	5d4c <__aeabi_dsub+0x10c>
    6052:	2500      	movs	r5, #0
    6054:	e780      	b.n	5f58 <__aeabi_dsub+0x318>
    6056:	2100      	movs	r1, #0
    6058:	e78e      	b.n	5f78 <__aeabi_dsub+0x338>
    605a:	0023      	movs	r3, r4
    605c:	4650      	mov	r0, sl
    605e:	4303      	orrs	r3, r0
    6060:	2e00      	cmp	r6, #0
    6062:	d000      	beq.n	6066 <__aeabi_dsub+0x426>
    6064:	e0a8      	b.n	61b8 <__aeabi_dsub+0x578>
    6066:	2b00      	cmp	r3, #0
    6068:	d100      	bne.n	606c <__aeabi_dsub+0x42c>
    606a:	e0de      	b.n	622a <__aeabi_dsub+0x5ea>
    606c:	000b      	movs	r3, r1
    606e:	4313      	orrs	r3, r2
    6070:	d100      	bne.n	6074 <__aeabi_dsub+0x434>
    6072:	e66b      	b.n	5d4c <__aeabi_dsub+0x10c>
    6074:	4452      	add	r2, sl
    6076:	4552      	cmp	r2, sl
    6078:	4180      	sbcs	r0, r0
    607a:	1864      	adds	r4, r4, r1
    607c:	4240      	negs	r0, r0
    607e:	1824      	adds	r4, r4, r0
    6080:	0017      	movs	r7, r2
    6082:	0223      	lsls	r3, r4, #8
    6084:	d400      	bmi.n	6088 <__aeabi_dsub+0x448>
    6086:	e6fd      	b.n	5e84 <__aeabi_dsub+0x244>
    6088:	4b77      	ldr	r3, [pc, #476]	; (6268 <__aeabi_dsub+0x628>)
    608a:	4666      	mov	r6, ip
    608c:	401c      	ands	r4, r3
    608e:	e65d      	b.n	5d4c <__aeabi_dsub+0x10c>
    6090:	0025      	movs	r5, r4
    6092:	4650      	mov	r0, sl
    6094:	4305      	orrs	r5, r0
    6096:	2e00      	cmp	r6, #0
    6098:	d1cf      	bne.n	603a <__aeabi_dsub+0x3fa>
    609a:	2d00      	cmp	r5, #0
    609c:	d14f      	bne.n	613e <__aeabi_dsub+0x4fe>
    609e:	000c      	movs	r4, r1
    60a0:	4314      	orrs	r4, r2
    60a2:	d100      	bne.n	60a6 <__aeabi_dsub+0x466>
    60a4:	e0a0      	b.n	61e8 <__aeabi_dsub+0x5a8>
    60a6:	000c      	movs	r4, r1
    60a8:	0017      	movs	r7, r2
    60aa:	4698      	mov	r8, r3
    60ac:	e64e      	b.n	5d4c <__aeabi_dsub+0x10c>
    60ae:	4666      	mov	r6, ip
    60b0:	2400      	movs	r4, #0
    60b2:	2700      	movs	r7, #0
    60b4:	e685      	b.n	5dc2 <__aeabi_dsub+0x182>
    60b6:	001f      	movs	r7, r3
    60b8:	0008      	movs	r0, r1
    60ba:	3f20      	subs	r7, #32
    60bc:	40f8      	lsrs	r0, r7
    60be:	0007      	movs	r7, r0
    60c0:	2b20      	cmp	r3, #32
    60c2:	d100      	bne.n	60c6 <__aeabi_dsub+0x486>
    60c4:	e08e      	b.n	61e4 <__aeabi_dsub+0x5a4>
    60c6:	2040      	movs	r0, #64	; 0x40
    60c8:	1ac3      	subs	r3, r0, r3
    60ca:	4099      	lsls	r1, r3
    60cc:	430a      	orrs	r2, r1
    60ce:	1e51      	subs	r1, r2, #1
    60d0:	418a      	sbcs	r2, r1
    60d2:	2100      	movs	r1, #0
    60d4:	4317      	orrs	r7, r2
    60d6:	e692      	b.n	5dfe <__aeabi_dsub+0x1be>
    60d8:	2e00      	cmp	r6, #0
    60da:	d114      	bne.n	6106 <__aeabi_dsub+0x4c6>
    60dc:	0026      	movs	r6, r4
    60de:	4650      	mov	r0, sl
    60e0:	4306      	orrs	r6, r0
    60e2:	d062      	beq.n	61aa <__aeabi_dsub+0x56a>
    60e4:	43db      	mvns	r3, r3
    60e6:	2b00      	cmp	r3, #0
    60e8:	d15c      	bne.n	61a4 <__aeabi_dsub+0x564>
    60ea:	1887      	adds	r7, r0, r2
    60ec:	4297      	cmp	r7, r2
    60ee:	4192      	sbcs	r2, r2
    60f0:	1864      	adds	r4, r4, r1
    60f2:	4252      	negs	r2, r2
    60f4:	18a4      	adds	r4, r4, r2
    60f6:	4666      	mov	r6, ip
    60f8:	e687      	b.n	5e0a <__aeabi_dsub+0x1ca>
    60fa:	4650      	mov	r0, sl
    60fc:	4320      	orrs	r0, r4
    60fe:	1e44      	subs	r4, r0, #1
    6100:	41a0      	sbcs	r0, r4
    6102:	2400      	movs	r4, #0
    6104:	e760      	b.n	5fc8 <__aeabi_dsub+0x388>
    6106:	4e57      	ldr	r6, [pc, #348]	; (6264 <__aeabi_dsub+0x624>)
    6108:	45b4      	cmp	ip, r6
    610a:	d04e      	beq.n	61aa <__aeabi_dsub+0x56a>
    610c:	2680      	movs	r6, #128	; 0x80
    610e:	0436      	lsls	r6, r6, #16
    6110:	425b      	negs	r3, r3
    6112:	4334      	orrs	r4, r6
    6114:	2b38      	cmp	r3, #56	; 0x38
    6116:	dd00      	ble.n	611a <__aeabi_dsub+0x4da>
    6118:	e07f      	b.n	621a <__aeabi_dsub+0x5da>
    611a:	2b1f      	cmp	r3, #31
    611c:	dd00      	ble.n	6120 <__aeabi_dsub+0x4e0>
    611e:	e08b      	b.n	6238 <__aeabi_dsub+0x5f8>
    6120:	2620      	movs	r6, #32
    6122:	0027      	movs	r7, r4
    6124:	4650      	mov	r0, sl
    6126:	1af6      	subs	r6, r6, r3
    6128:	40b7      	lsls	r7, r6
    612a:	40d8      	lsrs	r0, r3
    612c:	4307      	orrs	r7, r0
    612e:	4650      	mov	r0, sl
    6130:	40b0      	lsls	r0, r6
    6132:	1e46      	subs	r6, r0, #1
    6134:	41b0      	sbcs	r0, r6
    6136:	4307      	orrs	r7, r0
    6138:	40dc      	lsrs	r4, r3
    613a:	18bf      	adds	r7, r7, r2
    613c:	e7d6      	b.n	60ec <__aeabi_dsub+0x4ac>
    613e:	000d      	movs	r5, r1
    6140:	4315      	orrs	r5, r2
    6142:	d100      	bne.n	6146 <__aeabi_dsub+0x506>
    6144:	e602      	b.n	5d4c <__aeabi_dsub+0x10c>
    6146:	4650      	mov	r0, sl
    6148:	1a80      	subs	r0, r0, r2
    614a:	4582      	cmp	sl, r0
    614c:	41bf      	sbcs	r7, r7
    614e:	1a65      	subs	r5, r4, r1
    6150:	427f      	negs	r7, r7
    6152:	1bed      	subs	r5, r5, r7
    6154:	4684      	mov	ip, r0
    6156:	0228      	lsls	r0, r5, #8
    6158:	d400      	bmi.n	615c <__aeabi_dsub+0x51c>
    615a:	e68d      	b.n	5e78 <__aeabi_dsub+0x238>
    615c:	4650      	mov	r0, sl
    615e:	1a17      	subs	r7, r2, r0
    6160:	42ba      	cmp	r2, r7
    6162:	4192      	sbcs	r2, r2
    6164:	1b0c      	subs	r4, r1, r4
    6166:	4252      	negs	r2, r2
    6168:	1aa4      	subs	r4, r4, r2
    616a:	4698      	mov	r8, r3
    616c:	e5ee      	b.n	5d4c <__aeabi_dsub+0x10c>
    616e:	000d      	movs	r5, r1
    6170:	4315      	orrs	r5, r2
    6172:	d100      	bne.n	6176 <__aeabi_dsub+0x536>
    6174:	e76b      	b.n	604e <__aeabi_dsub+0x40e>
    6176:	4650      	mov	r0, sl
    6178:	0767      	lsls	r7, r4, #29
    617a:	08c0      	lsrs	r0, r0, #3
    617c:	4307      	orrs	r7, r0
    617e:	2080      	movs	r0, #128	; 0x80
    6180:	08e4      	lsrs	r4, r4, #3
    6182:	0300      	lsls	r0, r0, #12
    6184:	4204      	tst	r4, r0
    6186:	d007      	beq.n	6198 <__aeabi_dsub+0x558>
    6188:	08cd      	lsrs	r5, r1, #3
    618a:	4205      	tst	r5, r0
    618c:	d104      	bne.n	6198 <__aeabi_dsub+0x558>
    618e:	002c      	movs	r4, r5
    6190:	4698      	mov	r8, r3
    6192:	08d7      	lsrs	r7, r2, #3
    6194:	0749      	lsls	r1, r1, #29
    6196:	430f      	orrs	r7, r1
    6198:	0f7b      	lsrs	r3, r7, #29
    619a:	00e4      	lsls	r4, r4, #3
    619c:	431c      	orrs	r4, r3
    619e:	00ff      	lsls	r7, r7, #3
    61a0:	4e30      	ldr	r6, [pc, #192]	; (6264 <__aeabi_dsub+0x624>)
    61a2:	e5d3      	b.n	5d4c <__aeabi_dsub+0x10c>
    61a4:	4e2f      	ldr	r6, [pc, #188]	; (6264 <__aeabi_dsub+0x624>)
    61a6:	45b4      	cmp	ip, r6
    61a8:	d1b4      	bne.n	6114 <__aeabi_dsub+0x4d4>
    61aa:	000c      	movs	r4, r1
    61ac:	0017      	movs	r7, r2
    61ae:	4666      	mov	r6, ip
    61b0:	e5cc      	b.n	5d4c <__aeabi_dsub+0x10c>
    61b2:	2700      	movs	r7, #0
    61b4:	2400      	movs	r4, #0
    61b6:	e5e8      	b.n	5d8a <__aeabi_dsub+0x14a>
    61b8:	2b00      	cmp	r3, #0
    61ba:	d039      	beq.n	6230 <__aeabi_dsub+0x5f0>
    61bc:	000b      	movs	r3, r1
    61be:	4313      	orrs	r3, r2
    61c0:	d100      	bne.n	61c4 <__aeabi_dsub+0x584>
    61c2:	e744      	b.n	604e <__aeabi_dsub+0x40e>
    61c4:	08c0      	lsrs	r0, r0, #3
    61c6:	0767      	lsls	r7, r4, #29
    61c8:	4307      	orrs	r7, r0
    61ca:	2080      	movs	r0, #128	; 0x80
    61cc:	08e4      	lsrs	r4, r4, #3
    61ce:	0300      	lsls	r0, r0, #12
    61d0:	4204      	tst	r4, r0
    61d2:	d0e1      	beq.n	6198 <__aeabi_dsub+0x558>
    61d4:	08cb      	lsrs	r3, r1, #3
    61d6:	4203      	tst	r3, r0
    61d8:	d1de      	bne.n	6198 <__aeabi_dsub+0x558>
    61da:	08d7      	lsrs	r7, r2, #3
    61dc:	0749      	lsls	r1, r1, #29
    61de:	430f      	orrs	r7, r1
    61e0:	001c      	movs	r4, r3
    61e2:	e7d9      	b.n	6198 <__aeabi_dsub+0x558>
    61e4:	2100      	movs	r1, #0
    61e6:	e771      	b.n	60cc <__aeabi_dsub+0x48c>
    61e8:	2500      	movs	r5, #0
    61ea:	2700      	movs	r7, #0
    61ec:	e5e9      	b.n	5dc2 <__aeabi_dsub+0x182>
    61ee:	002e      	movs	r6, r5
    61f0:	0027      	movs	r7, r4
    61f2:	3e20      	subs	r6, #32
    61f4:	40f7      	lsrs	r7, r6
    61f6:	2d20      	cmp	r5, #32
    61f8:	d02f      	beq.n	625a <__aeabi_dsub+0x61a>
    61fa:	2640      	movs	r6, #64	; 0x40
    61fc:	1b75      	subs	r5, r6, r5
    61fe:	40ac      	lsls	r4, r5
    6200:	4650      	mov	r0, sl
    6202:	4320      	orrs	r0, r4
    6204:	1e44      	subs	r4, r0, #1
    6206:	41a0      	sbcs	r0, r4
    6208:	2400      	movs	r4, #0
    620a:	4338      	orrs	r0, r7
    620c:	e6dc      	b.n	5fc8 <__aeabi_dsub+0x388>
    620e:	2480      	movs	r4, #128	; 0x80
    6210:	2500      	movs	r5, #0
    6212:	0324      	lsls	r4, r4, #12
    6214:	4e13      	ldr	r6, [pc, #76]	; (6264 <__aeabi_dsub+0x624>)
    6216:	2700      	movs	r7, #0
    6218:	e5d3      	b.n	5dc2 <__aeabi_dsub+0x182>
    621a:	4650      	mov	r0, sl
    621c:	4320      	orrs	r0, r4
    621e:	0007      	movs	r7, r0
    6220:	1e78      	subs	r0, r7, #1
    6222:	4187      	sbcs	r7, r0
    6224:	2400      	movs	r4, #0
    6226:	18bf      	adds	r7, r7, r2
    6228:	e760      	b.n	60ec <__aeabi_dsub+0x4ac>
    622a:	000c      	movs	r4, r1
    622c:	0017      	movs	r7, r2
    622e:	e58d      	b.n	5d4c <__aeabi_dsub+0x10c>
    6230:	000c      	movs	r4, r1
    6232:	0017      	movs	r7, r2
    6234:	4e0b      	ldr	r6, [pc, #44]	; (6264 <__aeabi_dsub+0x624>)
    6236:	e589      	b.n	5d4c <__aeabi_dsub+0x10c>
    6238:	001e      	movs	r6, r3
    623a:	0027      	movs	r7, r4
    623c:	3e20      	subs	r6, #32
    623e:	40f7      	lsrs	r7, r6
    6240:	2b20      	cmp	r3, #32
    6242:	d00c      	beq.n	625e <__aeabi_dsub+0x61e>
    6244:	2640      	movs	r6, #64	; 0x40
    6246:	1af3      	subs	r3, r6, r3
    6248:	409c      	lsls	r4, r3
    624a:	4650      	mov	r0, sl
    624c:	4320      	orrs	r0, r4
    624e:	1e44      	subs	r4, r0, #1
    6250:	41a0      	sbcs	r0, r4
    6252:	4307      	orrs	r7, r0
    6254:	2400      	movs	r4, #0
    6256:	18bf      	adds	r7, r7, r2
    6258:	e748      	b.n	60ec <__aeabi_dsub+0x4ac>
    625a:	2400      	movs	r4, #0
    625c:	e7d0      	b.n	6200 <__aeabi_dsub+0x5c0>
    625e:	2400      	movs	r4, #0
    6260:	e7f3      	b.n	624a <__aeabi_dsub+0x60a>
    6262:	46c0      	nop			; (mov r8, r8)
    6264:	000007ff 	.word	0x000007ff
    6268:	ff7fffff 	.word	0xff7fffff

0000626c <__aeabi_d2iz>:
    626c:	b530      	push	{r4, r5, lr}
    626e:	4d13      	ldr	r5, [pc, #76]	; (62bc <__aeabi_d2iz+0x50>)
    6270:	030a      	lsls	r2, r1, #12
    6272:	004b      	lsls	r3, r1, #1
    6274:	0b12      	lsrs	r2, r2, #12
    6276:	0d5b      	lsrs	r3, r3, #21
    6278:	0fc9      	lsrs	r1, r1, #31
    627a:	2400      	movs	r4, #0
    627c:	42ab      	cmp	r3, r5
    627e:	dd10      	ble.n	62a2 <__aeabi_d2iz+0x36>
    6280:	4c0f      	ldr	r4, [pc, #60]	; (62c0 <__aeabi_d2iz+0x54>)
    6282:	42a3      	cmp	r3, r4
    6284:	dc0f      	bgt.n	62a6 <__aeabi_d2iz+0x3a>
    6286:	2480      	movs	r4, #128	; 0x80
    6288:	4d0e      	ldr	r5, [pc, #56]	; (62c4 <__aeabi_d2iz+0x58>)
    628a:	0364      	lsls	r4, r4, #13
    628c:	4322      	orrs	r2, r4
    628e:	1aed      	subs	r5, r5, r3
    6290:	2d1f      	cmp	r5, #31
    6292:	dd0b      	ble.n	62ac <__aeabi_d2iz+0x40>
    6294:	480c      	ldr	r0, [pc, #48]	; (62c8 <__aeabi_d2iz+0x5c>)
    6296:	1ac3      	subs	r3, r0, r3
    6298:	40da      	lsrs	r2, r3
    629a:	4254      	negs	r4, r2
    629c:	2900      	cmp	r1, #0
    629e:	d100      	bne.n	62a2 <__aeabi_d2iz+0x36>
    62a0:	0014      	movs	r4, r2
    62a2:	0020      	movs	r0, r4
    62a4:	bd30      	pop	{r4, r5, pc}
    62a6:	4b09      	ldr	r3, [pc, #36]	; (62cc <__aeabi_d2iz+0x60>)
    62a8:	18cc      	adds	r4, r1, r3
    62aa:	e7fa      	b.n	62a2 <__aeabi_d2iz+0x36>
    62ac:	4c08      	ldr	r4, [pc, #32]	; (62d0 <__aeabi_d2iz+0x64>)
    62ae:	40e8      	lsrs	r0, r5
    62b0:	46a4      	mov	ip, r4
    62b2:	4463      	add	r3, ip
    62b4:	409a      	lsls	r2, r3
    62b6:	4302      	orrs	r2, r0
    62b8:	e7ef      	b.n	629a <__aeabi_d2iz+0x2e>
    62ba:	46c0      	nop			; (mov r8, r8)
    62bc:	000003fe 	.word	0x000003fe
    62c0:	0000041d 	.word	0x0000041d
    62c4:	00000433 	.word	0x00000433
    62c8:	00000413 	.word	0x00000413
    62cc:	7fffffff 	.word	0x7fffffff
    62d0:	fffffbed 	.word	0xfffffbed

000062d4 <__aeabi_i2d>:
    62d4:	b570      	push	{r4, r5, r6, lr}
    62d6:	2800      	cmp	r0, #0
    62d8:	d030      	beq.n	633c <__aeabi_i2d+0x68>
    62da:	17c3      	asrs	r3, r0, #31
    62dc:	18c4      	adds	r4, r0, r3
    62de:	405c      	eors	r4, r3
    62e0:	0fc5      	lsrs	r5, r0, #31
    62e2:	0020      	movs	r0, r4
    62e4:	f000 f8fa 	bl	64dc <__clzsi2>
    62e8:	4b17      	ldr	r3, [pc, #92]	; (6348 <__aeabi_i2d+0x74>)
    62ea:	4a18      	ldr	r2, [pc, #96]	; (634c <__aeabi_i2d+0x78>)
    62ec:	1a1b      	subs	r3, r3, r0
    62ee:	1ad2      	subs	r2, r2, r3
    62f0:	2a1f      	cmp	r2, #31
    62f2:	dd18      	ble.n	6326 <__aeabi_i2d+0x52>
    62f4:	4a16      	ldr	r2, [pc, #88]	; (6350 <__aeabi_i2d+0x7c>)
    62f6:	1ad2      	subs	r2, r2, r3
    62f8:	4094      	lsls	r4, r2
    62fa:	2200      	movs	r2, #0
    62fc:	0324      	lsls	r4, r4, #12
    62fe:	055b      	lsls	r3, r3, #21
    6300:	0b24      	lsrs	r4, r4, #12
    6302:	0d5b      	lsrs	r3, r3, #21
    6304:	2100      	movs	r1, #0
    6306:	0010      	movs	r0, r2
    6308:	0324      	lsls	r4, r4, #12
    630a:	0d0a      	lsrs	r2, r1, #20
    630c:	0b24      	lsrs	r4, r4, #12
    630e:	0512      	lsls	r2, r2, #20
    6310:	4322      	orrs	r2, r4
    6312:	4c10      	ldr	r4, [pc, #64]	; (6354 <__aeabi_i2d+0x80>)
    6314:	051b      	lsls	r3, r3, #20
    6316:	4022      	ands	r2, r4
    6318:	4313      	orrs	r3, r2
    631a:	005b      	lsls	r3, r3, #1
    631c:	07ed      	lsls	r5, r5, #31
    631e:	085b      	lsrs	r3, r3, #1
    6320:	432b      	orrs	r3, r5
    6322:	0019      	movs	r1, r3
    6324:	bd70      	pop	{r4, r5, r6, pc}
    6326:	0021      	movs	r1, r4
    6328:	4091      	lsls	r1, r2
    632a:	000a      	movs	r2, r1
    632c:	210b      	movs	r1, #11
    632e:	1a08      	subs	r0, r1, r0
    6330:	40c4      	lsrs	r4, r0
    6332:	055b      	lsls	r3, r3, #21
    6334:	0324      	lsls	r4, r4, #12
    6336:	0b24      	lsrs	r4, r4, #12
    6338:	0d5b      	lsrs	r3, r3, #21
    633a:	e7e3      	b.n	6304 <__aeabi_i2d+0x30>
    633c:	2500      	movs	r5, #0
    633e:	2300      	movs	r3, #0
    6340:	2400      	movs	r4, #0
    6342:	2200      	movs	r2, #0
    6344:	e7de      	b.n	6304 <__aeabi_i2d+0x30>
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	0000041e 	.word	0x0000041e
    634c:	00000433 	.word	0x00000433
    6350:	00000413 	.word	0x00000413
    6354:	800fffff 	.word	0x800fffff

00006358 <__aeabi_ui2d>:
    6358:	b510      	push	{r4, lr}
    635a:	1e04      	subs	r4, r0, #0
    635c:	d028      	beq.n	63b0 <__aeabi_ui2d+0x58>
    635e:	f000 f8bd 	bl	64dc <__clzsi2>
    6362:	4b15      	ldr	r3, [pc, #84]	; (63b8 <__aeabi_ui2d+0x60>)
    6364:	4a15      	ldr	r2, [pc, #84]	; (63bc <__aeabi_ui2d+0x64>)
    6366:	1a1b      	subs	r3, r3, r0
    6368:	1ad2      	subs	r2, r2, r3
    636a:	2a1f      	cmp	r2, #31
    636c:	dd15      	ble.n	639a <__aeabi_ui2d+0x42>
    636e:	4a14      	ldr	r2, [pc, #80]	; (63c0 <__aeabi_ui2d+0x68>)
    6370:	1ad2      	subs	r2, r2, r3
    6372:	4094      	lsls	r4, r2
    6374:	2200      	movs	r2, #0
    6376:	0324      	lsls	r4, r4, #12
    6378:	055b      	lsls	r3, r3, #21
    637a:	0b24      	lsrs	r4, r4, #12
    637c:	0d5b      	lsrs	r3, r3, #21
    637e:	2100      	movs	r1, #0
    6380:	0010      	movs	r0, r2
    6382:	0324      	lsls	r4, r4, #12
    6384:	0d0a      	lsrs	r2, r1, #20
    6386:	0b24      	lsrs	r4, r4, #12
    6388:	0512      	lsls	r2, r2, #20
    638a:	4322      	orrs	r2, r4
    638c:	4c0d      	ldr	r4, [pc, #52]	; (63c4 <__aeabi_ui2d+0x6c>)
    638e:	051b      	lsls	r3, r3, #20
    6390:	4022      	ands	r2, r4
    6392:	4313      	orrs	r3, r2
    6394:	005b      	lsls	r3, r3, #1
    6396:	0859      	lsrs	r1, r3, #1
    6398:	bd10      	pop	{r4, pc}
    639a:	0021      	movs	r1, r4
    639c:	4091      	lsls	r1, r2
    639e:	000a      	movs	r2, r1
    63a0:	210b      	movs	r1, #11
    63a2:	1a08      	subs	r0, r1, r0
    63a4:	40c4      	lsrs	r4, r0
    63a6:	055b      	lsls	r3, r3, #21
    63a8:	0324      	lsls	r4, r4, #12
    63aa:	0b24      	lsrs	r4, r4, #12
    63ac:	0d5b      	lsrs	r3, r3, #21
    63ae:	e7e6      	b.n	637e <__aeabi_ui2d+0x26>
    63b0:	2300      	movs	r3, #0
    63b2:	2400      	movs	r4, #0
    63b4:	2200      	movs	r2, #0
    63b6:	e7e2      	b.n	637e <__aeabi_ui2d+0x26>
    63b8:	0000041e 	.word	0x0000041e
    63bc:	00000433 	.word	0x00000433
    63c0:	00000413 	.word	0x00000413
    63c4:	800fffff 	.word	0x800fffff

000063c8 <__aeabi_d2f>:
    63c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ca:	004c      	lsls	r4, r1, #1
    63cc:	0d64      	lsrs	r4, r4, #21
    63ce:	030b      	lsls	r3, r1, #12
    63d0:	1c62      	adds	r2, r4, #1
    63d2:	0f45      	lsrs	r5, r0, #29
    63d4:	0a5b      	lsrs	r3, r3, #9
    63d6:	0552      	lsls	r2, r2, #21
    63d8:	432b      	orrs	r3, r5
    63da:	0fc9      	lsrs	r1, r1, #31
    63dc:	00c5      	lsls	r5, r0, #3
    63de:	0d52      	lsrs	r2, r2, #21
    63e0:	2a01      	cmp	r2, #1
    63e2:	dd28      	ble.n	6436 <__aeabi_d2f+0x6e>
    63e4:	4a3a      	ldr	r2, [pc, #232]	; (64d0 <__aeabi_d2f+0x108>)
    63e6:	18a6      	adds	r6, r4, r2
    63e8:	2efe      	cmp	r6, #254	; 0xfe
    63ea:	dc1b      	bgt.n	6424 <__aeabi_d2f+0x5c>
    63ec:	2e00      	cmp	r6, #0
    63ee:	dd3e      	ble.n	646e <__aeabi_d2f+0xa6>
    63f0:	0180      	lsls	r0, r0, #6
    63f2:	0002      	movs	r2, r0
    63f4:	1e50      	subs	r0, r2, #1
    63f6:	4182      	sbcs	r2, r0
    63f8:	0f6d      	lsrs	r5, r5, #29
    63fa:	432a      	orrs	r2, r5
    63fc:	00db      	lsls	r3, r3, #3
    63fe:	4313      	orrs	r3, r2
    6400:	075a      	lsls	r2, r3, #29
    6402:	d004      	beq.n	640e <__aeabi_d2f+0x46>
    6404:	220f      	movs	r2, #15
    6406:	401a      	ands	r2, r3
    6408:	2a04      	cmp	r2, #4
    640a:	d000      	beq.n	640e <__aeabi_d2f+0x46>
    640c:	3304      	adds	r3, #4
    640e:	2280      	movs	r2, #128	; 0x80
    6410:	04d2      	lsls	r2, r2, #19
    6412:	401a      	ands	r2, r3
    6414:	d05a      	beq.n	64cc <__aeabi_d2f+0x104>
    6416:	3601      	adds	r6, #1
    6418:	2eff      	cmp	r6, #255	; 0xff
    641a:	d003      	beq.n	6424 <__aeabi_d2f+0x5c>
    641c:	019b      	lsls	r3, r3, #6
    641e:	0a5b      	lsrs	r3, r3, #9
    6420:	b2f4      	uxtb	r4, r6
    6422:	e001      	b.n	6428 <__aeabi_d2f+0x60>
    6424:	24ff      	movs	r4, #255	; 0xff
    6426:	2300      	movs	r3, #0
    6428:	0258      	lsls	r0, r3, #9
    642a:	05e4      	lsls	r4, r4, #23
    642c:	0a40      	lsrs	r0, r0, #9
    642e:	07c9      	lsls	r1, r1, #31
    6430:	4320      	orrs	r0, r4
    6432:	4308      	orrs	r0, r1
    6434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6436:	2c00      	cmp	r4, #0
    6438:	d007      	beq.n	644a <__aeabi_d2f+0x82>
    643a:	431d      	orrs	r5, r3
    643c:	d0f2      	beq.n	6424 <__aeabi_d2f+0x5c>
    643e:	2080      	movs	r0, #128	; 0x80
    6440:	00db      	lsls	r3, r3, #3
    6442:	0480      	lsls	r0, r0, #18
    6444:	4303      	orrs	r3, r0
    6446:	26ff      	movs	r6, #255	; 0xff
    6448:	e7da      	b.n	6400 <__aeabi_d2f+0x38>
    644a:	432b      	orrs	r3, r5
    644c:	d003      	beq.n	6456 <__aeabi_d2f+0x8e>
    644e:	2305      	movs	r3, #5
    6450:	08db      	lsrs	r3, r3, #3
    6452:	2cff      	cmp	r4, #255	; 0xff
    6454:	d003      	beq.n	645e <__aeabi_d2f+0x96>
    6456:	025b      	lsls	r3, r3, #9
    6458:	0a5b      	lsrs	r3, r3, #9
    645a:	b2e4      	uxtb	r4, r4
    645c:	e7e4      	b.n	6428 <__aeabi_d2f+0x60>
    645e:	2b00      	cmp	r3, #0
    6460:	d032      	beq.n	64c8 <__aeabi_d2f+0x100>
    6462:	2080      	movs	r0, #128	; 0x80
    6464:	03c0      	lsls	r0, r0, #15
    6466:	4303      	orrs	r3, r0
    6468:	025b      	lsls	r3, r3, #9
    646a:	0a5b      	lsrs	r3, r3, #9
    646c:	e7dc      	b.n	6428 <__aeabi_d2f+0x60>
    646e:	0032      	movs	r2, r6
    6470:	3217      	adds	r2, #23
    6472:	db14      	blt.n	649e <__aeabi_d2f+0xd6>
    6474:	2280      	movs	r2, #128	; 0x80
    6476:	271e      	movs	r7, #30
    6478:	0412      	lsls	r2, r2, #16
    647a:	4313      	orrs	r3, r2
    647c:	1bbf      	subs	r7, r7, r6
    647e:	2f1f      	cmp	r7, #31
    6480:	dc0f      	bgt.n	64a2 <__aeabi_d2f+0xda>
    6482:	4a14      	ldr	r2, [pc, #80]	; (64d4 <__aeabi_d2f+0x10c>)
    6484:	4694      	mov	ip, r2
    6486:	4464      	add	r4, ip
    6488:	002a      	movs	r2, r5
    648a:	40a5      	lsls	r5, r4
    648c:	002e      	movs	r6, r5
    648e:	40a3      	lsls	r3, r4
    6490:	1e75      	subs	r5, r6, #1
    6492:	41ae      	sbcs	r6, r5
    6494:	40fa      	lsrs	r2, r7
    6496:	4333      	orrs	r3, r6
    6498:	4313      	orrs	r3, r2
    649a:	2600      	movs	r6, #0
    649c:	e7b0      	b.n	6400 <__aeabi_d2f+0x38>
    649e:	2400      	movs	r4, #0
    64a0:	e7d5      	b.n	644e <__aeabi_d2f+0x86>
    64a2:	2202      	movs	r2, #2
    64a4:	4252      	negs	r2, r2
    64a6:	1b96      	subs	r6, r2, r6
    64a8:	001a      	movs	r2, r3
    64aa:	40f2      	lsrs	r2, r6
    64ac:	2f20      	cmp	r7, #32
    64ae:	d009      	beq.n	64c4 <__aeabi_d2f+0xfc>
    64b0:	4809      	ldr	r0, [pc, #36]	; (64d8 <__aeabi_d2f+0x110>)
    64b2:	4684      	mov	ip, r0
    64b4:	4464      	add	r4, ip
    64b6:	40a3      	lsls	r3, r4
    64b8:	432b      	orrs	r3, r5
    64ba:	1e5d      	subs	r5, r3, #1
    64bc:	41ab      	sbcs	r3, r5
    64be:	2600      	movs	r6, #0
    64c0:	4313      	orrs	r3, r2
    64c2:	e79d      	b.n	6400 <__aeabi_d2f+0x38>
    64c4:	2300      	movs	r3, #0
    64c6:	e7f7      	b.n	64b8 <__aeabi_d2f+0xf0>
    64c8:	2300      	movs	r3, #0
    64ca:	e7ad      	b.n	6428 <__aeabi_d2f+0x60>
    64cc:	0034      	movs	r4, r6
    64ce:	e7bf      	b.n	6450 <__aeabi_d2f+0x88>
    64d0:	fffffc80 	.word	0xfffffc80
    64d4:	fffffc82 	.word	0xfffffc82
    64d8:	fffffca2 	.word	0xfffffca2

000064dc <__clzsi2>:
    64dc:	211c      	movs	r1, #28
    64de:	2301      	movs	r3, #1
    64e0:	041b      	lsls	r3, r3, #16
    64e2:	4298      	cmp	r0, r3
    64e4:	d301      	bcc.n	64ea <__clzsi2+0xe>
    64e6:	0c00      	lsrs	r0, r0, #16
    64e8:	3910      	subs	r1, #16
    64ea:	0a1b      	lsrs	r3, r3, #8
    64ec:	4298      	cmp	r0, r3
    64ee:	d301      	bcc.n	64f4 <__clzsi2+0x18>
    64f0:	0a00      	lsrs	r0, r0, #8
    64f2:	3908      	subs	r1, #8
    64f4:	091b      	lsrs	r3, r3, #4
    64f6:	4298      	cmp	r0, r3
    64f8:	d301      	bcc.n	64fe <__clzsi2+0x22>
    64fa:	0900      	lsrs	r0, r0, #4
    64fc:	3904      	subs	r1, #4
    64fe:	a202      	add	r2, pc, #8	; (adr r2, 6508 <__clzsi2+0x2c>)
    6500:	5c10      	ldrb	r0, [r2, r0]
    6502:	1840      	adds	r0, r0, r1
    6504:	4770      	bx	lr
    6506:	46c0      	nop			; (mov r8, r8)
    6508:	02020304 	.word	0x02020304
    650c:	01010101 	.word	0x01010101
	...

00006518 <__clzdi2>:
    6518:	b510      	push	{r4, lr}
    651a:	2900      	cmp	r1, #0
    651c:	d103      	bne.n	6526 <__clzdi2+0xe>
    651e:	f7ff ffdd 	bl	64dc <__clzsi2>
    6522:	3020      	adds	r0, #32
    6524:	e002      	b.n	652c <__clzdi2+0x14>
    6526:	1c08      	adds	r0, r1, #0
    6528:	f7ff ffd8 	bl	64dc <__clzsi2>
    652c:	bd10      	pop	{r4, pc}
    652e:	46c0      	nop			; (mov r8, r8)

00006530 <__divdi3>:
    6530:	b5f0      	push	{r4, r5, r6, r7, lr}
    6532:	464e      	mov	r6, r9
    6534:	4657      	mov	r7, sl
    6536:	46de      	mov	lr, fp
    6538:	4645      	mov	r5, r8
    653a:	b5e0      	push	{r5, r6, r7, lr}
    653c:	0006      	movs	r6, r0
    653e:	2000      	movs	r0, #0
    6540:	000f      	movs	r7, r1
    6542:	b083      	sub	sp, #12
    6544:	0019      	movs	r1, r3
    6546:	4681      	mov	r9, r0
    6548:	2f00      	cmp	r7, #0
    654a:	da00      	bge.n	654e <__divdi3+0x1e>
    654c:	e08c      	b.n	6668 <__divdi3+0x138>
    654e:	2900      	cmp	r1, #0
    6550:	da00      	bge.n	6554 <__divdi3+0x24>
    6552:	e080      	b.n	6656 <__divdi3+0x126>
    6554:	0034      	movs	r4, r6
    6556:	003d      	movs	r5, r7
    6558:	4692      	mov	sl, r2
    655a:	4698      	mov	r8, r3
    655c:	42bb      	cmp	r3, r7
    655e:	d869      	bhi.n	6634 <__divdi3+0x104>
    6560:	d066      	beq.n	6630 <__divdi3+0x100>
    6562:	4641      	mov	r1, r8
    6564:	4650      	mov	r0, sl
    6566:	f7ff ffd7 	bl	6518 <__clzdi2>
    656a:	4683      	mov	fp, r0
    656c:	0039      	movs	r1, r7
    656e:	0030      	movs	r0, r6
    6570:	f7ff ffd2 	bl	6518 <__clzdi2>
    6574:	465b      	mov	r3, fp
    6576:	1a1b      	subs	r3, r3, r0
    6578:	469c      	mov	ip, r3
    657a:	3b20      	subs	r3, #32
    657c:	469b      	mov	fp, r3
    657e:	d500      	bpl.n	6582 <__divdi3+0x52>
    6580:	e087      	b.n	6692 <__divdi3+0x162>
    6582:	4651      	mov	r1, sl
    6584:	4658      	mov	r0, fp
    6586:	4081      	lsls	r1, r0
    6588:	000b      	movs	r3, r1
    658a:	4651      	mov	r1, sl
    658c:	4660      	mov	r0, ip
    658e:	4081      	lsls	r1, r0
    6590:	000a      	movs	r2, r1
    6592:	42bb      	cmp	r3, r7
    6594:	d900      	bls.n	6598 <__divdi3+0x68>
    6596:	e072      	b.n	667e <__divdi3+0x14e>
    6598:	d06e      	beq.n	6678 <__divdi3+0x148>
    659a:	0034      	movs	r4, r6
    659c:	003d      	movs	r5, r7
    659e:	4659      	mov	r1, fp
    65a0:	1aa4      	subs	r4, r4, r2
    65a2:	419d      	sbcs	r5, r3
    65a4:	2900      	cmp	r1, #0
    65a6:	da00      	bge.n	65aa <__divdi3+0x7a>
    65a8:	e08a      	b.n	66c0 <__divdi3+0x190>
    65aa:	2100      	movs	r1, #0
    65ac:	2000      	movs	r0, #0
    65ae:	2601      	movs	r6, #1
    65b0:	9000      	str	r0, [sp, #0]
    65b2:	9101      	str	r1, [sp, #4]
    65b4:	4659      	mov	r1, fp
    65b6:	408e      	lsls	r6, r1
    65b8:	9601      	str	r6, [sp, #4]
    65ba:	4661      	mov	r1, ip
    65bc:	2601      	movs	r6, #1
    65be:	408e      	lsls	r6, r1
    65c0:	4661      	mov	r1, ip
    65c2:	9600      	str	r6, [sp, #0]
    65c4:	2900      	cmp	r1, #0
    65c6:	d061      	beq.n	668c <__divdi3+0x15c>
    65c8:	07d9      	lsls	r1, r3, #31
    65ca:	0856      	lsrs	r6, r2, #1
    65cc:	430e      	orrs	r6, r1
    65ce:	085f      	lsrs	r7, r3, #1
    65d0:	4661      	mov	r1, ip
    65d2:	2201      	movs	r2, #1
    65d4:	2300      	movs	r3, #0
    65d6:	e00c      	b.n	65f2 <__divdi3+0xc2>
    65d8:	42af      	cmp	r7, r5
    65da:	d101      	bne.n	65e0 <__divdi3+0xb0>
    65dc:	42a6      	cmp	r6, r4
    65de:	d80a      	bhi.n	65f6 <__divdi3+0xc6>
    65e0:	1ba4      	subs	r4, r4, r6
    65e2:	41bd      	sbcs	r5, r7
    65e4:	1924      	adds	r4, r4, r4
    65e6:	416d      	adcs	r5, r5
    65e8:	3901      	subs	r1, #1
    65ea:	18a4      	adds	r4, r4, r2
    65ec:	415d      	adcs	r5, r3
    65ee:	2900      	cmp	r1, #0
    65f0:	d006      	beq.n	6600 <__divdi3+0xd0>
    65f2:	42af      	cmp	r7, r5
    65f4:	d9f0      	bls.n	65d8 <__divdi3+0xa8>
    65f6:	3901      	subs	r1, #1
    65f8:	1924      	adds	r4, r4, r4
    65fa:	416d      	adcs	r5, r5
    65fc:	2900      	cmp	r1, #0
    65fe:	d1f8      	bne.n	65f2 <__divdi3+0xc2>
    6600:	465b      	mov	r3, fp
    6602:	9800      	ldr	r0, [sp, #0]
    6604:	9901      	ldr	r1, [sp, #4]
    6606:	1900      	adds	r0, r0, r4
    6608:	4169      	adcs	r1, r5
    660a:	2b00      	cmp	r3, #0
    660c:	db4d      	blt.n	66aa <__divdi3+0x17a>
    660e:	002e      	movs	r6, r5
    6610:	40de      	lsrs	r6, r3
    6612:	4663      	mov	r3, ip
    6614:	002c      	movs	r4, r5
    6616:	40dc      	lsrs	r4, r3
    6618:	465b      	mov	r3, fp
    661a:	2b00      	cmp	r3, #0
    661c:	db5b      	blt.n	66d6 <__divdi3+0x1a6>
    661e:	0034      	movs	r4, r6
    6620:	409c      	lsls	r4, r3
    6622:	0023      	movs	r3, r4
    6624:	4664      	mov	r4, ip
    6626:	40a6      	lsls	r6, r4
    6628:	0032      	movs	r2, r6
    662a:	1a80      	subs	r0, r0, r2
    662c:	4199      	sbcs	r1, r3
    662e:	e003      	b.n	6638 <__divdi3+0x108>
    6630:	42b2      	cmp	r2, r6
    6632:	d996      	bls.n	6562 <__divdi3+0x32>
    6634:	2000      	movs	r0, #0
    6636:	2100      	movs	r1, #0
    6638:	464b      	mov	r3, r9
    663a:	2b00      	cmp	r3, #0
    663c:	d004      	beq.n	6648 <__divdi3+0x118>
    663e:	0003      	movs	r3, r0
    6640:	000c      	movs	r4, r1
    6642:	2100      	movs	r1, #0
    6644:	4258      	negs	r0, r3
    6646:	41a1      	sbcs	r1, r4
    6648:	b003      	add	sp, #12
    664a:	bc3c      	pop	{r2, r3, r4, r5}
    664c:	4690      	mov	r8, r2
    664e:	4699      	mov	r9, r3
    6650:	46a2      	mov	sl, r4
    6652:	46ab      	mov	fp, r5
    6654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6656:	4649      	mov	r1, r9
    6658:	43c9      	mvns	r1, r1
    665a:	0010      	movs	r0, r2
    665c:	4689      	mov	r9, r1
    665e:	0019      	movs	r1, r3
    6660:	2300      	movs	r3, #0
    6662:	4242      	negs	r2, r0
    6664:	418b      	sbcs	r3, r1
    6666:	e775      	b.n	6554 <__divdi3+0x24>
    6668:	0034      	movs	r4, r6
    666a:	003d      	movs	r5, r7
    666c:	3801      	subs	r0, #1
    666e:	2700      	movs	r7, #0
    6670:	4266      	negs	r6, r4
    6672:	41af      	sbcs	r7, r5
    6674:	4681      	mov	r9, r0
    6676:	e76a      	b.n	654e <__divdi3+0x1e>
    6678:	42b1      	cmp	r1, r6
    667a:	d800      	bhi.n	667e <__divdi3+0x14e>
    667c:	e78d      	b.n	659a <__divdi3+0x6a>
    667e:	2100      	movs	r1, #0
    6680:	2000      	movs	r0, #0
    6682:	9000      	str	r0, [sp, #0]
    6684:	9101      	str	r1, [sp, #4]
    6686:	4661      	mov	r1, ip
    6688:	2900      	cmp	r1, #0
    668a:	d19d      	bne.n	65c8 <__divdi3+0x98>
    668c:	9800      	ldr	r0, [sp, #0]
    668e:	9901      	ldr	r1, [sp, #4]
    6690:	e7d2      	b.n	6638 <__divdi3+0x108>
    6692:	4662      	mov	r2, ip
    6694:	4640      	mov	r0, r8
    6696:	2320      	movs	r3, #32
    6698:	4651      	mov	r1, sl
    669a:	4090      	lsls	r0, r2
    669c:	1a9b      	subs	r3, r3, r2
    669e:	40d9      	lsrs	r1, r3
    66a0:	0003      	movs	r3, r0
    66a2:	9100      	str	r1, [sp, #0]
    66a4:	9900      	ldr	r1, [sp, #0]
    66a6:	430b      	orrs	r3, r1
    66a8:	e76f      	b.n	658a <__divdi3+0x5a>
    66aa:	4662      	mov	r2, ip
    66ac:	2320      	movs	r3, #32
    66ae:	1a9b      	subs	r3, r3, r2
    66b0:	002a      	movs	r2, r5
    66b2:	409a      	lsls	r2, r3
    66b4:	0026      	movs	r6, r4
    66b6:	0013      	movs	r3, r2
    66b8:	4662      	mov	r2, ip
    66ba:	40d6      	lsrs	r6, r2
    66bc:	431e      	orrs	r6, r3
    66be:	e7a8      	b.n	6612 <__divdi3+0xe2>
    66c0:	4661      	mov	r1, ip
    66c2:	2620      	movs	r6, #32
    66c4:	2701      	movs	r7, #1
    66c6:	1a76      	subs	r6, r6, r1
    66c8:	2000      	movs	r0, #0
    66ca:	2100      	movs	r1, #0
    66cc:	40f7      	lsrs	r7, r6
    66ce:	9000      	str	r0, [sp, #0]
    66d0:	9101      	str	r1, [sp, #4]
    66d2:	9701      	str	r7, [sp, #4]
    66d4:	e771      	b.n	65ba <__divdi3+0x8a>
    66d6:	4662      	mov	r2, ip
    66d8:	2320      	movs	r3, #32
    66da:	0035      	movs	r5, r6
    66dc:	4094      	lsls	r4, r2
    66de:	1a9b      	subs	r3, r3, r2
    66e0:	40dd      	lsrs	r5, r3
    66e2:	0023      	movs	r3, r4
    66e4:	432b      	orrs	r3, r5
    66e6:	e79d      	b.n	6624 <__divdi3+0xf4>

000066e8 <__libc_init_array>:
    66e8:	b570      	push	{r4, r5, r6, lr}
    66ea:	2600      	movs	r6, #0
    66ec:	4d0c      	ldr	r5, [pc, #48]	; (6720 <__libc_init_array+0x38>)
    66ee:	4c0d      	ldr	r4, [pc, #52]	; (6724 <__libc_init_array+0x3c>)
    66f0:	1b64      	subs	r4, r4, r5
    66f2:	10a4      	asrs	r4, r4, #2
    66f4:	42a6      	cmp	r6, r4
    66f6:	d109      	bne.n	670c <__libc_init_array+0x24>
    66f8:	2600      	movs	r6, #0
    66fa:	f000 f9a3 	bl	6a44 <_init>
    66fe:	4d0a      	ldr	r5, [pc, #40]	; (6728 <__libc_init_array+0x40>)
    6700:	4c0a      	ldr	r4, [pc, #40]	; (672c <__libc_init_array+0x44>)
    6702:	1b64      	subs	r4, r4, r5
    6704:	10a4      	asrs	r4, r4, #2
    6706:	42a6      	cmp	r6, r4
    6708:	d105      	bne.n	6716 <__libc_init_array+0x2e>
    670a:	bd70      	pop	{r4, r5, r6, pc}
    670c:	00b3      	lsls	r3, r6, #2
    670e:	58eb      	ldr	r3, [r5, r3]
    6710:	4798      	blx	r3
    6712:	3601      	adds	r6, #1
    6714:	e7ee      	b.n	66f4 <__libc_init_array+0xc>
    6716:	00b3      	lsls	r3, r6, #2
    6718:	58eb      	ldr	r3, [r5, r3]
    671a:	4798      	blx	r3
    671c:	3601      	adds	r6, #1
    671e:	e7f2      	b.n	6706 <__libc_init_array+0x1e>
    6720:	00006a50 	.word	0x00006a50
    6724:	00006a50 	.word	0x00006a50
    6728:	00006a50 	.word	0x00006a50
    672c:	00006a54 	.word	0x00006a54

00006730 <memcpy>:
    6730:	2300      	movs	r3, #0
    6732:	b510      	push	{r4, lr}
    6734:	429a      	cmp	r2, r3
    6736:	d100      	bne.n	673a <memcpy+0xa>
    6738:	bd10      	pop	{r4, pc}
    673a:	5ccc      	ldrb	r4, [r1, r3]
    673c:	54c4      	strb	r4, [r0, r3]
    673e:	3301      	adds	r3, #1
    6740:	e7f8      	b.n	6734 <memcpy+0x4>

00006742 <memset>:
    6742:	0003      	movs	r3, r0
    6744:	1882      	adds	r2, r0, r2
    6746:	4293      	cmp	r3, r2
    6748:	d100      	bne.n	674c <memset+0xa>
    674a:	4770      	bx	lr
    674c:	7019      	strb	r1, [r3, #0]
    674e:	3301      	adds	r3, #1
    6750:	e7f9      	b.n	6746 <memset+0x4>
    6752:	0000      	movs	r0, r0
    6754:	0000014c 	.word	0x0000014c
    6758:	0000015a 	.word	0x0000015a
    675c:	00000168 	.word	0x00000168
    6760:	00000176 	.word	0x00000176
    6764:	00000184 	.word	0x00000184
    6768:	00000002 	.word	0x00000002
    676c:	00000003 	.word	0x00000003
    6770:	00000028 	.word	0x00000028
    6774:	00000029 	.word	0x00000029
    6778:	00000004 	.word	0x00000004
    677c:	00000005 	.word	0x00000005
    6780:	00000006 	.word	0x00000006
    6784:	00000007 	.word	0x00000007
    6788:	00000020 	.word	0x00000020
    678c:	00000021 	.word	0x00000021
    6790:	00000022 	.word	0x00000022
    6794:	00000023 	.word	0x00000023
    6798:	00000024 	.word	0x00000024
    679c:	00000025 	.word	0x00000025
    67a0:	00000026 	.word	0x00000026
    67a4:	00000027 	.word	0x00000027
    67a8:	00000008 	.word	0x00000008
    67ac:	00000009 	.word	0x00000009
    67b0:	0000000a 	.word	0x0000000a
    67b4:	0000000b 	.word	0x0000000b
    67b8:	0000ffff 	.word	0x0000ffff
    67bc:	0000ffff 	.word	0x0000ffff
    67c0:	0000ffff 	.word	0x0000ffff
    67c4:	0000ffff 	.word	0x0000ffff
    67c8:	00000534 	.word	0x00000534
    67cc:	0000053a 	.word	0x0000053a
    67d0:	0000053a 	.word	0x0000053a
    67d4:	0000053a 	.word	0x0000053a
    67d8:	0000053a 	.word	0x0000053a
    67dc:	0000053a 	.word	0x0000053a
    67e0:	0000053a 	.word	0x0000053a
    67e4:	0000053a 	.word	0x0000053a
    67e8:	0000053a 	.word	0x0000053a
    67ec:	0000053a 	.word	0x0000053a
    67f0:	0000053a 	.word	0x0000053a
    67f4:	0000053a 	.word	0x0000053a
    67f8:	0000053a 	.word	0x0000053a
    67fc:	0000053a 	.word	0x0000053a
    6800:	0000053a 	.word	0x0000053a
    6804:	0000053a 	.word	0x0000053a
    6808:	00000512 	.word	0x00000512
    680c:	0000053a 	.word	0x0000053a
    6810:	0000053a 	.word	0x0000053a
    6814:	0000053a 	.word	0x0000053a
    6818:	0000053a 	.word	0x0000053a
    681c:	0000053a 	.word	0x0000053a
    6820:	0000053a 	.word	0x0000053a
    6824:	0000053a 	.word	0x0000053a
    6828:	0000053a 	.word	0x0000053a
    682c:	0000053a 	.word	0x0000053a
    6830:	0000053a 	.word	0x0000053a
    6834:	0000053a 	.word	0x0000053a
    6838:	0000053a 	.word	0x0000053a
    683c:	0000053a 	.word	0x0000053a
    6840:	0000053a 	.word	0x0000053a
    6844:	0000053a 	.word	0x0000053a
    6848:	0000052e 	.word	0x0000052e
    684c:	0000053a 	.word	0x0000053a
    6850:	0000053a 	.word	0x0000053a
    6854:	0000053a 	.word	0x0000053a
    6858:	0000053a 	.word	0x0000053a
    685c:	0000053a 	.word	0x0000053a
    6860:	0000053a 	.word	0x0000053a
    6864:	0000053a 	.word	0x0000053a
    6868:	0000053a 	.word	0x0000053a
    686c:	0000053a 	.word	0x0000053a
    6870:	0000053a 	.word	0x0000053a
    6874:	0000053a 	.word	0x0000053a
    6878:	0000053a 	.word	0x0000053a
    687c:	0000053a 	.word	0x0000053a
    6880:	0000053a 	.word	0x0000053a
    6884:	0000053a 	.word	0x0000053a
    6888:	00000528 	.word	0x00000528
    688c:	000004d0 	.word	0x000004d0
    6890:	000004e6 	.word	0x000004e6
    6894:	000004fc 	.word	0x000004fc
    6898:	000004b6 	.word	0x000004b6
    689c:	00000be0 	.word	0x00000be0
    68a0:	00000bee 	.word	0x00000bee
    68a4:	00000bfc 	.word	0x00000bfc
    68a8:	00000c0a 	.word	0x00000c0a
    68ac:	00000c18 	.word	0x00000c18
    68b0:	00001418 	.word	0x00001418
    68b4:	00001426 	.word	0x00001426
    68b8:	00001434 	.word	0x00001434
    68bc:	00001442 	.word	0x00001442
    68c0:	00001450 	.word	0x00001450
    68c4:	0000221e 	.word	0x0000221e
    68c8:	0000221e 	.word	0x0000221e
    68cc:	000021ee 	.word	0x000021ee
    68d0:	0000221e 	.word	0x0000221e
    68d4:	00002206 	.word	0x00002206
    68d8:	0000220e 	.word	0x0000220e
    68dc:	0000221e 	.word	0x0000221e
    68e0:	0000221e 	.word	0x0000221e
    68e4:	0000221e 	.word	0x0000221e
    68e8:	0000221e 	.word	0x0000221e
    68ec:	0000221e 	.word	0x0000221e
    68f0:	0000221e 	.word	0x0000221e
    68f4:	0000221e 	.word	0x0000221e
    68f8:	0000221e 	.word	0x0000221e
    68fc:	0000221e 	.word	0x0000221e
    6900:	0000221e 	.word	0x0000221e
    6904:	0000221e 	.word	0x0000221e
    6908:	0000221e 	.word	0x0000221e
    690c:	0000221e 	.word	0x0000221e
    6910:	0000221e 	.word	0x0000221e
    6914:	0000221e 	.word	0x0000221e
    6918:	0000221e 	.word	0x0000221e
    691c:	0000221e 	.word	0x0000221e
    6920:	0000221e 	.word	0x0000221e
    6924:	0000221e 	.word	0x0000221e
    6928:	0000221e 	.word	0x0000221e
    692c:	0000221e 	.word	0x0000221e
    6930:	0000221e 	.word	0x0000221e
    6934:	0000221e 	.word	0x0000221e
    6938:	0000221e 	.word	0x0000221e
    693c:	0000221e 	.word	0x0000221e
    6940:	0000221e 	.word	0x0000221e
    6944:	0000221e 	.word	0x0000221e
    6948:	0000221e 	.word	0x0000221e
    694c:	00002216 	.word	0x00002216
    6950:	0000221e 	.word	0x0000221e
    6954:	0000221e 	.word	0x0000221e
    6958:	0000221e 	.word	0x0000221e
    695c:	0000221e 	.word	0x0000221e
    6960:	0000221e 	.word	0x0000221e
    6964:	000021f6 	.word	0x000021f6
    6968:	000021fe 	.word	0x000021fe
    696c:	00004905 	.word	0x00004905
    6970:	00000905 	.word	0x00000905
    6974:	42000000 	.word	0x42000000
    6978:	42000400 	.word	0x42000400
    697c:	42000800 	.word	0x42000800
    6980:	42000c00 	.word	0x42000c00
    6984:	42001000 	.word	0x42001000
    6988:	43000400 	.word	0x43000400
    698c:	000038aa 	.word	0x000038aa
    6990:	00003926 	.word	0x00003926
    6994:	00003926 	.word	0x00003926
    6998:	000038ca 	.word	0x000038ca
    699c:	000038c4 	.word	0x000038c4
    69a0:	000038d0 	.word	0x000038d0
    69a4:	000038b0 	.word	0x000038b0
    69a8:	000038d6 	.word	0x000038d6
    69ac:	0000390c 	.word	0x0000390c
    69b0:	00003a44 	.word	0x00003a44
    69b4:	00003a52 	.word	0x00003a52
    69b8:	00003a60 	.word	0x00003a60
    69bc:	00003a6e 	.word	0x00003a6e
    69c0:	00003a7c 	.word	0x00003a7c
    69c4:	000052d0 	.word	0x000052d0
    69c8:	000052b2 	.word	0x000052b2
    69cc:	0000526c 	.word	0x0000526c
    69d0:	0000518a 	.word	0x0000518a
    69d4:	0000526c 	.word	0x0000526c
    69d8:	000052a4 	.word	0x000052a4
    69dc:	0000526c 	.word	0x0000526c
    69e0:	0000518a 	.word	0x0000518a
    69e4:	000052b2 	.word	0x000052b2
    69e8:	000052b2 	.word	0x000052b2
    69ec:	000052a4 	.word	0x000052a4
    69f0:	0000518a 	.word	0x0000518a
    69f4:	00005182 	.word	0x00005182
    69f8:	00005182 	.word	0x00005182
    69fc:	00005182 	.word	0x00005182
    6a00:	000054e8 	.word	0x000054e8
    6a04:	00005930 	.word	0x00005930
    6a08:	000057f0 	.word	0x000057f0
    6a0c:	000057f0 	.word	0x000057f0
    6a10:	000057ec 	.word	0x000057ec
    6a14:	00005908 	.word	0x00005908
    6a18:	00005908 	.word	0x00005908
    6a1c:	000058fa 	.word	0x000058fa
    6a20:	000057ec 	.word	0x000057ec
    6a24:	00005908 	.word	0x00005908
    6a28:	000058fa 	.word	0x000058fa
    6a2c:	00005908 	.word	0x00005908
    6a30:	000057ec 	.word	0x000057ec
    6a34:	00005910 	.word	0x00005910
    6a38:	00005910 	.word	0x00005910
    6a3c:	00005910 	.word	0x00005910
    6a40:	00005b14 	.word	0x00005b14

00006a44 <_init>:
    6a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a46:	46c0      	nop			; (mov r8, r8)
    6a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a4a:	bc08      	pop	{r3}
    6a4c:	469e      	mov	lr, r3
    6a4e:	4770      	bx	lr

00006a50 <__init_array_start>:
    6a50:	000000dd 	.word	0x000000dd

00006a54 <_fini>:
    6a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a5a:	bc08      	pop	{r3}
    6a5c:	469e      	mov	lr, r3
    6a5e:	4770      	bx	lr

00006a60 <__fini_array_start>:
    6a60:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....
